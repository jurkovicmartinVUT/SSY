
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800200  0000052a  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ca1  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001676  00000000  00000000  000024d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ba  00000000  00000000  00003b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  00004404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b0f  00000000  00000000  000045dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040b  00000000  00000000  000050eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000054f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
   2:	00 00       	nop
   4:	b9 c0       	rjmp	.+370    	; 0x178 <__bad_interrupt>
   6:	00 00       	nop
   8:	b7 c0       	rjmp	.+366    	; 0x178 <__bad_interrupt>
   a:	00 00       	nop
   c:	b5 c0       	rjmp	.+362    	; 0x178 <__bad_interrupt>
   e:	00 00       	nop
  10:	b3 c0       	rjmp	.+358    	; 0x178 <__bad_interrupt>
  12:	00 00       	nop
  14:	b1 c0       	rjmp	.+354    	; 0x178 <__bad_interrupt>
  16:	00 00       	nop
  18:	c7 c0       	rjmp	.+398    	; 0x1a8 <__vector_6>
  1a:	00 00       	nop
  1c:	ad c0       	rjmp	.+346    	; 0x178 <__bad_interrupt>
  1e:	00 00       	nop
  20:	ab c0       	rjmp	.+342    	; 0x178 <__bad_interrupt>
  22:	00 00       	nop
  24:	a9 c0       	rjmp	.+338    	; 0x178 <__bad_interrupt>
  26:	00 00       	nop
  28:	a7 c0       	rjmp	.+334    	; 0x178 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a5 c0       	rjmp	.+330    	; 0x178 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a3 c0       	rjmp	.+326    	; 0x178 <__bad_interrupt>
  32:	00 00       	nop
  34:	a1 c0       	rjmp	.+322    	; 0x178 <__bad_interrupt>
  36:	00 00       	nop
  38:	9f c0       	rjmp	.+318    	; 0x178 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9d c0       	rjmp	.+314    	; 0x178 <__bad_interrupt>
  3e:	00 00       	nop
  40:	9b c0       	rjmp	.+310    	; 0x178 <__bad_interrupt>
  42:	00 00       	nop
  44:	db c0       	rjmp	.+438    	; 0x1fc <__vector_17>
  46:	00 00       	nop
  48:	97 c0       	rjmp	.+302    	; 0x178 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	95 c0       	rjmp	.+298    	; 0x178 <__bad_interrupt>
  4e:	00 00       	nop
  50:	93 c0       	rjmp	.+294    	; 0x178 <__bad_interrupt>
  52:	00 00       	nop
  54:	91 c0       	rjmp	.+290    	; 0x178 <__bad_interrupt>
  56:	00 00       	nop
  58:	8f c0       	rjmp	.+286    	; 0x178 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8d c0       	rjmp	.+282    	; 0x178 <__bad_interrupt>
  5e:	00 00       	nop
  60:	8b c0       	rjmp	.+278    	; 0x178 <__bad_interrupt>
  62:	00 00       	nop
  64:	89 c0       	rjmp	.+274    	; 0x178 <__bad_interrupt>
  66:	00 00       	nop
  68:	87 c0       	rjmp	.+270    	; 0x178 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	85 c0       	rjmp	.+266    	; 0x178 <__bad_interrupt>
  6e:	00 00       	nop
  70:	83 c0       	rjmp	.+262    	; 0x178 <__bad_interrupt>
  72:	00 00       	nop
  74:	81 c0       	rjmp	.+258    	; 0x178 <__bad_interrupt>
  76:	00 00       	nop
  78:	7f c0       	rjmp	.+254    	; 0x178 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7d c0       	rjmp	.+250    	; 0x178 <__bad_interrupt>
  7e:	00 00       	nop
  80:	7b c0       	rjmp	.+246    	; 0x178 <__bad_interrupt>
  82:	00 00       	nop
  84:	79 c0       	rjmp	.+242    	; 0x178 <__bad_interrupt>
  86:	00 00       	nop
  88:	77 c0       	rjmp	.+238    	; 0x178 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	75 c0       	rjmp	.+234    	; 0x178 <__bad_interrupt>
  8e:	00 00       	nop
  90:	73 c0       	rjmp	.+230    	; 0x178 <__bad_interrupt>
  92:	00 00       	nop
  94:	71 c0       	rjmp	.+226    	; 0x178 <__bad_interrupt>
  96:	00 00       	nop
  98:	6f c0       	rjmp	.+222    	; 0x178 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6d c0       	rjmp	.+218    	; 0x178 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	6b c0       	rjmp	.+214    	; 0x178 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	69 c0       	rjmp	.+210    	; 0x178 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	67 c0       	rjmp	.+206    	; 0x178 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	65 c0       	rjmp	.+202    	; 0x178 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	63 c0       	rjmp	.+198    	; 0x178 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	61 c0       	rjmp	.+194    	; 0x178 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5f c0       	rjmp	.+190    	; 0x178 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5d c0       	rjmp	.+186    	; 0x178 <__bad_interrupt>
  be:	00 00       	nop
  c0:	5b c0       	rjmp	.+182    	; 0x178 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	59 c0       	rjmp	.+178    	; 0x178 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	57 c0       	rjmp	.+174    	; 0x178 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	55 c0       	rjmp	.+170    	; 0x178 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	53 c0       	rjmp	.+166    	; 0x178 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	51 c0       	rjmp	.+162    	; 0x178 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4f c0       	rjmp	.+158    	; 0x178 <__bad_interrupt>
  da:	00 00       	nop
  dc:	4d c0       	rjmp	.+154    	; 0x178 <__bad_interrupt>
  de:	00 00       	nop
  e0:	4b c0       	rjmp	.+150    	; 0x178 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	49 c0       	rjmp	.+146    	; 0x178 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	47 c0       	rjmp	.+142    	; 0x178 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	45 c0       	rjmp	.+138    	; 0x178 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	43 c0       	rjmp	.+134    	; 0x178 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	41 c0       	rjmp	.+130    	; 0x178 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	3f c0       	rjmp	.+126    	; 0x178 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	3d c0       	rjmp	.+122    	; 0x178 <__bad_interrupt>
  fe:	00 00       	nop
 100:	3b c0       	rjmp	.+118    	; 0x178 <__bad_interrupt>
 102:	00 00       	nop
 104:	39 c0       	rjmp	.+114    	; 0x178 <__bad_interrupt>
 106:	00 00       	nop
 108:	37 c0       	rjmp	.+110    	; 0x178 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	35 c0       	rjmp	.+106    	; 0x178 <__bad_interrupt>
 10e:	00 00       	nop
 110:	33 c0       	rjmp	.+102    	; 0x178 <__bad_interrupt>
 112:	00 00       	nop
 114:	31 c0       	rjmp	.+98     	; 0x178 <__bad_interrupt>
 116:	00 00       	nop
 118:	2f c0       	rjmp	.+94     	; 0x178 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	2d c0       	rjmp	.+90     	; 0x178 <__bad_interrupt>
 11e:	00 00       	nop
 120:	2b c0       	rjmp	.+86     	; 0x178 <__bad_interrupt>
 122:	00 00       	nop
 124:	29 c0       	rjmp	.+82     	; 0x178 <__bad_interrupt>
 126:	00 00       	nop
 128:	27 c0       	rjmp	.+78     	; 0x178 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	25 c0       	rjmp	.+74     	; 0x178 <__bad_interrupt>
 12e:	00 00       	nop
 130:	23 c0       	rjmp	.+70     	; 0x178 <__bad_interrupt>
 132:	00 00       	nop
 134:	93 01       	movw	r18, r6
 136:	a4 01       	movw	r20, r8
 138:	9b 01       	movw	r18, r22
 13a:	a4 01       	movw	r20, r8
 13c:	a4 01       	movw	r20, r8
 13e:	41 01       	movw	r8, r2
 140:	4d 01       	movw	r8, r26
 142:	57 01       	movw	r10, r14
 144:	5b 01       	movw	r10, r22
 146:	85 01       	movw	r16, r10
 148:	89 01       	movw	r16, r18

0000014a <__ctors_end>:
 14a:	11 24       	eor	r1, r1
 14c:	1f be       	out	0x3f, r1	; 63
 14e:	cf ef       	ldi	r28, 0xFF	; 255
 150:	d1 e8       	ldi	r29, 0x81	; 129
 152:	de bf       	out	0x3e, r29	; 62
 154:	cd bf       	out	0x3d, r28	; 61
 156:	00 e0       	ldi	r16, 0x00	; 0
 158:	0c bf       	out	0x3c, r16	; 60

0000015a <__do_copy_data>:
 15a:	13 e0       	ldi	r17, 0x03	; 3
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b2 e0       	ldi	r27, 0x02	; 2
 160:	ea e2       	ldi	r30, 0x2A	; 42
 162:	f5 e0       	ldi	r31, 0x05	; 5
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	0b bf       	out	0x3b, r16	; 59
 168:	02 c0       	rjmp	.+4      	; 0x16e <__do_copy_data+0x14>
 16a:	07 90       	elpm	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	a2 35       	cpi	r26, 0x52	; 82
 170:	b1 07       	cpc	r27, r17
 172:	d9 f7       	brne	.-10     	; 0x16a <__do_copy_data+0x10>
 174:	69 d0       	rcall	.+210    	; 0x248 <main>
 176:	d7 c1       	rjmp	.+942    	; 0x526 <_exit>

00000178 <__bad_interrupt>:
 178:	43 cf       	rjmp	.-378    	; 0x0 <__vectors>

0000017a <board_init>:

uint8_t is_button1_pressed(void) {
	// POLLING
	
    return !(PINE & (1 << PINE5));
}
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	96 e9       	ldi	r25, 0x96	; 150
 17e:	36 c1       	rjmp	.+620    	; 0x3ec <UART_init>
 180:	08 95       	ret

00000182 <init_button1_interrupt>:

void init_button1_interrupt(void) {
	// INTERRUPT
	
    // Set PE5 as input
	cbi(DDRE, 5);
 182:	8d b1       	in	r24, 0x0d	; 13
 184:	8f 7d       	andi	r24, 0xDF	; 223
 186:	8d b9       	out	0x0d, r24	; 13
	// Enable pull-up
	sbi(PORTE, 5);
 188:	8e b1       	in	r24, 0x0e	; 14
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	8e b9       	out	0x0e, r24	; 14

    // Configure External Interrupt INT5
	// Falling edge detection
    EICRB |= (1 << ISC51);  
 18e:	ea e6       	ldi	r30, 0x6A	; 106
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 60       	ori	r24, 0x08	; 8
 196:	80 83       	st	Z, r24
    EICRB &= ~(1 << ISC50);
 198:	80 81       	ld	r24, Z
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	80 83       	st	Z, r24
    // Enable INT5 interrupt
    EIMSK |= (1 << INT5);
 19e:	8d b3       	in	r24, 0x1d	; 29
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	8d bb       	out	0x1d, r24	; 29

    // Enable global interrupts
    sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_6>:
}


ISR (INT5_vect) {
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	0b b6       	in	r0, 0x3b	; 59
 1b4:	0f 92       	push	r0
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	// INTERRUPT handling
    if (!(PINE & (1 << PINE5))) {
 1ce:	65 99       	sbic	0x0c, 5	; 12
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__vector_6+0x2e>
        UART_SendChar('1');
 1d2:	81 e3       	ldi	r24, 0x31	; 49
 1d4:	1d d1       	rcall	.+570    	; 0x410 <UART_SendChar>
    }
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0b be       	out	0x3b, r0	; 59
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_17>:

ISR (TIMER1_COMPA_vect){
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
}
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <print_menu>:

void print_menu(){
	UART_SendString("\n\r\n\rMENU:\n\r");
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	04 d1       	rcall	.+520    	; 0x41e <UART_SendString>
	UART_SendString("1 = Print lower alphabet\n\r");
 216:	8c e0       	ldi	r24, 0x0C	; 12
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	01 d1       	rcall	.+514    	; 0x41e <UART_SendString>
	UART_SendString("2 = Print upper alphabet\n\r");
 21c:	87 e2       	ldi	r24, 0x27	; 39
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	fe d0       	rcall	.+508    	; 0x41e <UART_SendString>
	UART_SendString("3 = Blink 3x with LED 2\n\r");
 222:	82 e4       	ldi	r24, 0x42	; 66
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	fb d0       	rcall	.+502    	; 0x41e <UART_SendString>
	UART_SendString("4 = Clear terminal\n\r");
 228:	8c e5       	ldi	r24, 0x5C	; 92
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	f8 d0       	rcall	.+496    	; 0x41e <UART_SendString>
	UART_SendString("5 = Generate 2 Hz\n\r");
 22e:	81 e7       	ldi	r24, 0x71	; 113
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	f5 d0       	rcall	.+490    	; 0x41e <UART_SendString>
	UART_SendString("+ = Increase brightness of LED0\n\r");
 234:	85 e8       	ldi	r24, 0x85	; 133
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	f2 d0       	rcall	.+484    	; 0x41e <UART_SendString>
	UART_SendString("- = Decrease brightness of LED0\n\r");
 23a:	87 ea       	ldi	r24, 0xA7	; 167
 23c:	92 e0       	ldi	r25, 0x02	; 2
 23e:	ef d0       	rcall	.+478    	; 0x41e <UART_SendString>
 240:	89 ec       	ldi	r24, 0xC9	; 201
	UART_SendString("0 = Exit\n\r\n\r");
 242:	92 e0       	ldi	r25, 0x02	; 2
 244:	ec c0       	rjmp	.+472    	; 0x41e <UART_SendString>
 246:	08 95       	ret

00000248 <main>:
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
}


int main(void)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
    board_init();
 250:	94 df       	rcall	.-216    	; 0x17a <board_init>
	init_button1_interrupt();
 252:	97 df       	rcall	.-210    	; 0x182 <init_button1_interrupt>
 254:	84 b1       	in	r24, 0x04	; 4
	char choice;
	
	// Activate LED0
	// 0 - 100 control brightness of LED0
	uint8_t duty = 50;
	sbi(DDRB, PB4);
 256:	80 61       	ori	r24, 0x10	; 16
 258:	84 b9       	out	0x04, r24	; 4
	Timer2_fastpwm_start(duty);
 25a:	82 e3       	ldi	r24, 0x32	; 50
 25c:	a3 d0       	rcall	.+326    	; 0x3a4 <Timer2_fastpwm_start>
 25e:	d2 e3       	ldi	r29, 0x32	; 50
	int run = 1;
	char choice;
	
	// Activate LED0
	// 0 - 100 control brightness of LED0
	uint8_t duty = 50;
 260:	01 e0       	ldi	r16, 0x01	; 1
int main(void)
{
    board_init();
	init_button1_interrupt();
	
	int run = 1;
 262:	10 e0       	ldi	r17, 0x00	; 0
	// 0 - 100 control brightness of LED0
	uint8_t duty = 50;
	sbi(DDRB, PB4);
	Timer2_fastpwm_start(duty);
	
	while(run){
 264:	74 c0       	rjmp	.+232    	; 0x34e <main+0x106>
		print_menu();
 266:	d4 df       	rcall	.-88     	; 0x210 <print_menu>
 268:	ea d0       	rcall	.+468    	; 0x43e <UART_GetChar>
		choice = UART_GetChar();
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
		switch (choice){
 26e:	bb 97       	sbiw	r30, 0x2b	; 43
 270:	eb 30       	cpi	r30, 0x0B	; 11
 272:	f1 05       	cpc	r31, r1
 274:	08 f0       	brcs	.+2      	; 0x278 <main+0x30>
 276:	68 c0       	rjmp	.+208    	; 0x348 <main+0x100>
 278:	88 27       	eor	r24, r24
 27a:	e6 56       	subi	r30, 0x66	; 102
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	8f 4f       	sbci	r24, 0xFF	; 255
 280:	14 c1       	rjmp	.+552    	; 0x4aa <__tablejump2__>
 282:	86 ed       	ldi	r24, 0xD6	; 214
			case '0':
				run = 0;
				UART_SendString("Quiting");
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	cb d0       	rcall	.+406    	; 0x41e <UART_SendString>
 288:	00 e0       	ldi	r16, 0x00	; 0
	while(run){
		print_menu();
		choice = UART_GetChar();
		switch (choice){
			case '0':
				run = 0;
 28a:	10 e0       	ldi	r17, 0x00	; 0
 28c:	60 c0       	rjmp	.+192    	; 0x34e <main+0x106>
				UART_SendString("Quiting");
				break;
 28e:	8c 2f       	mov	r24, r28
			case '1':
				for (char c = 'a'; c <= 'z'; c++){
					UART_SendChar(c);
 290:	bf d0       	rcall	.+382    	; 0x410 <UART_SendChar>
 292:	80 e2       	ldi	r24, 0x20	; 32
 294:	bd d0       	rcall	.+378    	; 0x410 <UART_SendChar>
					UART_SendChar(' ');
 296:	cf 5f       	subi	r28, 0xFF	; 255
 298:	01 c0       	rjmp	.+2      	; 0x29c <main+0x54>
			case '0':
				run = 0;
				UART_SendString("Quiting");
				break;
			case '1':
				for (char c = 'a'; c <= 'z'; c++){
 29a:	c1 e6       	ldi	r28, 0x61	; 97
	Timer2_fastpwm_start(duty);
	
	while(run){
		print_menu();
		choice = UART_GetChar();
		switch (choice){
 29c:	cb 37       	cpi	r28, 0x7B	; 123
			case '0':
				run = 0;
				UART_SendString("Quiting");
				break;
			case '1':
				for (char c = 'a'; c <= 'z'; c++){
 29e:	b8 f3       	brcs	.-18     	; 0x28e <main+0x46>
 2a0:	56 c0       	rjmp	.+172    	; 0x34e <main+0x106>
 2a2:	8c 2f       	mov	r24, r28
					UART_SendChar(' ');
				}
				break;
			case '2':
				for (char c = 'A'; c <= 'Z'; c++){
					UART_SendChar(c);
 2a4:	b5 d0       	rcall	.+362    	; 0x410 <UART_SendChar>
 2a6:	80 e2       	ldi	r24, 0x20	; 32
 2a8:	b3 d0       	rcall	.+358    	; 0x410 <UART_SendChar>
					UART_SendChar(' ');
 2aa:	cf 5f       	subi	r28, 0xFF	; 255
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <main+0x68>
					UART_SendChar(c);
					UART_SendChar(' ');
				}
				break;
			case '2':
				for (char c = 'A'; c <= 'Z'; c++){
 2ae:	c1 e4       	ldi	r28, 0x41	; 65
 2b0:	cb 35       	cpi	r28, 0x5B	; 91
	Timer2_fastpwm_start(duty);
	
	while(run){
		print_menu();
		choice = UART_GetChar();
		switch (choice){
 2b2:	b8 f3       	brcs	.-18     	; 0x2a2 <main+0x5a>
					UART_SendChar(c);
					UART_SendChar(' ');
				}
				break;
			case '2':
				for (char c = 'A'; c <= 'Z'; c++){
 2b4:	4c c0       	rjmp	.+152    	; 0x34e <main+0x106>
 2b6:	8e ed       	ldi	r24, 0xDE	; 222
 2b8:	92 e0       	ldi	r25, 0x02	; 2
					UART_SendChar(c);
					UART_SendChar(' ');
				}
				break;
			case '3':
				UART_SendString("Blinking with LED 2");
 2ba:	b1 d0       	rcall	.+354    	; 0x41e <UART_SendString>
 2bc:	84 b1       	in	r24, 0x04	; 4
 2be:	80 64       	ori	r24, 0x40	; 64
 2c0:	84 b9       	out	0x04, r24	; 4
				sbi(DDRB, DDB6);
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	1a c0       	rjmp	.+52     	; 0x2fc <main+0xb4>
				for (int i =0; i<3; i++){
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	85 b9       	out	0x05, r24	; 5
					sbi(PORTB, PB6); 		    
 2ce:	4f ef       	ldi	r20, 0xFF	; 255
 2d0:	84 e3       	ldi	r24, 0x34	; 52
 2d2:	9c e0       	ldi	r25, 0x0C	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	41 50       	subi	r20, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x8c>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x96>
 2de:	00 00       	nop
 2e0:	85 b1       	in	r24, 0x05	; 5
 2e2:	8f 7b       	andi	r24, 0xBF	; 191
 2e4:	85 b9       	out	0x05, r24	; 5
					_delay_ms(500);  		    
					cbi(PORTB, PB6);
 2e6:	4f ef       	ldi	r20, 0xFF	; 255
 2e8:	84 e3       	ldi	r24, 0x34	; 52
 2ea:	9c e0       	ldi	r25, 0x0C	; 12
 2ec:	41 50       	subi	r20, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0xa4>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0xae>
 2f6:	00 00       	nop
 2f8:	2f 5f       	subi	r18, 0xFF	; 255
 2fa:	3f 4f       	sbci	r19, 0xFF	; 255
				}
				break;
			case '3':
				UART_SendString("Blinking with LED 2");
				sbi(DDRB, DDB6);
				for (int i =0; i<3; i++){
 2fc:	23 30       	cpi	r18, 0x03	; 3
 2fe:	31 05       	cpc	r19, r1
 300:	1c f3       	brlt	.-58     	; 0x2c8 <main+0x80>
 302:	84 b1       	in	r24, 0x04	; 4
 304:	8f 7b       	andi	r24, 0xBF	; 191
					sbi(PORTB, PB6); 		    
					_delay_ms(500);  		    
					cbi(PORTB, PB6);
					_delay_ms(500);
				}
				cbi(DDRB, DDB6);
 306:	84 b9       	out	0x04, r24	; 4
 308:	22 c0       	rjmp	.+68     	; 0x34e <main+0x106>
				break;
 30a:	82 ef       	ldi	r24, 0xF2	; 242
			case '4':
				// Escape = \1xb
				UART_SendString("\x1b[2J");
 30c:	92 e0       	ldi	r25, 0x02	; 2
 30e:	87 d0       	rcall	.+270    	; 0x41e <UART_SendString>
 310:	1e c0       	rjmp	.+60     	; 0x34e <main+0x106>
				break;
 312:	84 b1       	in	r24, 0x04	; 4
			case '5':
				sbi(DDRB, PB5);
 314:	80 62       	ori	r24, 0x20	; 32
 316:	84 b9       	out	0x04, r24	; 4
				UART_SendString("Generating 2 Hz");
 318:	87 ef       	ldi	r24, 0xF7	; 247
 31a:	92 e0       	ldi	r25, 0x02	; 2
 31c:	80 d0       	rcall	.+256    	; 0x41e <UART_SendString>
				// Timer register comparator
				uint16_t compare = (F_CPU / (2 * PRESCALE_value * FREQUENCY)) - 1;
				Timer1_cmp_start(compare);
 31e:	80 ea       	ldi	r24, 0xA0	; 160
 320:	97 e0       	ldi	r25, 0x07	; 7
 322:	20 d0       	rcall	.+64     	; 0x364 <Timer1_cmp_start>
				break;
 324:	14 c0       	rjmp	.+40     	; 0x34e <main+0x106>
			case '+':
				if (duty > 0){
					duty = duty - 10;
 326:	d1 11       	cpse	r29, r1
				}
				Timer2_fastpwm_start(duty);
 328:	da 50       	subi	r29, 0x0A	; 10
 32a:	8d 2f       	mov	r24, r29
				UART_SendString("Brightness of LED 0 increased");
 32c:	3b d0       	rcall	.+118    	; 0x3a4 <Timer2_fastpwm_start>
 32e:	87 e0       	ldi	r24, 0x07	; 7
 330:	93 e0       	ldi	r25, 0x03	; 3
 332:	75 d0       	rcall	.+234    	; 0x41e <UART_SendString>
				break;
 334:	0c c0       	rjmp	.+24     	; 0x34e <main+0x106>
			case '-':
				if (duty < 100){
 336:	d4 36       	cpi	r29, 0x64	; 100
 338:	08 f4       	brcc	.+2      	; 0x33c <main+0xf4>
					duty = duty + 10;
 33a:	d6 5f       	subi	r29, 0xF6	; 246
				} 
				Timer2_fastpwm_start(duty);
 33c:	8d 2f       	mov	r24, r29
 33e:	32 d0       	rcall	.+100    	; 0x3a4 <Timer2_fastpwm_start>
 340:	85 e2       	ldi	r24, 0x25	; 37
				UART_SendString("Brightness of LED 0 decreased");
 342:	93 e0       	ldi	r25, 0x03	; 3
 344:	6c d0       	rcall	.+216    	; 0x41e <UART_SendString>
 346:	03 c0       	rjmp	.+6      	; 0x34e <main+0x106>
 348:	83 e4       	ldi	r24, 0x43	; 67
				break;
 34a:	93 e0       	ldi	r25, 0x03	; 3
			default:
				UART_SendString("Invalid option");
 34c:	68 d0       	rcall	.+208    	; 0x41e <UART_SendString>
 34e:	01 15       	cp	r16, r1
 350:	11 05       	cpc	r17, r1
 352:	09 f0       	breq	.+2      	; 0x356 <main+0x10e>
	// 0 - 100 control brightness of LED0
	uint8_t duty = 50;
	sbi(DDRB, PB4);
	Timer2_fastpwm_start(duty);
	
	while(run){
 354:	88 cf       	rjmp	.-240    	; 0x266 <main+0x1e>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	df 91       	pop	r29
        }
	}
	*/
	
	return 0;
}
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	08 95       	ret

00000364 <Timer1_cmp_start>:
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	f8 94       	cli
	TIMSK0 |= ( 1 << TOIE0 ) ;
	sei( ) ; // p o v o l i t g l o b a l n i p r e r u s e n i
}

void Timer0Stop() {
	TCCR0B=0;
 36a:	a0 e8       	ldi	r26, 0x80	; 128
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	1c 92       	st	X, r1
 370:	e1 e8       	ldi	r30, 0x81	; 129
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	10 82       	st	Z, r1
 376:	cf e6       	ldi	r28, 0x6F	; 111
 378:	d0 e0       	ldi	r29, 0x00	; 0
 37a:	18 82       	st	Y, r1
 37c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 380:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 384:	80 81       	ld	r24, Z
 386:	88 60       	ori	r24, 0x08	; 8
 388:	80 83       	st	Z, r24
 38a:	80 81       	ld	r24, Z
 38c:	85 60       	ori	r24, 0x05	; 5
 38e:	80 83       	st	Z, r24
 390:	88 81       	ld	r24, Y
 392:	82 60       	ori	r24, 0x02	; 2
 394:	88 83       	st	Y, r24
 396:	8c 91       	ld	r24, X
 398:	80 64       	ori	r24, 0x40	; 64
 39a:	8c 93       	st	X, r24
 39c:	78 94       	sei
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <Timer2_fastpwm_start>:
}


void Timer2_fastpwm_start ( uint8_t strida ) {
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
	cli() ; // z a k a z a t p r e r u s e n i
 3a8:	f8 94       	cli
	TCCR2A = 0 ; // v y c i s t i t k o n t r o l n i r e g i s t r y
 3aa:	e0 eb       	ldi	r30, 0xB0	; 176
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	10 82       	st	Z, r1
	TCCR2B = 0 ;
 3b0:	c1 eb       	ldi	r28, 0xB1	; 177
 3b2:	d0 e0       	ldi	r29, 0x00	; 0
 3b4:	18 82       	st	Y, r1
	TIMSK2 = 0 ; //
 3b6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
	// n a s t a v i t hodnotu pro PWM
	OCR2A = (255 * strida) / 100;
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	82 9f       	mul	r24, r18
 3be:	c0 01       	movw	r24, r0
 3c0:	11 24       	eor	r1, r1
 3c2:	64 e6       	ldi	r22, 0x64	; 100
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	42 d0       	rcall	.+132    	; 0x44c <__divmodhi4>
 3c8:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
	// fastpwm mod:
	TCCR2A |= ( 1 << WGM21) ;
 3cc:	80 81       	ld	r24, Z
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	80 83       	st	Z, r24
	TCCR2A |= ( 1 << WGM20) ;
 3d2:	80 81       	ld	r24, Z
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	80 83       	st	Z, r24
	// 1024 p r e d d eli c k a :
	TCCR2B |= PRESCALE_mask ;
 3d8:	88 81       	ld	r24, Y
 3da:	85 60       	ori	r24, 0x05	; 5
 3dc:	88 83       	st	Y, r24
	// p o v o l i t p r e r u s e ni , pokud bude pot ? eba . . . :
	// TIMSK2 |= ( 1 << TOIE2 ) ;
	// vystup na pin OC2A
	TCCR2A |= ( 1 << COM2A1) ;
 3de:	80 81       	ld	r24, Z
 3e0:	80 68       	ori	r24, 0x80	; 128
 3e2:	80 83       	st	Z, r24
	sei() ; // p o v o l i t g l o b a l n i p r e r u s e n i
 3e4:	78 94       	sei
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <UART_init>:
#include <stdio.h>
#include <avr/io.h>

void UART_init(uint16_t Baudrate){
		uint16_t ubrr;
		ubrr = F_CPU / 16 / Baudrate-1;
 3ec:	9c 01       	movw	r18, r24
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	60 e2       	ldi	r22, 0x20	; 32
 3f4:	71 ea       	ldi	r23, 0xA1	; 161
 3f6:	87 e0       	ldi	r24, 0x07	; 7
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	3b d0       	rcall	.+118    	; 0x472 <__divmodsi4>
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	31 09       	sbc	r19, r1
		// Setting Baud rate
		UBRR1H = (uint8_t)(ubrr>>8);
 400:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
		UBRR1L = (uint8_t)ubrr;
 404:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
		// Enable Tx and RX
		UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 408:	88 e1       	ldi	r24, 0x18	; 24
 40a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 40e:	08 95       	ret

00000410 <UART_SendChar>:
		// Setting frame format (Async, Parity-Disabled, 1 Stop bit, 8 data bits)
}

void UART_SendChar(uint8_t data){
	// Wait for empty transmit buffer
	while ( !( UCSR1A & (1<<UDRE1)) );
 410:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 414:	95 ff       	sbrs	r25, 5
 416:	fc cf       	rjmp	.-8      	; 0x410 <UART_SendChar>

	UDR1 = data;
 418:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 41c:	08 95       	ret

0000041e <UART_SendString>:

}

void UART_SendString(char *text){
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	ec 01       	movw	r28, r24
	// Wait for empty transmit buffer
	while ( !( UCSR1A & (1<<UDRE1)) );
 424:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 428:	85 ff       	sbrs	r24, 5
 42a:	fc cf       	rjmp	.-8      	; 0x424 <UART_SendString+0x6>
 42c:	02 c0       	rjmp	.+4      	; 0x432 <UART_SendString+0x14>
	
	while (*text != 0x00){
		UART_SendChar(*text);
 42e:	f0 df       	rcall	.-32     	; 0x410 <UART_SendChar>
		text++;
 430:	21 96       	adiw	r28, 0x01	; 1

void UART_SendString(char *text){
	// Wait for empty transmit buffer
	while ( !( UCSR1A & (1<<UDRE1)) );
	
	while (*text != 0x00){
 432:	88 81       	ld	r24, Y
 434:	81 11       	cpse	r24, r1
 436:	fb cf       	rjmp	.-10     	; 0x42e <UART_SendString+0x10>
		UART_SendChar(*text);
		text++;
	}
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <UART_GetChar>:

uint8_t UART_GetChar(void){
	// Wait for received char
	while ( ! (UCSR1A & ( 1 << RXC1) ) );
 43e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 442:	88 23       	and	r24, r24
 444:	e4 f7       	brge	.-8      	; 0x43e <UART_GetChar>
	
	return UDR1;
 446:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
}
 44a:	08 95       	ret

0000044c <__divmodhi4>:
 44c:	97 fb       	bst	r25, 7
 44e:	07 2e       	mov	r0, r23
 450:	16 f4       	brtc	.+4      	; 0x456 <__divmodhi4+0xa>
 452:	00 94       	com	r0
 454:	06 d0       	rcall	.+12     	; 0x462 <__divmodhi4_neg1>
 456:	77 fd       	sbrc	r23, 7
 458:	08 d0       	rcall	.+16     	; 0x46a <__divmodhi4_neg2>
 45a:	2f d0       	rcall	.+94     	; 0x4ba <__udivmodhi4>
 45c:	07 fc       	sbrc	r0, 7
 45e:	05 d0       	rcall	.+10     	; 0x46a <__divmodhi4_neg2>
 460:	3e f4       	brtc	.+14     	; 0x470 <__divmodhi4_exit>

00000462 <__divmodhi4_neg1>:
 462:	90 95       	com	r25
 464:	81 95       	neg	r24
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <__divmodhi4_neg2>:
 46a:	70 95       	com	r23
 46c:	61 95       	neg	r22
 46e:	7f 4f       	sbci	r23, 0xFF	; 255

00000470 <__divmodhi4_exit>:
 470:	08 95       	ret

00000472 <__divmodsi4>:
 472:	05 2e       	mov	r0, r21
 474:	97 fb       	bst	r25, 7
 476:	16 f4       	brtc	.+4      	; 0x47c <__divmodsi4+0xa>
 478:	00 94       	com	r0
 47a:	0f d0       	rcall	.+30     	; 0x49a <__negsi2>
 47c:	57 fd       	sbrc	r21, 7
 47e:	05 d0       	rcall	.+10     	; 0x48a <__divmodsi4_neg2>
 480:	30 d0       	rcall	.+96     	; 0x4e2 <__udivmodsi4>
 482:	07 fc       	sbrc	r0, 7
 484:	02 d0       	rcall	.+4      	; 0x48a <__divmodsi4_neg2>
 486:	46 f4       	brtc	.+16     	; 0x498 <__divmodsi4_exit>
 488:	08 c0       	rjmp	.+16     	; 0x49a <__negsi2>

0000048a <__divmodsi4_neg2>:
 48a:	50 95       	com	r21
 48c:	40 95       	com	r20
 48e:	30 95       	com	r19
 490:	21 95       	neg	r18
 492:	3f 4f       	sbci	r19, 0xFF	; 255
 494:	4f 4f       	sbci	r20, 0xFF	; 255
 496:	5f 4f       	sbci	r21, 0xFF	; 255

00000498 <__divmodsi4_exit>:
 498:	08 95       	ret

0000049a <__negsi2>:
 49a:	90 95       	com	r25
 49c:	80 95       	com	r24
 49e:	70 95       	com	r23
 4a0:	61 95       	neg	r22
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	08 95       	ret

000004aa <__tablejump2__>:
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	88 1f       	adc	r24, r24
 4b0:	8b bf       	out	0x3b, r24	; 59
 4b2:	07 90       	elpm	r0, Z+
 4b4:	f6 91       	elpm	r31, Z
 4b6:	e0 2d       	mov	r30, r0
 4b8:	19 94       	eijmp

000004ba <__udivmodhi4>:
 4ba:	aa 1b       	sub	r26, r26
 4bc:	bb 1b       	sub	r27, r27
 4be:	51 e1       	ldi	r21, 0x11	; 17
 4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <__udivmodhi4_ep>

000004c2 <__udivmodhi4_loop>:
 4c2:	aa 1f       	adc	r26, r26
 4c4:	bb 1f       	adc	r27, r27
 4c6:	a6 17       	cp	r26, r22
 4c8:	b7 07       	cpc	r27, r23
 4ca:	10 f0       	brcs	.+4      	; 0x4d0 <__udivmodhi4_ep>
 4cc:	a6 1b       	sub	r26, r22
 4ce:	b7 0b       	sbc	r27, r23

000004d0 <__udivmodhi4_ep>:
 4d0:	88 1f       	adc	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	5a 95       	dec	r21
 4d6:	a9 f7       	brne	.-22     	; 0x4c2 <__udivmodhi4_loop>
 4d8:	80 95       	com	r24
 4da:	90 95       	com	r25
 4dc:	bc 01       	movw	r22, r24
 4de:	cd 01       	movw	r24, r26
 4e0:	08 95       	ret

000004e2 <__udivmodsi4>:
 4e2:	a1 e2       	ldi	r26, 0x21	; 33
 4e4:	1a 2e       	mov	r1, r26
 4e6:	aa 1b       	sub	r26, r26
 4e8:	bb 1b       	sub	r27, r27
 4ea:	fd 01       	movw	r30, r26
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <__udivmodsi4_ep>

000004ee <__udivmodsi4_loop>:
 4ee:	aa 1f       	adc	r26, r26
 4f0:	bb 1f       	adc	r27, r27
 4f2:	ee 1f       	adc	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	a2 17       	cp	r26, r18
 4f8:	b3 07       	cpc	r27, r19
 4fa:	e4 07       	cpc	r30, r20
 4fc:	f5 07       	cpc	r31, r21
 4fe:	20 f0       	brcs	.+8      	; 0x508 <__udivmodsi4_ep>
 500:	a2 1b       	sub	r26, r18
 502:	b3 0b       	sbc	r27, r19
 504:	e4 0b       	sbc	r30, r20
 506:	f5 0b       	sbc	r31, r21

00000508 <__udivmodsi4_ep>:
 508:	66 1f       	adc	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	1a 94       	dec	r1
 512:	69 f7       	brne	.-38     	; 0x4ee <__udivmodsi4_loop>
 514:	60 95       	com	r22
 516:	70 95       	com	r23
 518:	80 95       	com	r24
 51a:	90 95       	com	r25
 51c:	9b 01       	movw	r18, r22
 51e:	ac 01       	movw	r20, r24
 520:	bd 01       	movw	r22, r26
 522:	cf 01       	movw	r24, r30
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
