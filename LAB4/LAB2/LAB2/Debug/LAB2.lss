
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800200  000003c6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a47  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015ce  00000000  00000000  0000202f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a5  00000000  00000000  000035fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00003ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a6b  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031f  00000000  00000000  0000485b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00004b7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
   a:	00 00       	nop
   c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
   e:	00 00       	nop
  10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
  12:	00 00       	nop
  14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
  16:	00 00       	nop
  18:	cf c0       	rjmp	.+414    	; 0x1b8 <__vector_6>
  1a:	00 00       	nop
  1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
  22:	00 00       	nop
  24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
  26:	00 00       	nop
  28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9a c0       	rjmp	.+308    	; 0x162 <__bad_interrupt>
  2e:	00 00       	nop
  30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
  36:	00 00       	nop
  38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
  3e:	00 00       	nop
  40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
  42:	00 00       	nop
  44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
  56:	00 00       	nop
  58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
  5e:	00 00       	nop
  60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
  62:	00 00       	nop
  64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
  66:	00 00       	nop
  68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
  6e:	00 00       	nop
  70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
  72:	00 00       	nop
  74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
  76:	00 00       	nop
  78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
  7e:	00 00       	nop
  80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
  82:	00 00       	nop
  84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
  86:	00 00       	nop
  88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6a c0       	rjmp	.+212    	; 0x162 <__bad_interrupt>
  8e:	00 00       	nop
  90:	68 c0       	rjmp	.+208    	; 0x162 <__bad_interrupt>
  92:	00 00       	nop
  94:	66 c0       	rjmp	.+204    	; 0x162 <__bad_interrupt>
  96:	00 00       	nop
  98:	64 c0       	rjmp	.+200    	; 0x162 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	62 c0       	rjmp	.+196    	; 0x162 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	60 c0       	rjmp	.+192    	; 0x162 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5e c0       	rjmp	.+188    	; 0x162 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5c c0       	rjmp	.+184    	; 0x162 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	5a c0       	rjmp	.+180    	; 0x162 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	58 c0       	rjmp	.+176    	; 0x162 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	56 c0       	rjmp	.+172    	; 0x162 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	54 c0       	rjmp	.+168    	; 0x162 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	52 c0       	rjmp	.+164    	; 0x162 <__bad_interrupt>
  be:	00 00       	nop
  c0:	50 c0       	rjmp	.+160    	; 0x162 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	4e c0       	rjmp	.+156    	; 0x162 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	4c c0       	rjmp	.+152    	; 0x162 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	4a c0       	rjmp	.+148    	; 0x162 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	48 c0       	rjmp	.+144    	; 0x162 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	46 c0       	rjmp	.+140    	; 0x162 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	44 c0       	rjmp	.+136    	; 0x162 <__bad_interrupt>
  da:	00 00       	nop
  dc:	42 c0       	rjmp	.+132    	; 0x162 <__bad_interrupt>
  de:	00 00       	nop
  e0:	40 c0       	rjmp	.+128    	; 0x162 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3e c0       	rjmp	.+124    	; 0x162 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	3c c0       	rjmp	.+120    	; 0x162 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	3a c0       	rjmp	.+116    	; 0x162 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	38 c0       	rjmp	.+112    	; 0x162 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	36 c0       	rjmp	.+108    	; 0x162 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	34 c0       	rjmp	.+104    	; 0x162 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	32 c0       	rjmp	.+100    	; 0x162 <__bad_interrupt>
  fe:	00 00       	nop
 100:	30 c0       	rjmp	.+96     	; 0x162 <__bad_interrupt>
 102:	00 00       	nop
 104:	2e c0       	rjmp	.+92     	; 0x162 <__bad_interrupt>
 106:	00 00       	nop
 108:	2c c0       	rjmp	.+88     	; 0x162 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	2a c0       	rjmp	.+84     	; 0x162 <__bad_interrupt>
 10e:	00 00       	nop
 110:	28 c0       	rjmp	.+80     	; 0x162 <__bad_interrupt>
 112:	00 00       	nop
 114:	26 c0       	rjmp	.+76     	; 0x162 <__bad_interrupt>
 116:	00 00       	nop
 118:	24 c0       	rjmp	.+72     	; 0x162 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	22 c0       	rjmp	.+68     	; 0x162 <__bad_interrupt>
 11e:	00 00       	nop
 120:	20 c0       	rjmp	.+64     	; 0x162 <__bad_interrupt>
 122:	00 00       	nop
 124:	1e c0       	rjmp	.+60     	; 0x162 <__bad_interrupt>
 126:	00 00       	nop
 128:	1c c0       	rjmp	.+56     	; 0x162 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	1a c0       	rjmp	.+52     	; 0x162 <__bad_interrupt>
 12e:	00 00       	nop
 130:	18 c0       	rjmp	.+48     	; 0x162 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	e6 ec       	ldi	r30, 0xC6	; 198
 14c:	f3 e0       	ldi	r31, 0x03	; 3
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	ae 3a       	cpi	r26, 0xAE	; 174
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>
 15e:	56 d0       	rcall	.+172    	; 0x20c <main>
 160:	30 c1       	rjmp	.+608    	; 0x3c2 <_exit>

00000162 <__bad_interrupt>:
 162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <board_init>:

uint8_t is_button1_pressed(void) {
	// POLLING
	
    return !(PINE & (1 << PINE5));
}
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	96 e9       	ldi	r25, 0x96	; 150
 168:	be c0       	rjmp	.+380    	; 0x2e6 <UART_init>
 16a:	08 95       	ret

0000016c <print_menu>:
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	d3 d0       	rcall	.+422    	; 0x318 <UART_SendString>
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	d0 d0       	rcall	.+416    	; 0x318 <UART_SendString>
 178:	87 e2       	ldi	r24, 0x27	; 39
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	cd d0       	rcall	.+410    	; 0x318 <UART_SendString>
 17e:	82 e4       	ldi	r24, 0x42	; 66
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	ca d0       	rcall	.+404    	; 0x318 <UART_SendString>
 184:	8c e5       	ldi	r24, 0x5C	; 92
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	c7 d0       	rcall	.+398    	; 0x318 <UART_SendString>
 18a:	81 e7       	ldi	r24, 0x71	; 113
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	c4 c0       	rjmp	.+392    	; 0x318 <UART_SendString>
 190:	08 95       	ret

00000192 <init_button1_interrupt>:

void init_button1_interrupt(void) {
	// INTERRUPT
	
    // Set PE5 as input
	cbi(DDRE, 5);
 192:	8d b1       	in	r24, 0x0d	; 13
 194:	8f 7d       	andi	r24, 0xDF	; 223
 196:	8d b9       	out	0x0d, r24	; 13
	// Enable pull-up
	sbi(PORTE, 5);
 198:	8e b1       	in	r24, 0x0e	; 14
 19a:	80 62       	ori	r24, 0x20	; 32
 19c:	8e b9       	out	0x0e, r24	; 14

    // Configure External Interrupt INT5
	// Falling edge detection
    EICRB |= (1 << ISC51);  
 19e:	ea e6       	ldi	r30, 0x6A	; 106
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	88 60       	ori	r24, 0x08	; 8
 1a6:	80 83       	st	Z, r24
    EICRB &= ~(1 << ISC50);
 1a8:	80 81       	ld	r24, Z
 1aa:	8b 7f       	andi	r24, 0xFB	; 251
 1ac:	80 83       	st	Z, r24
    // Enable INT5 interrupt
    EIMSK |= (1 << INT5);
 1ae:	8d b3       	in	r24, 0x1d	; 29
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	8d bb       	out	0x1d, r24	; 29

    // Enable global interrupts
    sei();
 1b4:	78 94       	sei
 1b6:	08 95       	ret

000001b8 <__vector_6>:
}


ISR(INT5_vect) {
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	0b b6       	in	r0, 0x3b	; 59
 1c4:	0f 92       	push	r0
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	// INTERRUPT handling
    if (!(PINE & (1 << PINE5))) {
 1de:	65 99       	sbic	0x0c, 5	; 12
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__vector_6+0x2e>
        UART_SendChar('1');
 1e2:	81 e3       	ldi	r24, 0x31	; 49
 1e4:	92 d0       	rcall	.+292    	; 0x30a <UART_SendChar>
    }
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0b be       	out	0x3b, r0	; 59
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <main>:


int main(void)
{
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
    board_init();
 212:	a8 df       	rcall	.-176    	; 0x164 <board_init>
	init_button1_interrupt();
 214:	be df       	rcall	.-132    	; 0x192 <init_button1_interrupt>
 216:	01 e0       	ldi	r16, 0x01	; 1
	
	int run = 1;
 218:	10 e0       	ldi	r17, 0x00	; 0
	char choice;
	while(run){
		print_menu();
 21a:	5b c0       	rjmp	.+182    	; 0x2d2 <main+0xc6>
 21c:	a7 df       	rcall	.-178    	; 0x16c <print_menu>
		choice = UART_GetChar();
 21e:	8c d0       	rcall	.+280    	; 0x338 <UART_GetChar>
 220:	82 33       	cpi	r24, 0x32	; 50
		switch (choice){
 222:	11 f1       	breq	.+68     	; 0x268 <main+0x5c>
 224:	28 f4       	brcc	.+10     	; 0x230 <main+0x24>
 226:	80 33       	cpi	r24, 0x30	; 48
 228:	49 f0       	breq	.+18     	; 0x23c <main+0x30>
 22a:	81 33       	cpi	r24, 0x31	; 49
 22c:	99 f0       	breq	.+38     	; 0x254 <main+0x48>
 22e:	4e c0       	rjmp	.+156    	; 0x2cc <main+0xc0>
 230:	83 33       	cpi	r24, 0x33	; 51
 232:	f1 f0       	breq	.+60     	; 0x270 <main+0x64>
 234:	84 33       	cpi	r24, 0x34	; 52
 236:	09 f4       	brne	.+2      	; 0x23a <main+0x2e>
 238:	45 c0       	rjmp	.+138    	; 0x2c4 <main+0xb8>
 23a:	48 c0       	rjmp	.+144    	; 0x2cc <main+0xc0>
			case '0':
				run = 0;
				UART_SendString("Quiting");
 23c:	8e e7       	ldi	r24, 0x7E	; 126
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	6b d0       	rcall	.+214    	; 0x318 <UART_SendString>
	while(run){
		print_menu();
		choice = UART_GetChar();
		switch (choice){
			case '0':
				run = 0;
 242:	00 e0       	ldi	r16, 0x00	; 0
				UART_SendString("Quiting");
				break;
 244:	10 e0       	ldi	r17, 0x00	; 0
			case '1':
				for (char c = 'a'; c <= 'z'; c++){
					UART_SendChar(c);
 246:	45 c0       	rjmp	.+138    	; 0x2d2 <main+0xc6>
 248:	8c 2f       	mov	r24, r28
 24a:	5f d0       	rcall	.+190    	; 0x30a <UART_SendChar>
					UART_SendChar(' ');
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	5d d0       	rcall	.+186    	; 0x30a <UART_SendChar>
 250:	cf 5f       	subi	r28, 0xFF	; 255
			case '0':
				run = 0;
				UART_SendString("Quiting");
				break;
			case '1':
				for (char c = 'a'; c <= 'z'; c++){
 252:	01 c0       	rjmp	.+2      	; 0x256 <main+0x4a>
 254:	c1 e6       	ldi	r28, 0x61	; 97
 256:	cb 37       	cpi	r28, 0x7B	; 123
 258:	b8 f3       	brcs	.-18     	; 0x248 <main+0x3c>
					UART_SendChar(' ');
				}
				break;
			case '2':
				for (char c = 'A'; c <= 'Z'; c++){
					UART_SendChar(c);
 25a:	3b c0       	rjmp	.+118    	; 0x2d2 <main+0xc6>
 25c:	8c 2f       	mov	r24, r28
 25e:	55 d0       	rcall	.+170    	; 0x30a <UART_SendChar>
					UART_SendChar(' ');
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	53 d0       	rcall	.+166    	; 0x30a <UART_SendChar>
					UART_SendChar(c);
					UART_SendChar(' ');
				}
				break;
			case '2':
				for (char c = 'A'; c <= 'Z'; c++){
 264:	cf 5f       	subi	r28, 0xFF	; 255
 266:	01 c0       	rjmp	.+2      	; 0x26a <main+0x5e>
	int run = 1;
	char choice;
	while(run){
		print_menu();
		choice = UART_GetChar();
		switch (choice){
 268:	c1 e4       	ldi	r28, 0x41	; 65
					UART_SendChar(c);
					UART_SendChar(' ');
				}
				break;
			case '2':
				for (char c = 'A'; c <= 'Z'; c++){
 26a:	cb 35       	cpi	r28, 0x5B	; 91
 26c:	b8 f3       	brcs	.-18     	; 0x25c <main+0x50>
 26e:	31 c0       	rjmp	.+98     	; 0x2d2 <main+0xc6>
					UART_SendChar(c);
					UART_SendChar(' ');
				}
				break;
			case '3':
				UART_SendString("Blinking with LED 2");
 270:	86 e8       	ldi	r24, 0x86	; 134
 272:	92 e0       	ldi	r25, 0x02	; 2
 274:	51 d0       	rcall	.+162    	; 0x318 <UART_SendString>
 276:	84 b1       	in	r24, 0x04	; 4
				sbi(DDRB, DDB6);
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	84 b9       	out	0x04, r24	; 4
 27c:	20 e0       	ldi	r18, 0x00	; 0
				for (int i =0; i<3; i++){
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	1a c0       	rjmp	.+52     	; 0x2b6 <main+0xaa>
 282:	85 b1       	in	r24, 0x05	; 5
					sbi(PORTB, PB6); 		    
 284:	80 64       	ori	r24, 0x40	; 64
 286:	85 b9       	out	0x05, r24	; 5
 288:	4f ef       	ldi	r20, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	84 e3       	ldi	r24, 0x34	; 52
 28c:	9c e0       	ldi	r25, 0x0C	; 12
 28e:	41 50       	subi	r20, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x82>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x8c>
 298:	00 00       	nop
 29a:	85 b1       	in	r24, 0x05	; 5
					_delay_ms(500);  		    
					cbi(PORTB, PB6);
 29c:	8f 7b       	andi	r24, 0xBF	; 191
 29e:	85 b9       	out	0x05, r24	; 5
 2a0:	4f ef       	ldi	r20, 0xFF	; 255
 2a2:	84 e3       	ldi	r24, 0x34	; 52
 2a4:	9c e0       	ldi	r25, 0x0C	; 12
 2a6:	41 50       	subi	r20, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x9a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0xa4>
 2b0:	00 00       	nop
 2b2:	2f 5f       	subi	r18, 0xFF	; 255
				}
				break;
			case '3':
				UART_SendString("Blinking with LED 2");
				sbi(DDRB, DDB6);
				for (int i =0; i<3; i++){
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	23 30       	cpi	r18, 0x03	; 3
 2b8:	31 05       	cpc	r19, r1
 2ba:	1c f3       	brlt	.-58     	; 0x282 <main+0x76>
					sbi(PORTB, PB6); 		    
					_delay_ms(500);  		    
					cbi(PORTB, PB6);
					_delay_ms(500);
				}
				cbi(DDRB, DDB6);
 2bc:	84 b1       	in	r24, 0x04	; 4
 2be:	8f 7b       	andi	r24, 0xBF	; 191
				break;
 2c0:	84 b9       	out	0x04, r24	; 4
			case '4':
				// Escape = \1xb
				UART_SendString("\x1b[2J");
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <main+0xc6>
 2c4:	8a e9       	ldi	r24, 0x9A	; 154
 2c6:	92 e0       	ldi	r25, 0x02	; 2
 2c8:	27 d0       	rcall	.+78     	; 0x318 <UART_SendString>
				break;
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <main+0xc6>
			default:
				UART_SendString("Invalid option");
 2cc:	8f e9       	ldi	r24, 0x9F	; 159
 2ce:	92 e0       	ldi	r25, 0x02	; 2
 2d0:	23 d0       	rcall	.+70     	; 0x318 <UART_SendString>
 2d2:	01 15       	cp	r16, r1
    board_init();
	init_button1_interrupt();
	
	int run = 1;
	char choice;
	while(run){
 2d4:	11 05       	cpc	r17, r1
 2d6:	09 f0       	breq	.+2      	; 0x2da <main+0xce>
 2d8:	a1 cf       	rjmp	.-190    	; 0x21c <main+0x10>
 2da:	80 e0       	ldi	r24, 0x00	; 0
        }
	}
	*/
	
	return 0;
}
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <UART_init>:
#include <stdio.h>
#include <avr/io.h>

void UART_init(uint16_t Baudrate){
		uint16_t ubrr;
		ubrr = F_CPU / 16 / Baudrate-1;
 2e6:	9c 01       	movw	r18, r24
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	60 e2       	ldi	r22, 0x20	; 32
 2ee:	71 ea       	ldi	r23, 0xA1	; 161
 2f0:	87 e0       	ldi	r24, 0x07	; 7
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	28 d0       	rcall	.+80     	; 0x346 <__divmodsi4>
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	31 09       	sbc	r19, r1
		// Setting Baud rate
		UBRR1H = (uint8_t)(ubrr>>8);
 2fa:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
		UBRR1L = (uint8_t)ubrr;
 2fe:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
		// Enable Tx and RX
		UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 302:	88 e1       	ldi	r24, 0x18	; 24
 304:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 308:	08 95       	ret

0000030a <UART_SendChar>:
		// Setting frame format (Async, Parity-Disabled, 1 Stop bit, 8 data bits)
}

void UART_SendChar(uint8_t data){
	// Wait for empty transmit buffer
	while ( !( UCSR1A & (1<<UDRE1)) );
 30a:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 30e:	95 ff       	sbrs	r25, 5
 310:	fc cf       	rjmp	.-8      	; 0x30a <UART_SendChar>

	UDR1 = data;
 312:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 316:	08 95       	ret

00000318 <UART_SendString>:

}

void UART_SendString(char *text){
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	ec 01       	movw	r28, r24
	// Wait for empty transmit buffer
	while ( !( UCSR1A & (1<<UDRE1)) );
 31e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 322:	85 ff       	sbrs	r24, 5
 324:	fc cf       	rjmp	.-8      	; 0x31e <UART_SendString+0x6>
 326:	02 c0       	rjmp	.+4      	; 0x32c <UART_SendString+0x14>
	
	while (*text != 0x00){
		UART_SendChar(*text);
 328:	f0 df       	rcall	.-32     	; 0x30a <UART_SendChar>
		text++;
 32a:	21 96       	adiw	r28, 0x01	; 1

void UART_SendString(char *text){
	// Wait for empty transmit buffer
	while ( !( UCSR1A & (1<<UDRE1)) );
	
	while (*text != 0x00){
 32c:	88 81       	ld	r24, Y
 32e:	81 11       	cpse	r24, r1
 330:	fb cf       	rjmp	.-10     	; 0x328 <UART_SendString+0x10>
		UART_SendChar(*text);
		text++;
	}
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <UART_GetChar>:

uint8_t UART_GetChar(void){
	// Wait for received char
	while ( ! (UCSR1A & ( 1 << RXC1) ) );
 338:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 33c:	88 23       	and	r24, r24
 33e:	e4 f7       	brge	.-8      	; 0x338 <UART_GetChar>
	
	return UDR1;
 340:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
}
 344:	08 95       	ret

00000346 <__divmodsi4>:
 346:	05 2e       	mov	r0, r21
 348:	97 fb       	bst	r25, 7
 34a:	16 f4       	brtc	.+4      	; 0x350 <__divmodsi4+0xa>
 34c:	00 94       	com	r0
 34e:	0f d0       	rcall	.+30     	; 0x36e <__negsi2>
 350:	57 fd       	sbrc	r21, 7
 352:	05 d0       	rcall	.+10     	; 0x35e <__divmodsi4_neg2>
 354:	14 d0       	rcall	.+40     	; 0x37e <__udivmodsi4>
 356:	07 fc       	sbrc	r0, 7
 358:	02 d0       	rcall	.+4      	; 0x35e <__divmodsi4_neg2>
 35a:	46 f4       	brtc	.+16     	; 0x36c <__divmodsi4_exit>
 35c:	08 c0       	rjmp	.+16     	; 0x36e <__negsi2>

0000035e <__divmodsi4_neg2>:
 35e:	50 95       	com	r21
 360:	40 95       	com	r20
 362:	30 95       	com	r19
 364:	21 95       	neg	r18
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	4f 4f       	sbci	r20, 0xFF	; 255
 36a:	5f 4f       	sbci	r21, 0xFF	; 255

0000036c <__divmodsi4_exit>:
 36c:	08 95       	ret

0000036e <__negsi2>:
 36e:	90 95       	com	r25
 370:	80 95       	com	r24
 372:	70 95       	com	r23
 374:	61 95       	neg	r22
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	8f 4f       	sbci	r24, 0xFF	; 255
 37a:	9f 4f       	sbci	r25, 0xFF	; 255
 37c:	08 95       	ret

0000037e <__udivmodsi4>:
 37e:	a1 e2       	ldi	r26, 0x21	; 33
 380:	1a 2e       	mov	r1, r26
 382:	aa 1b       	sub	r26, r26
 384:	bb 1b       	sub	r27, r27
 386:	fd 01       	movw	r30, r26
 388:	0d c0       	rjmp	.+26     	; 0x3a4 <__udivmodsi4_ep>

0000038a <__udivmodsi4_loop>:
 38a:	aa 1f       	adc	r26, r26
 38c:	bb 1f       	adc	r27, r27
 38e:	ee 1f       	adc	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	a2 17       	cp	r26, r18
 394:	b3 07       	cpc	r27, r19
 396:	e4 07       	cpc	r30, r20
 398:	f5 07       	cpc	r31, r21
 39a:	20 f0       	brcs	.+8      	; 0x3a4 <__udivmodsi4_ep>
 39c:	a2 1b       	sub	r26, r18
 39e:	b3 0b       	sbc	r27, r19
 3a0:	e4 0b       	sbc	r30, r20
 3a2:	f5 0b       	sbc	r31, r21

000003a4 <__udivmodsi4_ep>:
 3a4:	66 1f       	adc	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	88 1f       	adc	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	1a 94       	dec	r1
 3ae:	69 f7       	brne	.-38     	; 0x38a <__udivmodsi4_loop>
 3b0:	60 95       	com	r22
 3b2:	70 95       	com	r23
 3b4:	80 95       	com	r24
 3b6:	90 95       	com	r25
 3b8:	9b 01       	movw	r18, r22
 3ba:	ac 01       	movw	r20, r24
 3bc:	bd 01       	movw	r22, r26
 3be:	cf 01       	movw	r24, r30
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
