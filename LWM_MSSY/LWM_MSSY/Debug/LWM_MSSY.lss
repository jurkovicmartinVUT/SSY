
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00001ca8  00001d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000180b  00800204  00800204  00001d40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000061e2  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ca0  00000000  00000000  000083aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000265b  00000000  00000000  0000b04a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009dc  00000000  00000000  0000d6a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ed6  00000000  00000000  0000e084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024f0  00000000  00000000  0000ff5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  0001244a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	c0 c1       	rjmp	.+896    	; 0x3b6 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5f c2       	rjmp	.+1214   	; 0x550 <__vector_36>
      92:	00 00       	nop
      94:	41 c2       	rjmp	.+1154   	; 0x518 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	75 c1       	rjmp	.+746    	; 0x394 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e8 ea       	ldi	r30, 0xA8	; 168
     14c:	fc e1       	ldi	r31, 0x1C	; 28
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 30       	cpi	r26, 0x04	; 4
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e1       	ldi	r18, 0x1A	; 26
     160:	a4 e0       	ldi	r26, 0x04	; 4
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	af 30       	cpi	r26, 0x0F	; 15
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	b3 d0       	rcall	.+358    	; 0x2d6 <main>
     170:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
appDataReqBusy = false;
     176:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <appDataReqBusy>
     17a:	08 95       	ret

0000017c <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     17c:	cf 93       	push	r28
if (appDataReqBusy || 0 == appUartBufferPtr)
     17e:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <appDataReqBusy>
     182:	81 11       	cpse	r24, r1
     184:	25 c0       	rjmp	.+74     	; 0x1d0 <appSendData+0x54>
     186:	c0 91 04 02 	lds	r28, 0x0204	; 0x800204 <__data_end>
     18a:	cc 23       	and	r28, r28
     18c:	09 f1       	breq	.+66     	; 0x1d0 <appSendData+0x54>
return;

memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     18e:	4c 2f       	mov	r20, r28
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	65 e0       	ldi	r22, 0x05	; 5
     194:	72 e0       	ldi	r23, 0x02	; 2
     196:	82 e7       	ldi	r24, 0x72	; 114
     198:	92 e0       	ldi	r25, 0x02	; 2
     19a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <memcpy>

appDataReq.dstAddr = 1-APP_ADDR;
     19e:	e0 ee       	ldi	r30, 0xE0	; 224
     1a0:	f2 e0       	ldi	r31, 0x02	; 2
     1a2:	16 82       	std	Z+6, r1	; 0x06
     1a4:	15 82       	std	Z+5, r1	; 0x05
appDataReq.dstEndpoint = APP_ENDPOINT;
     1a6:	85 e0       	ldi	r24, 0x05	; 5
     1a8:	87 83       	std	Z+7, r24	; 0x07
appDataReq.srcEndpoint = APP_ENDPOINT;
     1aa:	80 87       	std	Z+8, r24	; 0x08
appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	81 87       	std	Z+9, r24	; 0x09
appDataReq.data = appDataReqBuffer;
     1b0:	82 e7       	ldi	r24, 0x72	; 114
     1b2:	92 e0       	ldi	r25, 0x02	; 2
     1b4:	93 87       	std	Z+11, r25	; 0x0b
     1b6:	82 87       	std	Z+10, r24	; 0x0a
appDataReq.size = appUartBufferPtr;
     1b8:	c4 87       	std	Z+12, r28	; 0x0c
appDataReq.confirm = appDataConf;
     1ba:	8b eb       	ldi	r24, 0xBB	; 187
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	96 87       	std	Z+14, r25	; 0x0e
     1c0:	85 87       	std	Z+13, r24	; 0x0d
NWK_DataReq(&appDataReq);
     1c2:	cf 01       	movw	r24, r30
     1c4:	b9 d2       	rcall	.+1394   	; 0x738 <NWK_DataReq>

appUartBufferPtr = 0;
     1c6:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
appDataReqBusy = true;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <appDataReqBusy>
}
     1d0:	cf 91       	pop	r28
     1d2:	08 95       	ret

000001d4 <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
appSendData();
     1d4:	d3 cf       	rjmp	.-90     	; 0x17c <appSendData>
     1d6:	08 95       	ret

000001d8 <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
     1d8:	ef 92       	push	r14
     1da:	ff 92       	push	r15
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	1f 92       	push	r1
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	7c 01       	movw	r14, r24
	if (ind->data[0] == 06 && ind->size == 1) {
     1ea:	dc 01       	movw	r26, r24
     1ec:	17 96       	adiw	r26, 0x07	; 7
     1ee:	ed 91       	ld	r30, X+
     1f0:	fc 91       	ld	r31, X
     1f2:	18 97       	sbiw	r26, 0x08	; 8
     1f4:	80 81       	ld	r24, Z
     1f6:	86 30       	cpi	r24, 0x06	; 6
     1f8:	29 f0       	breq	.+10     	; 0x204 <appDataInd+0x2c>
		HAL_UartWriteByte('X');
	} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     1fa:	f7 01       	movw	r30, r14
     1fc:	81 85       	ldd	r24, Z+9	; 0x09
     1fe:	81 11       	cpse	r24, r1
     200:	09 c0       	rjmp	.+18     	; 0x214 <appDataInd+0x3c>
     202:	17 c0       	rjmp	.+46     	; 0x232 <appDataInd+0x5a>

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	if (ind->data[0] == 06 && ind->size == 1) {
     204:	d7 01       	movw	r26, r14
     206:	19 96       	adiw	r26, 0x09	; 9
     208:	8c 91       	ld	r24, X
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	b1 f7       	brne	.-20     	; 0x1fa <appDataInd+0x22>
		HAL_UartWriteByte('X');
     20e:	88 e5       	ldi	r24, 0x58	; 88
     210:	36 d1       	rcall	.+620    	; 0x47e <HAL_UartWriteByte>
     212:	2a c0       	rjmp	.+84     	; 0x268 <appDataInd+0x90>
	} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     214:	10 e0       	ldi	r17, 0x00	; 0
			HAL_UartWriteByte(ind->data[i]);
     216:	d7 01       	movw	r26, r14
     218:	17 96       	adiw	r26, 0x07	; 7
     21a:	ed 91       	ld	r30, X+
     21c:	fc 91       	ld	r31, X
     21e:	18 97       	sbiw	r26, 0x08	; 8
     220:	e1 0f       	add	r30, r17
     222:	f1 1d       	adc	r31, r1
     224:	80 81       	ld	r24, Z
     226:	2b d1       	rcall	.+598    	; 0x47e <HAL_UartWriteByte>
static bool appDataInd(NWK_DataInd_t *ind)
{
	if (ind->data[0] == 06 && ind->size == 1) {
		HAL_UartWriteByte('X');
	} else {
		for (uint8_t i = 0; i < ind->size; i++) {
     228:	1f 5f       	subi	r17, 0xFF	; 255
     22a:	f7 01       	movw	r30, r14
     22c:	81 85       	ldd	r24, Z+9	; 0x09
     22e:	18 17       	cp	r17, r24
     230:	90 f3       	brcs	.-28     	; 0x216 <appDataInd+0x3e>
appDataReqBusy = true;
}

static void appSendDataRecv(void)
{
	char ack = 06;
     232:	86 e0       	ldi	r24, 0x06	; 6
     234:	89 83       	std	Y+1, r24	; 0x01
	appDataReq.dstAddr = 1-APP_ADDR;
     236:	e0 ee       	ldi	r30, 0xE0	; 224
     238:	f2 e0       	ldi	r31, 0x02	; 2
     23a:	16 82       	std	Z+6, r1	; 0x06
     23c:	15 82       	std	Z+5, r1	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT;
     23e:	85 e0       	ldi	r24, 0x05	; 5
     240:	87 83       	std	Z+7, r24	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT;
     242:	80 87       	std	Z+8, r24	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     244:	82 e0       	ldi	r24, 0x02	; 2
     246:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = &ack;
     248:	ce 01       	movw	r24, r28
     24a:	01 96       	adiw	r24, 0x01	; 1
     24c:	93 87       	std	Z+11, r25	; 0x0b
     24e:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = sizeof(ack);
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	14 87       	std	Z+12, r17	; 0x0c
	appDataReq.confirm = appDataConf;
     254:	8b eb       	ldi	r24, 0xBB	; 187
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	96 87       	std	Z+14, r25	; 0x0e
	NWK_DataReq(&appDataReq);
     25a:	85 87       	std	Z+13, r24	; 0x0d
     25c:	cf 01       	movw	r24, r30
     25e:	6c d2       	rcall	.+1240   	; 0x738 <NWK_DataReq>

	appUartBufferPtr = 0;
     260:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
	appDataReqBusy = true;
     264:	10 93 df 02 	sts	0x02DF, r17	; 0x8002df <appDataReqBusy>
			HAL_UartWriteByte(ind->data[i]);
		}
		appSendDataRecv();
	}
	return true;
}
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0f 90       	pop	r0
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	08 95       	ret

00000278 <HAL_UartBytesReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	8c 01       	movw	r16, r24
for (uint16_t i = 0; i < bytes; i++)
     284:	89 2b       	or	r24, r25
     286:	c9 f0       	breq	.+50     	; 0x2ba <HAL_UartBytesReceived+0x42>
     288:	c0 e0       	ldi	r28, 0x00	; 0
     28a:	d0 e0       	ldi	r29, 0x00	; 0
{
uint8_t byte = HAL_UartReadByte();
     28c:	1f d1       	rcall	.+574    	; 0x4cc <HAL_UartReadByte>
     28e:	f8 2e       	mov	r15, r24

if (appUartBufferPtr == sizeof(appUartBuffer))
     290:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     294:	8d 36       	cpi	r24, 0x6D	; 109
appSendData();
     296:	09 f4       	brne	.+2      	; 0x29a <HAL_UartBytesReceived+0x22>
     298:	71 df       	rcall	.-286    	; 0x17c <appSendData>

if (appUartBufferPtr < sizeof(appUartBuffer))
     29a:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__data_end>
     29e:	ed 36       	cpi	r30, 0x6D	; 109
     2a0:	40 f4       	brcc	.+16     	; 0x2b2 <HAL_UartBytesReceived+0x3a>
appUartBuffer[appUartBufferPtr++] = byte;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	8e 0f       	add	r24, r30
     2a6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	eb 5f       	subi	r30, 0xFB	; 251
     2ae:	fd 4f       	sbci	r31, 0xFD	; 253
     2b0:	f0 82       	st	Z, r15

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
for (uint16_t i = 0; i < bytes; i++)
     2b2:	21 96       	adiw	r28, 0x01	; 1
     2b4:	0c 17       	cp	r16, r28
     2b6:	1d 07       	cpc	r17, r29
     2b8:	49 f7       	brne	.-46     	; 0x28c <HAL_UartBytesReceived+0x14>

if (appUartBufferPtr < sizeof(appUartBuffer))
appUartBuffer[appUartBufferPtr++] = byte;
}

SYS_TimerStop(&appTimer);
     2ba:	81 ef       	ldi	r24, 0xF1	; 241
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	0e 94 ca 0c 	call	0x1994	; 0x1994 <SYS_TimerStop>
SYS_TimerStart(&appTimer);
     2c2:	81 ef       	ldi	r24, 0xF1	; 241
     2c4:	92 e0       	ldi	r25, 0x02	; 2
     2c6:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SYS_TimerStart>
}
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	08 95       	ret

000002d6 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
SYS_Init();
     2d6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <SYS_Init>
HAL_UartInit(38400);
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	76 e9       	ldi	r23, 0x96	; 150
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	78 d0       	rcall	.+240    	; 0x3d4 <HAL_UartInit>
HAL_UartWriteByte('j');
     2e4:	8a e6       	ldi	r24, 0x6A	; 106
     2e6:	cb d0       	rcall	.+406    	; 0x47e <HAL_UartWriteByte>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     2e8:	c1 ef       	ldi	r28, 0xF1	; 241
     2ea:	d2 e0       	ldi	r29, 0x02	; 2
     2ec:	0f 2e       	mov	r0, r31
     2ee:	f4 e1       	ldi	r31, 0x14	; 20
     2f0:	cf 2e       	mov	r12, r31
     2f2:	d1 2c       	mov	r13, r1
     2f4:	e1 2c       	mov	r14, r1
     2f6:	f1 2c       	mov	r15, r1
     2f8:	f0 2d       	mov	r31, r0
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
appTimer.handler = appTimerHandler;
     2fa:	0a ee       	ldi	r16, 0xEA	; 234
     2fc:	10 e0       	ldi	r17, 0x00	; 0
HAL_UartInit(38400);
HAL_UartWriteByte('j');

while (1)
{
SYS_TaskHandler();
     2fe:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <SYS_TaskHandler>
HAL_UartTaskHandler();
     302:	7d d1       	rcall	.+762    	; 0x5fe <HAL_UartTaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
switch (appState)
     304:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appState>
     308:	81 11       	cpse	r24, r1

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     30a:	f9 cf       	rjmp	.-14     	; 0x2fe <main+0x28>
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
NWK_SetPanId(APP_PANID);
     310:	d0 d1       	rcall	.+928    	; 0x6b2 <NWK_SetAddr>
     312:	80 e8       	ldi	r24, 0x80	; 128
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	d4 d1       	rcall	.+936    	; 0x6c0 <NWK_SetPanId>
PHY_SetChannel(APP_CHANNEL);
     318:	8e e0       	ldi	r24, 0x0E	; 14
     31a:	0e 94 84 0b 	call	0x1708	; 0x1708 <PHY_SetChannel>
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 80 0b 	call	0x1700	; 0x1700 <PHY_SetRxState>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     324:	6c ee       	ldi	r22, 0xEC	; 236
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	85 e0       	ldi	r24, 0x05	; 5
     32a:	d1 d1       	rcall	.+930    	; 0x6ce <NWK_OpenEndpoint>

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     32c:	ce 82       	std	Y+6, r12	; 0x06
     32e:	df 82       	std	Y+7, r13	; 0x07
     330:	e8 86       	std	Y+8, r14	; 0x08
     332:	f9 86       	std	Y+9, r15	; 0x09
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     334:	1a 86       	std	Y+10, r1	; 0x0a
appTimer.handler = appTimerHandler;
     336:	1c 87       	std	Y+12, r17	; 0x0c
     338:	0b 87       	std	Y+11, r16	; 0x0b
switch (appState)
{
	case APP_STATE_INITIAL: 
		{
		appInit();
		appState = APP_STATE_IDLE;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <appState>
     340:	de cf       	rjmp	.-68     	; 0x2fe <main+0x28>

00000342 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     342:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	a8 95       	wdr
     34a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     34e:	88 61       	ori	r24, 0x18	; 24
     350:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     354:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     358:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     35a:	e1 e6       	ldi	r30, 0x61	; 97
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 e8       	ldi	r24, 0x80	; 128
     360:	80 83       	st	Z, r24
  CLKPR = 0;
     362:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     364:	78 94       	sei

  HAL_TimerInit();
     366:	01 c0       	rjmp	.+2      	; 0x36a <HAL_TimerInit>
     368:	08 95       	ret

0000036a <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     36a:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <halTimerIrqCount>
     36e:	80 e1       	ldi	r24, 0x10	; 16
     370:	97 e2       	ldi	r25, 0x27	; 39
     372:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     376:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     37a:	e1 ea       	ldi	r30, 0xA1	; 161
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	88 e0       	ldi	r24, 0x08	; 8
     380:	80 83       	st	Z, r24
     382:	80 81       	ld	r24, Z
     384:	82 60       	ori	r24, 0x02	; 2
     386:	80 83       	st	Z, r24
     388:	e2 e7       	ldi	r30, 0x72	; 114
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	82 60       	ori	r24, 0x02	; 2
     390:	80 83       	st	Z, r24
     392:	08 95       	ret

00000394 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	8f 93       	push	r24
  halTimerIrqCount++;
     3a0:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
     3a4:	8f 5f       	subi	r24, 0xFF	; 255
     3a6:	80 93 e6 19 	sts	0x19E6, r24	; 0x8019e6 <halTimerIrqCount>
}
     3aa:	8f 91       	pop	r24
     3ac:	0f 90       	pop	r0
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	0f 90       	pop	r0
     3b2:	1f 90       	pop	r1
     3b4:	18 95       	reti

000003b6 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     3b6:	1f 92       	push	r1
     3b8:	0f 92       	push	r0
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	0f 92       	push	r0
     3be:	11 24       	eor	r1, r1
     3c0:	8f 93       	push	r24
  halSleepTimerEvent = true;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <halSleepTimerEvent>
}
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     3d4:	dc 01       	movw	r26, r24
     3d6:	cb 01       	movw	r24, r22
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	aa 1f       	adc	r26, r26
     3de:	bb 1f       	adc	r27, r27
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	aa 1f       	adc	r26, r26
     3e6:	bb 1f       	adc	r27, r27
     3e8:	9c 01       	movw	r18, r24
     3ea:	ad 01       	movw	r20, r26
     3ec:	22 0f       	add	r18, r18
     3ee:	33 1f       	adc	r19, r19
     3f0:	44 1f       	adc	r20, r20
     3f2:	55 1f       	adc	r21, r21
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	44 1f       	adc	r20, r20
     3fa:	55 1f       	adc	r21, r21
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	74 e2       	ldi	r23, 0x24	; 36
     400:	84 ef       	ldi	r24, 0xF4	; 244
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__udivmodsi4>
     408:	ba 01       	movw	r22, r20
     40a:	a9 01       	movw	r20, r18
     40c:	41 50       	subi	r20, 0x01	; 1
     40e:	51 09       	sbc	r21, r1
     410:	61 09       	sbc	r22, r1
     412:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     414:	bb 27       	eor	r27, r27
     416:	a7 2f       	mov	r26, r23
     418:	96 2f       	mov	r25, r22
     41a:	85 2f       	mov	r24, r21
     41c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
     420:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     42a:	88 e9       	ldi	r24, 0x98	; 152
     42c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
     430:	86 e0       	ldi	r24, 0x06	; 6
     432:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
     436:	ee e2       	ldi	r30, 0x2E	; 46
     438:	f6 e0       	ldi	r31, 0x06	; 6
     43a:	8d e9       	ldi	r24, 0x9D	; 157
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	91 87       	std	Z+9, r25	; 0x09
     440:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     442:	80 e9       	ldi	r24, 0x90	; 144
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	95 83       	std	Z+5, r25	; 0x05
     448:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
     44a:	17 82       	std	Z+7, r1	; 0x07
     44c:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     44e:	11 82       	std	Z+1, r1	; 0x01
     450:	10 82       	st	Z, r1
  txFifo.tail = 0;
     452:	13 82       	std	Z+3, r1	; 0x03
     454:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     456:	e3 e9       	ldi	r30, 0x93	; 147
     458:	f4 e0       	ldi	r31, 0x04	; 4
     45a:	22 e0       	ldi	r18, 0x02	; 2
     45c:	33 e0       	ldi	r19, 0x03	; 3
     45e:	31 87       	std	Z+9, r19	; 0x09
     460:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     462:	95 83       	std	Z+5, r25	; 0x05
     464:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
     466:	17 82       	std	Z+7, r1	; 0x07
     468:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     46a:	11 82       	std	Z+1, r1	; 0x01
     46c:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     46e:	13 82       	std	Z+3, r1	; 0x03
     470:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <udrEmpty>
  newData = false;
     478:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <newData>
     47c:	08 95       	ret

0000047e <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
     482:	ee e2       	ldi	r30, 0x2E	; 46
     484:	f6 e0       	ldi	r31, 0x06	; 6
     486:	26 81       	ldd	r18, Z+6	; 0x06
     488:	37 81       	ldd	r19, Z+7	; 0x07
     48a:	64 81       	ldd	r22, Z+4	; 0x04
     48c:	75 81       	ldd	r23, Z+5	; 0x05
     48e:	26 17       	cp	r18, r22
     490:	37 07       	cpc	r19, r23
     492:	c9 f0       	breq	.+50     	; 0x4c6 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
     494:	c0 85       	ldd	r28, Z+8	; 0x08
     496:	d1 85       	ldd	r29, Z+9	; 0x09
     498:	42 81       	ldd	r20, Z+2	; 0x02
     49a:	53 81       	ldd	r21, Z+3	; 0x03
     49c:	da 01       	movw	r26, r20
     49e:	11 96       	adiw	r26, 0x01	; 1
     4a0:	b3 83       	std	Z+3, r27	; 0x03
     4a2:	a2 83       	std	Z+2, r26	; 0x02
     4a4:	fe 01       	movw	r30, r28
     4a6:	e4 0f       	add	r30, r20
     4a8:	f5 1f       	adc	r31, r21
     4aa:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
     4ac:	6a 17       	cp	r22, r26
     4ae:	7b 07       	cpc	r23, r27
     4b0:	21 f4       	brne	.+8      	; 0x4ba <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
     4b2:	10 92 31 06 	sts	0x0631, r1	; 0x800631 <txFifo+0x3>
     4b6:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <txFifo+0x2>
  txFifo.bytes++;
     4ba:	2f 5f       	subi	r18, 0xFF	; 255
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
     4be:	30 93 35 06 	sts	0x0635, r19	; 0x800635 <txFifo+0x7>
     4c2:	20 93 34 06 	sts	0x0634, r18	; 0x800634 <txFifo+0x6>
}
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     4cc:	4f b7       	in	r20, 0x3f	; 63
     4ce:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     4d0:	e3 e9       	ldi	r30, 0x93	; 147
     4d2:	f4 e0       	ldi	r31, 0x04	; 4
     4d4:	20 85       	ldd	r18, Z+8	; 0x08
     4d6:	31 85       	ldd	r19, Z+9	; 0x09
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	bc 01       	movw	r22, r24
     4de:	6f 5f       	subi	r22, 0xFF	; 255
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	71 83       	std	Z+1, r23	; 0x01
     4e4:	60 83       	st	Z, r22
     4e6:	d9 01       	movw	r26, r18
     4e8:	a8 0f       	add	r26, r24
     4ea:	b9 1f       	adc	r27, r25
     4ec:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     4ee:	60 81       	ld	r22, Z
     4f0:	71 81       	ldd	r23, Z+1	; 0x01
     4f2:	24 81       	ldd	r18, Z+4	; 0x04
     4f4:	35 81       	ldd	r19, Z+5	; 0x05
     4f6:	62 17       	cp	r22, r18
     4f8:	73 07       	cpc	r23, r19
     4fa:	21 f4       	brne	.+8      	; 0x504 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     4fc:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <rxFifo+0x1>
     500:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <rxFifo>
    rxFifo.bytes--;
     504:	e3 e9       	ldi	r30, 0x93	; 147
     506:	f4 e0       	ldi	r31, 0x04	; 4
     508:	26 81       	ldd	r18, Z+6	; 0x06
     50a:	37 81       	ldd	r19, Z+7	; 0x07
     50c:	21 50       	subi	r18, 0x01	; 1
     50e:	31 09       	sbc	r19, r1
     510:	37 83       	std	Z+7, r19	; 0x07
     512:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     514:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     516:	08 95       	ret

00000518 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	0b b6       	in	r0, 0x3b	; 59
     524:	0f 92       	push	r0
     526:	8f 93       	push	r24
     528:	ef 93       	push	r30
     52a:	ff 93       	push	r31
  udrEmpty = true;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     532:	e9 ec       	ldi	r30, 0xC9	; 201
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	8f 7d       	andi	r24, 0xDF	; 223
     53a:	80 83       	st	Z, r24
}
     53c:	ff 91       	pop	r31
     53e:	ef 91       	pop	r30
     540:	8f 91       	pop	r24
     542:	0f 90       	pop	r0
     544:	0b be       	out	0x3b, r0	; 59
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	0f 92       	push	r0
     558:	11 24       	eor	r1, r1
     55a:	0b b6       	in	r0, 0x3b	; 59
     55c:	0f 92       	push	r0
     55e:	2f 93       	push	r18
     560:	3f 93       	push	r19
     562:	4f 93       	push	r20
     564:	5f 93       	push	r21
     566:	6f 93       	push	r22
     568:	7f 93       	push	r23
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
     56e:	af 93       	push	r26
     570:	bf 93       	push	r27
     572:	ef 93       	push	r30
     574:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     576:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     57a:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     57e:	8c 71       	andi	r24, 0x1C	; 28
     580:	59 f5       	brne	.+86     	; 0x5d8 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     582:	e3 e9       	ldi	r30, 0x93	; 147
     584:	f4 e0       	ldi	r31, 0x04	; 4
     586:	46 81       	ldd	r20, Z+6	; 0x06
     588:	57 81       	ldd	r21, Z+7	; 0x07
     58a:	84 81       	ldd	r24, Z+4	; 0x04
     58c:	95 81       	ldd	r25, Z+5	; 0x05
     58e:	48 17       	cp	r20, r24
     590:	59 07       	cpc	r21, r25
     592:	11 f1       	breq	.+68     	; 0x5d8 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     594:	40 85       	ldd	r20, Z+8	; 0x08
     596:	51 85       	ldd	r21, Z+9	; 0x09
     598:	82 81       	ldd	r24, Z+2	; 0x02
     59a:	93 81       	ldd	r25, Z+3	; 0x03
     59c:	bc 01       	movw	r22, r24
     59e:	6f 5f       	subi	r22, 0xFF	; 255
     5a0:	7f 4f       	sbci	r23, 0xFF	; 255
     5a2:	73 83       	std	Z+3, r23	; 0x03
     5a4:	62 83       	std	Z+2, r22	; 0x02
     5a6:	da 01       	movw	r26, r20
     5a8:	a8 0f       	add	r26, r24
     5aa:	b9 1f       	adc	r27, r25
     5ac:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     5ae:	22 81       	ldd	r18, Z+2	; 0x02
     5b0:	33 81       	ldd	r19, Z+3	; 0x03
     5b2:	84 81       	ldd	r24, Z+4	; 0x04
     5b4:	95 81       	ldd	r25, Z+5	; 0x05
     5b6:	28 17       	cp	r18, r24
     5b8:	39 07       	cpc	r19, r25
     5ba:	21 f4       	brne	.+8      	; 0x5c4 <__vector_36+0x74>
      rxFifo.tail = 0;
     5bc:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <rxFifo+0x3>
     5c0:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <rxFifo+0x2>
    rxFifo.bytes++;
     5c4:	e3 e9       	ldi	r30, 0x93	; 147
     5c6:	f4 e0       	ldi	r31, 0x04	; 4
     5c8:	86 81       	ldd	r24, Z+6	; 0x06
     5ca:	97 81       	ldd	r25, Z+7	; 0x07
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	97 83       	std	Z+7, r25	; 0x07
     5d0:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     5d8:	ff 91       	pop	r31
     5da:	ef 91       	pop	r30
     5dc:	bf 91       	pop	r27
     5de:	af 91       	pop	r26
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	7f 91       	pop	r23
     5e6:	6f 91       	pop	r22
     5e8:	5f 91       	pop	r21
     5ea:	4f 91       	pop	r20
     5ec:	3f 91       	pop	r19
     5ee:	2f 91       	pop	r18
     5f0:	0f 90       	pop	r0
     5f2:	0b be       	out	0x3b, r0	; 59
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     5fe:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <txFifo+0x6>
     602:	90 91 35 06 	lds	r25, 0x0635	; 0x800635 <txFifo+0x7>
     606:	00 97       	sbiw	r24, 0x00	; 0
     608:	69 f1       	breq	.+90     	; 0x664 <HAL_UartTaskHandler+0x66>
     60a:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <udrEmpty>
     60e:	22 23       	and	r18, r18
     610:	49 f1       	breq	.+82     	; 0x664 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     612:	ee e2       	ldi	r30, 0x2E	; 46
     614:	f6 e0       	ldi	r31, 0x06	; 6
     616:	60 85       	ldd	r22, Z+8	; 0x08
     618:	71 85       	ldd	r23, Z+9	; 0x09
     61a:	20 81       	ld	r18, Z
     61c:	31 81       	ldd	r19, Z+1	; 0x01
     61e:	a9 01       	movw	r20, r18
     620:	4f 5f       	subi	r20, 0xFF	; 255
     622:	5f 4f       	sbci	r21, 0xFF	; 255
     624:	51 83       	std	Z+1, r21	; 0x01
     626:	40 83       	st	Z, r20
     628:	db 01       	movw	r26, r22
     62a:	a2 0f       	add	r26, r18
     62c:	b3 1f       	adc	r27, r19
     62e:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     630:	64 81       	ldd	r22, Z+4	; 0x04
     632:	75 81       	ldd	r23, Z+5	; 0x05
     634:	46 17       	cp	r20, r22
     636:	57 07       	cpc	r21, r23
     638:	21 f4       	brne	.+8      	; 0x642 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     63a:	10 92 2f 06 	sts	0x062F, r1	; 0x80062f <txFifo+0x1>
     63e:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <txFifo>
    txFifo.bytes--;
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	90 93 35 06 	sts	0x0635, r25	; 0x800635 <txFifo+0x7>
     648:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     64c:	9f b7       	in	r25, 0x3f	; 63
     64e:	f8 94       	cli
      UDRx = byte;
     650:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     654:	e9 ec       	ldi	r30, 0xC9	; 201
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	80 62       	ori	r24, 0x20	; 32
     65c:	80 83       	st	Z, r24
      udrEmpty = false;
     65e:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     662:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     664:	2f b7       	in	r18, 0x3f	; 63
     666:	f8 94       	cli
      new = newData;
     668:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <newData>
      newData = false;
     66c:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <newData>
      bytes = rxFifo.bytes;
     670:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <rxFifo+0x6>
     674:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     678:	2f bf       	out	0x3f, r18	; 63

    if (new)
     67a:	99 23       	and	r25, r25
     67c:	11 f0       	breq	.+4      	; 0x682 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     67e:	ca 01       	movw	r24, r20
     680:	fb cd       	rjmp	.-1034   	; 0x278 <HAL_UartBytesReceived>
     682:	08 95       	ret

00000684 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     684:	e7 ee       	ldi	r30, 0xE7	; 231
     686:	f9 e1       	ldi	r31, 0x19	; 25
     688:	14 82       	std	Z+4, r1	; 0x04
     68a:	15 82       	std	Z+5, r1	; 0x05
     68c:	11 82       	std	Z+1, r1	; 0x01
     68e:	10 82       	st	Z, r1
     690:	17 a2       	std	Z+39, r1	; 0x27
     692:	16 a2       	std	Z+38, r1	; 0x26
     694:	ed ee       	ldi	r30, 0xED	; 237
     696:	f9 e1       	ldi	r31, 0x19	; 25
     698:	8d e0       	ldi	r24, 0x0D	; 13
     69a:	9a e1       	ldi	r25, 0x1A	; 26
     69c:	11 92       	st	Z+, r1
     69e:	11 92       	st	Z+, r1
     6a0:	e8 17       	cp	r30, r24
     6a2:	f9 07       	cpc	r31, r25
     6a4:	d9 f7       	brne	.-10     	; 0x69c <NWK_Init+0x18>
     6a6:	42 d6       	rcall	.+3204   	; 0x132c <nwkTxInit>
     6a8:	60 d3       	rcall	.+1728   	; 0xd6a <nwkRxInit>
     6aa:	0d d1       	rcall	.+538    	; 0x8c6 <nwkFrameInit>
     6ac:	40 d0       	rcall	.+128    	; 0x72e <nwkDataReqInit>
     6ae:	92 c1       	rjmp	.+804    	; 0x9d4 <nwkRouteInit>
     6b0:	08 95       	ret

000006b2 <NWK_SetAddr>:
     6b2:	90 93 e8 19 	sts	0x19E8, r25	; 0x8019e8 <nwkIb+0x1>
     6b6:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <nwkIb>
     6ba:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <PHY_SetShortAddr>
     6be:	08 95       	ret

000006c0 <NWK_SetPanId>:
     6c0:	90 93 ea 19 	sts	0x19EA, r25	; 0x8019ea <nwkIb+0x3>
     6c4:	80 93 e9 19 	sts	0x19E9, r24	; 0x8019e9 <nwkIb+0x2>
     6c8:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <PHY_SetPanId>
     6cc:	08 95       	ret

000006ce <NWK_OpenEndpoint>:
     6ce:	e8 2f       	mov	r30, r24
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	ee 0f       	add	r30, r30
     6d4:	ff 1f       	adc	r31, r31
     6d6:	e3 51       	subi	r30, 0x13	; 19
     6d8:	f6 4e       	sbci	r31, 0xE6	; 230
     6da:	71 83       	std	Z+1, r23	; 0x01
     6dc:	60 83       	st	Z, r22
     6de:	08 95       	ret

000006e0 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     6e0:	8b d3       	rcall	.+1814   	; 0xdf8 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     6e2:	20 d7       	rcall	.+3648   	; 0x1524 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     6e4:	4d c0       	rjmp	.+154    	; 0x780 <nwkDataReqTaskHandler>
     6e6:	08 95       	ret

000006e8 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6e8:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <nwkDataReqQueue>
     6ec:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     6f0:	30 97       	sbiw	r30, 0x00	; 0
     6f2:	d9 f0       	breq	.+54     	; 0x72a <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     6f4:	22 81       	ldd	r18, Z+2	; 0x02
     6f6:	33 81       	ldd	r19, Z+3	; 0x03
     6f8:	82 17       	cp	r24, r18
     6fa:	93 07       	cpc	r25, r19
     6fc:	89 f4       	brne	.+34     	; 0x720 <nwkDataReqTxConf+0x38>
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <nwkDataReqTxConf+0x22>
     700:	22 81       	ldd	r18, Z+2	; 0x02
     702:	33 81       	ldd	r19, Z+3	; 0x03
     704:	28 17       	cp	r18, r24
     706:	39 07       	cpc	r19, r25
     708:	59 f4       	brne	.+22     	; 0x720 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     70a:	dc 01       	movw	r26, r24
     70c:	ad 57       	subi	r26, 0x7D	; 125
     70e:	bf 4f       	sbci	r27, 0xFF	; 255
     710:	2c 91       	ld	r18, X
     712:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     714:	13 96       	adiw	r26, 0x03	; 3
     716:	2c 91       	ld	r18, X
     718:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     71a:	22 e0       	ldi	r18, 0x02	; 2
     71c:	24 83       	std	Z+4, r18	; 0x04
      break;
     71e:	05 c0       	rjmp	.+10     	; 0x72a <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     720:	01 90       	ld	r0, Z+
     722:	f0 81       	ld	r31, Z
     724:	e0 2d       	mov	r30, r0
     726:	30 97       	sbiw	r30, 0x00	; 0
     728:	59 f7       	brne	.-42     	; 0x700 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     72a:	11 c1       	rjmp	.+546    	; 0x94e <nwkFrameFree>
     72c:	08 95       	ret

0000072e <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     72e:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <nwkDataReqQueue+0x1>
     732:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <nwkDataReqQueue>
     736:	08 95       	ret

00000738 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     738:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     73a:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     73c:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     73e:	13 82       	std	Z+3, r1	; 0x03
     740:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     742:	a7 ee       	ldi	r26, 0xE7	; 231
     744:	b9 e1       	ldi	r27, 0x19	; 25
     746:	96 96       	adiw	r26, 0x26	; 38
     748:	8d 91       	ld	r24, X+
     74a:	9c 91       	ld	r25, X
     74c:	97 97       	sbiw	r26, 0x27	; 39
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	97 96       	adiw	r26, 0x27	; 39
     752:	9c 93       	st	X, r25
     754:	8e 93       	st	-X, r24
     756:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     758:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     75c:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     760:	00 97       	sbiw	r24, 0x00	; 0
     762:	39 f4       	brne	.+14     	; 0x772 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     764:	11 82       	std	Z+1, r1	; 0x01
     766:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     768:	f0 93 39 06 	sts	0x0639, r31	; 0x800639 <nwkDataReqQueue+0x1>
     76c:	e0 93 38 06 	sts	0x0638, r30	; 0x800638 <nwkDataReqQueue>
     770:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     772:	91 83       	std	Z+1, r25	; 0x01
     774:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     776:	f0 93 39 06 	sts	0x0639, r31	; 0x800639 <nwkDataReqQueue+0x1>
     77a:	e0 93 38 06 	sts	0x0638, r30	; 0x800638 <nwkDataReqQueue>
     77e:	08 95       	ret

00000780 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     788:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <nwkDataReqQueue>
     78c:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     790:	30 97       	sbiw	r30, 0x00	; 0
     792:	09 f4       	brne	.+2      	; 0x796 <nwkDataReqTaskHandler+0x16>
     794:	93 c0       	rjmp	.+294    	; 0x8bc <nwkDataReqTaskHandler+0x13c>
     796:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     798:	8c 81       	ldd	r24, Y+4	; 0x04
     79a:	88 23       	and	r24, r24
     79c:	21 f0       	breq	.+8      	; 0x7a6 <nwkDataReqTaskHandler+0x26>
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <nwkDataReqTaskHandler+0x24>
     7a2:	66 c0       	rjmp	.+204    	; 0x870 <nwkDataReqTaskHandler+0xf0>
     7a4:	85 c0       	rjmp	.+266    	; 0x8b0 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     7a6:	9a d0       	rcall	.+308    	; 0x8dc <nwkFrameAlloc>
     7a8:	8c 01       	movw	r16, r24
     7aa:	00 97       	sbiw	r24, 0x00	; 0
     7ac:	21 f4       	brne	.+8      	; 0x7b6 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     7b2:	8f 87       	std	Y+15, r24	; 0x0f
     7b4:	83 c0       	rjmp	.+262    	; 0x8bc <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     7b6:	9b 83       	std	Y+3, r25	; 0x03
     7b8:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     7be:	f8 01       	movw	r30, r16
     7c0:	e9 57       	subi	r30, 0x79	; 121
     7c2:	ff 4f       	sbci	r31, 0xFF	; 255
     7c4:	84 e7       	ldi	r24, 0x74	; 116
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	91 83       	std	Z+1, r25	; 0x01
     7ca:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     7cc:	31 97       	sbiw	r30, 0x01	; 1
     7ce:	89 85       	ldd	r24, Y+9	; 0x09
     7d0:	82 fb       	bst	r24, 2
     7d2:	88 27       	eor	r24, r24
     7d4:	80 f9       	bld	r24, 0
     7d6:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     7d8:	99 85       	ldd	r25, Y+9	; 0x09
     7da:	d8 01       	movw	r26, r16
     7dc:	1b 96       	adiw	r26, 0x0b	; 11
     7de:	8c 91       	ld	r24, X
     7e0:	1b 97       	sbiw	r26, 0x0b	; 11
     7e2:	90 fb       	bst	r25, 0
     7e4:	80 f9       	bld	r24, 0
     7e6:	1b 96       	adiw	r26, 0x0b	; 11
     7e8:	8c 93       	st	X, r24
     7ea:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     7ec:	99 85       	ldd	r25, Y+9	; 0x09
     7ee:	93 fb       	bst	r25, 3
     7f0:	99 27       	eor	r25, r25
     7f2:	90 f9       	bld	r25, 0
     7f4:	90 fb       	bst	r25, 0
     7f6:	82 f9       	bld	r24, 2
     7f8:	1b 96       	adiw	r26, 0x0b	; 11
     7fa:	8c 93       	st	X, r24
     7fc:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     7fe:	e7 ee       	ldi	r30, 0xE7	; 231
     800:	f9 e1       	ldi	r31, 0x19	; 25
     802:	84 81       	ldd	r24, Z+4	; 0x04
     804:	8f 5f       	subi	r24, 0xFF	; 255
     806:	84 83       	std	Z+4, r24	; 0x04
     808:	1c 96       	adiw	r26, 0x0c	; 12
     80a:	8c 93       	st	X, r24
     80c:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     80e:	80 81       	ld	r24, Z
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	1e 96       	adiw	r26, 0x0e	; 14
     814:	9c 93       	st	X, r25
     816:	8e 93       	st	-X, r24
     818:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     81a:	8d 81       	ldd	r24, Y+5	; 0x05
     81c:	9e 81       	ldd	r25, Y+6	; 0x06
     81e:	50 96       	adiw	r26, 0x10	; 16
     820:	9c 93       	st	X, r25
     822:	8e 93       	st	-X, r24
     824:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     826:	88 85       	ldd	r24, Y+8	; 0x08
     828:	98 2f       	mov	r25, r24
     82a:	9f 70       	andi	r25, 0x0F	; 15
     82c:	51 96       	adiw	r26, 0x11	; 17
     82e:	8c 91       	ld	r24, X
     830:	51 97       	sbiw	r26, 0x11	; 17
     832:	80 7f       	andi	r24, 0xF0	; 240
     834:	89 2b       	or	r24, r25
     836:	51 96       	adiw	r26, 0x11	; 17
     838:	8c 93       	st	X, r24
     83a:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     83c:	9f 81       	ldd	r25, Y+7	; 0x07
     83e:	92 95       	swap	r25
     840:	90 7f       	andi	r25, 0xF0	; 240
     842:	8f 70       	andi	r24, 0x0F	; 15
     844:	89 2b       	or	r24, r25
     846:	51 96       	adiw	r26, 0x11	; 17
     848:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     84a:	f8 01       	movw	r30, r16
     84c:	ef 57       	subi	r30, 0x7F	; 127
     84e:	ff 4f       	sbci	r31, 0xFF	; 255
     850:	4c 85       	ldd	r20, Y+12	; 0x0c
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	6a 85       	ldd	r22, Y+10	; 0x0a
     856:	7b 85       	ldd	r23, Y+11	; 0x0b
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <memcpy>
  frame->size += req->size;
     860:	f8 01       	movw	r30, r16
     862:	91 81       	ldd	r25, Z+1	; 0x01
     864:	8c 85       	ldd	r24, Y+12	; 0x0c
     866:	89 0f       	add	r24, r25
     868:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     86a:	c8 01       	movw	r24, r16
     86c:	82 d5       	rcall	.+2820   	; 0x1372 <nwkTxFrame>
     86e:	26 c0       	rjmp	.+76     	; 0x8bc <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     870:	ec 17       	cp	r30, r28
     872:	fd 07       	cpc	r31, r29
     874:	41 f4       	brne	.+16     	; 0x886 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <nwkDataReqQueue+0x1>
     87e:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <nwkDataReqQueue>
     882:	0a c0       	rjmp	.+20     	; 0x898 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     884:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     886:	80 81       	ld	r24, Z
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	8c 17       	cp	r24, r28
     88c:	9d 07       	cpc	r25, r29
     88e:	d1 f7       	brne	.-12     	; 0x884 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     890:	88 81       	ld	r24, Y
     892:	99 81       	ldd	r25, Y+1	; 0x01
     894:	91 83       	std	Z+1, r25	; 0x01
     896:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     898:	e7 ee       	ldi	r30, 0xE7	; 231
     89a:	f9 e1       	ldi	r31, 0x19	; 25
     89c:	86 a1       	ldd	r24, Z+38	; 0x26
     89e:	97 a1       	ldd	r25, Z+39	; 0x27
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	97 a3       	std	Z+39, r25	; 0x27
     8a4:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     8a6:	ed 85       	ldd	r30, Y+13	; 0x0d
     8a8:	fe 85       	ldd	r31, Y+14	; 0x0e
     8aa:	ce 01       	movw	r24, r28
     8ac:	19 95       	eicall
     8ae:	06 c0       	rjmp	.+12     	; 0x8bc <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     8b0:	09 90       	ld	r0, Y+
     8b2:	d8 81       	ld	r29, Y
     8b4:	c0 2d       	mov	r28, r0
     8b6:	20 97       	sbiw	r28, 0x00	; 0
     8b8:	09 f0       	breq	.+2      	; 0x8bc <nwkDataReqTaskHandler+0x13c>
     8ba:	6e cf       	rjmp	.-292    	; 0x798 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	08 95       	ret

000008c6 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     8c6:	ea e3       	ldi	r30, 0x3A	; 58
     8c8:	f6 e0       	ldi	r31, 0x06	; 6
     8ca:	88 e4       	ldi	r24, 0x48	; 72
     8cc:	96 e1       	ldi	r25, 0x16	; 22
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     8ce:	10 82       	st	Z, r1
     8d0:	e7 57       	subi	r30, 0x77	; 119
     8d2:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     8d4:	e8 17       	cp	r30, r24
     8d6:	f9 07       	cpc	r31, r25
     8d8:	d1 f7       	brne	.-12     	; 0x8ce <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     8da:	08 95       	ret

000008dc <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     8dc:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <nwkFrameFrames>
     8e0:	88 23       	and	r24, r24
     8e2:	59 f0       	breq	.+22     	; 0x8fa <nwkFrameAlloc+0x1e>
     8e4:	e3 ec       	ldi	r30, 0xC3	; 195
     8e6:	f6 e0       	ldi	r31, 0x06	; 6
     8e8:	68 e4       	ldi	r22, 0x48	; 72
     8ea:	76 e1       	ldi	r23, 0x16	; 22
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	ac 01       	movw	r20, r24
     8f2:	20 81       	ld	r18, Z
     8f4:	21 11       	cpse	r18, r1
     8f6:	22 c0       	rjmp	.+68     	; 0x93c <nwkFrameAlloc+0x60>
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <nwkFrameAlloc+0x22>
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     8fe:	69 e8       	ldi	r22, 0x89	; 137
     900:	64 9f       	mul	r22, r20
     902:	90 01       	movw	r18, r0
     904:	65 9f       	mul	r22, r21
     906:	30 0d       	add	r19, r0
     908:	11 24       	eor	r1, r1
     90a:	c9 01       	movw	r24, r18
     90c:	86 5c       	subi	r24, 0xC6	; 198
     90e:	99 4f       	sbci	r25, 0xF9	; 249
     910:	fc 01       	movw	r30, r24
     912:	11 92       	st	Z+, r1
     914:	6a 95       	dec	r22
     916:	e9 f7       	brne	.-6      	; 0x912 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     918:	40 e1       	ldi	r20, 0x10	; 16
     91a:	fc 01       	movw	r30, r24
     91c:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     91e:	ef 57       	subi	r30, 0x7F	; 127
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	24 5b       	subi	r18, 0xB4	; 180
     924:	39 4f       	sbci	r19, 0xF9	; 249
     926:	31 83       	std	Z+1, r19	; 0x01
     928:	20 83       	st	Z, r18
      nwkIb.lock++;
     92a:	e7 ee       	ldi	r30, 0xE7	; 231
     92c:	f9 e1       	ldi	r31, 0x19	; 25
     92e:	26 a1       	ldd	r18, Z+38	; 0x26
     930:	37 a1       	ldd	r19, Z+39	; 0x27
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	37 a3       	std	Z+39, r19	; 0x27
     938:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     93a:	08 95       	ret
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	e7 57       	subi	r30, 0x77	; 119
     940:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     942:	e6 17       	cp	r30, r22
     944:	f7 07       	cpc	r31, r23
     946:	a1 f6       	brne	.-88     	; 0x8f0 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
}
     94c:	08 95       	ret

0000094e <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     94e:	fc 01       	movw	r30, r24
     950:	10 82       	st	Z, r1
  nwkIb.lock--;
     952:	e7 ee       	ldi	r30, 0xE7	; 231
     954:	f9 e1       	ldi	r31, 0x19	; 25
     956:	86 a1       	ldd	r24, Z+38	; 0x26
     958:	97 a1       	ldd	r25, Z+39	; 0x27
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	97 a3       	std	Z+39, r25	; 0x27
     95e:	86 a3       	std	Z+38, r24	; 0x26
     960:	08 95       	ret

00000962 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	41 f0       	breq	.+16     	; 0x976 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     966:	fc 01       	movw	r30, r24
     968:	e7 57       	subi	r30, 0x77	; 119
     96a:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     96c:	86 e1       	ldi	r24, 0x16	; 22
     96e:	e8 34       	cpi	r30, 0x48	; 72
     970:	f8 07       	cpc	r31, r24
     972:	18 f0       	brcs	.+6      	; 0x97a <nwkFrameNext+0x18>
     974:	12 c0       	rjmp	.+36     	; 0x99a <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     976:	ea e3       	ldi	r30, 0x3A	; 58
     978:	f6 e0       	ldi	r31, 0x06	; 6
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     97a:	80 81       	ld	r24, Z
     97c:	88 23       	and	r24, r24
     97e:	21 f0       	breq	.+8      	; 0x988 <nwkFrameNext+0x26>
     980:	0f c0       	rjmp	.+30     	; 0x9a0 <nwkFrameNext+0x3e>
     982:	80 81       	ld	r24, Z
     984:	81 11       	cpse	r24, r1
     986:	0f c0       	rjmp	.+30     	; 0x9a6 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     988:	e7 57       	subi	r30, 0x77	; 119
     98a:	ff 4f       	sbci	r31, 0xFF	; 255
     98c:	86 e1       	ldi	r24, 0x16	; 22
     98e:	e8 34       	cpi	r30, 0x48	; 72
     990:	f8 07       	cpc	r31, r24
     992:	b8 f3       	brcs	.-18     	; 0x982 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	08 95       	ret
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     9a0:	8e 2f       	mov	r24, r30
     9a2:	9f 2f       	mov	r25, r31
     9a4:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9a6:	8e 2f       	mov	r24, r30
     9a8:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     9aa:	08 95       	ret

000009ac <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     9ac:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     9ae:	dc 01       	movw	r26, r24
     9b0:	ad 57       	subi	r26, 0x7D	; 125
     9b2:	bf 4f       	sbci	r27, 0xFF	; 255
     9b4:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     9b6:	a7 ee       	ldi	r26, 0xE7	; 231
     9b8:	b9 e1       	ldi	r27, 0x19	; 25
     9ba:	14 96       	adiw	r26, 0x04	; 4
     9bc:	9c 91       	ld	r25, X
     9be:	14 97       	sbiw	r26, 0x04	; 4
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
     9c2:	14 96       	adiw	r26, 0x04	; 4
     9c4:	9c 93       	st	X, r25
     9c6:	14 97       	sbiw	r26, 0x04	; 4
     9c8:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     9ca:	8d 91       	ld	r24, X+
     9cc:	9c 91       	ld	r25, X
     9ce:	96 87       	std	Z+14, r25	; 0x0e
     9d0:	85 87       	std	Z+13, r24	; 0x0d
     9d2:	08 95       	ret

000009d4 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     9d4:	a9 e4       	ldi	r26, 0x49	; 73
     9d6:	b6 e1       	ldi	r27, 0x16	; 22
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	4f ef       	ldi	r20, 0xFF	; 255
     9de:	5f ef       	ldi	r21, 0xFF	; 255
     9e0:	11 96       	adiw	r26, 0x01	; 1
     9e2:	5c 93       	st	X, r21
     9e4:	4e 93       	st	-X, r20
     9e6:	fc 01       	movw	r30, r24
     9e8:	ee 0f       	add	r30, r30
     9ea:	ff 1f       	adc	r31, r31
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	e8 1b       	sub	r30, r24
     9f6:	f9 0b       	sbc	r31, r25
     9f8:	e8 5b       	subi	r30, 0xB8	; 184
     9fa:	f9 4e       	sbci	r31, 0xE9	; 233
     9fc:	20 81       	ld	r18, Z
     9fe:	2e 7f       	andi	r18, 0xFE	; 254
     a00:	20 83       	st	Z, r18
     a02:	14 96       	adiw	r26, 0x04	; 4
     a04:	1c 92       	st	X, r1
     a06:	14 97       	sbiw	r26, 0x04	; 4
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	17 96       	adiw	r26, 0x07	; 7
     a0c:	84 36       	cpi	r24, 0x64	; 100
     a0e:	91 05       	cpc	r25, r1
     a10:	39 f7       	brne	.-50     	; 0x9e0 <nwkRouteInit+0xc>
     a12:	08 95       	ret

00000a14 <NWK_RouteFindEntry>:
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	e9 e4       	ldi	r30, 0x49	; 73
     a1e:	f6 e1       	ldi	r31, 0x16	; 22
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	06 2f       	mov	r16, r22
     a26:	10 e0       	ldi	r17, 0x00	; 0
     a28:	40 81       	ld	r20, Z
     a2a:	51 81       	ldd	r21, Z+1	; 0x01
     a2c:	48 17       	cp	r20, r24
     a2e:	59 07       	cpc	r21, r25
     a30:	b1 f4       	brne	.+44     	; 0xa5e <NWK_RouteFindEntry+0x4a>
     a32:	d9 01       	movw	r26, r18
     a34:	aa 0f       	add	r26, r26
     a36:	bb 1f       	adc	r27, r27
     a38:	aa 0f       	add	r26, r26
     a3a:	bb 1f       	adc	r27, r27
     a3c:	aa 0f       	add	r26, r26
     a3e:	bb 1f       	adc	r27, r27
     a40:	a2 1b       	sub	r26, r18
     a42:	b3 0b       	sbc	r27, r19
     a44:	a8 5b       	subi	r26, 0xB8	; 184
     a46:	b9 4e       	sbci	r27, 0xE9	; 233
     a48:	4c 91       	ld	r20, X
     a4a:	46 95       	lsr	r20
     a4c:	41 70       	andi	r20, 0x01	; 1
     a4e:	c4 2f       	mov	r28, r20
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	d4 2f       	mov	r29, r20
     a54:	c0 17       	cp	r28, r16
     a56:	d1 07       	cpc	r29, r17
     a58:	11 f4       	brne	.+4      	; 0xa5e <NWK_RouteFindEntry+0x4a>
     a5a:	cd 01       	movw	r24, r26
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <NWK_RouteFindEntry+0x5a>
     a5e:	2f 5f       	subi	r18, 0xFF	; 255
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	37 96       	adiw	r30, 0x07	; 7
     a64:	24 36       	cpi	r18, 0x64	; 100
     a66:	31 05       	cpc	r19, r1
     a68:	f9 f6       	brne	.-66     	; 0xa28 <NWK_RouteFindEntry+0x14>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	08 95       	ret

00000a78 <NWK_RouteNewEntry>:
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	e8 e4       	ldi	r30, 0x48	; 72
     a7e:	f6 e1       	ldi	r31, 0x16	; 22
     a80:	80 81       	ld	r24, Z
     a82:	80 fd       	sbrc	r24, 0
     a84:	0d c0       	rjmp	.+26     	; 0xaa0 <NWK_RouteNewEntry+0x28>
     a86:	85 81       	ldd	r24, Z+5	; 0x05
     a88:	88 23       	and	r24, r24
     a8a:	81 f0       	breq	.+32     	; 0xaac <NWK_RouteNewEntry+0x34>
     a8c:	10 97       	sbiw	r26, 0x00	; 0
     a8e:	39 f0       	breq	.+14     	; 0xa9e <NWK_RouteNewEntry+0x26>
     a90:	15 96       	adiw	r26, 0x05	; 5
     a92:	9c 91       	ld	r25, X
     a94:	15 97       	sbiw	r26, 0x05	; 5
     a96:	89 17       	cp	r24, r25
     a98:	18 f4       	brcc	.+6      	; 0xaa0 <NWK_RouteNewEntry+0x28>
     a9a:	df 01       	movw	r26, r30
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <NWK_RouteNewEntry+0x28>
     a9e:	df 01       	movw	r26, r30
     aa0:	37 96       	adiw	r30, 0x07	; 7
     aa2:	89 e1       	ldi	r24, 0x19	; 25
     aa4:	e4 30       	cpi	r30, 0x04	; 4
     aa6:	f8 07       	cpc	r31, r24
     aa8:	59 f7       	brne	.-42     	; 0xa80 <NWK_RouteNewEntry+0x8>
     aaa:	fd 01       	movw	r30, r26
     aac:	80 81       	ld	r24, Z
     aae:	8d 70       	andi	r24, 0x0D	; 13
     ab0:	80 63       	ori	r24, 0x30	; 48
     ab2:	80 83       	st	Z, r24
     ab4:	80 e8       	ldi	r24, 0x80	; 128
     ab6:	85 83       	std	Z+5, r24	; 0x05
     ab8:	cf 01       	movw	r24, r30
     aba:	08 95       	ret

00000abc <NWK_RouteFreeEntry>:
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	80 fd       	sbrc	r24, 0
     ac2:	05 c0       	rjmp	.+10     	; 0xace <NWK_RouteFreeEntry+0x12>
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	9f ef       	ldi	r25, 0xFF	; 255
     ac8:	92 83       	std	Z+2, r25	; 0x02
     aca:	81 83       	std	Z+1, r24	; 0x01
     acc:	15 82       	std	Z+5, r1	; 0x05
     ace:	08 95       	ret

00000ad0 <NWK_RouteNextHop>:
     ad0:	a1 df       	rcall	.-190    	; 0xa14 <NWK_RouteFindEntry>
     ad2:	00 97       	sbiw	r24, 0x00	; 0
     ad4:	21 f0       	breq	.+8      	; 0xade <NWK_RouteNextHop+0xe>
     ad6:	fc 01       	movw	r30, r24
     ad8:	83 81       	ldd	r24, Z+3	; 0x03
     ada:	94 81       	ldd	r25, Z+4	; 0x04
     adc:	08 95       	ret
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	9f ef       	ldi	r25, 0xFF	; 255
     ae2:	08 95       	ret

00000ae4 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     ae4:	97 df       	rcall	.-210    	; 0xa14 <NWK_RouteFindEntry>
  if (entry)
     ae6:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     ae8:	09 f0       	breq	.+2      	; 0xaec <nwkRouteRemove+0x8>
     aea:	e8 cf       	rjmp	.-48     	; 0xabc <NWK_RouteFreeEntry>
     aec:	08 95       	ret

00000aee <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     af8:	01 85       	ldd	r16, Z+9	; 0x09
     afa:	12 85       	ldd	r17, Z+10	; 0x0a
     afc:	11 23       	and	r17, r17
     afe:	2c f4       	brge	.+10     	; 0xb0a <nwkRouteFrameReceived+0x1c>
     b00:	85 85       	ldd	r24, Z+13	; 0x0d
     b02:	96 85       	ldd	r25, Z+14	; 0x0e
     b04:	08 17       	cp	r16, r24
     b06:	19 07       	cpc	r17, r25
     b08:	e1 f5       	brne	.+120    	; 0xb82 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     b0a:	85 81       	ldd	r24, Z+5	; 0x05
     b0c:	96 81       	ldd	r25, Z+6	; 0x06
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	c1 f1       	breq	.+112    	; 0xb82 <nwkRouteFrameReceived+0x94>
     b12:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	85 85       	ldd	r24, Z+13	; 0x0d
     b18:	96 85       	ldd	r25, Z+14	; 0x0e
     b1a:	7c df       	rcall	.-264    	; 0xa14 <NWK_RouteFindEntry>
     b1c:	fc 01       	movw	r30, r24

  if (entry)
     b1e:	89 2b       	or	r24, r25
     b20:	a1 f0       	breq	.+40     	; 0xb4a <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     b22:	8f 81       	ldd	r24, Y+7	; 0x07
     b24:	98 85       	ldd	r25, Y+8	; 0x08
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	f9 f4       	brne	.+62     	; 0xb68 <nwkRouteFrameReceived+0x7a>
     b2a:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
     b2e:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
     b32:	8f 85       	ldd	r24, Y+15	; 0x0f
     b34:	98 89       	ldd	r25, Y+16	; 0x10
     b36:	28 17       	cp	r18, r24
     b38:	39 07       	cpc	r19, r25
     b3a:	b1 f4       	brne	.+44     	; 0xb68 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     b3c:	14 83       	std	Z+4, r17	; 0x04
     b3e:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     b40:	80 81       	ld	r24, Z
     b42:	8f 70       	andi	r24, 0x0F	; 15
     b44:	80 63       	ori	r24, 0x30	; 48
     b46:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     b48:	0a c0       	rjmp	.+20     	; 0xb5e <nwkRouteFrameReceived+0x70>
     b4a:	96 df       	rcall	.-212    	; 0xa78 <NWK_RouteNewEntry>
     b4c:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b50:	9e 85       	ldd	r25, Y+14	; 0x0e
     b52:	92 83       	std	Z+2, r25	; 0x02
     b54:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     b56:	89 85       	ldd	r24, Y+9	; 0x09
     b58:	9a 85       	ldd	r25, Y+10	; 0x0a
     b5a:	94 83       	std	Z+4, r25	; 0x04
     b5c:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     b5e:	cd 57       	subi	r28, 0x7D	; 125
     b60:	df 4f       	sbci	r29, 0xFF	; 255
     b62:	88 81       	ld	r24, Y
     b64:	86 83       	std	Z+6, r24	; 0x06
     b66:	0d c0       	rjmp	.+26     	; 0xb82 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     b68:	83 81       	ldd	r24, Z+3	; 0x03
     b6a:	94 81       	ldd	r25, Z+4	; 0x04
     b6c:	08 17       	cp	r16, r24
     b6e:	19 07       	cpc	r17, r25
     b70:	b1 f3       	breq	.-20     	; 0xb5e <nwkRouteFrameReceived+0x70>
     b72:	96 81       	ldd	r25, Z+6	; 0x06
     b74:	de 01       	movw	r26, r28
     b76:	ad 57       	subi	r26, 0x7D	; 125
     b78:	bf 4f       	sbci	r27, 0xFF	; 255
     b7a:	8c 91       	ld	r24, X
     b7c:	98 17       	cp	r25, r24
     b7e:	f0 f2       	brcs	.-68     	; 0xb3c <nwkRouteFrameReceived+0x4e>
     b80:	ee cf       	rjmp	.-36     	; 0xb5e <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     b92:	87 85       	ldd	r24, Z+15	; 0x0f
     b94:	90 89       	ldd	r25, Z+16	; 0x10
     b96:	8f 3f       	cpi	r24, 0xFF	; 255
     b98:	2f ef       	ldi	r18, 0xFF	; 255
     b9a:	92 07       	cpc	r25, r18
     b9c:	d9 f1       	breq	.+118    	; 0xc14 <nwkRouteFrameSent+0x88>
     b9e:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     ba0:	63 85       	ldd	r22, Z+11	; 0x0b
     ba2:	63 fb       	bst	r22, 3
     ba4:	66 27       	eor	r22, r22
     ba6:	60 f9       	bld	r22, 0
     ba8:	35 df       	rcall	.-406    	; 0xa14 <NWK_RouteFindEntry>
     baa:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     bac:	89 2b       	or	r24, r25
     bae:	91 f1       	breq	.+100    	; 0xc14 <nwkRouteFrameSent+0x88>
     bb0:	8c 91       	ld	r24, X
     bb2:	80 fd       	sbrc	r24, 0
     bb4:	2f c0       	rjmp	.+94     	; 0xc14 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     bb6:	fe 01       	movw	r30, r28
     bb8:	ed 57       	subi	r30, 0x7D	; 125
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	80 81       	ld	r24, Z
     bbe:	81 11       	cpse	r24, r1
     bc0:	19 c0       	rjmp	.+50     	; 0xbf4 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     bc2:	8c 91       	ld	r24, X
     bc4:	8f 70       	andi	r24, 0x0F	; 15
     bc6:	80 63       	ori	r24, 0x30	; 48
     bc8:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     bca:	15 96       	adiw	r26, 0x05	; 5
     bcc:	8c 91       	ld	r24, X
     bce:	15 97       	sbiw	r26, 0x05	; 5
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
     bd2:	15 96       	adiw	r26, 0x05	; 5
     bd4:	8c 93       	st	X, r24
     bd6:	8f 3f       	cpi	r24, 0xFF	; 255
     bd8:	e9 f4       	brne	.+58     	; 0xc14 <nwkRouteFrameSent+0x88>
     bda:	ed e4       	ldi	r30, 0x4D	; 77
     bdc:	f6 e1       	ldi	r31, 0x16	; 22
     bde:	29 e0       	ldi	r18, 0x09	; 9
     be0:	39 e1       	ldi	r19, 0x19	; 25
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     be2:	80 81       	ld	r24, Z
     be4:	86 95       	lsr	r24
     be6:	8f 5f       	subi	r24, 0xFF	; 255
     be8:	80 83       	st	Z, r24
     bea:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     bec:	e2 17       	cp	r30, r18
     bee:	f3 07       	cpc	r31, r19
     bf0:	c1 f7       	brne	.-16     	; 0xbe2 <nwkRouteFrameSent+0x56>
     bf2:	10 c0       	rjmp	.+32     	; 0xc14 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     bf4:	9c 91       	ld	r25, X
     bf6:	89 2f       	mov	r24, r25
     bf8:	82 95       	swap	r24
     bfa:	8f 70       	andi	r24, 0x0F	; 15
     bfc:	81 5f       	subi	r24, 0xF1	; 241
     bfe:	8f 70       	andi	r24, 0x0F	; 15
     c00:	28 2f       	mov	r18, r24
     c02:	22 95       	swap	r18
     c04:	20 7f       	andi	r18, 0xF0	; 240
     c06:	9f 70       	andi	r25, 0x0F	; 15
     c08:	92 2b       	or	r25, r18
     c0a:	9c 93       	st	X, r25
     c0c:	81 11       	cpse	r24, r1
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     c10:	cd 01       	movw	r24, r26
     c12:	54 df       	rcall	.-344    	; 0xabc <NWK_RouteFreeEntry>
  }
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c20:	87 85       	ldd	r24, Z+15	; 0x0f
     c22:	90 89       	ldd	r25, Z+16	; 0x10
     c24:	8f 3f       	cpi	r24, 0xFF	; 255
     c26:	2f ef       	ldi	r18, 0xFF	; 255
     c28:	92 07       	cpc	r25, r18
     c2a:	29 f4       	brne	.+10     	; 0xc36 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	9f ef       	ldi	r25, 0xFF	; 255
     c30:	90 87       	std	Z+8, r25	; 0x08
     c32:	87 83       	std	Z+7, r24	; 0x07
     c34:	0e c0       	rjmp	.+28     	; 0xc52 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     c36:	23 85       	ldd	r18, Z+11	; 0x0b
     c38:	22 ff       	sbrs	r18, 2
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     c3c:	90 87       	std	Z+8, r25	; 0x08
     c3e:	87 83       	std	Z+7, r24	; 0x07
     c40:	08 c0       	rjmp	.+16     	; 0xc52 <nwkRoutePrepareTx+0x38>
     c42:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     c44:	63 85       	ldd	r22, Z+11	; 0x0b
     c46:	63 fb       	bst	r22, 3
     c48:	66 27       	eor	r22, r22
     c4a:	60 f9       	bld	r22, 0
     c4c:	41 df       	rcall	.-382    	; 0xad0 <NWK_RouteNextHop>
     c4e:	98 87       	std	Y+8, r25	; 0x08
     c50:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     c58:	af 92       	push	r10
     c5a:	bf 92       	push	r11
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     c6c:	1b 85       	ldd	r17, Y+11	; 0x0b
     c6e:	13 fb       	bst	r17, 3
     c70:	11 27       	eor	r17, r17
     c72:	10 f9       	bld	r17, 0
     c74:	cf 84       	ldd	r12, Y+15	; 0x0f
     c76:	d8 88       	ldd	r13, Y+16	; 0x10
     c78:	61 2f       	mov	r22, r17
     c7a:	c6 01       	movw	r24, r12
     c7c:	29 df       	rcall	.-430    	; 0xad0 <NWK_RouteNextHop>
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	59 f0       	breq	.+22     	; 0xc98 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     c82:	fe 01       	movw	r30, r28
     c84:	e9 57       	subi	r30, 0x79	; 121
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	11 82       	std	Z+1, r1	; 0x01
     c8a:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     c8c:	31 97       	sbiw	r30, 0x01	; 1
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     c92:	ce 01       	movw	r24, r28
     c94:	6e d3       	rcall	.+1756   	; 0x1372 <nwkTxFrame>
     c96:	22 c0       	rjmp	.+68     	; 0xcdc <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     c98:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     c9a:	be 84       	ldd	r11, Y+14	; 0x0e
     c9c:	1f de       	rcall	.-962    	; 0x8dc <nwkFrameAlloc>
     c9e:	7c 01       	movw	r14, r24
     ca0:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     ca2:	d1 f0       	breq	.+52     	; 0xcd8 <nwkRouteFrame+0x80>
     ca4:	83 de       	rcall	.-762    	; 0x9ac <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     ca6:	f7 01       	movw	r30, r14
     ca8:	81 81       	ldd	r24, Z+1	; 0x01
     caa:	8a 5f       	subi	r24, 0xFA	; 250
     cac:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     cae:	e9 57       	subi	r30, 0x79	; 121
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	11 82       	std	Z+1, r1	; 0x01
     cb4:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     cb6:	f7 01       	movw	r30, r14
     cb8:	b0 8a       	std	Z+16, r11	; 0x10
     cba:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     cbc:	ef 57       	subi	r30, 0x7F	; 127
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	01 90       	ld	r0, Z+
     cc2:	f0 81       	ld	r31, Z
     cc4:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	80 83       	st	Z, r24
  command->srcAddr = src;
     cca:	b2 82       	std	Z+2, r11	; 0x02
     ccc:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     cce:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     cd0:	c3 82       	std	Z+3, r12	; 0x03
     cd2:	15 83       	std	Z+5, r17	; 0x05
     cd4:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     cd6:	4d d3       	rcall	.+1690   	; 0x1372 <nwkTxFrame>
     cd8:	ce 01       	movw	r24, r28
     cda:	39 de       	rcall	.-910    	; 0x94e <nwkFrameFree>
  }
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	bf 90       	pop	r11
     cec:	af 90       	pop	r10
     cee:	08 95       	ret

00000cf0 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     cf0:	fc 01       	movw	r30, r24
     cf2:	21 85       	ldd	r18, Z+9	; 0x09
     cf4:	26 30       	cpi	r18, 0x06	; 6
     cf6:	49 f4       	brne	.+18     	; 0xd0a <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     cf8:	07 80       	ldd	r0, Z+7	; 0x07
     cfa:	f0 85       	ldd	r31, Z+8	; 0x08
     cfc:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     cfe:	65 81       	ldd	r22, Z+5	; 0x05
     d00:	83 81       	ldd	r24, Z+3	; 0x03
     d02:	94 81       	ldd	r25, Z+4	; 0x04
     d04:	ef de       	rcall	.-546    	; 0xae4 <nwkRouteRemove>

  return true;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     d0a:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     d0c:	08 95       	ret

00000d0e <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     d0e:	dc 01       	movw	r26, r24
     d10:	19 96       	adiw	r26, 0x09	; 9
     d12:	2c 91       	ld	r18, X
     d14:	19 97       	sbiw	r26, 0x09	; 9
     d16:	22 23       	and	r18, r18
     d18:	71 f0       	breq	.+28     	; 0xd36 <nwkRxServiceDataInd+0x28>
     d1a:	17 96       	adiw	r26, 0x07	; 7
     d1c:	ed 91       	ld	r30, X+
     d1e:	fc 91       	ld	r31, X
     d20:	18 97       	sbiw	r26, 0x08	; 8
     d22:	20 81       	ld	r18, Z
     d24:	22 23       	and	r18, r18
     d26:	19 f0       	breq	.+6      	; 0xd2e <nwkRxServiceDataInd+0x20>
     d28:	21 30       	cpi	r18, 0x01	; 1
     d2a:	19 f0       	breq	.+6      	; 0xd32 <nwkRxServiceDataInd+0x24>
     d2c:	06 c0       	rjmp	.+12     	; 0xd3a <nwkRxServiceDataInd+0x2c>
     d2e:	b2 c3       	rjmp	.+1892   	; 0x1494 <nwkTxAckReceived>
     d30:	08 95       	ret
     d32:	de cf       	rjmp	.-68     	; 0xcf0 <nwkRouteErrorReceived>
     d34:	08 95       	ret
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	08 95       	ret
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	08 95       	ret

00000d3e <nwkRxDuplicateRejectionTimerHandler>:
     d3e:	bc 01       	movw	r22, r24
     d40:	e6 e1       	ldi	r30, 0x16	; 22
     d42:	f9 e1       	ldi	r31, 0x19	; 25
     d44:	28 e4       	ldi	r18, 0x48	; 72
     d46:	39 e1       	ldi	r19, 0x19	; 25
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	51 e0       	ldi	r21, 0x01	; 1
     d4c:	90 81       	ld	r25, Z
     d4e:	99 23       	and	r25, r25
     d50:	19 f0       	breq	.+6      	; 0xd58 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     d52:	91 50       	subi	r25, 0x01	; 1
     d54:	90 83       	st	Z, r25
     d56:	45 2f       	mov	r20, r21
     d58:	35 96       	adiw	r30, 0x05	; 5
     d5a:	e2 17       	cp	r30, r18
     d5c:	f3 07       	cpc	r31, r19
     d5e:	b1 f7       	brne	.-20     	; 0xd4c <nwkRxDuplicateRejectionTimerHandler+0xe>
     d60:	44 23       	and	r20, r20
     d62:	11 f0       	breq	.+4      	; 0xd68 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     d64:	cb 01       	movw	r24, r22
     d66:	6d c6       	rjmp	.+3290   	; 0x1a42 <SYS_TimerStart>
     d68:	08 95       	ret

00000d6a <nwkRxInit>:
     d6a:	e6 e1       	ldi	r30, 0x16	; 22
     d6c:	f9 e1       	ldi	r31, 0x19	; 25
     d6e:	88 e4       	ldi	r24, 0x48	; 72
     d70:	99 e1       	ldi	r25, 0x19	; 25
     d72:	10 82       	st	Z, r1
     d74:	35 96       	adiw	r30, 0x05	; 5
     d76:	e8 17       	cp	r30, r24
     d78:	f9 07       	cpc	r31, r25
     d7a:	d9 f7       	brne	.-10     	; 0xd72 <nwkRxInit+0x8>
     d7c:	e4 e0       	ldi	r30, 0x04	; 4
     d7e:	f9 e1       	ldi	r31, 0x19	; 25
     d80:	84 e6       	ldi	r24, 0x64	; 100
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	a0 e0       	ldi	r26, 0x00	; 0
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	86 83       	std	Z+6, r24	; 0x06
     d8a:	97 83       	std	Z+7, r25	; 0x07
     d8c:	a0 87       	std	Z+8, r26	; 0x08
     d8e:	b1 87       	std	Z+9, r27	; 0x09
     d90:	12 86       	std	Z+10, r1	; 0x0a
     d92:	8f e9       	ldi	r24, 0x9F	; 159
     d94:	96 e0       	ldi	r25, 0x06	; 6
     d96:	94 87       	std	Z+12, r25	; 0x0c
     d98:	83 87       	std	Z+11, r24	; 0x0b
     d9a:	67 e8       	ldi	r22, 0x87	; 135
     d9c:	76 e0       	ldi	r23, 0x06	; 6
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	96 cc       	rjmp	.-1748   	; 0x6ce <NWK_OpenEndpoint>
     da2:	08 95       	ret

00000da4 <PHY_DataInd>:
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	dc 01       	movw	r26, r24
     daa:	ed 91       	ld	r30, X+
     dac:	fc 91       	ld	r31, X
     dae:	11 97       	sbiw	r26, 0x01	; 1
     db0:	21 81       	ldd	r18, Z+1	; 0x01
     db2:	28 38       	cpi	r18, 0x88	; 136
     db4:	f1 f4       	brne	.+60     	; 0xdf2 <PHY_DataInd+0x4e>
     db6:	20 81       	ld	r18, Z
     db8:	2f 7d       	andi	r18, 0xDF	; 223
     dba:	21 34       	cpi	r18, 0x41	; 65
     dbc:	d1 f4       	brne	.+52     	; 0xdf2 <PHY_DataInd+0x4e>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2c 91       	ld	r18, X
     dc2:	20 31       	cpi	r18, 0x10	; 16
     dc4:	b0 f0       	brcs	.+44     	; 0xdf2 <PHY_DataInd+0x4e>
     dc6:	ec 01       	movw	r28, r24
     dc8:	89 dd       	rcall	.-1262   	; 0x8dc <nwkFrameAlloc>
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	91 f0       	breq	.+36     	; 0xdf2 <PHY_DataInd+0x4e>
     dce:	20 e2       	ldi	r18, 0x20	; 32
     dd0:	fc 01       	movw	r30, r24
     dd2:	20 83       	st	Z, r18
     dd4:	2a 81       	ldd	r18, Y+2	; 0x02
     dd6:	21 83       	std	Z+1, r18	; 0x01
     dd8:	2b 81       	ldd	r18, Y+3	; 0x03
     dda:	ed 57       	subi	r30, 0x7D	; 125
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	20 83       	st	Z, r18
     de0:	2c 81       	ldd	r18, Y+4	; 0x04
     de2:	31 96       	adiw	r30, 0x01	; 1
     de4:	20 83       	st	Z, r18
     de6:	4a 81       	ldd	r20, Y+2	; 0x02
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	68 81       	ld	r22, Y
     dec:	79 81       	ldd	r23, Y+1	; 0x01
     dee:	02 96       	adiw	r24, 0x02	; 2
     df0:	15 d7       	rcall	.+3626   	; 0x1c1c <memcpy>
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     df8:	2f 92       	push	r2
     dfa:	3f 92       	push	r3
     dfc:	4f 92       	push	r4
     dfe:	5f 92       	push	r5
     e00:	6f 92       	push	r6
     e02:	7f 92       	push	r7
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	2c 97       	sbiw	r28, 0x0c	; 12
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     e2c:	00 e0       	ldi	r16, 0x00	; 0
     e2e:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     e30:	0f 2e       	mov	r0, r31
     e32:	f4 e2       	ldi	r31, 0x24	; 36
     e34:	bf 2e       	mov	r11, r31
     e36:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     e38:	0f 2e       	mov	r0, r31
     e3a:	f7 ee       	ldi	r31, 0xE7	; 231
     e3c:	ef 2e       	mov	r14, r31
     e3e:	f9 e1       	ldi	r31, 0x19	; 25
     e40:	ff 2e       	mov	r15, r31
     e42:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     e44:	55 24       	eor	r5, r5
     e46:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     e48:	68 94       	set
     e4a:	aa 24       	eor	r10, r10
     e4c:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     e4e:	68 94       	set
     e50:	77 24       	eor	r7, r7
     e52:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     e54:	68 94       	set
     e56:	66 24       	eor	r6, r6
     e58:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     e5a:	31 2c       	mov	r3, r1
     e5c:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     e5e:	0f 2e       	mov	r0, r31
     e60:	ff e1       	ldi	r31, 0x1F	; 31
     e62:	4f 2e       	mov	r4, r31
     e64:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     e66:	cc 24       	eor	r12, r12
     e68:	c3 94       	inc	r12
     e6a:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     e6c:	da c1       	rjmp	.+948    	; 0x1222 <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     e6e:	d8 01       	movw	r26, r16
     e70:	8c 91       	ld	r24, X
     e72:	82 32       	cpi	r24, 0x22	; 34
     e74:	09 f4       	brne	.+2      	; 0xe78 <nwkRxTaskHandler+0x80>
     e76:	05 c1       	rjmp	.+522    	; 0x1082 <nwkRxTaskHandler+0x28a>
     e78:	18 f4       	brcc	.+6      	; 0xe80 <nwkRxTaskHandler+0x88>
     e7a:	80 32       	cpi	r24, 0x20	; 32
     e7c:	41 f0       	breq	.+16     	; 0xe8e <nwkRxTaskHandler+0x96>
     e7e:	d1 c1       	rjmp	.+930    	; 0x1222 <nwkRxTaskHandler+0x42a>
     e80:	83 32       	cpi	r24, 0x23	; 35
     e82:	09 f4       	brne	.+2      	; 0xe86 <nwkRxTaskHandler+0x8e>
     e84:	c9 c1       	rjmp	.+914    	; 0x1218 <nwkRxTaskHandler+0x420>
     e86:	84 32       	cpi	r24, 0x24	; 36
     e88:	09 f4       	brne	.+2      	; 0xe8c <nwkRxTaskHandler+0x94>
     e8a:	c9 c1       	rjmp	.+914    	; 0x121e <nwkRxTaskHandler+0x426>
     e8c:	ca c1       	rjmp	.+916    	; 0x1222 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     e8e:	f8 01       	movw	r30, r16
     e90:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     e92:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     e94:	98 2f       	mov	r25, r24
     e96:	9a 70       	andi	r25, 0x0A	; 10
     e98:	09 f0       	breq	.+2      	; 0xe9c <nwkRxTaskHandler+0xa4>
     e9a:	c3 c1       	rjmp	.+902    	; 0x1222 <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     e9c:	25 81       	ldd	r18, Z+5	; 0x05
     e9e:	36 81       	ldd	r19, Z+6	; 0x06
     ea0:	2f 3f       	cpi	r18, 0xFF	; 255
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	91 f4       	brne	.+36     	; 0xeca <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     ea6:	d8 01       	movw	r26, r16
     ea8:	1f 96       	adiw	r26, 0x0f	; 15
     eaa:	8d 91       	ld	r24, X+
     eac:	9c 91       	ld	r25, X
     eae:	50 97       	sbiw	r26, 0x10	; 16
     eb0:	f7 01       	movw	r30, r14
     eb2:	20 81       	ld	r18, Z
     eb4:	31 81       	ldd	r19, Z+1	; 0x01
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	19 f0       	breq	.+6      	; 0xec2 <nwkRxTaskHandler+0xca>
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <nwkRxTaskHandler+0xca>
     ec0:	b0 c1       	rjmp	.+864    	; 0x1222 <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     ec2:	e2 e2       	ldi	r30, 0x22	; 34
     ec4:	d8 01       	movw	r26, r16
     ec6:	ec 93       	st	X, r30
     ec8:	ac c1       	rjmp	.+856    	; 0x1222 <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     eca:	d8 01       	movw	r26, r16
     ecc:	1f 96       	adiw	r26, 0x0f	; 15
     ece:	2d 91       	ld	r18, X+
     ed0:	3c 91       	ld	r19, X
     ed2:	50 97       	sbiw	r26, 0x10	; 16
     ed4:	2f 3f       	cpi	r18, 0xFF	; 255
     ed6:	3f 4f       	sbci	r19, 0xFF	; 255
     ed8:	11 f4       	brne	.+4      	; 0xede <nwkRxTaskHandler+0xe6>
     eda:	80 fd       	sbrc	r24, 0
     edc:	a2 c1       	rjmp	.+836    	; 0x1222 <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     ede:	f7 01       	movw	r30, r14
     ee0:	20 81       	ld	r18, Z
     ee2:	31 81       	ldd	r19, Z+1	; 0x01
     ee4:	d8 01       	movw	r26, r16
     ee6:	1d 96       	adiw	r26, 0x0d	; 13
     ee8:	8d 91       	ld	r24, X+
     eea:	9c 91       	ld	r25, X
     eec:	1e 97       	sbiw	r26, 0x0e	; 14
     eee:	28 17       	cp	r18, r24
     ef0:	39 07       	cpc	r19, r25
     ef2:	09 f4       	brne	.+2      	; 0xef6 <nwkRxTaskHandler+0xfe>
     ef4:	96 c1       	rjmp	.+812    	; 0x1222 <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     ef6:	c8 01       	movw	r24, r16
     ef8:	fa dd       	rcall	.-1036   	; 0xaee <nwkRouteFrameReceived>
     efa:	e2 e1       	ldi	r30, 0x12	; 18
     efc:	f9 e1       	ldi	r31, 0x19	; 25
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     f02:	83 2c       	mov	r8, r3
     f04:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     f06:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     f08:	44 81       	ldd	r20, Z+4	; 0x04
     f0a:	44 23       	and	r20, r20
     f0c:	09 f4       	brne	.+2      	; 0xf10 <nwkRxTaskHandler+0x118>
     f0e:	74 c0       	rjmp	.+232    	; 0xff8 <nwkRxTaskHandler+0x200>
     f10:	d8 01       	movw	r26, r16
     f12:	1d 96       	adiw	r26, 0x0d	; 13
     f14:	6d 91       	ld	r22, X+
     f16:	7c 91       	ld	r23, X
     f18:	1e 97       	sbiw	r26, 0x0e	; 14
     f1a:	40 81       	ld	r20, Z
     f1c:	51 81       	ldd	r21, Z+1	; 0x01
     f1e:	64 17       	cp	r22, r20
     f20:	75 07       	cpc	r23, r21
     f22:	09 f0       	breq	.+2      	; 0xf26 <nwkRxTaskHandler+0x12e>
     f24:	6a c0       	rjmp	.+212    	; 0xffa <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     f26:	1c 96       	adiw	r26, 0x0c	; 12
     f28:	8c 91       	ld	r24, X
     f2a:	1c 97       	sbiw	r26, 0x0c	; 12
     f2c:	f9 01       	movw	r30, r18
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	ee 5e       	subi	r30, 0xEE	; 238
     f3c:	f6 4e       	sbci	r31, 0xE6	; 230
     f3e:	92 81       	ldd	r25, Z+2	; 0x02
     f40:	98 1b       	sub	r25, r24

      if (diff < 8)
     f42:	98 30       	cpi	r25, 0x08	; 8
     f44:	08 f0       	brcs	.+2      	; 0xf48 <nwkRxTaskHandler+0x150>
     f46:	3e c0       	rjmp	.+124    	; 0xfc4 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     f48:	f9 01       	movw	r30, r18
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	ee 0f       	add	r30, r30
     f50:	ff 1f       	adc	r31, r31
     f52:	e2 0f       	add	r30, r18
     f54:	f3 1f       	adc	r31, r19
     f56:	ee 5e       	subi	r30, 0xEE	; 238
     f58:	f6 4e       	sbci	r31, 0xE6	; 230
     f5a:	83 81       	ldd	r24, Z+3	; 0x03
     f5c:	48 2f       	mov	r20, r24
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	09 2e       	mov	r0, r25
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <nwkRxTaskHandler+0x170>
     f64:	55 95       	asr	r21
     f66:	47 95       	ror	r20
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <nwkRxTaskHandler+0x16c>
     f6c:	40 ff       	sbrs	r20, 0
     f6e:	17 c0       	rjmp	.+46     	; 0xf9e <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     f70:	f7 01       	movw	r30, r14
     f72:	20 81       	ld	r18, Z
     f74:	31 81       	ldd	r19, Z+1	; 0x01
     f76:	17 96       	adiw	r26, 0x07	; 7
     f78:	8d 91       	ld	r24, X+
     f7a:	9c 91       	ld	r25, X
     f7c:	18 97       	sbiw	r26, 0x08	; 8
     f7e:	28 17       	cp	r18, r24
     f80:	39 07       	cpc	r19, r25
     f82:	09 f0       	breq	.+2      	; 0xf86 <nwkRxTaskHandler+0x18e>
     f84:	4e c1       	rjmp	.+668    	; 0x1222 <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     f86:	1b 96       	adiw	r26, 0x0b	; 11
     f88:	6c 91       	ld	r22, X
     f8a:	1b 97       	sbiw	r26, 0x0b	; 11
     f8c:	63 fb       	bst	r22, 3
     f8e:	66 27       	eor	r22, r22
     f90:	60 f9       	bld	r22, 0
     f92:	1f 96       	adiw	r26, 0x0f	; 15
     f94:	8d 91       	ld	r24, X+
     f96:	9c 91       	ld	r25, X
     f98:	50 97       	sbiw	r26, 0x10	; 16
     f9a:	a4 dd       	rcall	.-1208   	; 0xae4 <nwkRouteRemove>
     f9c:	42 c1       	rjmp	.+644    	; 0x1222 <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     f9e:	f9 01       	movw	r30, r18
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	2e 0f       	add	r18, r30
     faa:	3f 1f       	adc	r19, r31
     fac:	f9 01       	movw	r30, r18
     fae:	ee 5e       	subi	r30, 0xEE	; 238
     fb0:	f6 4e       	sbci	r31, 0xE6	; 230
     fb2:	96 01       	movw	r18, r12
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <nwkRxTaskHandler+0x1c2>
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	9a 95       	dec	r25
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <nwkRxTaskHandler+0x1be>
     fbe:	82 2b       	or	r24, r18
     fc0:	83 83       	std	Z+3, r24	; 0x03
     fc2:	36 c1       	rjmp	.+620    	; 0x1230 <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     fc4:	f9 01       	movw	r30, r18
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	2e 0f       	add	r18, r30
     fd0:	3f 1f       	adc	r19, r31
     fd2:	f9 01       	movw	r30, r18
     fd4:	ee 5e       	subi	r30, 0xEE	; 238
     fd6:	f6 4e       	sbci	r31, 0xE6	; 230
     fd8:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     fda:	83 81       	ldd	r24, Z+3	; 0x03
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	91 95       	neg	r25
     fe2:	a9 01       	movw	r20, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <nwkRxTaskHandler+0x1f2>
     fe6:	44 0f       	add	r20, r20
     fe8:	55 1f       	adc	r21, r21
     fea:	9a 95       	dec	r25
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <nwkRxTaskHandler+0x1ee>
     fee:	ca 01       	movw	r24, r20
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     ff4:	44 82       	std	Z+4, r4	; 0x04
     ff6:	1c c1       	rjmp	.+568    	; 0x1230 <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
     ff8:	4f 01       	movw	r8, r30
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     ffe:	8a 30       	cpi	r24, 0x0A	; 10
    1000:	91 05       	cpc	r25, r1
    1002:	09 f0       	breq	.+2      	; 0x1006 <nwkRxTaskHandler+0x20e>
    1004:	80 cf       	rjmp	.-256    	; 0xf06 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1006:	81 14       	cp	r8, r1
    1008:	91 04       	cpc	r9, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <nwkRxTaskHandler+0x216>
    100c:	0a c1       	rjmp	.+532    	; 0x1222 <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    100e:	d8 01       	movw	r26, r16
    1010:	1d 96       	adiw	r26, 0x0d	; 13
    1012:	8d 91       	ld	r24, X+
    1014:	9c 91       	ld	r25, X
    1016:	1e 97       	sbiw	r26, 0x0e	; 14
    1018:	f4 01       	movw	r30, r8
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    101e:	1c 96       	adiw	r26, 0x0c	; 12
    1020:	8c 91       	ld	r24, X
    1022:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    1024:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1026:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	99 e1       	ldi	r25, 0x19	; 25
    102c:	0a d5       	rcall	.+2580   	; 0x1a42 <SYS_TimerStart>
    102e:	00 c1       	rjmp	.+512    	; 0x1230 <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1030:	d7 01       	movw	r26, r14
    1032:	2d 91       	ld	r18, X+
    1034:	3c 91       	ld	r19, X
    1036:	f8 01       	movw	r30, r16
    1038:	87 85       	ldd	r24, Z+15	; 0x0f
    103a:	90 89       	ldd	r25, Z+16	; 0x10
    103c:	28 17       	cp	r18, r24
    103e:	39 07       	cpc	r19, r25
    1040:	81 f0       	breq	.+32     	; 0x1062 <nwkRxTaskHandler+0x26a>
    1042:	43 85       	ldd	r20, Z+11	; 0x0b
    1044:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1046:	0b c0       	rjmp	.+22     	; 0x105e <nwkRxTaskHandler+0x266>
    1048:	c8 01       	movw	r24, r16
    104a:	e1 d1       	rcall	.+962    	; 0x140e <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    104c:	d7 01       	movw	r26, r14
    104e:	2d 91       	ld	r18, X+
    1050:	3c 91       	ld	r19, X
    1052:	f8 01       	movw	r30, r16
    1054:	87 85       	ldd	r24, Z+15	; 0x0f
    1056:	90 89       	ldd	r25, Z+16	; 0x10
    1058:	28 17       	cp	r18, r24
    105a:	39 07       	cpc	r19, r25
    105c:	11 f0       	breq	.+4      	; 0x1062 <nwkRxTaskHandler+0x26a>
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	21 f4       	brne	.+8      	; 0x106a <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1062:	e2 e2       	ldi	r30, 0x22	; 34
    1064:	d8 01       	movw	r26, r16
    1066:	ec 93       	st	X, r30
    1068:	dc c0       	rjmp	.+440    	; 0x1222 <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    106a:	d8 01       	movw	r26, r16
    106c:	17 96       	adiw	r26, 0x07	; 7
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	18 97       	sbiw	r26, 0x08	; 8
    1074:	82 17       	cp	r24, r18
    1076:	93 07       	cpc	r25, r19
    1078:	09 f0       	breq	.+2      	; 0x107c <nwkRxTaskHandler+0x284>
    107a:	d3 c0       	rjmp	.+422    	; 0x1222 <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    107c:	e3 e2       	ldi	r30, 0x23	; 35
    107e:	ec 93       	st	X, r30
    1080:	d0 c0       	rjmp	.+416    	; 0x1222 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1082:	10 92 11 19 	sts	0x1911, r1	; 0x801911 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1086:	d8 01       	movw	r26, r16
    1088:	51 96       	adiw	r26, 0x11	; 17
    108a:	8c 91       	ld	r24, X
    108c:	51 97       	sbiw	r26, 0x11	; 17
    108e:	82 95       	swap	r24
    1090:	8f 70       	andi	r24, 0x0F	; 15
    1092:	e8 2f       	mov	r30, r24
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	e3 51       	subi	r30, 0x13	; 19
    109c:	f6 4e       	sbci	r31, 0xE6	; 230
    109e:	01 90       	ld	r0, Z+
    10a0:	f0 81       	ld	r31, Z
    10a2:	e0 2d       	mov	r30, r0
    10a4:	30 97       	sbiw	r30, 0x00	; 0
    10a6:	09 f4       	brne	.+2      	; 0x10aa <nwkRxTaskHandler+0x2b2>
    10a8:	60 c0       	rjmp	.+192    	; 0x116a <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    10aa:	1d 96       	adiw	r26, 0x0d	; 13
    10ac:	2d 91       	ld	r18, X+
    10ae:	3c 91       	ld	r19, X
    10b0:	1e 97       	sbiw	r26, 0x0e	; 14
    10b2:	3a 83       	std	Y+2, r19	; 0x02
    10b4:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    10b6:	1f 96       	adiw	r26, 0x0f	; 15
    10b8:	4d 91       	ld	r20, X+
    10ba:	5c 91       	ld	r21, X
    10bc:	50 97       	sbiw	r26, 0x10	; 16
    10be:	5c 83       	std	Y+4, r21	; 0x04
    10c0:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    10c2:	51 96       	adiw	r26, 0x11	; 17
    10c4:	9c 91       	ld	r25, X
    10c6:	51 97       	sbiw	r26, 0x11	; 17
    10c8:	9f 70       	andi	r25, 0x0F	; 15
    10ca:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    10cc:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    10ce:	af 57       	subi	r26, 0x7F	; 127
    10d0:	bf 4f       	sbci	r27, 0xFF	; 255
    10d2:	8d 91       	ld	r24, X+
    10d4:	9c 91       	ld	r25, X
    10d6:	99 87       	std	Y+9, r25	; 0x09
    10d8:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    10da:	b8 01       	movw	r22, r16
    10dc:	6e 5f       	subi	r22, 0xFE	; 254
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    10e0:	86 1b       	sub	r24, r22
    10e2:	97 0b       	sbc	r25, r23
    10e4:	d8 01       	movw	r26, r16
    10e6:	11 96       	adiw	r26, 0x01	; 1
    10e8:	9c 91       	ld	r25, X
    10ea:	11 97       	sbiw	r26, 0x01	; 1
    10ec:	98 1b       	sub	r25, r24
    10ee:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    10f0:	ad 57       	subi	r26, 0x7D	; 125
    10f2:	bf 4f       	sbci	r27, 0xFF	; 255
    10f4:	8c 91       	ld	r24, X
    10f6:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    10f8:	11 96       	adiw	r26, 0x01	; 1
    10fa:	8c 91       	ld	r24, X
    10fc:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    10fe:	d8 01       	movw	r26, r16
    1100:	1b 96       	adiw	r26, 0x0b	; 11
    1102:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1104:	69 2f       	mov	r22, r25
    1106:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1108:	92 fd       	sbrc	r25, 2
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <nwkRxTaskHandler+0x318>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <nwkRxTaskHandler+0x31a>
    1110:	80 e2       	ldi	r24, 0x20	; 32
    1112:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1114:	93 fd       	sbrc	r25, 3
    1116:	02 c0       	rjmp	.+4      	; 0x111c <nwkRxTaskHandler+0x324>
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	01 c0       	rjmp	.+2      	; 0x111e <nwkRxTaskHandler+0x326>
    111c:	90 e4       	ldi	r25, 0x40	; 64
    111e:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1120:	4f 3f       	cpi	r20, 0xFF	; 255
    1122:	5f 4f       	sbci	r21, 0xFF	; 255
    1124:	11 f0       	breq	.+4      	; 0x112a <nwkRxTaskHandler+0x332>
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	01 c0       	rjmp	.+2      	; 0x112c <nwkRxTaskHandler+0x334>
    112a:	96 2d       	mov	r25, r6
    112c:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    112e:	d8 01       	movw	r26, r16
    1130:	19 96       	adiw	r26, 0x09	; 9
    1132:	4d 91       	ld	r20, X+
    1134:	5c 91       	ld	r21, X
    1136:	1a 97       	sbiw	r26, 0x0a	; 10
    1138:	24 17       	cp	r18, r20
    113a:	35 07       	cpc	r19, r21
    113c:	11 f0       	breq	.+4      	; 0x1142 <nwkRxTaskHandler+0x34a>
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <nwkRxTaskHandler+0x34c>
    1142:	97 2d       	mov	r25, r7
    1144:	89 2b       	or	r24, r25
    1146:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1148:	d8 01       	movw	r26, r16
    114a:	15 96       	adiw	r26, 0x05	; 5
    114c:	2d 91       	ld	r18, X+
    114e:	3c 91       	ld	r19, X
    1150:	16 97       	sbiw	r26, 0x06	; 6
    1152:	2f 3f       	cpi	r18, 0xFF	; 255
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	11 f0       	breq	.+4      	; 0x115c <nwkRxTaskHandler+0x364>
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	01 c0       	rjmp	.+2      	; 0x115e <nwkRxTaskHandler+0x366>
    115c:	9a 2d       	mov	r25, r10
    115e:	89 2b       	or	r24, r25
    1160:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	19 95       	eicall
    1168:	01 c0       	rjmp	.+2      	; 0x116c <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    116a:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    116c:	f8 01       	movw	r30, r16
    116e:	93 85       	ldd	r25, Z+11	; 0x0b
    1170:	90 ff       	sbrs	r25, 0
    ack = false;
    1172:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1174:	d8 01       	movw	r26, r16
    1176:	17 96       	adiw	r26, 0x07	; 7
    1178:	2d 91       	ld	r18, X+
    117a:	3c 91       	ld	r19, X
    117c:	18 97       	sbiw	r26, 0x08	; 8
    117e:	2f 3f       	cpi	r18, 0xFF	; 255
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	69 f4       	brne	.+26     	; 0x119e <nwkRxTaskHandler+0x3a6>
    1184:	f7 01       	movw	r30, r14
    1186:	40 81       	ld	r20, Z
    1188:	51 81       	ldd	r21, Z+1	; 0x01
    118a:	d8 01       	movw	r26, r16
    118c:	1f 96       	adiw	r26, 0x0f	; 15
    118e:	2d 91       	ld	r18, X+
    1190:	3c 91       	ld	r19, X
    1192:	50 97       	sbiw	r26, 0x10	; 16
    1194:	42 17       	cp	r20, r18
    1196:	53 07       	cpc	r21, r19
    1198:	11 f4       	brne	.+4      	; 0x119e <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    119a:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    119c:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    119e:	f8 01       	movw	r30, r16
    11a0:	25 81       	ldd	r18, Z+5	; 0x05
    11a2:	36 81       	ldd	r19, Z+6	; 0x06
    11a4:	2f 3f       	cpi	r18, 0xFF	; 255
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	a1 f1       	breq	.+104    	; 0x1212 <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    11aa:	d7 01       	movw	r26, r14
    11ac:	2d 91       	ld	r18, X+
    11ae:	3c 91       	ld	r19, X
    11b0:	2f 3f       	cpi	r18, 0xFF	; 255
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    11b4:	71 f1       	breq	.+92     	; 0x1212 <nwkRxTaskHandler+0x41a>
    11b6:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    11b8:	61 f1       	breq	.+88     	; 0x1212 <nwkRxTaskHandler+0x41a>
    11ba:	90 db       	rcall	.-2272   	; 0x8dc <nwkFrameAlloc>
    11bc:	4c 01       	movw	r8, r24
    11be:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    11c0:	41 f1       	breq	.+80     	; 0x1212 <nwkRxTaskHandler+0x41a>
    11c2:	f4 db       	rcall	.-2072   	; 0x9ac <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    11c4:	f4 01       	movw	r30, r8
    11c6:	81 81       	ldd	r24, Z+1	; 0x01
    11c8:	8d 5f       	subi	r24, 0xFD	; 253
    11ca:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    11cc:	e9 57       	subi	r30, 0x79	; 121
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	11 82       	std	Z+1, r1	; 0x01
    11d2:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    11d4:	d8 01       	movw	r26, r16
    11d6:	1b 96       	adiw	r26, 0x0b	; 11
    11d8:	8c 91       	ld	r24, X
    11da:	1b 97       	sbiw	r26, 0x0b	; 11
    11dc:	86 95       	lsr	r24
    11de:	81 70       	andi	r24, 0x01	; 1
    11e0:	f4 01       	movw	r30, r8
    11e2:	93 85       	ldd	r25, Z+11	; 0x0b
    11e4:	80 fb       	bst	r24, 0
    11e6:	91 f9       	bld	r25, 1
    11e8:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    11ea:	1d 96       	adiw	r26, 0x0d	; 13
    11ec:	8d 91       	ld	r24, X+
    11ee:	9c 91       	ld	r25, X
    11f0:	1e 97       	sbiw	r26, 0x0e	; 14
    11f2:	90 8b       	std	Z+16, r25	; 0x10
    11f4:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    11f6:	ef 57       	subi	r30, 0x7F	; 127
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	01 90       	ld	r0, Z+
    11fc:	f0 81       	ld	r31, Z
    11fe:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1200:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1202:	80 91 11 19 	lds	r24, 0x1911	; 0x801911 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    1206:	82 83       	std	Z+2, r24	; 0x02
    1208:	1c 96       	adiw	r26, 0x0c	; 12
    120a:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    120c:	81 83       	std	Z+1, r24	; 0x01
    120e:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1210:	b0 d0       	rcall	.+352    	; 0x1372 <nwkTxFrame>
    1212:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    1214:	bc 92       	st	X, r11
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <nwkRxTaskHandler+0x42a>
    1218:	c8 01       	movw	r24, r16
      } break;
    121a:	1e dd       	rcall	.-1476   	; 0xc58 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <nwkRxTaskHandler+0x42a>
    121e:	c8 01       	movw	r24, r16
    1220:	96 db       	rcall	.-2260   	; 0x94e <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1222:	c8 01       	movw	r24, r16
    1224:	9e db       	rcall	.-2244   	; 0x962 <nwkFrameNext>
    1226:	8c 01       	movw	r16, r24
    1228:	89 2b       	or	r24, r25
    122a:	09 f0       	breq	.+2      	; 0x122e <nwkRxTaskHandler+0x436>
    122c:	20 ce       	rjmp	.-960    	; 0xe6e <nwkRxTaskHandler+0x76>
    122e:	07 c0       	rjmp	.+14     	; 0x123e <nwkRxTaskHandler+0x446>
    1230:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1232:	87 81       	ldd	r24, Z+7	; 0x07
    1234:	90 85       	ldd	r25, Z+8	; 0x08
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	09 f0       	breq	.+2      	; 0x123c <nwkRxTaskHandler+0x444>
    123a:	08 cf       	rjmp	.-496    	; 0x104c <nwkRxTaskHandler+0x254>
    123c:	f9 ce       	rjmp	.-526    	; 0x1030 <nwkRxTaskHandler+0x238>
    123e:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	ff 90       	pop	r15
    1254:	ef 90       	pop	r14
    1256:	df 90       	pop	r13
    1258:	cf 90       	pop	r12
    125a:	bf 90       	pop	r11
    125c:	af 90       	pop	r10
    125e:	9f 90       	pop	r9
    1260:	8f 90       	pop	r8
    1262:	7f 90       	pop	r7
    1264:	6f 90       	pop	r6
    1266:	5f 90       	pop	r5
    1268:	4f 90       	pop	r4
    126a:	3f 90       	pop	r3
    126c:	2f 90       	pop	r2
    126e:	08 95       	ret

00001270 <nwkTxDelayTimerHandler>:
    1270:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	7c 01       	movw	r14, r24
    127c:	10 e0       	ldi	r17, 0x00	; 0
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	01 e0       	ldi	r16, 0x01	; 1
    1284:	c3 e1       	ldi	r28, 0x13	; 19
    1286:	13 c0       	rjmp	.+38     	; 0x12ae <nwkTxDelayTimerHandler+0x3e>
    1288:	fc 01       	movw	r30, r24
    128a:	20 81       	ld	r18, Z
    128c:	21 31       	cpi	r18, 0x11	; 17
    128e:	79 f4       	brne	.+30     	; 0x12ae <nwkTxDelayTimerHandler+0x3e>
    1290:	ec 57       	subi	r30, 0x7C	; 124
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	20 81       	ld	r18, Z
    1296:	31 81       	ldd	r19, Z+1	; 0x01
    1298:	21 50       	subi	r18, 0x01	; 1
    129a:	31 09       	sbc	r19, r1
    129c:	31 83       	std	Z+1, r19	; 0x01
    129e:	20 83       	st	Z, r18
    12a0:	23 2b       	or	r18, r19
    12a2:	21 f4       	brne	.+8      	; 0x12ac <nwkTxDelayTimerHandler+0x3c>
    12a4:	fc 01       	movw	r30, r24
    12a6:	c0 83       	st	Z, r28
    12a8:	10 2f       	mov	r17, r16
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <nwkTxDelayTimerHandler+0x3e>
    12ac:	10 2f       	mov	r17, r16
    12ae:	59 db       	rcall	.-2382   	; 0x962 <nwkFrameNext>
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	51 f7       	brne	.-44     	; 0x1288 <nwkTxDelayTimerHandler+0x18>
    12b4:	11 23       	and	r17, r17
    12b6:	11 f0       	breq	.+4      	; 0x12bc <nwkTxDelayTimerHandler+0x4c>
    12b8:	c7 01       	movw	r24, r14
    12ba:	c3 d3       	rcall	.+1926   	; 0x1a42 <SYS_TimerStart>
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	08 95       	ret

000012c8 <nwkTxAckWaitTimerHandler>:
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	7c 01       	movw	r14, r24
    12d6:	10 e0       	ldi	r17, 0x00	; 0
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	01 e0       	ldi	r16, 0x01	; 1
    12de:	d7 e1       	ldi	r29, 0x17	; 23
    12e0:	c0 e1       	ldi	r28, 0x10	; 16
    12e2:	16 c0       	rjmp	.+44     	; 0x1310 <nwkTxAckWaitTimerHandler+0x48>
    12e4:	fc 01       	movw	r30, r24
    12e6:	20 81       	ld	r18, Z
    12e8:	26 31       	cpi	r18, 0x16	; 22
    12ea:	91 f4       	brne	.+36     	; 0x1310 <nwkTxAckWaitTimerHandler+0x48>
    12ec:	ec 57       	subi	r30, 0x7C	; 124
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	20 81       	ld	r18, Z
    12f2:	31 81       	ldd	r19, Z+1	; 0x01
    12f4:	21 50       	subi	r18, 0x01	; 1
    12f6:	31 09       	sbc	r19, r1
    12f8:	31 83       	std	Z+1, r19	; 0x01
    12fa:	20 83       	st	Z, r18
    12fc:	23 2b       	or	r18, r19
    12fe:	39 f4       	brne	.+14     	; 0x130e <nwkTxAckWaitTimerHandler+0x46>
    1300:	fc 01       	movw	r30, r24
    1302:	d0 83       	st	Z, r29
    1304:	ed 57       	subi	r30, 0x7D	; 125
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	c0 83       	st	Z, r28
    130a:	10 2f       	mov	r17, r16
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <nwkTxAckWaitTimerHandler+0x48>
    130e:	10 2f       	mov	r17, r16
    1310:	28 db       	rcall	.-2480   	; 0x962 <nwkFrameNext>
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	39 f7       	brne	.-50     	; 0x12e4 <nwkTxAckWaitTimerHandler+0x1c>
    1316:	11 23       	and	r17, r17
    1318:	11 f0       	breq	.+4      	; 0x131e <nwkTxAckWaitTimerHandler+0x56>
    131a:	c7 01       	movw	r24, r14
    131c:	92 d3       	rcall	.+1828   	; 0x1a42 <SYS_TimerStart>
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	08 95       	ret

0000132c <nwkTxInit>:
    132c:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    1330:	10 92 5e 19 	sts	0x195E, r1	; 0x80195e <nwkTxPhyActiveFrame>
    1334:	e1 e5       	ldi	r30, 0x51	; 81
    1336:	f9 e1       	ldi	r31, 0x19	; 25
    1338:	82 e3       	ldi	r24, 0x32	; 50
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a0 e0       	ldi	r26, 0x00	; 0
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	86 83       	std	Z+6, r24	; 0x06
    1342:	97 83       	std	Z+7, r25	; 0x07
    1344:	a0 87       	std	Z+8, r26	; 0x08
    1346:	b1 87       	std	Z+9, r27	; 0x09
    1348:	12 86       	std	Z+10, r1	; 0x0a
    134a:	84 e6       	ldi	r24, 0x64	; 100
    134c:	99 e0       	ldi	r25, 0x09	; 9
    134e:	94 87       	std	Z+12, r25	; 0x0c
    1350:	83 87       	std	Z+11, r24	; 0x0b
    1352:	e4 e4       	ldi	r30, 0x44	; 68
    1354:	f9 e1       	ldi	r31, 0x19	; 25
    1356:	8a e0       	ldi	r24, 0x0A	; 10
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	86 83       	std	Z+6, r24	; 0x06
    1360:	97 83       	std	Z+7, r25	; 0x07
    1362:	a0 87       	std	Z+8, r26	; 0x08
    1364:	b1 87       	std	Z+9, r27	; 0x09
    1366:	12 86       	std	Z+10, r1	; 0x0a
    1368:	88 e3       	ldi	r24, 0x38	; 56
    136a:	99 e0       	ldi	r25, 0x09	; 9
    136c:	94 87       	std	Z+12, r25	; 0x0c
    136e:	83 87       	std	Z+11, r24	; 0x0b
    1370:	08 95       	ret

00001372 <nwkTxFrame>:
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	ec 01       	movw	r28, r24
    1378:	fc 01       	movw	r30, r24
    137a:	ea 57       	subi	r30, 0x7A	; 122
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 81       	ld	r24, Z
    1380:	81 ff       	sbrs	r24, 1
    1382:	03 c0       	rjmp	.+6      	; 0x138a <nwkTxFrame+0x18>
    1384:	92 e1       	ldi	r25, 0x12	; 18
    1386:	98 83       	st	Y, r25
    1388:	02 c0       	rjmp	.+4      	; 0x138e <nwkTxFrame+0x1c>
    138a:	92 e1       	ldi	r25, 0x12	; 18
    138c:	98 83       	st	Y, r25
    138e:	fe 01       	movw	r30, r28
    1390:	ed 57       	subi	r30, 0x7D	; 125
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	10 82       	st	Z, r1
    1396:	80 ff       	sbrs	r24, 0
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <nwkTxFrame+0x32>
    139a:	2f ef       	ldi	r18, 0xFF	; 255
    139c:	3f ef       	ldi	r19, 0xFF	; 255
    139e:	3e 83       	std	Y+6, r19	; 0x06
    13a0:	2d 83       	std	Y+5, r18	; 0x05
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <nwkTxFrame+0x3e>
    13a4:	20 91 e9 19 	lds	r18, 0x19E9	; 0x8019e9 <nwkIb+0x2>
    13a8:	30 91 ea 19 	lds	r19, 0x19EA	; 0x8019ea <nwkIb+0x3>
    13ac:	3e 83       	std	Y+6, r19	; 0x06
    13ae:	2d 83       	std	Y+5, r18	; 0x05
    13b0:	85 70       	andi	r24, 0x05	; 5
    13b2:	19 f4       	brne	.+6      	; 0x13ba <nwkTxFrame+0x48>
    13b4:	ce 01       	movw	r24, r28
    13b6:	31 dc       	rcall	.-1950   	; 0xc1a <nwkRoutePrepareTx>
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <nwkTxFrame+0x50>
    13ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    13bc:	98 89       	ldd	r25, Y+16	; 0x10
    13be:	98 87       	std	Y+8, r25	; 0x08
    13c0:	8f 83       	std	Y+7, r24	; 0x07
    13c2:	e7 ee       	ldi	r30, 0xE7	; 231
    13c4:	f9 e1       	ldi	r31, 0x19	; 25
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	9a 87       	std	Y+10, r25	; 0x0a
    13cc:	89 87       	std	Y+9, r24	; 0x09
    13ce:	85 81       	ldd	r24, Z+5	; 0x05
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	85 83       	std	Z+5, r24	; 0x05
    13d4:	8c 83       	std	Y+4, r24	; 0x04
    13d6:	8f 81       	ldd	r24, Y+7	; 0x07
    13d8:	98 85       	ldd	r25, Y+8	; 0x08
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	69 f4       	brne	.+26     	; 0x13f8 <nwkTxFrame+0x86>
    13de:	81 e4       	ldi	r24, 0x41	; 65
    13e0:	98 e8       	ldi	r25, 0x88	; 136
    13e2:	9b 83       	std	Y+3, r25	; 0x03
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	0c d4       	rcall	.+2072   	; 0x1c00 <rand>
    13e8:	cc 57       	subi	r28, 0x7C	; 124
    13ea:	df 4f       	sbci	r29, 0xFF	; 255
    13ec:	87 70       	andi	r24, 0x07	; 7
    13ee:	99 27       	eor	r25, r25
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	99 83       	std	Y+1, r25	; 0x01
    13f4:	88 83       	st	Y, r24
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <nwkTxFrame+0x96>
    13f8:	81 e6       	ldi	r24, 0x61	; 97
    13fa:	98 e8       	ldi	r25, 0x88	; 136
    13fc:	9b 83       	std	Y+3, r25	; 0x03
    13fe:	8a 83       	std	Y+2, r24	; 0x02
    1400:	cc 57       	subi	r28, 0x7C	; 124
    1402:	df 4f       	sbci	r29, 0xFF	; 255
    1404:	19 82       	std	Y+1, r1	; 0x01
    1406:	18 82       	st	Y, r1
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <nwkTxBroadcastFrame>:
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	8c 01       	movw	r16, r24
    1418:	61 da       	rcall	.-2878   	; 0x8dc <nwkFrameAlloc>
    141a:	ec 01       	movw	r28, r24
    141c:	89 2b       	or	r24, r25
    141e:	a9 f1       	breq	.+106    	; 0x148a <nwkTxBroadcastFrame+0x7c>
    1420:	82 e1       	ldi	r24, 0x12	; 18
    1422:	88 83       	st	Y, r24
    1424:	f8 01       	movw	r30, r16
    1426:	81 81       	ldd	r24, Z+1	; 0x01
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	fe 01       	movw	r30, r28
    142c:	ed 57       	subi	r30, 0x7D	; 125
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	10 82       	st	Z, r1
    1432:	e6 d3       	rcall	.+1996   	; 0x1c00 <rand>
    1434:	fe 01       	movw	r30, r28
    1436:	ec 57       	subi	r30, 0x7C	; 124
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	87 70       	andi	r24, 0x07	; 7
    143c:	99 27       	eor	r25, r25
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	80 83       	st	Z, r24
    1444:	33 96       	adiw	r30, 0x03	; 3
    1446:	11 82       	std	Z+1, r1	; 0x01
    1448:	10 82       	st	Z, r1
    144a:	f8 01       	movw	r30, r16
    144c:	41 81       	ldd	r20, Z+1	; 0x01
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	b8 01       	movw	r22, r16
    1452:	6e 5f       	subi	r22, 0xFE	; 254
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	ce 01       	movw	r24, r28
    1458:	02 96       	adiw	r24, 0x02	; 2
    145a:	e0 d3       	rcall	.+1984   	; 0x1c1c <memcpy>
    145c:	81 e4       	ldi	r24, 0x41	; 65
    145e:	98 e8       	ldi	r25, 0x88	; 136
    1460:	9b 83       	std	Y+3, r25	; 0x03
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	9f ef       	ldi	r25, 0xFF	; 255
    1468:	98 87       	std	Y+8, r25	; 0x08
    146a:	8f 83       	std	Y+7, r24	; 0x07
    146c:	f8 01       	movw	r30, r16
    146e:	85 81       	ldd	r24, Z+5	; 0x05
    1470:	96 81       	ldd	r25, Z+6	; 0x06
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	e7 ee       	ldi	r30, 0xE7	; 231
    1478:	f9 e1       	ldi	r31, 0x19	; 25
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	9a 87       	std	Y+10, r25	; 0x0a
    1480:	89 87       	std	Y+9, r24	; 0x09
    1482:	85 81       	ldd	r24, Z+5	; 0x05
    1484:	8f 5f       	subi	r24, 0xFF	; 255
    1486:	85 83       	std	Z+5, r24	; 0x05
    1488:	8c 83       	std	Y+4, r24	; 0x04
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	08 95       	ret

00001494 <nwkTxAckReceived>:
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	fc 01       	movw	r30, r24
    149a:	21 85       	ldd	r18, Z+9	; 0x09
    149c:	23 30       	cpi	r18, 0x03	; 3
    149e:	d9 f4       	brne	.+54     	; 0x14d6 <nwkTxAckReceived+0x42>
    14a0:	10 c0       	rjmp	.+32     	; 0x14c2 <nwkTxAckReceived+0x2e>
    14a2:	fc 01       	movw	r30, r24
    14a4:	20 81       	ld	r18, Z
    14a6:	26 31       	cpi	r18, 0x16	; 22
    14a8:	89 f4       	brne	.+34     	; 0x14cc <nwkTxAckReceived+0x38>
    14aa:	34 85       	ldd	r19, Z+12	; 0x0c
    14ac:	29 81       	ldd	r18, Y+1	; 0x01
    14ae:	32 13       	cpse	r19, r18
    14b0:	0d c0       	rjmp	.+26     	; 0x14cc <nwkTxAckReceived+0x38>
    14b2:	27 e1       	ldi	r18, 0x17	; 23
    14b4:	20 83       	st	Z, r18
    14b6:	2a 81       	ldd	r18, Y+2	; 0x02
    14b8:	ea 57       	subi	r30, 0x7A	; 122
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	20 83       	st	Z, r18
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	0b c0       	rjmp	.+22     	; 0x14d8 <nwkTxAckReceived+0x44>
    14c2:	fc 01       	movw	r30, r24
    14c4:	c7 81       	ldd	r28, Z+7	; 0x07
    14c6:	d0 85       	ldd	r29, Z+8	; 0x08
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	4a da       	rcall	.-2924   	; 0x962 <nwkFrameNext>
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	41 f7       	brne	.-48     	; 0x14a2 <nwkTxAckReceived+0xe>
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <nwkTxAckReceived+0x44>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret

000014de <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    14de:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <nwkTxPhyActiveFrame>
    14e2:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	21 f0       	breq	.+8      	; 0x14f2 <PHY_DataConf+0x14>
    14ea:	48 f0       	brcs	.+18     	; 0x14fe <PHY_DataConf+0x20>
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <PHY_DataConf+0x18>
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    14f2:	80 e2       	ldi	r24, 0x20	; 32
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    14f6:	81 e2       	ldi	r24, 0x21	; 33
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    14fe:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1500:	df 01       	movw	r26, r30
    1502:	ad 57       	subi	r26, 0x7D	; 125
    1504:	bf 4f       	sbci	r27, 0xFF	; 255
    1506:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1508:	85 e1       	ldi	r24, 0x15	; 21
    150a:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    150c:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    1510:	10 92 5e 19 	sts	0x195E, r1	; 0x80195e <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    1514:	e7 ee       	ldi	r30, 0xE7	; 231
    1516:	f9 e1       	ldi	r31, 0x19	; 25
    1518:	86 a1       	ldd	r24, Z+38	; 0x26
    151a:	97 a1       	ldd	r25, Z+39	; 0x27
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	97 a3       	std	Z+39, r25	; 0x27
    1520:	86 a3       	std	Z+38, r24	; 0x26
    1522:	08 95       	ret

00001524 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1524:	9f 92       	push	r9
    1526:	af 92       	push	r10
    1528:	bf 92       	push	r11
    152a:	cf 92       	push	r12
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    153a:	c0 e0       	ldi	r28, 0x00	; 0
    153c:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    153e:	0f 2e       	mov	r0, r31
    1540:	f4 e1       	ldi	r31, 0x14	; 20
    1542:	af 2e       	mov	r10, r31
    1544:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    1546:	07 ee       	ldi	r16, 0xE7	; 231
    1548:	19 e1       	ldi	r17, 0x19	; 25
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    154a:	0f 2e       	mov	r0, r31
    154c:	f7 e1       	ldi	r31, 0x17	; 23
    154e:	df 2e       	mov	r13, r31
    1550:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1552:	0f 2e       	mov	r0, r31
    1554:	f6 e1       	ldi	r31, 0x16	; 22
    1556:	9f 2e       	mov	r9, r31
    1558:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    155a:	0f 2e       	mov	r0, r31
    155c:	f9 e2       	ldi	r31, 0x29	; 41
    155e:	ef 2e       	mov	r14, r31
    1560:	f1 2c       	mov	r15, r1
    1562:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1564:	0f 2e       	mov	r0, r31
    1566:	f3 e1       	ldi	r31, 0x13	; 19
    1568:	cf 2e       	mov	r12, r31
    156a:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    156c:	0f 2e       	mov	r0, r31
    156e:	f1 e1       	ldi	r31, 0x11	; 17
    1570:	bf 2e       	mov	r11, r31
    1572:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1574:	60 c0       	rjmp	.+192    	; 0x1636 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    1576:	88 81       	ld	r24, Y
    1578:	83 31       	cpi	r24, 0x13	; 19
    157a:	c1 f0       	breq	.+48     	; 0x15ac <nwkTxTaskHandler+0x88>
    157c:	18 f4       	brcc	.+6      	; 0x1584 <nwkTxTaskHandler+0x60>
    157e:	82 31       	cpi	r24, 0x12	; 18
    1580:	39 f0       	breq	.+14     	; 0x1590 <nwkTxTaskHandler+0x6c>
    1582:	59 c0       	rjmp	.+178    	; 0x1636 <nwkTxTaskHandler+0x112>
    1584:	85 31       	cpi	r24, 0x15	; 21
    1586:	49 f1       	breq	.+82     	; 0x15da <nwkTxTaskHandler+0xb6>
    1588:	87 31       	cpi	r24, 0x17	; 23
    158a:	09 f4       	brne	.+2      	; 0x158e <nwkTxTaskHandler+0x6a>
    158c:	45 c0       	rjmp	.+138    	; 0x1618 <nwkTxTaskHandler+0xf4>
    158e:	53 c0       	rjmp	.+166    	; 0x1636 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1590:	fe 01       	movw	r30, r28
    1592:	ec 57       	subi	r30, 0x7C	; 124
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
    159a:	89 2b       	or	r24, r25
    159c:	29 f0       	breq	.+10     	; 0x15a8 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    159e:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    15a0:	84 e4       	ldi	r24, 0x44	; 68
    15a2:	99 e1       	ldi	r25, 0x19	; 25
    15a4:	4e d2       	rcall	.+1180   	; 0x1a42 <SYS_TimerStart>
    15a6:	47 c0       	rjmp	.+142    	; 0x1636 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    15a8:	c8 82       	st	Y, r12
    15aa:	45 c0       	rjmp	.+138    	; 0x1636 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    15ac:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <nwkTxPhyActiveFrame>
    15b0:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    15b4:	89 2b       	or	r24, r25
    15b6:	09 f0       	breq	.+2      	; 0x15ba <nwkTxTaskHandler+0x96>
    15b8:	3e c0       	rjmp	.+124    	; 0x1636 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    15ba:	d0 93 5f 19 	sts	0x195F, r29	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    15be:	c0 93 5e 19 	sts	0x195E, r28	; 0x80195e <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    15c2:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    15c4:	69 81       	ldd	r22, Y+1	; 0x01
    15c6:	ce 01       	movw	r24, r28
    15c8:	02 96       	adiw	r24, 0x02	; 2
    15ca:	cb d0       	rcall	.+406    	; 0x1762 <PHY_DataReq>
          nwkIb.lock++;
    15cc:	f8 01       	movw	r30, r16
    15ce:	86 a1       	ldd	r24, Z+38	; 0x26
    15d0:	97 a1       	ldd	r25, Z+39	; 0x27
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	97 a3       	std	Z+39, r25	; 0x27
    15d6:	86 a3       	std	Z+38, r24	; 0x26
    15d8:	2e c0       	rjmp	.+92     	; 0x1636 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    15da:	fe 01       	movw	r30, r28
    15dc:	ed 57       	subi	r30, 0x7D	; 125
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	80 81       	ld	r24, Z
    15e2:	81 11       	cpse	r24, r1
    15e4:	17 c0       	rjmp	.+46     	; 0x1614 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    15e6:	2d 85       	ldd	r18, Y+13	; 0x0d
    15e8:	3e 85       	ldd	r19, Y+14	; 0x0e
    15ea:	f8 01       	movw	r30, r16
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
    15f0:	28 17       	cp	r18, r24
    15f2:	39 07       	cpc	r19, r25
    15f4:	69 f4       	brne	.+26     	; 0x1610 <nwkTxTaskHandler+0xec>
    15f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f8:	80 ff       	sbrs	r24, 0
    15fa:	0a c0       	rjmp	.+20     	; 0x1610 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    15fc:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    15fe:	fe 01       	movw	r30, r28
    1600:	ec 57       	subi	r30, 0x7C	; 124
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	f1 82       	std	Z+1, r15	; 0x01
    1606:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1608:	81 e5       	ldi	r24, 0x51	; 81
    160a:	99 e1       	ldi	r25, 0x19	; 25
    160c:	1a d2       	rcall	.+1076   	; 0x1a42 <SYS_TimerStart>
    160e:	13 c0       	rjmp	.+38     	; 0x1636 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1610:	d8 82       	st	Y, r13
    1612:	11 c0       	rjmp	.+34     	; 0x1636 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1614:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    1616:	0f c0       	rjmp	.+30     	; 0x1636 <nwkTxTaskHandler+0x112>
    1618:	ce 01       	movw	r24, r28
    161a:	b8 da       	rcall	.-2704   	; 0xb8c <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    161c:	fe 01       	movw	r30, r28
    161e:	e9 57       	subi	r30, 0x79	; 121
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	01 90       	ld	r0, Z+
    1624:	f0 81       	ld	r31, Z
    1626:	e0 2d       	mov	r30, r0
    1628:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    162a:	19 f4       	brne	.+6      	; 0x1632 <nwkTxTaskHandler+0x10e>
    162c:	ce 01       	movw	r24, r28
    162e:	8f d9       	rcall	.-3298   	; 0x94e <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <nwkTxTaskHandler+0x112>
    1632:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1634:	19 95       	eicall
    1636:	ce 01       	movw	r24, r28
    1638:	94 d9       	rcall	.-3288   	; 0x962 <nwkFrameNext>
    163a:	ec 01       	movw	r28, r24
    163c:	89 2b       	or	r24, r25
    163e:	09 f0       	breq	.+2      	; 0x1642 <nwkTxTaskHandler+0x11e>
    1640:	9a cf       	rjmp	.-204    	; 0x1576 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	bf 90       	pop	r11
    1654:	af 90       	pop	r10
    1656:	9f 90       	pop	r9
    1658:	08 95       	ret

0000165a <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    165a:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <phyBand>
    165e:	98 2f       	mov	r25, r24
    1660:	9f 70       	andi	r25, 0x0F	; 15
    1662:	e4 e5       	ldi	r30, 0x54	; 84
    1664:	f1 e0       	ldi	r31, 0x01	; 1
    1666:	80 81       	ld	r24, Z
    1668:	80 7f       	andi	r24, 0xF0	; 240
    166a:	89 2b       	or	r24, r25
    166c:	80 83       	st	Z, r24
    166e:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <phyBand>
    1672:	88 23       	and	r24, r24
    1674:	29 f0       	breq	.+10     	; 0x1680 <phySetChannel+0x26>
    1676:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <phyChannel>
    167a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    167e:	08 95       	ret
    1680:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <phyChannel>
    1684:	98 2f       	mov	r25, r24
    1686:	9f 71       	andi	r25, 0x1F	; 31
    1688:	e8 e4       	ldi	r30, 0x48	; 72
    168a:	f1 e0       	ldi	r31, 0x01	; 1
    168c:	80 81       	ld	r24, Z
    168e:	80 7e       	andi	r24, 0xE0	; 224
    1690:	89 2b       	or	r24, r25
    1692:	80 83       	st	Z, r24
    1694:	08 95       	ret

00001696 <phyTrxSetState>:
    1696:	93 e0       	ldi	r25, 0x03	; 3
    1698:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    169c:	e1 e4       	ldi	r30, 0x41	; 65
    169e:	f1 e0       	ldi	r31, 0x01	; 1
    16a0:	90 81       	ld	r25, Z
    16a2:	9f 71       	andi	r25, 0x1F	; 31
    16a4:	98 30       	cpi	r25, 0x08	; 8
    16a6:	e1 f7       	brne	.-8      	; 0x16a0 <phyTrxSetState+0xa>
    16a8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    16ac:	e1 e4       	ldi	r30, 0x41	; 65
    16ae:	f1 e0       	ldi	r31, 0x01	; 1
    16b0:	90 81       	ld	r25, Z
    16b2:	9f 71       	andi	r25, 0x1F	; 31
    16b4:	89 13       	cpse	r24, r25
    16b6:	fc cf       	rjmp	.-8      	; 0x16b0 <phyTrxSetState+0x1a>
    16b8:	08 95       	ret

000016ba <phySetRxState>:
    16ba:	88 e0       	ldi	r24, 0x08	; 8
    16bc:	ec df       	rcall	.-40     	; 0x1696 <phyTrxSetState>
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    16c4:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <phyRxState>
    16c8:	88 23       	and	r24, r24
    16ca:	11 f0       	breq	.+4      	; 0x16d0 <phySetRxState+0x16>
    16cc:	86 e1       	ldi	r24, 0x16	; 22
    16ce:	e3 cf       	rjmp	.-58     	; 0x1696 <phyTrxSetState>
    16d0:	08 95       	ret

000016d2 <PHY_Init>:
    16d2:	e9 e3       	ldi	r30, 0x39	; 57
    16d4:	f1 e0       	ldi	r31, 0x01	; 1
    16d6:	80 81       	ld	r24, Z
    16d8:	81 60       	ori	r24, 0x01	; 1
    16da:	80 83       	st	Z, r24
    16dc:	10 92 62 19 	sts	0x1962, r1	; 0x801962 <phyRxState>
    16e0:	10 92 60 19 	sts	0x1960, r1	; 0x801960 <phyBand>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <phyState>
    16ea:	88 e0       	ldi	r24, 0x08	; 8
    16ec:	d4 df       	rcall	.-88     	; 0x1696 <phyTrxSetState>
    16ee:	8b ee       	ldi	r24, 0xEB	; 235
    16f0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    16f4:	ec e4       	ldi	r30, 0x4C	; 76
    16f6:	f1 e0       	ldi	r31, 0x01	; 1
    16f8:	80 81       	ld	r24, Z
    16fa:	80 68       	ori	r24, 0x80	; 128
    16fc:	80 83       	st	Z, r24
    16fe:	08 95       	ret

00001700 <PHY_SetRxState>:
    1700:	80 93 62 19 	sts	0x1962, r24	; 0x801962 <phyRxState>
    1704:	da cf       	rjmp	.-76     	; 0x16ba <phySetRxState>
    1706:	08 95       	ret

00001708 <PHY_SetChannel>:
    1708:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <phyChannel>
    170c:	a6 cf       	rjmp	.-180    	; 0x165a <phySetChannel>
    170e:	08 95       	ret

00001710 <PHY_SetPanId>:
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	1f 92       	push	r1
    1716:	1f 92       	push	r1
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <PHY_SetShortAddr>:
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	1f 92       	push	r1
    173a:	1f 92       	push	r1
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    174e:	99 81       	ldd	r25, Y+1	; 0x01
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	89 0f       	add	r24, r25
    1754:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	08 95       	ret

00001762 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	18 2f       	mov	r17, r24
    176a:	d9 2f       	mov	r29, r25
    176c:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    176e:	89 e1       	ldi	r24, 0x19	; 25
    1770:	92 df       	rcall	.-220    	; 0x1696 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	8c 0f       	add	r24, r28
    177c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    1780:	cc 23       	and	r28, r28
    1782:	71 f0       	breq	.+28     	; 0x17a0 <PHY_DataReq+0x3e>
    1784:	a1 2f       	mov	r26, r17
    1786:	bd 2f       	mov	r27, r29
    1788:	c1 50       	subi	r28, 0x01	; 1
    178a:	6c 2f       	mov	r22, r28
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	6e 57       	subi	r22, 0x7E	; 126
    1790:	7e 4f       	sbci	r23, 0xFE	; 254
    1792:	e1 e8       	ldi	r30, 0x81	; 129
    1794:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    1796:	8d 91       	ld	r24, X+
    1798:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    179a:	e6 17       	cp	r30, r22
    179c:	f7 07       	cpc	r31, r23
    179e:	d9 f7       	brne	.-10     	; 0x1796 <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	08 95       	ret

000017b4 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <PHY_TaskHandler+0x8>
    17bc:	1f 92       	push	r1
    17be:	1f 92       	push	r1
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    17c4:	80 91 e3 19 	lds	r24, 0x19E3	; 0x8019e3 <phyState>
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	09 f4       	brne	.+2      	; 0x17ce <PHY_TaskHandler+0x1a>
    17cc:	65 c0       	rjmp	.+202    	; 0x1898 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    17ce:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    17d2:	83 ff       	sbrs	r24, 3
    17d4:	3e c0       	rjmp	.+124    	; 0x1852 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    17d6:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    17da:	6a 2f       	mov	r22, r26
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	ab 01       	movw	r20, r22
    17e0:	4f 5f       	subi	r20, 0xFF	; 255
    17e2:	5f 4f       	sbci	r21, 0xFF	; 255
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    17ea:	fc 01       	movw	r30, r24
    17ec:	e0 58       	subi	r30, 0x80	; 128
    17ee:	fe 4f       	sbci	r31, 0xFE	; 254
    17f0:	30 81       	ld	r19, Z
    17f2:	fc 01       	movw	r30, r24
    17f4:	ed 59       	subi	r30, 0x9D	; 157
    17f6:	f6 4e       	sbci	r31, 0xE6	; 230
    17f8:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    17fa:	2f 5f       	subi	r18, 0xFF	; 255
    17fc:	82 2f       	mov	r24, r18
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	84 17       	cp	r24, r20
    1802:	95 07       	cpc	r25, r21
    1804:	94 f3       	brlt	.-28     	; 0x17ea <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    1806:	83 e6       	ldi	r24, 0x63	; 99
    1808:	99 e1       	ldi	r25, 0x19	; 25
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    180e:	a2 50       	subi	r26, 0x02	; 2
    1810:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1812:	fb 01       	movw	r30, r22
    1814:	ed 59       	subi	r30, 0x9D	; 157
    1816:	f6 4e       	sbci	r31, 0xE6	; 230
    1818:	80 81       	ld	r24, Z
    181a:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    181c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    1820:	8a 55       	subi	r24, 0x5A	; 90
    1822:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    1824:	ce 01       	movw	r24, r28
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	bd da       	rcall	.-2694   	; 0xda4 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    182a:	e1 e4       	ldi	r30, 0x41	; 65
    182c:	f1 e0       	ldi	r31, 0x01	; 1
    182e:	80 81       	ld	r24, Z
    1830:	8f 71       	andi	r24, 0x1F	; 31
    1832:	86 31       	cpi	r24, 0x16	; 22
    1834:	e1 f7       	brne	.-8      	; 0x182e <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    1836:	ef e4       	ldi	r30, 0x4F	; 79
    1838:	f1 e0       	ldi	r31, 0x01	; 1
    183a:	80 81       	ld	r24, Z
    183c:	88 60       	ori	r24, 0x08	; 8
    183e:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1840:	ec e4       	ldi	r30, 0x4C	; 76
    1842:	f1 e0       	ldi	r31, 0x01	; 1
    1844:	80 81       	ld	r24, Z
    1846:	8f 77       	andi	r24, 0x7F	; 127
    1848:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    184a:	80 81       	ld	r24, Z
    184c:	80 68       	ori	r24, 0x80	; 128
    184e:	80 83       	st	Z, r24
    1850:	23 c0       	rjmp	.+70     	; 0x1898 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    1852:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1856:	86 ff       	sbrs	r24, 6
    1858:	1f c0       	rjmp	.+62     	; 0x1898 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    185a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    185e:	8f 71       	andi	r24, 0x1F	; 31
    1860:	89 31       	cpi	r24, 0x19	; 25
    1862:	a9 f4       	brne	.+42     	; 0x188e <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    1864:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1868:	12 95       	swap	r17
    186a:	16 95       	lsr	r17
    186c:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    186e:	49 f0       	breq	.+18     	; 0x1882 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1870:	13 30       	cpi	r17, 0x03	; 3
    1872:	21 f0       	breq	.+8      	; 0x187c <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    1874:	15 30       	cpi	r17, 0x05	; 5
    1876:	21 f0       	breq	.+8      	; 0x1880 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1878:	13 e0       	ldi	r17, 0x03	; 3
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    187c:	11 e0       	ldi	r17, 0x01	; 1
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    1880:	12 e0       	ldi	r17, 0x02	; 2
    1882:	1b df       	rcall	.-458    	; 0x16ba <phySetRxState>
      phyState = PHY_STATE_IDLE;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <phyState>

      PHY_DataConf(status);
    188a:	81 2f       	mov	r24, r17
    188c:	28 de       	rcall	.-944    	; 0x14de <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    188e:	ef e4       	ldi	r30, 0x4F	; 79
    1890:	f1 e0       	ldi	r31, 0x01	; 1
    1892:	80 81       	ld	r24, Z
    1894:	80 64       	ori	r24, 0x40	; 64
    1896:	80 83       	st	Z, r24
  }
}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	08 95       	ret

000018aa <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    18aa:	0e 94 a1 01 	call	0x342	; 0x342 <HAL_Init>
  SYS_TimerInit();
    18ae:	6d d0       	rcall	.+218    	; 0x198a <SYS_TimerInit>
  PHY_Init();
    18b0:	10 df       	rcall	.-480    	; 0x16d2 <PHY_Init>
    18b2:	0c 94 42 03 	jmp	0x684	; 0x684 <NWK_Init>
  NWK_Init();
    18b6:	08 95       	ret

000018b8 <SYS_TaskHandler>:
    18b8:	7d df       	rcall	.-262    	; 0x17b4 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    18ba:	0e 94 70 03 	call	0x6e0	; 0x6e0 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    18be:	cc c0       	rjmp	.+408    	; 0x1a58 <SYS_TimerTaskHandler>
    18c0:	08 95       	ret

000018c2 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	ec 01       	movw	r28, r24
  if (timers)
    18cc:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    18d0:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	09 f4       	brne	.+2      	; 0x18da <placeTimer+0x18>
    18d8:	45 c0       	rjmp	.+138    	; 0x1964 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    18da:	4e 81       	ldd	r20, Y+6	; 0x06
    18dc:	5f 81       	ldd	r21, Y+7	; 0x07
    18de:	68 85       	ldd	r22, Y+8	; 0x08
    18e0:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    18e2:	fc 01       	movw	r30, r24
    18e4:	02 81       	ldd	r16, Z+2	; 0x02
    18e6:	13 81       	ldd	r17, Z+3	; 0x03
    18e8:	24 81       	ldd	r18, Z+4	; 0x04
    18ea:	35 81       	ldd	r19, Z+5	; 0x05
    18ec:	40 17       	cp	r20, r16
    18ee:	51 07       	cpc	r21, r17
    18f0:	62 07       	cpc	r22, r18
    18f2:	73 07       	cpc	r23, r19
    18f4:	60 f0       	brcs	.+24     	; 0x190e <placeTimer+0x4c>
    18f6:	dc 01       	movw	r26, r24
    18f8:	17 c0       	rjmp	.+46     	; 0x1928 <placeTimer+0x66>
    18fa:	02 81       	ldd	r16, Z+2	; 0x02
    18fc:	13 81       	ldd	r17, Z+3	; 0x03
    18fe:	24 81       	ldd	r18, Z+4	; 0x04
    1900:	35 81       	ldd	r19, Z+5	; 0x05
    1902:	40 17       	cp	r20, r16
    1904:	51 07       	cpc	r21, r17
    1906:	62 07       	cpc	r22, r18
    1908:	73 07       	cpc	r23, r19
    190a:	68 f4       	brcc	.+26     	; 0x1926 <placeTimer+0x64>
    190c:	03 c0       	rjmp	.+6      	; 0x1914 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    190e:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1910:	a0 e0       	ldi	r26, 0x00	; 0
    1912:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1914:	04 1b       	sub	r16, r20
    1916:	15 0b       	sbc	r17, r21
    1918:	26 0b       	sbc	r18, r22
    191a:	37 0b       	sbc	r19, r23
    191c:	02 83       	std	Z+2, r16	; 0x02
    191e:	13 83       	std	Z+3, r17	; 0x03
    1920:	24 83       	std	Z+4, r18	; 0x04
    1922:	35 83       	std	Z+5, r19	; 0x05
         break;
    1924:	0a c0       	rjmp	.+20     	; 0x193a <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1926:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    1928:	40 1b       	sub	r20, r16
    192a:	51 0b       	sbc	r21, r17
    192c:	62 0b       	sbc	r22, r18
    192e:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1930:	ed 91       	ld	r30, X+
    1932:	fc 91       	ld	r31, X
    1934:	11 97       	sbiw	r26, 0x01	; 1
    1936:	30 97       	sbiw	r30, 0x00	; 0
    1938:	01 f7       	brne	.-64     	; 0x18fa <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    193a:	4a 83       	std	Y+2, r20	; 0x02
    193c:	5b 83       	std	Y+3, r21	; 0x03
    193e:	6c 83       	std	Y+4, r22	; 0x04
    1940:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1942:	10 97       	sbiw	r26, 0x00	; 0
    1944:	41 f0       	breq	.+16     	; 0x1956 <placeTimer+0x94>
    {
      timer->next = prev->next;
    1946:	8d 91       	ld	r24, X+
    1948:	9c 91       	ld	r25, X
    194a:	11 97       	sbiw	r26, 0x01	; 1
    194c:	99 83       	std	Y+1, r25	; 0x01
    194e:	88 83       	st	Y, r24
      prev->next = timer;
    1950:	cd 93       	st	X+, r28
    1952:	dc 93       	st	X, r29
    1954:	15 c0       	rjmp	.+42     	; 0x1980 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    1956:	99 83       	std	Y+1, r25	; 0x01
    1958:	88 83       	st	Y, r24
      timers = timer;
    195a:	d0 93 e5 19 	sts	0x19E5, r29	; 0x8019e5 <timers+0x1>
    195e:	c0 93 e4 19 	sts	0x19E4, r28	; 0x8019e4 <timers>
    1962:	0e c0       	rjmp	.+28     	; 0x1980 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1964:	19 82       	std	Y+1, r1	; 0x01
    1966:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	9f 81       	ldd	r25, Y+7	; 0x07
    196c:	a8 85       	ldd	r26, Y+8	; 0x08
    196e:	b9 85       	ldd	r27, Y+9	; 0x09
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	ac 83       	std	Y+4, r26	; 0x04
    1976:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    1978:	d0 93 e5 19 	sts	0x19E5, r29	; 0x8019e5 <timers+0x1>
    197c:	c0 93 e4 19 	sts	0x19E4, r28	; 0x8019e4 <timers>
  }
}
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	08 95       	ret

0000198a <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    198a:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <timers+0x1>
    198e:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <timers>
    1992:	08 95       	ret

00001994 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1998:	a0 91 e4 19 	lds	r26, 0x19E4	; 0x8019e4 <timers>
    199c:	b0 91 e5 19 	lds	r27, 0x19E5	; 0x8019e5 <timers+0x1>
    19a0:	10 97       	sbiw	r26, 0x00	; 0
    19a2:	91 f1       	breq	.+100    	; 0x1a08 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    19a4:	a8 17       	cp	r26, r24
    19a6:	b9 07       	cpc	r27, r25
    19a8:	51 f5       	brne	.+84     	; 0x19fe <SYS_TimerStop+0x6a>
    19aa:	0a c0       	rjmp	.+20     	; 0x19c0 <SYS_TimerStop+0x2c>
    19ac:	8e 17       	cp	r24, r30
    19ae:	9f 07       	cpc	r25, r31
    19b0:	29 f5       	brne	.+74     	; 0x19fc <SYS_TimerStop+0x68>
    {
      if (prev)
    19b2:	10 97       	sbiw	r26, 0x00	; 0
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <SYS_TimerStop+0x2e>
        prev->next = t->next;
    19b6:	20 81       	ld	r18, Z
    19b8:	31 81       	ldd	r19, Z+1	; 0x01
    19ba:	2d 93       	st	X+, r18
    19bc:	3c 93       	st	X, r19
    19be:	07 c0       	rjmp	.+14     	; 0x19ce <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    19c0:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    19c2:	20 81       	ld	r18, Z
    19c4:	31 81       	ldd	r19, Z+1	; 0x01
    19c6:	30 93 e5 19 	sts	0x19E5, r19	; 0x8019e5 <timers+0x1>
    19ca:	20 93 e4 19 	sts	0x19E4, r18	; 0x8019e4 <timers>

      if (t->next)
    19ce:	01 90       	ld	r0, Z+
    19d0:	f0 81       	ld	r31, Z
    19d2:	e0 2d       	mov	r30, r0
    19d4:	30 97       	sbiw	r30, 0x00	; 0
    19d6:	c1 f0       	breq	.+48     	; 0x1a08 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    19d8:	42 81       	ldd	r20, Z+2	; 0x02
    19da:	53 81       	ldd	r21, Z+3	; 0x03
    19dc:	64 81       	ldd	r22, Z+4	; 0x04
    19de:	75 81       	ldd	r23, Z+5	; 0x05
    19e0:	ec 01       	movw	r28, r24
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	9b 81       	ldd	r25, Y+3	; 0x03
    19e6:	ac 81       	ldd	r26, Y+4	; 0x04
    19e8:	bd 81       	ldd	r27, Y+5	; 0x05
    19ea:	84 0f       	add	r24, r20
    19ec:	95 1f       	adc	r25, r21
    19ee:	a6 1f       	adc	r26, r22
    19f0:	b7 1f       	adc	r27, r23
    19f2:	82 83       	std	Z+2, r24	; 0x02
    19f4:	93 83       	std	Z+3, r25	; 0x03
    19f6:	a4 83       	std	Z+4, r26	; 0x04
    19f8:	b5 83       	std	Z+5, r27	; 0x05
    19fa:	06 c0       	rjmp	.+12     	; 0x1a08 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    19fc:	df 01       	movw	r26, r30
    19fe:	ed 91       	ld	r30, X+
    1a00:	fc 91       	ld	r31, X
    1a02:	11 97       	sbiw	r26, 0x01	; 1
    1a04:	30 97       	sbiw	r30, 0x00	; 0
    1a06:	91 f6       	brne	.-92     	; 0x19ac <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a0e:	e0 91 e4 19 	lds	r30, 0x19E4	; 0x8019e4 <timers>
    1a12:	f0 91 e5 19 	lds	r31, 0x19E5	; 0x8019e5 <timers+0x1>
    1a16:	30 97       	sbiw	r30, 0x00	; 0
    1a18:	71 f0       	breq	.+28     	; 0x1a36 <SYS_TimerStarted+0x28>
    if (t == timer)
    1a1a:	e8 17       	cp	r30, r24
    1a1c:	f9 07       	cpc	r31, r25
    1a1e:	21 f4       	brne	.+8      	; 0x1a28 <SYS_TimerStarted+0x1a>
    1a20:	0c c0       	rjmp	.+24     	; 0x1a3a <SYS_TimerStarted+0x2c>
    1a22:	8e 17       	cp	r24, r30
    1a24:	9f 07       	cpc	r25, r31
    1a26:	59 f0       	breq	.+22     	; 0x1a3e <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a28:	01 90       	ld	r0, Z+
    1a2a:	f0 81       	ld	r31, Z
    1a2c:	e0 2d       	mov	r30, r0
    1a2e:	30 97       	sbiw	r30, 0x00	; 0
    1a30:	c1 f7       	brne	.-16     	; 0x1a22 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	08 95       	ret
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	08 95       	ret
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1a40:	08 95       	ret

00001a42 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1a48:	e2 df       	rcall	.-60     	; 0x1a0e <SYS_TimerStarted>
    1a4a:	81 11       	cpse	r24, r1
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <SYS_TimerStart+0x10>
    placeTimer(timer);
    1a4e:	ce 01       	movw	r24, r28
    1a50:	38 df       	rcall	.-400    	; 0x18c2 <placeTimer>
}
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	08 95       	ret

00001a58 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1a64:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <SYS_TimerTaskHandler+0x16>
    1a6c:	59 c0       	rjmp	.+178    	; 0x1b20 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    1a6e:	8f b7       	in	r24, 0x3f	; 63
    1a70:	f8 94       	cli
    cnt = halTimerIrqCount;
    1a72:	c0 90 e6 19 	lds	r12, 0x19E6	; 0x8019e6 <halTimerIrqCount>
    halTimerIrqCount = 0;
    1a76:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    1a7a:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1a7c:	d1 2c       	mov	r13, r1
    1a7e:	e1 2c       	mov	r14, r1
    1a80:	f1 2c       	mov	r15, r1
    1a82:	cc 0c       	add	r12, r12
    1a84:	dd 1c       	adc	r13, r13
    1a86:	ee 1c       	adc	r14, r14
    1a88:	ff 1c       	adc	r15, r15
    1a8a:	d7 01       	movw	r26, r14
    1a8c:	c6 01       	movw	r24, r12
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	aa 1f       	adc	r26, r26
    1a94:	bb 1f       	adc	r27, r27
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	aa 1f       	adc	r26, r26
    1a9c:	bb 1f       	adc	r27, r27
    1a9e:	c8 0e       	add	r12, r24
    1aa0:	d9 1e       	adc	r13, r25
    1aa2:	ea 1e       	adc	r14, r26
    1aa4:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1aa6:	c0 91 e4 19 	lds	r28, 0x19E4	; 0x8019e4 <timers>
    1aaa:	d0 91 e5 19 	lds	r29, 0x19E5	; 0x8019e5 <timers+0x1>
    1aae:	20 97       	sbiw	r28, 0x00	; 0
    1ab0:	b9 f1       	breq	.+110    	; 0x1b20 <SYS_TimerTaskHandler+0xc8>
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab6:	ac 81       	ldd	r26, Y+4	; 0x04
    1ab8:	bd 81       	ldd	r27, Y+5	; 0x05
    1aba:	c8 16       	cp	r12, r24
    1abc:	d9 06       	cpc	r13, r25
    1abe:	ea 06       	cpc	r14, r26
    1ac0:	fb 06       	cpc	r15, r27
    1ac2:	10 f1       	brcs	.+68     	; 0x1b08 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1ac4:	c8 1a       	sub	r12, r24
    1ac6:	d9 0a       	sbc	r13, r25
    1ac8:	ea 0a       	sbc	r14, r26
    1aca:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1acc:	88 81       	ld	r24, Y
    1ace:	99 81       	ldd	r25, Y+1	; 0x01
    1ad0:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    1ad4:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	11 f4       	brne	.+4      	; 0x1ae2 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    1ade:	ce 01       	movw	r24, r28
    1ae0:	f0 de       	rcall	.-544    	; 0x18c2 <placeTimer>
    timer->handler(timer);
    1ae2:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ae4:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1aea:	c0 91 e4 19 	lds	r28, 0x19E4	; 0x8019e4 <timers>
    1aee:	d0 91 e5 19 	lds	r29, 0x19E5	; 0x8019e5 <timers+0x1>
    1af2:	20 97       	sbiw	r28, 0x00	; 0
    1af4:	a9 f0       	breq	.+42     	; 0x1b20 <SYS_TimerTaskHandler+0xc8>
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	9b 81       	ldd	r25, Y+3	; 0x03
    1afa:	ac 81       	ldd	r26, Y+4	; 0x04
    1afc:	bd 81       	ldd	r27, Y+5	; 0x05
    1afe:	c8 16       	cp	r12, r24
    1b00:	d9 06       	cpc	r13, r25
    1b02:	ea 06       	cpc	r14, r26
    1b04:	fb 06       	cpc	r15, r27
    1b06:	f0 f6       	brcc	.-68     	; 0x1ac4 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0c:	ac 81       	ldd	r26, Y+4	; 0x04
    1b0e:	bd 81       	ldd	r27, Y+5	; 0x05
    1b10:	8c 19       	sub	r24, r12
    1b12:	9d 09       	sbc	r25, r13
    1b14:	ae 09       	sbc	r26, r14
    1b16:	bf 09       	sbc	r27, r15
    1b18:	8a 83       	std	Y+2, r24	; 0x02
    1b1a:	9b 83       	std	Y+3, r25	; 0x03
    1b1c:	ac 83       	std	Y+4, r26	; 0x04
    1b1e:	bd 83       	std	Y+5, r27	; 0x05
}
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	08 95       	ret

00001b2e <__udivmodsi4>:
    1b2e:	a1 e2       	ldi	r26, 0x21	; 33
    1b30:	1a 2e       	mov	r1, r26
    1b32:	aa 1b       	sub	r26, r26
    1b34:	bb 1b       	sub	r27, r27
    1b36:	fd 01       	movw	r30, r26
    1b38:	0d c0       	rjmp	.+26     	; 0x1b54 <__udivmodsi4_ep>

00001b3a <__udivmodsi4_loop>:
    1b3a:	aa 1f       	adc	r26, r26
    1b3c:	bb 1f       	adc	r27, r27
    1b3e:	ee 1f       	adc	r30, r30
    1b40:	ff 1f       	adc	r31, r31
    1b42:	a2 17       	cp	r26, r18
    1b44:	b3 07       	cpc	r27, r19
    1b46:	e4 07       	cpc	r30, r20
    1b48:	f5 07       	cpc	r31, r21
    1b4a:	20 f0       	brcs	.+8      	; 0x1b54 <__udivmodsi4_ep>
    1b4c:	a2 1b       	sub	r26, r18
    1b4e:	b3 0b       	sbc	r27, r19
    1b50:	e4 0b       	sbc	r30, r20
    1b52:	f5 0b       	sbc	r31, r21

00001b54 <__udivmodsi4_ep>:
    1b54:	66 1f       	adc	r22, r22
    1b56:	77 1f       	adc	r23, r23
    1b58:	88 1f       	adc	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	1a 94       	dec	r1
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <__udivmodsi4_loop>
    1b60:	60 95       	com	r22
    1b62:	70 95       	com	r23
    1b64:	80 95       	com	r24
    1b66:	90 95       	com	r25
    1b68:	9b 01       	movw	r18, r22
    1b6a:	ac 01       	movw	r20, r24
    1b6c:	bd 01       	movw	r22, r26
    1b6e:	cf 01       	movw	r24, r30
    1b70:	08 95       	ret

00001b72 <do_rand>:
    1b72:	8f 92       	push	r8
    1b74:	9f 92       	push	r9
    1b76:	af 92       	push	r10
    1b78:	bf 92       	push	r11
    1b7a:	cf 92       	push	r12
    1b7c:	df 92       	push	r13
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	ec 01       	movw	r28, r24
    1b88:	68 81       	ld	r22, Y
    1b8a:	79 81       	ldd	r23, Y+1	; 0x01
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b90:	61 15       	cp	r22, r1
    1b92:	71 05       	cpc	r23, r1
    1b94:	81 05       	cpc	r24, r1
    1b96:	91 05       	cpc	r25, r1
    1b98:	21 f4       	brne	.+8      	; 0x1ba2 <do_rand+0x30>
    1b9a:	64 e2       	ldi	r22, 0x24	; 36
    1b9c:	79 ed       	ldi	r23, 0xD9	; 217
    1b9e:	8b e5       	ldi	r24, 0x5B	; 91
    1ba0:	97 e0       	ldi	r25, 0x07	; 7
    1ba2:	2d e1       	ldi	r18, 0x1D	; 29
    1ba4:	33 ef       	ldi	r19, 0xF3	; 243
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	41 d0       	rcall	.+130    	; 0x1c2e <__divmodsi4>
    1bac:	49 01       	movw	r8, r18
    1bae:	5a 01       	movw	r10, r20
    1bb0:	9b 01       	movw	r18, r22
    1bb2:	ac 01       	movw	r20, r24
    1bb4:	a7 ea       	ldi	r26, 0xA7	; 167
    1bb6:	b1 e4       	ldi	r27, 0x41	; 65
    1bb8:	56 d0       	rcall	.+172    	; 0x1c66 <__muluhisi3>
    1bba:	6b 01       	movw	r12, r22
    1bbc:	7c 01       	movw	r14, r24
    1bbe:	ac ee       	ldi	r26, 0xEC	; 236
    1bc0:	b4 ef       	ldi	r27, 0xF4	; 244
    1bc2:	a5 01       	movw	r20, r10
    1bc4:	94 01       	movw	r18, r8
    1bc6:	5b d0       	rcall	.+182    	; 0x1c7e <__mulohisi3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8c 0d       	add	r24, r12
    1bce:	9d 1d       	adc	r25, r13
    1bd0:	ae 1d       	adc	r26, r14
    1bd2:	bf 1d       	adc	r27, r15
    1bd4:	b7 ff       	sbrs	r27, 7
    1bd6:	03 c0       	rjmp	.+6      	; 0x1bde <do_rand+0x6c>
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	a1 09       	sbc	r26, r1
    1bdc:	b0 48       	sbci	r27, 0x80	; 128
    1bde:	88 83       	st	Y, r24
    1be0:	99 83       	std	Y+1, r25	; 0x01
    1be2:	aa 83       	std	Y+2, r26	; 0x02
    1be4:	bb 83       	std	Y+3, r27	; 0x03
    1be6:	9f 77       	andi	r25, 0x7F	; 127
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	df 90       	pop	r13
    1bf2:	cf 90       	pop	r12
    1bf4:	bf 90       	pop	r11
    1bf6:	af 90       	pop	r10
    1bf8:	9f 90       	pop	r9
    1bfa:	8f 90       	pop	r8
    1bfc:	08 95       	ret

00001bfe <rand_r>:
    1bfe:	b9 cf       	rjmp	.-142    	; 0x1b72 <do_rand>

00001c00 <rand>:
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	92 e0       	ldi	r25, 0x02	; 2
    1c04:	b6 cf       	rjmp	.-148    	; 0x1b72 <do_rand>

00001c06 <srand>:
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1c0e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1c12:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1c16:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1c1a:	08 95       	ret

00001c1c <memcpy>:
    1c1c:	fb 01       	movw	r30, r22
    1c1e:	dc 01       	movw	r26, r24
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <memcpy+0xa>
    1c22:	01 90       	ld	r0, Z+
    1c24:	0d 92       	st	X+, r0
    1c26:	41 50       	subi	r20, 0x01	; 1
    1c28:	50 40       	sbci	r21, 0x00	; 0
    1c2a:	d8 f7       	brcc	.-10     	; 0x1c22 <memcpy+0x6>
    1c2c:	08 95       	ret

00001c2e <__divmodsi4>:
    1c2e:	05 2e       	mov	r0, r21
    1c30:	97 fb       	bst	r25, 7
    1c32:	16 f4       	brtc	.+4      	; 0x1c38 <__divmodsi4+0xa>
    1c34:	00 94       	com	r0
    1c36:	0f d0       	rcall	.+30     	; 0x1c56 <__negsi2>
    1c38:	57 fd       	sbrc	r21, 7
    1c3a:	05 d0       	rcall	.+10     	; 0x1c46 <__divmodsi4_neg2>
    1c3c:	78 df       	rcall	.-272    	; 0x1b2e <__udivmodsi4>
    1c3e:	07 fc       	sbrc	r0, 7
    1c40:	02 d0       	rcall	.+4      	; 0x1c46 <__divmodsi4_neg2>
    1c42:	46 f4       	brtc	.+16     	; 0x1c54 <__divmodsi4_exit>
    1c44:	08 c0       	rjmp	.+16     	; 0x1c56 <__negsi2>

00001c46 <__divmodsi4_neg2>:
    1c46:	50 95       	com	r21
    1c48:	40 95       	com	r20
    1c4a:	30 95       	com	r19
    1c4c:	21 95       	neg	r18
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	4f 4f       	sbci	r20, 0xFF	; 255
    1c52:	5f 4f       	sbci	r21, 0xFF	; 255

00001c54 <__divmodsi4_exit>:
    1c54:	08 95       	ret

00001c56 <__negsi2>:
    1c56:	90 95       	com	r25
    1c58:	80 95       	com	r24
    1c5a:	70 95       	com	r23
    1c5c:	61 95       	neg	r22
    1c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c60:	8f 4f       	sbci	r24, 0xFF	; 255
    1c62:	9f 4f       	sbci	r25, 0xFF	; 255
    1c64:	08 95       	ret

00001c66 <__muluhisi3>:
    1c66:	0f d0       	rcall	.+30     	; 0x1c86 <__umulhisi3>
    1c68:	a5 9f       	mul	r26, r21
    1c6a:	90 0d       	add	r25, r0
    1c6c:	b4 9f       	mul	r27, r20
    1c6e:	90 0d       	add	r25, r0
    1c70:	a4 9f       	mul	r26, r20
    1c72:	80 0d       	add	r24, r0
    1c74:	91 1d       	adc	r25, r1
    1c76:	11 24       	eor	r1, r1
    1c78:	08 95       	ret

00001c7a <__mulshisi3>:
    1c7a:	b7 ff       	sbrs	r27, 7
    1c7c:	f4 cf       	rjmp	.-24     	; 0x1c66 <__muluhisi3>

00001c7e <__mulohisi3>:
    1c7e:	f3 df       	rcall	.-26     	; 0x1c66 <__muluhisi3>
    1c80:	82 1b       	sub	r24, r18
    1c82:	93 0b       	sbc	r25, r19
    1c84:	08 95       	ret

00001c86 <__umulhisi3>:
    1c86:	a2 9f       	mul	r26, r18
    1c88:	b0 01       	movw	r22, r0
    1c8a:	b3 9f       	mul	r27, r19
    1c8c:	c0 01       	movw	r24, r0
    1c8e:	a3 9f       	mul	r26, r19
    1c90:	70 0d       	add	r23, r0
    1c92:	81 1d       	adc	r24, r1
    1c94:	11 24       	eor	r1, r1
    1c96:	91 1d       	adc	r25, r1
    1c98:	b2 9f       	mul	r27, r18
    1c9a:	70 0d       	add	r23, r0
    1c9c:	81 1d       	adc	r24, r1
    1c9e:	11 24       	eor	r1, r1
    1ca0:	91 1d       	adc	r25, r1
    1ca2:	08 95       	ret

00001ca4 <_exit>:
    1ca4:	f8 94       	cli

00001ca6 <__stop_program>:
    1ca6:	ff cf       	rjmp	.-2      	; 0x1ca6 <__stop_program>
