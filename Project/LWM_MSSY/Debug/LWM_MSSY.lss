
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000e80  00000f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001694  00800214  00800214  00000f28  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000060f1  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cde  00000000  00000000  000074bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000254e  00000000  00000000  0000a19b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d0  00000000  00000000  0000c6ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ed6  00000000  00000000  0000d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024b5  00000000  00000000  0000ef92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  00011447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	ef c0       	rjmp	.+478    	; 0x214 <__vector_13>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c1       	rjmp	.+640    	; 0x312 <__vector_36>
  92:	00 00       	nop
  94:	22 c1       	rjmp	.+580    	; 0x2da <__vector_37>
  96:	00 00       	nop
  98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	a4 c0       	rjmp	.+328    	; 0x1f2 <__vector_42>
  aa:	00 00       	nop
  ac:	62 c0       	rjmp	.+196    	; 0x172 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	60 c0       	rjmp	.+192    	; 0x172 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5e c0       	rjmp	.+188    	; 0x172 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5c c0       	rjmp	.+184    	; 0x172 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5a c0       	rjmp	.+180    	; 0x172 <__bad_interrupt>
  be:	00 00       	nop
  c0:	58 c0       	rjmp	.+176    	; 0x172 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	56 c0       	rjmp	.+172    	; 0x172 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	52 c0       	rjmp	.+164    	; 0x172 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	50 c0       	rjmp	.+160    	; 0x172 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4e c0       	rjmp	.+156    	; 0x172 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4c c0       	rjmp	.+152    	; 0x172 <__bad_interrupt>
  da:	00 00       	nop
  dc:	4a c0       	rjmp	.+148    	; 0x172 <__bad_interrupt>
  de:	00 00       	nop
  e0:	48 c0       	rjmp	.+144    	; 0x172 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	46 c0       	rjmp	.+140    	; 0x172 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	44 c0       	rjmp	.+136    	; 0x172 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	42 c0       	rjmp	.+132    	; 0x172 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	40 c0       	rjmp	.+128    	; 0x172 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	3e c0       	rjmp	.+124    	; 0x172 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	3c c0       	rjmp	.+120    	; 0x172 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	3a c0       	rjmp	.+116    	; 0x172 <__bad_interrupt>
  fe:	00 00       	nop
 100:	38 c0       	rjmp	.+112    	; 0x172 <__bad_interrupt>
 102:	00 00       	nop
 104:	36 c0       	rjmp	.+108    	; 0x172 <__bad_interrupt>
 106:	00 00       	nop
 108:	34 c0       	rjmp	.+104    	; 0x172 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	32 c0       	rjmp	.+100    	; 0x172 <__bad_interrupt>
 10e:	00 00       	nop
 110:	30 c0       	rjmp	.+96     	; 0x172 <__bad_interrupt>
 112:	00 00       	nop
 114:	2e c0       	rjmp	.+92     	; 0x172 <__bad_interrupt>
 116:	00 00       	nop
 118:	2c c0       	rjmp	.+88     	; 0x172 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	2a c0       	rjmp	.+84     	; 0x172 <__bad_interrupt>
 11e:	00 00       	nop
 120:	28 c0       	rjmp	.+80     	; 0x172 <__bad_interrupt>
 122:	00 00       	nop
 124:	26 c0       	rjmp	.+76     	; 0x172 <__bad_interrupt>
 126:	00 00       	nop
 128:	24 c0       	rjmp	.+72     	; 0x172 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	22 c0       	rjmp	.+68     	; 0x172 <__bad_interrupt>
 12e:	00 00       	nop
 130:	20 c0       	rjmp	.+64     	; 0x172 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	e0 e8       	ldi	r30, 0x80	; 128
 14c:	fe e0       	ldi	r31, 0x0E	; 14
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a4 31       	cpi	r26, 0x14	; 20
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
 15e:	28 e1       	ldi	r18, 0x18	; 24
 160:	a4 e1       	ldi	r26, 0x14	; 20
 162:	b2 e0       	ldi	r27, 0x02	; 2
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a8 3a       	cpi	r26, 0xA8	; 168
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	02 d0       	rcall	.+4      	; 0x174 <main>
 170:	85 c6       	rjmp	.+3338   	; 0xe7c <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
SYS_Init();
 174:	0e d3       	rcall	.+1564   	; 0x792 <SYS_Init>
HAL_UartInit(38400);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	76 e9       	ldi	r23, 0x96	; 150
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	59 d0       	rcall	.+178    	; 0x232 <HAL_UartInit>
stdout = &uart_str;
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	92 e0       	ldi	r25, 0x02	; 2
 184:	90 93 a5 18 	sts	0x18A5, r25	; 0x8018a5 <__iob+0x3>
 188:	80 93 a4 18 	sts	0x18A4, r24	; 0x8018a4 <__iob+0x2>

printf("START");
 18c:	8e e0       	ldi	r24, 0x0E	; 14
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	9f 93       	push	r25
 192:	8f 93       	push	r24
 194:	b3 d3       	rcall	.+1894   	; 0x8fc <printf>
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
//{
//SYS_TaskHandler();
//HAL_UartTaskHandler();
//APP_TaskHandler();
//}
}
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	08 95       	ret

000001a0 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
 1a0:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	a8 95       	wdr
 1a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
 1ac:	88 61       	ori	r24, 0x18	; 24
 1ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
 1b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
 1b6:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
 1b8:	e1 e6       	ldi	r30, 0x61	; 97
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	80 83       	st	Z, r24
  CLKPR = 0;
 1c0:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
 1c2:	78 94       	sei

  HAL_TimerInit();
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <HAL_TimerInit>
 1c6:	08 95       	ret

000001c8 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
 1c8:	10 92 79 18 	sts	0x1879, r1	; 0x801879 <halTimerIrqCount>
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	97 e2       	ldi	r25, 0x27	; 39
 1d0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 1d4:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
 1d8:	e1 ea       	ldi	r30, 0xA1	; 161
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	88 e0       	ldi	r24, 0x08	; 8
 1de:	80 83       	st	Z, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	80 83       	st	Z, r24
 1e6:	e2 e7       	ldi	r30, 0x72	; 114
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	80 83       	st	Z, r24
 1f0:	08 95       	ret

000001f2 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
  halTimerIrqCount++;
 1fe:	80 91 79 18 	lds	r24, 0x1879	; 0x801879 <halTimerIrqCount>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 79 18 	sts	0x1879, r24	; 0x801879 <halTimerIrqCount>
}
 208:	8f 91       	pop	r24
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
  halSleepTimerEvent = true;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
}
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <HAL_UartInit>:
      newData = false;
      bytes = rxFifo.bytes;
    ATOMIC_SECTION_LEAVE

    if (new)
      HAL_UartBytesReceived(bytes);
 232:	dc 01       	movw	r26, r24
 234:	cb 01       	movw	r24, r22
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	9c 01       	movw	r18, r24
 248:	ad 01       	movw	r20, r26
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	44 1f       	adc	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	44 1f       	adc	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	74 e2       	ldi	r23, 0x24	; 36
 25e:	84 ef       	ldi	r24, 0xF4	; 244
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	2a d3       	rcall	.+1620   	; 0x8b8 <__udivmodsi4>
 264:	ba 01       	movw	r22, r20
 266:	a9 01       	movw	r20, r18
 268:	41 50       	subi	r20, 0x01	; 1
 26a:	51 09       	sbc	r21, r1
 26c:	61 09       	sbc	r22, r1
 26e:	71 09       	sbc	r23, r1
 270:	bb 27       	eor	r27, r27
 272:	a7 2f       	mov	r26, r23
 274:	96 2f       	mov	r25, r22
 276:	85 2f       	mov	r24, r21
 278:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 27c:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 286:	88 e9       	ldi	r24, 0x98	; 152
 288:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
 292:	e3 e4       	ldi	r30, 0x43	; 67
 294:	f5 e0       	ldi	r31, 0x05	; 5
 296:	82 eb       	ldi	r24, 0xB2	; 178
 298:	93 e0       	ldi	r25, 0x03	; 3
 29a:	91 87       	std	Z+9, r25	; 0x09
 29c:	80 87       	std	Z+8, r24	; 0x08
 29e:	80 e9       	ldi	r24, 0x90	; 144
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	95 83       	std	Z+5, r25	; 0x05
 2a4:	84 83       	std	Z+4, r24	; 0x04
 2a6:	17 82       	std	Z+7, r1	; 0x07
 2a8:	16 82       	std	Z+6, r1	; 0x06
 2aa:	11 82       	std	Z+1, r1	; 0x01
 2ac:	10 82       	st	Z, r1
 2ae:	13 82       	std	Z+3, r1	; 0x03
 2b0:	12 82       	std	Z+2, r1	; 0x02
 2b2:	e8 ea       	ldi	r30, 0xA8	; 168
 2b4:	f3 e0       	ldi	r31, 0x03	; 3
 2b6:	27 e1       	ldi	r18, 0x17	; 23
 2b8:	32 e0       	ldi	r19, 0x02	; 2
 2ba:	31 87       	std	Z+9, r19	; 0x09
 2bc:	20 87       	std	Z+8, r18	; 0x08
 2be:	95 83       	std	Z+5, r25	; 0x05
 2c0:	84 83       	std	Z+4, r24	; 0x04
 2c2:	17 82       	std	Z+7, r1	; 0x07
 2c4:	16 82       	std	Z+6, r1	; 0x06
 2c6:	11 82       	std	Z+1, r1	; 0x01
 2c8:	10 82       	st	Z, r1
 2ca:	13 82       	std	Z+3, r1	; 0x03
 2cc:	12 82       	std	Z+2, r1	; 0x02
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <udrEmpty>
 2d4:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <newData>
 2d8:	08 95       	ret

000002da <__vector_37>:
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	8f 93       	push	r24
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <udrEmpty>
 2f4:	e9 ec       	ldi	r30, 0xC9	; 201
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	8f 7d       	andi	r24, 0xDF	; 223
 2fc:	80 83       	st	Z, r24
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	8f 91       	pop	r24
 304:	0f 90       	pop	r0
 306:	0b be       	out	0x3b, r0	; 59
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_36>:
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	0b b6       	in	r0, 0x3b	; 59
 31e:	0f 92       	push	r0
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
 338:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 33c:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 340:	8c 71       	andi	r24, 0x1C	; 28
 342:	59 f5       	brne	.+86     	; 0x39a <__vector_36+0x88>
 344:	e8 ea       	ldi	r30, 0xA8	; 168
 346:	f3 e0       	ldi	r31, 0x03	; 3
 348:	46 81       	ldd	r20, Z+6	; 0x06
 34a:	57 81       	ldd	r21, Z+7	; 0x07
 34c:	84 81       	ldd	r24, Z+4	; 0x04
 34e:	95 81       	ldd	r25, Z+5	; 0x05
 350:	48 17       	cp	r20, r24
 352:	59 07       	cpc	r21, r25
 354:	11 f1       	breq	.+68     	; 0x39a <__vector_36+0x88>
 356:	40 85       	ldd	r20, Z+8	; 0x08
 358:	51 85       	ldd	r21, Z+9	; 0x09
 35a:	82 81       	ldd	r24, Z+2	; 0x02
 35c:	93 81       	ldd	r25, Z+3	; 0x03
 35e:	bc 01       	movw	r22, r24
 360:	6f 5f       	subi	r22, 0xFF	; 255
 362:	7f 4f       	sbci	r23, 0xFF	; 255
 364:	73 83       	std	Z+3, r23	; 0x03
 366:	62 83       	std	Z+2, r22	; 0x02
 368:	da 01       	movw	r26, r20
 36a:	a8 0f       	add	r26, r24
 36c:	b9 1f       	adc	r27, r25
 36e:	2c 93       	st	X, r18
 370:	22 81       	ldd	r18, Z+2	; 0x02
 372:	33 81       	ldd	r19, Z+3	; 0x03
 374:	84 81       	ldd	r24, Z+4	; 0x04
 376:	95 81       	ldd	r25, Z+5	; 0x05
 378:	28 17       	cp	r18, r24
 37a:	39 07       	cpc	r19, r25
 37c:	21 f4       	brne	.+8      	; 0x386 <__vector_36+0x74>
 37e:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <rxFifo+0x3>
 382:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <rxFifo+0x2>
 386:	e8 ea       	ldi	r30, 0xA8	; 168
 388:	f3 e0       	ldi	r31, 0x03	; 3
 38a:	86 81       	ldd	r24, Z+6	; 0x06
 38c:	97 81       	ldd	r25, Z+7	; 0x07
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	97 83       	std	Z+7, r25	; 0x07
 392:	86 83       	std	Z+6, r24	; 0x06
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <newData>
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0b be       	out	0x3b, r0	; 59
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <HAL_UartPrintChar>:
  }
}


int HAL_UartPrintChar(char character ,FILE *stream){
	while ((UCSR1A & (1 << UDRE1)) == 0){};
 3c0:	e8 ec       	ldi	r30, 0xC8	; 200
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	90 81       	ld	r25, Z
 3c6:	95 ff       	sbrs	r25, 5
 3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <HAL_UartPrintChar+0x4>
	UDR1 = character;
 3ca:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
	return 0 ;
}
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	08 95       	ret

000003d4 <NWK_Init>:
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
  PHY_SetPanId(panId);
 3d4:	ea e7       	ldi	r30, 0x7A	; 122
 3d6:	f8 e1       	ldi	r31, 0x18	; 24
 3d8:	14 82       	std	Z+4, r1	; 0x04
 3da:	15 82       	std	Z+5, r1	; 0x05
 3dc:	11 82       	std	Z+1, r1	; 0x01
 3de:	10 82       	st	Z, r1
 3e0:	17 a2       	std	Z+39, r1	; 0x27
 3e2:	16 a2       	std	Z+38, r1	; 0x26
 3e4:	e0 e8       	ldi	r30, 0x80	; 128
 3e6:	f8 e1       	ldi	r31, 0x18	; 24
 3e8:	80 ea       	ldi	r24, 0xA0	; 160
 3ea:	98 e1       	ldi	r25, 0x18	; 24
 3ec:	11 92       	st	Z+, r1
 3ee:	11 92       	st	Z+, r1
 3f0:	e8 17       	cp	r30, r24
 3f2:	f9 07       	cpc	r31, r25
 3f4:	d9 f7       	brne	.-10     	; 0x3ec <NWK_Init+0x18>
 3f6:	5c d1       	rcall	.+696    	; 0x6b0 <nwkTxInit>
 3f8:	e0 d0       	rcall	.+448    	; 0x5ba <nwkRxInit>
 3fa:	11 d0       	rcall	.+34     	; 0x41e <nwkFrameInit>
 3fc:	0b d0       	rcall	.+22     	; 0x414 <nwkDataReqInit>
 3fe:	3f c0       	rjmp	.+126    	; 0x47e <nwkRouteInit>
 400:	08 95       	ret

00000402 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
 402:	e8 2f       	mov	r30, r24
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	ee 0f       	add	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	e0 58       	subi	r30, 0x80	; 128
 40c:	f7 4e       	sbci	r31, 0xE7	; 231
 40e:	71 83       	std	Z+1, r23	; 0x01
 410:	60 83       	st	Z, r22
 412:	08 95       	ret

00000414 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
 414:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <nwkDataReqQueue+0x1>
 418:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <nwkDataReqQueue>
 41c:	08 95       	ret

0000041e <nwkFrameInit>:
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
  nwkIb.lock--;
 41e:	ef e4       	ldi	r30, 0x4F	; 79
 420:	f5 e0       	ldi	r31, 0x05	; 5
 422:	8d e5       	ldi	r24, 0x5D	; 93
 424:	95 e1       	ldi	r25, 0x15	; 21
 426:	10 82       	st	Z, r1
 428:	e7 57       	subi	r30, 0x77	; 119
 42a:	ff 4f       	sbci	r31, 0xFF	; 255
 42c:	e8 17       	cp	r30, r24
 42e:	f9 07       	cpc	r31, r25
 430:	d1 f7       	brne	.-12     	; 0x426 <nwkFrameInit+0x8>
 432:	08 95       	ret

00000434 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
 434:	00 97       	sbiw	r24, 0x00	; 0
 436:	41 f0       	breq	.+16     	; 0x448 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
 438:	fc 01       	movw	r30, r24
 43a:	e7 57       	subi	r30, 0x77	; 119
 43c:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
 43e:	85 e1       	ldi	r24, 0x15	; 21
 440:	ed 35       	cpi	r30, 0x5D	; 93
 442:	f8 07       	cpc	r31, r24
 444:	18 f0       	brcs	.+6      	; 0x44c <nwkFrameNext+0x18>
 446:	12 c0       	rjmp	.+36     	; 0x46c <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
 448:	ef e4       	ldi	r30, 0x4F	; 79
 44a:	f5 e0       	ldi	r31, 0x05	; 5
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
 44c:	80 81       	ld	r24, Z
 44e:	88 23       	and	r24, r24
 450:	21 f0       	breq	.+8      	; 0x45a <nwkFrameNext+0x26>
 452:	0f c0       	rjmp	.+30     	; 0x472 <nwkFrameNext+0x3e>
 454:	80 81       	ld	r24, Z
 456:	81 11       	cpse	r24, r1
 458:	0f c0       	rjmp	.+30     	; 0x478 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
 45a:	e7 57       	subi	r30, 0x77	; 119
 45c:	ff 4f       	sbci	r31, 0xFF	; 255
 45e:	85 e1       	ldi	r24, 0x15	; 21
 460:	ed 35       	cpi	r30, 0x5D	; 93
 462:	f8 07       	cpc	r31, r24
 464:	b8 f3       	brcs	.-18     	; 0x454 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	08 95       	ret
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
 472:	8e 2f       	mov	r24, r30
 474:	9f 2f       	mov	r25, r31
 476:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
 478:	8e 2f       	mov	r24, r30
 47a:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
 47c:	08 95       	ret

0000047e <nwkRouteInit>:
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
  }
}
 47e:	ae e5       	ldi	r26, 0x5E	; 94
 480:	b5 e1       	ldi	r27, 0x15	; 21
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	4f ef       	ldi	r20, 0xFF	; 255
 488:	5f ef       	ldi	r21, 0xFF	; 255
 48a:	11 96       	adiw	r26, 0x01	; 1
 48c:	5c 93       	st	X, r21
 48e:	4e 93       	st	-X, r20
 490:	fc 01       	movw	r30, r24
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	ee 0f       	add	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	e8 1b       	sub	r30, r24
 4a0:	f9 0b       	sbc	r31, r25
 4a2:	e3 5a       	subi	r30, 0xA3	; 163
 4a4:	fa 4e       	sbci	r31, 0xEA	; 234
 4a6:	20 81       	ld	r18, Z
 4a8:	2e 7f       	andi	r18, 0xFE	; 254
 4aa:	20 83       	st	Z, r18
 4ac:	14 96       	adiw	r26, 0x04	; 4
 4ae:	1c 92       	st	X, r1
 4b0:	14 97       	sbiw	r26, 0x04	; 4
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	17 96       	adiw	r26, 0x07	; 7
 4b6:	84 36       	cpi	r24, 0x64	; 100
 4b8:	91 05       	cpc	r25, r1
 4ba:	39 f7       	brne	.-50     	; 0x48a <nwkRouteInit+0xc>
 4bc:	08 95       	ret

000004be <NWK_RouteFindEntry>:
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ee e5       	ldi	r30, 0x5E	; 94
 4c8:	f5 e1       	ldi	r31, 0x15	; 21
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	06 2f       	mov	r16, r22
 4d0:	10 e0       	ldi	r17, 0x00	; 0
 4d2:	40 81       	ld	r20, Z
 4d4:	51 81       	ldd	r21, Z+1	; 0x01
 4d6:	48 17       	cp	r20, r24
 4d8:	59 07       	cpc	r21, r25
 4da:	b1 f4       	brne	.+44     	; 0x508 <NWK_RouteFindEntry+0x4a>
 4dc:	d9 01       	movw	r26, r18
 4de:	aa 0f       	add	r26, r26
 4e0:	bb 1f       	adc	r27, r27
 4e2:	aa 0f       	add	r26, r26
 4e4:	bb 1f       	adc	r27, r27
 4e6:	aa 0f       	add	r26, r26
 4e8:	bb 1f       	adc	r27, r27
 4ea:	a2 1b       	sub	r26, r18
 4ec:	b3 0b       	sbc	r27, r19
 4ee:	a3 5a       	subi	r26, 0xA3	; 163
 4f0:	ba 4e       	sbci	r27, 0xEA	; 234
 4f2:	4c 91       	ld	r20, X
 4f4:	46 95       	lsr	r20
 4f6:	41 70       	andi	r20, 0x01	; 1
 4f8:	c4 2f       	mov	r28, r20
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	d4 2f       	mov	r29, r20
 4fe:	c0 17       	cp	r28, r16
 500:	d1 07       	cpc	r29, r17
 502:	11 f4       	brne	.+4      	; 0x508 <NWK_RouteFindEntry+0x4a>
 504:	cd 01       	movw	r24, r26
 506:	08 c0       	rjmp	.+16     	; 0x518 <NWK_RouteFindEntry+0x5a>
 508:	2f 5f       	subi	r18, 0xFF	; 255
 50a:	3f 4f       	sbci	r19, 0xFF	; 255
 50c:	37 96       	adiw	r30, 0x07	; 7
 50e:	24 36       	cpi	r18, 0x64	; 100
 510:	31 05       	cpc	r19, r1
 512:	f9 f6       	brne	.-66     	; 0x4d2 <NWK_RouteFindEntry+0x14>
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	08 95       	ret

00000522 <NWK_RouteFreeEntry>:
 522:	fc 01       	movw	r30, r24
 524:	80 81       	ld	r24, Z
 526:	80 fd       	sbrc	r24, 0
 528:	05 c0       	rjmp	.+10     	; 0x534 <NWK_RouteFreeEntry+0x12>
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	9f ef       	ldi	r25, 0xFF	; 255
 52e:	92 83       	std	Z+2, r25	; 0x02
 530:	81 83       	std	Z+1, r24	; 0x01
 532:	15 82       	std	Z+5, r1	; 0x05
 534:	08 95       	ret

00000536 <nwkRouteRemove>:
 536:	c3 df       	rcall	.-122    	; 0x4be <NWK_RouteFindEntry>
 538:	00 97       	sbiw	r24, 0x00	; 0
 53a:	09 f0       	breq	.+2      	; 0x53e <nwkRouteRemove+0x8>
 53c:	f2 cf       	rjmp	.-28     	; 0x522 <NWK_RouteFreeEntry>
 53e:	08 95       	ret

00000540 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
 540:	fc 01       	movw	r30, r24
 542:	21 85       	ldd	r18, Z+9	; 0x09
 544:	26 30       	cpi	r18, 0x06	; 6
 546:	49 f4       	brne	.+18     	; 0x55a <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
 548:	07 80       	ldd	r0, Z+7	; 0x07
 54a:	f0 85       	ldd	r31, Z+8	; 0x08
 54c:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
 54e:	65 81       	ldd	r22, Z+5	; 0x05
 550:	83 81       	ldd	r24, Z+3	; 0x03
 552:	94 81       	ldd	r25, Z+4	; 0x04
 554:	f0 df       	rcall	.-32     	; 0x536 <nwkRouteRemove>

  return true;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
 55a:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
 55c:	08 95       	ret

0000055e <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
 55e:	dc 01       	movw	r26, r24
 560:	19 96       	adiw	r26, 0x09	; 9
 562:	2c 91       	ld	r18, X
 564:	19 97       	sbiw	r26, 0x09	; 9
 566:	22 23       	and	r18, r18
 568:	71 f0       	breq	.+28     	; 0x586 <nwkRxServiceDataInd+0x28>
    return false;

  switch (ind->data[0])
 56a:	17 96       	adiw	r26, 0x07	; 7
 56c:	ed 91       	ld	r30, X+
 56e:	fc 91       	ld	r31, X
 570:	18 97       	sbiw	r26, 0x08	; 8
 572:	20 81       	ld	r18, Z
 574:	22 23       	and	r18, r18
 576:	19 f0       	breq	.+6      	; 0x57e <nwkRxServiceDataInd+0x20>
 578:	21 30       	cpi	r18, 0x01	; 1
 57a:	19 f0       	breq	.+6      	; 0x582 <nwkRxServiceDataInd+0x24>
 57c:	06 c0       	rjmp	.+12     	; 0x58a <nwkRxServiceDataInd+0x2c>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
 57e:	bb c0       	rjmp	.+374    	; 0x6f6 <nwkTxAckReceived>
 580:	08 95       	ret

#ifdef NWK_ENABLE_ROUTING
    case NWK_COMMAND_ROUTE_ERROR:
      return nwkRouteErrorReceived(ind);
 582:	de cf       	rjmp	.-68     	; 0x540 <nwkRouteErrorReceived>
 584:	08 95       	ret
 586:	80 e0       	ldi	r24, 0x00	; 0
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
 588:	08 95       	ret
 58a:	80 e0       	ldi	r24, 0x00	; 0
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
 58c:	08 95       	ret

0000058e <nwkRxDuplicateRejectionTimerHandler>:
  }
}
 58e:	bc 01       	movw	r22, r24
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
 590:	ea e2       	ldi	r30, 0x2A	; 42
 592:	f8 e1       	ldi	r31, 0x18	; 24
 594:	2c e5       	ldi	r18, 0x5C	; 92
 596:	38 e1       	ldi	r19, 0x18	; 24
  bool restart = false;
 598:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
 59a:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
 59c:	90 81       	ld	r25, Z
 59e:	99 23       	and	r25, r25
 5a0:	19 f0       	breq	.+6      	; 0x5a8 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
 5a2:	91 50       	subi	r25, 0x01	; 1
 5a4:	90 83       	st	Z, r25
      restart = true;
 5a6:	45 2f       	mov	r20, r21
 5a8:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
 5aa:	e2 17       	cp	r30, r18
 5ac:	f3 07       	cpc	r31, r19
 5ae:	b1 f7       	brne	.-20     	; 0x59c <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
 5b0:	44 23       	and	r20, r20
 5b2:	11 f0       	breq	.+4      	; 0x5b8 <nwkRxDuplicateRejectionTimerHandler+0x2a>
 5b4:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
 5b6:	75 c1       	rjmp	.+746    	; 0x8a2 <SYS_TimerStart>
 5b8:	08 95       	ret

000005ba <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
 5ba:	ea e2       	ldi	r30, 0x2A	; 42
 5bc:	f8 e1       	ldi	r31, 0x18	; 24
 5be:	8c e5       	ldi	r24, 0x5C	; 92
 5c0:	98 e1       	ldi	r25, 0x18	; 24
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
 5c2:	10 82       	st	Z, r1
 5c4:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
 5c6:	e8 17       	cp	r30, r24
 5c8:	f9 07       	cpc	r31, r25
 5ca:	d9 f7       	brne	.-10     	; 0x5c2 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
 5cc:	e9 e1       	ldi	r30, 0x19	; 25
 5ce:	f8 e1       	ldi	r31, 0x18	; 24
 5d0:	84 e6       	ldi	r24, 0x64	; 100
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	a0 e0       	ldi	r26, 0x00	; 0
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	86 83       	std	Z+6, r24	; 0x06
 5da:	97 83       	std	Z+7, r25	; 0x07
 5dc:	a0 87       	std	Z+8, r26	; 0x08
 5de:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
 5e0:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
 5e2:	87 ec       	ldi	r24, 0xC7	; 199
 5e4:	92 e0       	ldi	r25, 0x02	; 2
 5e6:	94 87       	std	Z+12, r25	; 0x0c
 5e8:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
 5ea:	6f ea       	ldi	r22, 0xAF	; 175
 5ec:	72 e0       	ldi	r23, 0x02	; 2
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 cf       	rjmp	.-496    	; 0x402 <NWK_OpenEndpoint>
 5f2:	08 95       	ret

000005f4 <nwkTxDelayTimerHandler>:
  newFrame->header.macFcf = 0x8841;
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
  newFrame->header.macDstPanId = frame->header.macDstPanId;
  newFrame->header.macSrcAddr = nwkIb.addr;
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
}
 5f4:	ef 92       	push	r14
 5f6:	ff 92       	push	r15
 5f8:	0f 93       	push	r16
 5fa:	1f 93       	push	r17
 5fc:	cf 93       	push	r28
 5fe:	7c 01       	movw	r14, r24
 600:	10 e0       	ldi	r17, 0x00	; 0
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	01 e0       	ldi	r16, 0x01	; 1
 608:	c3 e1       	ldi	r28, 0x13	; 19
 60a:	13 c0       	rjmp	.+38     	; 0x632 <nwkTxDelayTimerHandler+0x3e>
 60c:	fc 01       	movw	r30, r24
 60e:	20 81       	ld	r18, Z
 610:	21 31       	cpi	r18, 0x11	; 17
 612:	79 f4       	brne	.+30     	; 0x632 <nwkTxDelayTimerHandler+0x3e>
 614:	ec 57       	subi	r30, 0x7C	; 124
 616:	ff 4f       	sbci	r31, 0xFF	; 255
 618:	20 81       	ld	r18, Z
 61a:	31 81       	ldd	r19, Z+1	; 0x01
 61c:	21 50       	subi	r18, 0x01	; 1
 61e:	31 09       	sbc	r19, r1
 620:	31 83       	std	Z+1, r19	; 0x01
 622:	20 83       	st	Z, r18
 624:	23 2b       	or	r18, r19
 626:	21 f4       	brne	.+8      	; 0x630 <nwkTxDelayTimerHandler+0x3c>
 628:	fc 01       	movw	r30, r24
 62a:	c0 83       	st	Z, r28
 62c:	10 2f       	mov	r17, r16
 62e:	01 c0       	rjmp	.+2      	; 0x632 <nwkTxDelayTimerHandler+0x3e>
 630:	10 2f       	mov	r17, r16
 632:	00 df       	rcall	.-512    	; 0x434 <nwkFrameNext>
 634:	00 97       	sbiw	r24, 0x00	; 0
 636:	51 f7       	brne	.-44     	; 0x60c <nwkTxDelayTimerHandler+0x18>
 638:	11 23       	and	r17, r17
 63a:	11 f0       	breq	.+4      	; 0x640 <nwkTxDelayTimerHandler+0x4c>
 63c:	c7 01       	movw	r24, r14
 63e:	31 d1       	rcall	.+610    	; 0x8a2 <SYS_TimerStart>
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	08 95       	ret

0000064c <nwkTxAckWaitTimerHandler>:
 64c:	ef 92       	push	r14
 64e:	ff 92       	push	r15
 650:	0f 93       	push	r16
 652:	1f 93       	push	r17
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	7c 01       	movw	r14, r24
 65a:	10 e0       	ldi	r17, 0x00	; 0
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	01 e0       	ldi	r16, 0x01	; 1
 662:	d7 e1       	ldi	r29, 0x17	; 23
 664:	c0 e1       	ldi	r28, 0x10	; 16
 666:	16 c0       	rjmp	.+44     	; 0x694 <nwkTxAckWaitTimerHandler+0x48>
 668:	fc 01       	movw	r30, r24
 66a:	20 81       	ld	r18, Z
 66c:	26 31       	cpi	r18, 0x16	; 22
 66e:	91 f4       	brne	.+36     	; 0x694 <nwkTxAckWaitTimerHandler+0x48>
 670:	ec 57       	subi	r30, 0x7C	; 124
 672:	ff 4f       	sbci	r31, 0xFF	; 255
 674:	20 81       	ld	r18, Z
 676:	31 81       	ldd	r19, Z+1	; 0x01
 678:	21 50       	subi	r18, 0x01	; 1
 67a:	31 09       	sbc	r19, r1
 67c:	31 83       	std	Z+1, r19	; 0x01
 67e:	20 83       	st	Z, r18
 680:	23 2b       	or	r18, r19
 682:	39 f4       	brne	.+14     	; 0x692 <nwkTxAckWaitTimerHandler+0x46>
 684:	fc 01       	movw	r30, r24
 686:	d0 83       	st	Z, r29
 688:	ed 57       	subi	r30, 0x7D	; 125
 68a:	ff 4f       	sbci	r31, 0xFF	; 255
 68c:	c0 83       	st	Z, r28
 68e:	10 2f       	mov	r17, r16
 690:	01 c0       	rjmp	.+2      	; 0x694 <nwkTxAckWaitTimerHandler+0x48>
 692:	10 2f       	mov	r17, r16
 694:	cf de       	rcall	.-610    	; 0x434 <nwkFrameNext>
 696:	00 97       	sbiw	r24, 0x00	; 0
 698:	39 f7       	brne	.-50     	; 0x668 <nwkTxAckWaitTimerHandler+0x1c>
 69a:	11 23       	and	r17, r17
 69c:	11 f0       	breq	.+4      	; 0x6a2 <nwkTxAckWaitTimerHandler+0x56>
 69e:	c7 01       	movw	r24, r14
 6a0:	00 d1       	rcall	.+512    	; 0x8a2 <SYS_TimerStart>
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	ff 90       	pop	r15
 6ac:	ef 90       	pop	r14
 6ae:	08 95       	ret

000006b0 <nwkTxInit>:
 6b0:	10 92 73 18 	sts	0x1873, r1	; 0x801873 <nwkTxPhyActiveFrame+0x1>
 6b4:	10 92 72 18 	sts	0x1872, r1	; 0x801872 <nwkTxPhyActiveFrame>
 6b8:	e5 e6       	ldi	r30, 0x65	; 101
 6ba:	f8 e1       	ldi	r31, 0x18	; 24
 6bc:	82 e3       	ldi	r24, 0x32	; 50
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	a0 e0       	ldi	r26, 0x00	; 0
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	86 83       	std	Z+6, r24	; 0x06
 6c6:	97 83       	std	Z+7, r25	; 0x07
 6c8:	a0 87       	std	Z+8, r26	; 0x08
 6ca:	b1 87       	std	Z+9, r27	; 0x09
 6cc:	12 86       	std	Z+10, r1	; 0x0a
 6ce:	86 e2       	ldi	r24, 0x26	; 38
 6d0:	93 e0       	ldi	r25, 0x03	; 3
 6d2:	94 87       	std	Z+12, r25	; 0x0c
 6d4:	83 87       	std	Z+11, r24	; 0x0b
 6d6:	e8 e5       	ldi	r30, 0x58	; 88
 6d8:	f8 e1       	ldi	r31, 0x18	; 24
 6da:	8a e0       	ldi	r24, 0x0A	; 10
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	a0 e0       	ldi	r26, 0x00	; 0
 6e0:	b0 e0       	ldi	r27, 0x00	; 0
 6e2:	86 83       	std	Z+6, r24	; 0x06
 6e4:	97 83       	std	Z+7, r25	; 0x07
 6e6:	a0 87       	std	Z+8, r26	; 0x08
 6e8:	b1 87       	std	Z+9, r27	; 0x09
 6ea:	12 86       	std	Z+10, r1	; 0x0a
 6ec:	8a ef       	ldi	r24, 0xFA	; 250
 6ee:	92 e0       	ldi	r25, 0x02	; 2
 6f0:	94 87       	std	Z+12, r25	; 0x0c
 6f2:	83 87       	std	Z+11, r24	; 0x0b
 6f4:	08 95       	ret

000006f6 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
 6fa:	fc 01       	movw	r30, r24
 6fc:	21 85       	ldd	r18, Z+9	; 0x09
 6fe:	23 30       	cpi	r18, 0x03	; 3
 700:	d9 f4       	brne	.+54     	; 0x738 <nwkTxAckReceived+0x42>
 702:	10 c0       	rjmp	.+32     	; 0x724 <nwkTxAckReceived+0x2e>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
 704:	fc 01       	movw	r30, r24
 706:	20 81       	ld	r18, Z
 708:	26 31       	cpi	r18, 0x16	; 22
 70a:	89 f4       	brne	.+34     	; 0x72e <nwkTxAckReceived+0x38>
 70c:	34 85       	ldd	r19, Z+12	; 0x0c
 70e:	29 81       	ldd	r18, Y+1	; 0x01
 710:	32 13       	cpse	r19, r18
 712:	0d c0       	rjmp	.+26     	; 0x72e <nwkTxAckReceived+0x38>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
 714:	27 e1       	ldi	r18, 0x17	; 23
 716:	20 83       	st	Z, r18
      frame->tx.control = command->control;
 718:	2a 81       	ldd	r18, Y+2	; 0x02
 71a:	ea 57       	subi	r30, 0x7A	; 122
 71c:	ff 4f       	sbci	r31, 0xFF	; 255
 71e:	20 83       	st	Z, r18
      return true;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	0b c0       	rjmp	.+22     	; 0x73a <nwkTxAckReceived+0x44>
 724:	fc 01       	movw	r30, r24

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
 726:	c7 81       	ldd	r28, Z+7	; 0x07
 728:	d0 85       	ldd	r29, Z+8	; 0x08
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	90 e0       	ldi	r25, 0x00	; 0
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
 72e:	82 de       	rcall	.-764    	; 0x434 <nwkFrameNext>
 730:	00 97       	sbiw	r24, 0x00	; 0
 732:	41 f7       	brne	.-48     	; 0x704 <nwkTxAckReceived+0xe>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	01 c0       	rjmp	.+2      	; 0x73a <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
 738:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <phyTrxSetState>:
  phyTrxSetState(TRX_CMD_TRX_OFF);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  if (phyRxState)
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
 740:	93 e0       	ldi	r25, 0x03	; 3
 742:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
 746:	e1 e4       	ldi	r30, 0x41	; 65
 748:	f1 e0       	ldi	r31, 0x01	; 1
 74a:	90 81       	ld	r25, Z
 74c:	9f 71       	andi	r25, 0x1F	; 31
 74e:	98 30       	cpi	r25, 0x08	; 8
 750:	e1 f7       	brne	.-8      	; 0x74a <phyTrxSetState+0xa>
 752:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
 756:	e1 e4       	ldi	r30, 0x41	; 65
 758:	f1 e0       	ldi	r31, 0x01	; 1
 75a:	90 81       	ld	r25, Z
 75c:	9f 71       	andi	r25, 0x1F	; 31
 75e:	89 13       	cpse	r24, r25
 760:	fc cf       	rjmp	.-8      	; 0x75a <phyTrxSetState+0x1a>
 762:	08 95       	ret

00000764 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
 764:	e9 e3       	ldi	r30, 0x39	; 57
 766:	f1 e0       	ldi	r31, 0x01	; 1
 768:	80 81       	ld	r24, Z
 76a:	81 60       	ori	r24, 0x01	; 1
 76c:	80 83       	st	Z, r24

  phyRxState = false;
 76e:	10 92 75 18 	sts	0x1875, r1	; 0x801875 <phyRxState>
  phyBand = 0;
 772:	10 92 74 18 	sts	0x1874, r1	; 0x801874 <phyBand>
  phyState = PHY_STATE_IDLE;
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	80 93 76 18 	sts	0x1876, r24	; 0x801876 <phyState>

  phyTrxSetState(TRX_CMD_TRX_OFF);
 77c:	88 e0       	ldi	r24, 0x08	; 8
 77e:	e0 df       	rcall	.-64     	; 0x740 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
 780:	8b ee       	ldi	r24, 0xEB	; 235
 782:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
 786:	ec e4       	ldi	r30, 0x4C	; 76
 788:	f1 e0       	ldi	r31, 0x01	; 1
 78a:	80 81       	ld	r24, Z
 78c:	80 68       	ori	r24, 0x80	; 128
 78e:	80 83       	st	Z, r24
 790:	08 95       	ret

00000792 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
 792:	06 dd       	rcall	.-1524   	; 0x1a0 <HAL_Init>
  SYS_TimerInit();
 794:	67 d0       	rcall	.+206    	; 0x864 <SYS_TimerInit>
  PHY_Init();
 796:	e6 df       	rcall	.-52     	; 0x764 <PHY_Init>
 798:	1d ce       	rjmp	.-966    	; 0x3d4 <NWK_Init>
  NWK_Init();
 79a:	08 95       	ret

0000079c <placeTimer>:
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17

      break;
    }
    prev = t;
  }
}
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	ec 01       	movw	r28, r24
 7a6:	80 91 77 18 	lds	r24, 0x1877	; 0x801877 <timers>
 7aa:	90 91 78 18 	lds	r25, 0x1878	; 0x801878 <timers+0x1>
 7ae:	00 97       	sbiw	r24, 0x00	; 0
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <placeTimer+0x18>
 7b2:	45 c0       	rjmp	.+138    	; 0x83e <placeTimer+0xa2>
 7b4:	4e 81       	ldd	r20, Y+6	; 0x06
 7b6:	5f 81       	ldd	r21, Y+7	; 0x07
 7b8:	68 85       	ldd	r22, Y+8	; 0x08
 7ba:	79 85       	ldd	r23, Y+9	; 0x09
 7bc:	fc 01       	movw	r30, r24
 7be:	02 81       	ldd	r16, Z+2	; 0x02
 7c0:	13 81       	ldd	r17, Z+3	; 0x03
 7c2:	24 81       	ldd	r18, Z+4	; 0x04
 7c4:	35 81       	ldd	r19, Z+5	; 0x05
 7c6:	40 17       	cp	r20, r16
 7c8:	51 07       	cpc	r21, r17
 7ca:	62 07       	cpc	r22, r18
 7cc:	73 07       	cpc	r23, r19
 7ce:	60 f0       	brcs	.+24     	; 0x7e8 <placeTimer+0x4c>
 7d0:	dc 01       	movw	r26, r24
 7d2:	17 c0       	rjmp	.+46     	; 0x802 <placeTimer+0x66>
 7d4:	02 81       	ldd	r16, Z+2	; 0x02
 7d6:	13 81       	ldd	r17, Z+3	; 0x03
 7d8:	24 81       	ldd	r18, Z+4	; 0x04
 7da:	35 81       	ldd	r19, Z+5	; 0x05
 7dc:	40 17       	cp	r20, r16
 7de:	51 07       	cpc	r21, r17
 7e0:	62 07       	cpc	r22, r18
 7e2:	73 07       	cpc	r23, r19
 7e4:	68 f4       	brcc	.+26     	; 0x800 <placeTimer+0x64>
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <placeTimer+0x52>
 7e8:	fc 01       	movw	r30, r24
 7ea:	a0 e0       	ldi	r26, 0x00	; 0
 7ec:	b0 e0       	ldi	r27, 0x00	; 0
 7ee:	04 1b       	sub	r16, r20
 7f0:	15 0b       	sbc	r17, r21
 7f2:	26 0b       	sbc	r18, r22
 7f4:	37 0b       	sbc	r19, r23
 7f6:	02 83       	std	Z+2, r16	; 0x02
 7f8:	13 83       	std	Z+3, r17	; 0x03
 7fa:	24 83       	std	Z+4, r18	; 0x04
 7fc:	35 83       	std	Z+5, r19	; 0x05
 7fe:	0a c0       	rjmp	.+20     	; 0x814 <placeTimer+0x78>
 800:	df 01       	movw	r26, r30
 802:	40 1b       	sub	r20, r16
 804:	51 0b       	sbc	r21, r17
 806:	62 0b       	sbc	r22, r18
 808:	73 0b       	sbc	r23, r19
 80a:	ed 91       	ld	r30, X+
 80c:	fc 91       	ld	r31, X
 80e:	11 97       	sbiw	r26, 0x01	; 1
 810:	30 97       	sbiw	r30, 0x00	; 0
 812:	01 f7       	brne	.-64     	; 0x7d4 <placeTimer+0x38>
 814:	4a 83       	std	Y+2, r20	; 0x02
 816:	5b 83       	std	Y+3, r21	; 0x03
 818:	6c 83       	std	Y+4, r22	; 0x04
 81a:	7d 83       	std	Y+5, r23	; 0x05
 81c:	10 97       	sbiw	r26, 0x00	; 0
 81e:	41 f0       	breq	.+16     	; 0x830 <placeTimer+0x94>
 820:	8d 91       	ld	r24, X+
 822:	9c 91       	ld	r25, X
 824:	11 97       	sbiw	r26, 0x01	; 1
 826:	99 83       	std	Y+1, r25	; 0x01
 828:	88 83       	st	Y, r24
 82a:	cd 93       	st	X+, r28
 82c:	dc 93       	st	X, r29
 82e:	15 c0       	rjmp	.+42     	; 0x85a <placeTimer+0xbe>
 830:	99 83       	std	Y+1, r25	; 0x01
 832:	88 83       	st	Y, r24
 834:	d0 93 78 18 	sts	0x1878, r29	; 0x801878 <timers+0x1>
 838:	c0 93 77 18 	sts	0x1877, r28	; 0x801877 <timers>
 83c:	0e c0       	rjmp	.+28     	; 0x85a <placeTimer+0xbe>
 83e:	19 82       	std	Y+1, r1	; 0x01
 840:	18 82       	st	Y, r1
 842:	8e 81       	ldd	r24, Y+6	; 0x06
 844:	9f 81       	ldd	r25, Y+7	; 0x07
 846:	a8 85       	ldd	r26, Y+8	; 0x08
 848:	b9 85       	ldd	r27, Y+9	; 0x09
 84a:	8a 83       	std	Y+2, r24	; 0x02
 84c:	9b 83       	std	Y+3, r25	; 0x03
 84e:	ac 83       	std	Y+4, r26	; 0x04
 850:	bd 83       	std	Y+5, r27	; 0x05
 852:	d0 93 78 18 	sts	0x1878, r29	; 0x801878 <timers+0x1>
 856:	c0 93 77 18 	sts	0x1877, r28	; 0x801877 <timers>
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	1f 91       	pop	r17
 860:	0f 91       	pop	r16
 862:	08 95       	ret

00000864 <SYS_TimerInit>:
 864:	10 92 78 18 	sts	0x1878, r1	; 0x801878 <timers+0x1>
 868:	10 92 77 18 	sts	0x1877, r1	; 0x801877 <timers>
 86c:	08 95       	ret

0000086e <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
 86e:	e0 91 77 18 	lds	r30, 0x1877	; 0x801877 <timers>
 872:	f0 91 78 18 	lds	r31, 0x1878	; 0x801878 <timers+0x1>
 876:	30 97       	sbiw	r30, 0x00	; 0
 878:	71 f0       	breq	.+28     	; 0x896 <SYS_TimerStarted+0x28>
    if (t == timer)
 87a:	e8 17       	cp	r30, r24
 87c:	f9 07       	cpc	r31, r25
 87e:	21 f4       	brne	.+8      	; 0x888 <SYS_TimerStarted+0x1a>
 880:	0c c0       	rjmp	.+24     	; 0x89a <SYS_TimerStarted+0x2c>
 882:	8e 17       	cp	r24, r30
 884:	9f 07       	cpc	r25, r31
 886:	59 f0       	breq	.+22     	; 0x89e <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
 888:	01 90       	ld	r0, Z+
 88a:	f0 81       	ld	r31, Z
 88c:	e0 2d       	mov	r30, r0
 88e:	30 97       	sbiw	r30, 0x00	; 0
 890:	c1 f7       	brne	.-16     	; 0x882 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	08 95       	ret
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	08 95       	ret
 89e:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
 8a0:	08 95       	ret

000008a2 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
 8a8:	e2 df       	rcall	.-60     	; 0x86e <SYS_TimerStarted>
 8aa:	81 11       	cpse	r24, r1
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <SYS_TimerStart+0x10>
    placeTimer(timer);
 8ae:	ce 01       	movw	r24, r28
 8b0:	75 df       	rcall	.-278    	; 0x79c <placeTimer>
}
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	08 95       	ret

000008b8 <__udivmodsi4>:
 8b8:	a1 e2       	ldi	r26, 0x21	; 33
 8ba:	1a 2e       	mov	r1, r26
 8bc:	aa 1b       	sub	r26, r26
 8be:	bb 1b       	sub	r27, r27
 8c0:	fd 01       	movw	r30, r26
 8c2:	0d c0       	rjmp	.+26     	; 0x8de <__udivmodsi4_ep>

000008c4 <__udivmodsi4_loop>:
 8c4:	aa 1f       	adc	r26, r26
 8c6:	bb 1f       	adc	r27, r27
 8c8:	ee 1f       	adc	r30, r30
 8ca:	ff 1f       	adc	r31, r31
 8cc:	a2 17       	cp	r26, r18
 8ce:	b3 07       	cpc	r27, r19
 8d0:	e4 07       	cpc	r30, r20
 8d2:	f5 07       	cpc	r31, r21
 8d4:	20 f0       	brcs	.+8      	; 0x8de <__udivmodsi4_ep>
 8d6:	a2 1b       	sub	r26, r18
 8d8:	b3 0b       	sbc	r27, r19
 8da:	e4 0b       	sbc	r30, r20
 8dc:	f5 0b       	sbc	r31, r21

000008de <__udivmodsi4_ep>:
 8de:	66 1f       	adc	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	1a 94       	dec	r1
 8e8:	69 f7       	brne	.-38     	; 0x8c4 <__udivmodsi4_loop>
 8ea:	60 95       	com	r22
 8ec:	70 95       	com	r23
 8ee:	80 95       	com	r24
 8f0:	90 95       	com	r25
 8f2:	9b 01       	movw	r18, r22
 8f4:	ac 01       	movw	r20, r24
 8f6:	bd 01       	movw	r22, r26
 8f8:	cf 01       	movw	r24, r30
 8fa:	08 95       	ret

000008fc <printf>:
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	cd b7       	in	r28, 0x3d	; 61
 902:	de b7       	in	r29, 0x3e	; 62
 904:	ae 01       	movw	r20, r28
 906:	4a 5f       	subi	r20, 0xFA	; 250
 908:	5f 4f       	sbci	r21, 0xFF	; 255
 90a:	fa 01       	movw	r30, r20
 90c:	61 91       	ld	r22, Z+
 90e:	71 91       	ld	r23, Z+
 910:	af 01       	movw	r20, r30
 912:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <__iob+0x2>
 916:	90 91 a5 18 	lds	r25, 0x18A5	; 0x8018a5 <__iob+0x3>
 91a:	03 d0       	rcall	.+6      	; 0x922 <vfprintf>
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <vfprintf>:
 922:	2f 92       	push	r2
 924:	3f 92       	push	r3
 926:	4f 92       	push	r4
 928:	5f 92       	push	r5
 92a:	6f 92       	push	r6
 92c:	7f 92       	push	r7
 92e:	8f 92       	push	r8
 930:	9f 92       	push	r9
 932:	af 92       	push	r10
 934:	bf 92       	push	r11
 936:	cf 92       	push	r12
 938:	df 92       	push	r13
 93a:	ef 92       	push	r14
 93c:	ff 92       	push	r15
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	cd b7       	in	r28, 0x3d	; 61
 948:	de b7       	in	r29, 0x3e	; 62
 94a:	2b 97       	sbiw	r28, 0x0b	; 11
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	f8 94       	cli
 950:	de bf       	out	0x3e, r29	; 62
 952:	0f be       	out	0x3f, r0	; 63
 954:	cd bf       	out	0x3d, r28	; 61
 956:	6c 01       	movw	r12, r24
 958:	7b 01       	movw	r14, r22
 95a:	8a 01       	movw	r16, r20
 95c:	fc 01       	movw	r30, r24
 95e:	17 82       	std	Z+7, r1	; 0x07
 960:	16 82       	std	Z+6, r1	; 0x06
 962:	83 81       	ldd	r24, Z+3	; 0x03
 964:	81 ff       	sbrs	r24, 1
 966:	bf c1       	rjmp	.+894    	; 0xce6 <vfprintf+0x3c4>
 968:	ce 01       	movw	r24, r28
 96a:	01 96       	adiw	r24, 0x01	; 1
 96c:	3c 01       	movw	r6, r24
 96e:	f6 01       	movw	r30, r12
 970:	93 81       	ldd	r25, Z+3	; 0x03
 972:	f7 01       	movw	r30, r14
 974:	93 fd       	sbrc	r25, 3
 976:	85 91       	lpm	r24, Z+
 978:	93 ff       	sbrs	r25, 3
 97a:	81 91       	ld	r24, Z+
 97c:	7f 01       	movw	r14, r30
 97e:	88 23       	and	r24, r24
 980:	09 f4       	brne	.+2      	; 0x984 <vfprintf+0x62>
 982:	ad c1       	rjmp	.+858    	; 0xcde <vfprintf+0x3bc>
 984:	85 32       	cpi	r24, 0x25	; 37
 986:	39 f4       	brne	.+14     	; 0x996 <vfprintf+0x74>
 988:	93 fd       	sbrc	r25, 3
 98a:	85 91       	lpm	r24, Z+
 98c:	93 ff       	sbrs	r25, 3
 98e:	81 91       	ld	r24, Z+
 990:	7f 01       	movw	r14, r30
 992:	85 32       	cpi	r24, 0x25	; 37
 994:	21 f4       	brne	.+8      	; 0x99e <vfprintf+0x7c>
 996:	b6 01       	movw	r22, r12
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	d6 d1       	rcall	.+940    	; 0xd48 <fputc>
 99c:	e8 cf       	rjmp	.-48     	; 0x96e <vfprintf+0x4c>
 99e:	91 2c       	mov	r9, r1
 9a0:	21 2c       	mov	r2, r1
 9a2:	31 2c       	mov	r3, r1
 9a4:	ff e1       	ldi	r31, 0x1F	; 31
 9a6:	f3 15       	cp	r31, r3
 9a8:	d8 f0       	brcs	.+54     	; 0x9e0 <vfprintf+0xbe>
 9aa:	8b 32       	cpi	r24, 0x2B	; 43
 9ac:	79 f0       	breq	.+30     	; 0x9cc <vfprintf+0xaa>
 9ae:	38 f4       	brcc	.+14     	; 0x9be <vfprintf+0x9c>
 9b0:	80 32       	cpi	r24, 0x20	; 32
 9b2:	79 f0       	breq	.+30     	; 0x9d2 <vfprintf+0xb0>
 9b4:	83 32       	cpi	r24, 0x23	; 35
 9b6:	a1 f4       	brne	.+40     	; 0x9e0 <vfprintf+0xbe>
 9b8:	23 2d       	mov	r18, r3
 9ba:	20 61       	ori	r18, 0x10	; 16
 9bc:	1d c0       	rjmp	.+58     	; 0x9f8 <vfprintf+0xd6>
 9be:	8d 32       	cpi	r24, 0x2D	; 45
 9c0:	61 f0       	breq	.+24     	; 0x9da <vfprintf+0xb8>
 9c2:	80 33       	cpi	r24, 0x30	; 48
 9c4:	69 f4       	brne	.+26     	; 0x9e0 <vfprintf+0xbe>
 9c6:	23 2d       	mov	r18, r3
 9c8:	21 60       	ori	r18, 0x01	; 1
 9ca:	16 c0       	rjmp	.+44     	; 0x9f8 <vfprintf+0xd6>
 9cc:	83 2d       	mov	r24, r3
 9ce:	82 60       	ori	r24, 0x02	; 2
 9d0:	38 2e       	mov	r3, r24
 9d2:	e3 2d       	mov	r30, r3
 9d4:	e4 60       	ori	r30, 0x04	; 4
 9d6:	3e 2e       	mov	r3, r30
 9d8:	2a c0       	rjmp	.+84     	; 0xa2e <vfprintf+0x10c>
 9da:	f3 2d       	mov	r31, r3
 9dc:	f8 60       	ori	r31, 0x08	; 8
 9de:	1d c0       	rjmp	.+58     	; 0xa1a <vfprintf+0xf8>
 9e0:	37 fc       	sbrc	r3, 7
 9e2:	2d c0       	rjmp	.+90     	; 0xa3e <vfprintf+0x11c>
 9e4:	20 ed       	ldi	r18, 0xD0	; 208
 9e6:	28 0f       	add	r18, r24
 9e8:	2a 30       	cpi	r18, 0x0A	; 10
 9ea:	40 f0       	brcs	.+16     	; 0x9fc <vfprintf+0xda>
 9ec:	8e 32       	cpi	r24, 0x2E	; 46
 9ee:	b9 f4       	brne	.+46     	; 0xa1e <vfprintf+0xfc>
 9f0:	36 fc       	sbrc	r3, 6
 9f2:	75 c1       	rjmp	.+746    	; 0xcde <vfprintf+0x3bc>
 9f4:	23 2d       	mov	r18, r3
 9f6:	20 64       	ori	r18, 0x40	; 64
 9f8:	32 2e       	mov	r3, r18
 9fa:	19 c0       	rjmp	.+50     	; 0xa2e <vfprintf+0x10c>
 9fc:	36 fe       	sbrs	r3, 6
 9fe:	06 c0       	rjmp	.+12     	; 0xa0c <vfprintf+0xea>
 a00:	8a e0       	ldi	r24, 0x0A	; 10
 a02:	98 9e       	mul	r9, r24
 a04:	20 0d       	add	r18, r0
 a06:	11 24       	eor	r1, r1
 a08:	92 2e       	mov	r9, r18
 a0a:	11 c0       	rjmp	.+34     	; 0xa2e <vfprintf+0x10c>
 a0c:	ea e0       	ldi	r30, 0x0A	; 10
 a0e:	2e 9e       	mul	r2, r30
 a10:	20 0d       	add	r18, r0
 a12:	11 24       	eor	r1, r1
 a14:	22 2e       	mov	r2, r18
 a16:	f3 2d       	mov	r31, r3
 a18:	f0 62       	ori	r31, 0x20	; 32
 a1a:	3f 2e       	mov	r3, r31
 a1c:	08 c0       	rjmp	.+16     	; 0xa2e <vfprintf+0x10c>
 a1e:	8c 36       	cpi	r24, 0x6C	; 108
 a20:	21 f4       	brne	.+8      	; 0xa2a <vfprintf+0x108>
 a22:	83 2d       	mov	r24, r3
 a24:	80 68       	ori	r24, 0x80	; 128
 a26:	38 2e       	mov	r3, r24
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <vfprintf+0x10c>
 a2a:	88 36       	cpi	r24, 0x68	; 104
 a2c:	41 f4       	brne	.+16     	; 0xa3e <vfprintf+0x11c>
 a2e:	f7 01       	movw	r30, r14
 a30:	93 fd       	sbrc	r25, 3
 a32:	85 91       	lpm	r24, Z+
 a34:	93 ff       	sbrs	r25, 3
 a36:	81 91       	ld	r24, Z+
 a38:	7f 01       	movw	r14, r30
 a3a:	81 11       	cpse	r24, r1
 a3c:	b3 cf       	rjmp	.-154    	; 0x9a4 <vfprintf+0x82>
 a3e:	98 2f       	mov	r25, r24
 a40:	9f 7d       	andi	r25, 0xDF	; 223
 a42:	95 54       	subi	r25, 0x45	; 69
 a44:	93 30       	cpi	r25, 0x03	; 3
 a46:	28 f4       	brcc	.+10     	; 0xa52 <vfprintf+0x130>
 a48:	0c 5f       	subi	r16, 0xFC	; 252
 a4a:	1f 4f       	sbci	r17, 0xFF	; 255
 a4c:	9f e3       	ldi	r25, 0x3F	; 63
 a4e:	99 83       	std	Y+1, r25	; 0x01
 a50:	0d c0       	rjmp	.+26     	; 0xa6c <vfprintf+0x14a>
 a52:	83 36       	cpi	r24, 0x63	; 99
 a54:	31 f0       	breq	.+12     	; 0xa62 <vfprintf+0x140>
 a56:	83 37       	cpi	r24, 0x73	; 115
 a58:	71 f0       	breq	.+28     	; 0xa76 <vfprintf+0x154>
 a5a:	83 35       	cpi	r24, 0x53	; 83
 a5c:	09 f0       	breq	.+2      	; 0xa60 <vfprintf+0x13e>
 a5e:	55 c0       	rjmp	.+170    	; 0xb0a <vfprintf+0x1e8>
 a60:	20 c0       	rjmp	.+64     	; 0xaa2 <vfprintf+0x180>
 a62:	f8 01       	movw	r30, r16
 a64:	80 81       	ld	r24, Z
 a66:	89 83       	std	Y+1, r24	; 0x01
 a68:	0e 5f       	subi	r16, 0xFE	; 254
 a6a:	1f 4f       	sbci	r17, 0xFF	; 255
 a6c:	88 24       	eor	r8, r8
 a6e:	83 94       	inc	r8
 a70:	91 2c       	mov	r9, r1
 a72:	53 01       	movw	r10, r6
 a74:	12 c0       	rjmp	.+36     	; 0xa9a <vfprintf+0x178>
 a76:	28 01       	movw	r4, r16
 a78:	f2 e0       	ldi	r31, 0x02	; 2
 a7a:	4f 0e       	add	r4, r31
 a7c:	51 1c       	adc	r5, r1
 a7e:	f8 01       	movw	r30, r16
 a80:	a0 80       	ld	r10, Z
 a82:	b1 80       	ldd	r11, Z+1	; 0x01
 a84:	36 fe       	sbrs	r3, 6
 a86:	03 c0       	rjmp	.+6      	; 0xa8e <vfprintf+0x16c>
 a88:	69 2d       	mov	r22, r9
 a8a:	70 e0       	ldi	r23, 0x00	; 0
 a8c:	02 c0       	rjmp	.+4      	; 0xa92 <vfprintf+0x170>
 a8e:	6f ef       	ldi	r22, 0xFF	; 255
 a90:	7f ef       	ldi	r23, 0xFF	; 255
 a92:	c5 01       	movw	r24, r10
 a94:	4e d1       	rcall	.+668    	; 0xd32 <strnlen>
 a96:	4c 01       	movw	r8, r24
 a98:	82 01       	movw	r16, r4
 a9a:	f3 2d       	mov	r31, r3
 a9c:	ff 77       	andi	r31, 0x7F	; 127
 a9e:	3f 2e       	mov	r3, r31
 aa0:	15 c0       	rjmp	.+42     	; 0xacc <vfprintf+0x1aa>
 aa2:	28 01       	movw	r4, r16
 aa4:	22 e0       	ldi	r18, 0x02	; 2
 aa6:	42 0e       	add	r4, r18
 aa8:	51 1c       	adc	r5, r1
 aaa:	f8 01       	movw	r30, r16
 aac:	a0 80       	ld	r10, Z
 aae:	b1 80       	ldd	r11, Z+1	; 0x01
 ab0:	36 fe       	sbrs	r3, 6
 ab2:	03 c0       	rjmp	.+6      	; 0xaba <vfprintf+0x198>
 ab4:	69 2d       	mov	r22, r9
 ab6:	70 e0       	ldi	r23, 0x00	; 0
 ab8:	02 c0       	rjmp	.+4      	; 0xabe <vfprintf+0x19c>
 aba:	6f ef       	ldi	r22, 0xFF	; 255
 abc:	7f ef       	ldi	r23, 0xFF	; 255
 abe:	c5 01       	movw	r24, r10
 ac0:	2d d1       	rcall	.+602    	; 0xd1c <strnlen_P>
 ac2:	4c 01       	movw	r8, r24
 ac4:	f3 2d       	mov	r31, r3
 ac6:	f0 68       	ori	r31, 0x80	; 128
 ac8:	3f 2e       	mov	r3, r31
 aca:	82 01       	movw	r16, r4
 acc:	33 fc       	sbrc	r3, 3
 ace:	19 c0       	rjmp	.+50     	; 0xb02 <vfprintf+0x1e0>
 ad0:	82 2d       	mov	r24, r2
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	88 16       	cp	r8, r24
 ad6:	99 06       	cpc	r9, r25
 ad8:	a0 f4       	brcc	.+40     	; 0xb02 <vfprintf+0x1e0>
 ada:	b6 01       	movw	r22, r12
 adc:	80 e2       	ldi	r24, 0x20	; 32
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	33 d1       	rcall	.+614    	; 0xd48 <fputc>
 ae2:	2a 94       	dec	r2
 ae4:	f5 cf       	rjmp	.-22     	; 0xad0 <vfprintf+0x1ae>
 ae6:	f5 01       	movw	r30, r10
 ae8:	37 fc       	sbrc	r3, 7
 aea:	85 91       	lpm	r24, Z+
 aec:	37 fe       	sbrs	r3, 7
 aee:	81 91       	ld	r24, Z+
 af0:	5f 01       	movw	r10, r30
 af2:	b6 01       	movw	r22, r12
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	28 d1       	rcall	.+592    	; 0xd48 <fputc>
 af8:	21 10       	cpse	r2, r1
 afa:	2a 94       	dec	r2
 afc:	21 e0       	ldi	r18, 0x01	; 1
 afe:	82 1a       	sub	r8, r18
 b00:	91 08       	sbc	r9, r1
 b02:	81 14       	cp	r8, r1
 b04:	91 04       	cpc	r9, r1
 b06:	79 f7       	brne	.-34     	; 0xae6 <vfprintf+0x1c4>
 b08:	e1 c0       	rjmp	.+450    	; 0xccc <vfprintf+0x3aa>
 b0a:	84 36       	cpi	r24, 0x64	; 100
 b0c:	11 f0       	breq	.+4      	; 0xb12 <vfprintf+0x1f0>
 b0e:	89 36       	cpi	r24, 0x69	; 105
 b10:	39 f5       	brne	.+78     	; 0xb60 <vfprintf+0x23e>
 b12:	f8 01       	movw	r30, r16
 b14:	37 fe       	sbrs	r3, 7
 b16:	07 c0       	rjmp	.+14     	; 0xb26 <vfprintf+0x204>
 b18:	60 81       	ld	r22, Z
 b1a:	71 81       	ldd	r23, Z+1	; 0x01
 b1c:	82 81       	ldd	r24, Z+2	; 0x02
 b1e:	93 81       	ldd	r25, Z+3	; 0x03
 b20:	0c 5f       	subi	r16, 0xFC	; 252
 b22:	1f 4f       	sbci	r17, 0xFF	; 255
 b24:	08 c0       	rjmp	.+16     	; 0xb36 <vfprintf+0x214>
 b26:	60 81       	ld	r22, Z
 b28:	71 81       	ldd	r23, Z+1	; 0x01
 b2a:	07 2e       	mov	r0, r23
 b2c:	00 0c       	add	r0, r0
 b2e:	88 0b       	sbc	r24, r24
 b30:	99 0b       	sbc	r25, r25
 b32:	0e 5f       	subi	r16, 0xFE	; 254
 b34:	1f 4f       	sbci	r17, 0xFF	; 255
 b36:	f3 2d       	mov	r31, r3
 b38:	ff 76       	andi	r31, 0x6F	; 111
 b3a:	3f 2e       	mov	r3, r31
 b3c:	97 ff       	sbrs	r25, 7
 b3e:	09 c0       	rjmp	.+18     	; 0xb52 <vfprintf+0x230>
 b40:	90 95       	com	r25
 b42:	80 95       	com	r24
 b44:	70 95       	com	r23
 b46:	61 95       	neg	r22
 b48:	7f 4f       	sbci	r23, 0xFF	; 255
 b4a:	8f 4f       	sbci	r24, 0xFF	; 255
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	f0 68       	ori	r31, 0x80	; 128
 b50:	3f 2e       	mov	r3, r31
 b52:	2a e0       	ldi	r18, 0x0A	; 10
 b54:	30 e0       	ldi	r19, 0x00	; 0
 b56:	a3 01       	movw	r20, r6
 b58:	33 d1       	rcall	.+614    	; 0xdc0 <__ultoa_invert>
 b5a:	88 2e       	mov	r8, r24
 b5c:	86 18       	sub	r8, r6
 b5e:	44 c0       	rjmp	.+136    	; 0xbe8 <vfprintf+0x2c6>
 b60:	85 37       	cpi	r24, 0x75	; 117
 b62:	31 f4       	brne	.+12     	; 0xb70 <vfprintf+0x24e>
 b64:	23 2d       	mov	r18, r3
 b66:	2f 7e       	andi	r18, 0xEF	; 239
 b68:	b2 2e       	mov	r11, r18
 b6a:	2a e0       	ldi	r18, 0x0A	; 10
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	25 c0       	rjmp	.+74     	; 0xbba <vfprintf+0x298>
 b70:	93 2d       	mov	r25, r3
 b72:	99 7f       	andi	r25, 0xF9	; 249
 b74:	b9 2e       	mov	r11, r25
 b76:	8f 36       	cpi	r24, 0x6F	; 111
 b78:	c1 f0       	breq	.+48     	; 0xbaa <vfprintf+0x288>
 b7a:	18 f4       	brcc	.+6      	; 0xb82 <vfprintf+0x260>
 b7c:	88 35       	cpi	r24, 0x58	; 88
 b7e:	79 f0       	breq	.+30     	; 0xb9e <vfprintf+0x27c>
 b80:	ae c0       	rjmp	.+348    	; 0xcde <vfprintf+0x3bc>
 b82:	80 37       	cpi	r24, 0x70	; 112
 b84:	19 f0       	breq	.+6      	; 0xb8c <vfprintf+0x26a>
 b86:	88 37       	cpi	r24, 0x78	; 120
 b88:	21 f0       	breq	.+8      	; 0xb92 <vfprintf+0x270>
 b8a:	a9 c0       	rjmp	.+338    	; 0xcde <vfprintf+0x3bc>
 b8c:	e9 2f       	mov	r30, r25
 b8e:	e0 61       	ori	r30, 0x10	; 16
 b90:	be 2e       	mov	r11, r30
 b92:	b4 fe       	sbrs	r11, 4
 b94:	0d c0       	rjmp	.+26     	; 0xbb0 <vfprintf+0x28e>
 b96:	fb 2d       	mov	r31, r11
 b98:	f4 60       	ori	r31, 0x04	; 4
 b9a:	bf 2e       	mov	r11, r31
 b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <vfprintf+0x28e>
 b9e:	34 fe       	sbrs	r3, 4
 ba0:	0a c0       	rjmp	.+20     	; 0xbb6 <vfprintf+0x294>
 ba2:	29 2f       	mov	r18, r25
 ba4:	26 60       	ori	r18, 0x06	; 6
 ba6:	b2 2e       	mov	r11, r18
 ba8:	06 c0       	rjmp	.+12     	; 0xbb6 <vfprintf+0x294>
 baa:	28 e0       	ldi	r18, 0x08	; 8
 bac:	30 e0       	ldi	r19, 0x00	; 0
 bae:	05 c0       	rjmp	.+10     	; 0xbba <vfprintf+0x298>
 bb0:	20 e1       	ldi	r18, 0x10	; 16
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <vfprintf+0x298>
 bb6:	20 e1       	ldi	r18, 0x10	; 16
 bb8:	32 e0       	ldi	r19, 0x02	; 2
 bba:	f8 01       	movw	r30, r16
 bbc:	b7 fe       	sbrs	r11, 7
 bbe:	07 c0       	rjmp	.+14     	; 0xbce <vfprintf+0x2ac>
 bc0:	60 81       	ld	r22, Z
 bc2:	71 81       	ldd	r23, Z+1	; 0x01
 bc4:	82 81       	ldd	r24, Z+2	; 0x02
 bc6:	93 81       	ldd	r25, Z+3	; 0x03
 bc8:	0c 5f       	subi	r16, 0xFC	; 252
 bca:	1f 4f       	sbci	r17, 0xFF	; 255
 bcc:	06 c0       	rjmp	.+12     	; 0xbda <vfprintf+0x2b8>
 bce:	60 81       	ld	r22, Z
 bd0:	71 81       	ldd	r23, Z+1	; 0x01
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	0e 5f       	subi	r16, 0xFE	; 254
 bd8:	1f 4f       	sbci	r17, 0xFF	; 255
 bda:	a3 01       	movw	r20, r6
 bdc:	f1 d0       	rcall	.+482    	; 0xdc0 <__ultoa_invert>
 bde:	88 2e       	mov	r8, r24
 be0:	86 18       	sub	r8, r6
 be2:	fb 2d       	mov	r31, r11
 be4:	ff 77       	andi	r31, 0x7F	; 127
 be6:	3f 2e       	mov	r3, r31
 be8:	36 fe       	sbrs	r3, 6
 bea:	0d c0       	rjmp	.+26     	; 0xc06 <vfprintf+0x2e4>
 bec:	23 2d       	mov	r18, r3
 bee:	2e 7f       	andi	r18, 0xFE	; 254
 bf0:	a2 2e       	mov	r10, r18
 bf2:	89 14       	cp	r8, r9
 bf4:	58 f4       	brcc	.+22     	; 0xc0c <vfprintf+0x2ea>
 bf6:	34 fe       	sbrs	r3, 4
 bf8:	0b c0       	rjmp	.+22     	; 0xc10 <vfprintf+0x2ee>
 bfa:	32 fc       	sbrc	r3, 2
 bfc:	09 c0       	rjmp	.+18     	; 0xc10 <vfprintf+0x2ee>
 bfe:	83 2d       	mov	r24, r3
 c00:	8e 7e       	andi	r24, 0xEE	; 238
 c02:	a8 2e       	mov	r10, r24
 c04:	05 c0       	rjmp	.+10     	; 0xc10 <vfprintf+0x2ee>
 c06:	b8 2c       	mov	r11, r8
 c08:	a3 2c       	mov	r10, r3
 c0a:	03 c0       	rjmp	.+6      	; 0xc12 <vfprintf+0x2f0>
 c0c:	b8 2c       	mov	r11, r8
 c0e:	01 c0       	rjmp	.+2      	; 0xc12 <vfprintf+0x2f0>
 c10:	b9 2c       	mov	r11, r9
 c12:	a4 fe       	sbrs	r10, 4
 c14:	0f c0       	rjmp	.+30     	; 0xc34 <vfprintf+0x312>
 c16:	fe 01       	movw	r30, r28
 c18:	e8 0d       	add	r30, r8
 c1a:	f1 1d       	adc	r31, r1
 c1c:	80 81       	ld	r24, Z
 c1e:	80 33       	cpi	r24, 0x30	; 48
 c20:	21 f4       	brne	.+8      	; 0xc2a <vfprintf+0x308>
 c22:	9a 2d       	mov	r25, r10
 c24:	99 7e       	andi	r25, 0xE9	; 233
 c26:	a9 2e       	mov	r10, r25
 c28:	09 c0       	rjmp	.+18     	; 0xc3c <vfprintf+0x31a>
 c2a:	a2 fe       	sbrs	r10, 2
 c2c:	06 c0       	rjmp	.+12     	; 0xc3a <vfprintf+0x318>
 c2e:	b3 94       	inc	r11
 c30:	b3 94       	inc	r11
 c32:	04 c0       	rjmp	.+8      	; 0xc3c <vfprintf+0x31a>
 c34:	8a 2d       	mov	r24, r10
 c36:	86 78       	andi	r24, 0x86	; 134
 c38:	09 f0       	breq	.+2      	; 0xc3c <vfprintf+0x31a>
 c3a:	b3 94       	inc	r11
 c3c:	a3 fc       	sbrc	r10, 3
 c3e:	10 c0       	rjmp	.+32     	; 0xc60 <vfprintf+0x33e>
 c40:	a0 fe       	sbrs	r10, 0
 c42:	06 c0       	rjmp	.+12     	; 0xc50 <vfprintf+0x32e>
 c44:	b2 14       	cp	r11, r2
 c46:	80 f4       	brcc	.+32     	; 0xc68 <vfprintf+0x346>
 c48:	28 0c       	add	r2, r8
 c4a:	92 2c       	mov	r9, r2
 c4c:	9b 18       	sub	r9, r11
 c4e:	0d c0       	rjmp	.+26     	; 0xc6a <vfprintf+0x348>
 c50:	b2 14       	cp	r11, r2
 c52:	58 f4       	brcc	.+22     	; 0xc6a <vfprintf+0x348>
 c54:	b6 01       	movw	r22, r12
 c56:	80 e2       	ldi	r24, 0x20	; 32
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	76 d0       	rcall	.+236    	; 0xd48 <fputc>
 c5c:	b3 94       	inc	r11
 c5e:	f8 cf       	rjmp	.-16     	; 0xc50 <vfprintf+0x32e>
 c60:	b2 14       	cp	r11, r2
 c62:	18 f4       	brcc	.+6      	; 0xc6a <vfprintf+0x348>
 c64:	2b 18       	sub	r2, r11
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x34a>
 c68:	98 2c       	mov	r9, r8
 c6a:	21 2c       	mov	r2, r1
 c6c:	a4 fe       	sbrs	r10, 4
 c6e:	0f c0       	rjmp	.+30     	; 0xc8e <vfprintf+0x36c>
 c70:	b6 01       	movw	r22, r12
 c72:	80 e3       	ldi	r24, 0x30	; 48
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	68 d0       	rcall	.+208    	; 0xd48 <fputc>
 c78:	a2 fe       	sbrs	r10, 2
 c7a:	16 c0       	rjmp	.+44     	; 0xca8 <vfprintf+0x386>
 c7c:	a1 fc       	sbrc	r10, 1
 c7e:	03 c0       	rjmp	.+6      	; 0xc86 <vfprintf+0x364>
 c80:	88 e7       	ldi	r24, 0x78	; 120
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	02 c0       	rjmp	.+4      	; 0xc8a <vfprintf+0x368>
 c86:	88 e5       	ldi	r24, 0x58	; 88
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	b6 01       	movw	r22, r12
 c8c:	0c c0       	rjmp	.+24     	; 0xca6 <vfprintf+0x384>
 c8e:	8a 2d       	mov	r24, r10
 c90:	86 78       	andi	r24, 0x86	; 134
 c92:	51 f0       	breq	.+20     	; 0xca8 <vfprintf+0x386>
 c94:	a1 fe       	sbrs	r10, 1
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x37a>
 c98:	8b e2       	ldi	r24, 0x2B	; 43
 c9a:	01 c0       	rjmp	.+2      	; 0xc9e <vfprintf+0x37c>
 c9c:	80 e2       	ldi	r24, 0x20	; 32
 c9e:	a7 fc       	sbrc	r10, 7
 ca0:	8d e2       	ldi	r24, 0x2D	; 45
 ca2:	b6 01       	movw	r22, r12
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	50 d0       	rcall	.+160    	; 0xd48 <fputc>
 ca8:	89 14       	cp	r8, r9
 caa:	30 f4       	brcc	.+12     	; 0xcb8 <vfprintf+0x396>
 cac:	b6 01       	movw	r22, r12
 cae:	80 e3       	ldi	r24, 0x30	; 48
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	4a d0       	rcall	.+148    	; 0xd48 <fputc>
 cb4:	9a 94       	dec	r9
 cb6:	f8 cf       	rjmp	.-16     	; 0xca8 <vfprintf+0x386>
 cb8:	8a 94       	dec	r8
 cba:	f3 01       	movw	r30, r6
 cbc:	e8 0d       	add	r30, r8
 cbe:	f1 1d       	adc	r31, r1
 cc0:	80 81       	ld	r24, Z
 cc2:	b6 01       	movw	r22, r12
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	40 d0       	rcall	.+128    	; 0xd48 <fputc>
 cc8:	81 10       	cpse	r8, r1
 cca:	f6 cf       	rjmp	.-20     	; 0xcb8 <vfprintf+0x396>
 ccc:	22 20       	and	r2, r2
 cce:	09 f4       	brne	.+2      	; 0xcd2 <vfprintf+0x3b0>
 cd0:	4e ce       	rjmp	.-868    	; 0x96e <vfprintf+0x4c>
 cd2:	b6 01       	movw	r22, r12
 cd4:	80 e2       	ldi	r24, 0x20	; 32
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	37 d0       	rcall	.+110    	; 0xd48 <fputc>
 cda:	2a 94       	dec	r2
 cdc:	f7 cf       	rjmp	.-18     	; 0xccc <vfprintf+0x3aa>
 cde:	f6 01       	movw	r30, r12
 ce0:	86 81       	ldd	r24, Z+6	; 0x06
 ce2:	97 81       	ldd	r25, Z+7	; 0x07
 ce4:	02 c0       	rjmp	.+4      	; 0xcea <vfprintf+0x3c8>
 ce6:	8f ef       	ldi	r24, 0xFF	; 255
 ce8:	9f ef       	ldi	r25, 0xFF	; 255
 cea:	2b 96       	adiw	r28, 0x0b	; 11
 cec:	0f b6       	in	r0, 0x3f	; 63
 cee:	f8 94       	cli
 cf0:	de bf       	out	0x3e, r29	; 62
 cf2:	0f be       	out	0x3f, r0	; 63
 cf4:	cd bf       	out	0x3d, r28	; 61
 cf6:	df 91       	pop	r29
 cf8:	cf 91       	pop	r28
 cfa:	1f 91       	pop	r17
 cfc:	0f 91       	pop	r16
 cfe:	ff 90       	pop	r15
 d00:	ef 90       	pop	r14
 d02:	df 90       	pop	r13
 d04:	cf 90       	pop	r12
 d06:	bf 90       	pop	r11
 d08:	af 90       	pop	r10
 d0a:	9f 90       	pop	r9
 d0c:	8f 90       	pop	r8
 d0e:	7f 90       	pop	r7
 d10:	6f 90       	pop	r6
 d12:	5f 90       	pop	r5
 d14:	4f 90       	pop	r4
 d16:	3f 90       	pop	r3
 d18:	2f 90       	pop	r2
 d1a:	08 95       	ret

00000d1c <strnlen_P>:
 d1c:	fc 01       	movw	r30, r24
 d1e:	05 90       	lpm	r0, Z+
 d20:	61 50       	subi	r22, 0x01	; 1
 d22:	70 40       	sbci	r23, 0x00	; 0
 d24:	01 10       	cpse	r0, r1
 d26:	d8 f7       	brcc	.-10     	; 0xd1e <strnlen_P+0x2>
 d28:	80 95       	com	r24
 d2a:	90 95       	com	r25
 d2c:	8e 0f       	add	r24, r30
 d2e:	9f 1f       	adc	r25, r31
 d30:	08 95       	ret

00000d32 <strnlen>:
 d32:	fc 01       	movw	r30, r24
 d34:	61 50       	subi	r22, 0x01	; 1
 d36:	70 40       	sbci	r23, 0x00	; 0
 d38:	01 90       	ld	r0, Z+
 d3a:	01 10       	cpse	r0, r1
 d3c:	d8 f7       	brcc	.-10     	; 0xd34 <strnlen+0x2>
 d3e:	80 95       	com	r24
 d40:	90 95       	com	r25
 d42:	8e 0f       	add	r24, r30
 d44:	9f 1f       	adc	r25, r31
 d46:	08 95       	ret

00000d48 <fputc>:
 d48:	0f 93       	push	r16
 d4a:	1f 93       	push	r17
 d4c:	cf 93       	push	r28
 d4e:	df 93       	push	r29
 d50:	fb 01       	movw	r30, r22
 d52:	23 81       	ldd	r18, Z+3	; 0x03
 d54:	21 fd       	sbrc	r18, 1
 d56:	03 c0       	rjmp	.+6      	; 0xd5e <fputc+0x16>
 d58:	8f ef       	ldi	r24, 0xFF	; 255
 d5a:	9f ef       	ldi	r25, 0xFF	; 255
 d5c:	2c c0       	rjmp	.+88     	; 0xdb6 <fputc+0x6e>
 d5e:	22 ff       	sbrs	r18, 2
 d60:	16 c0       	rjmp	.+44     	; 0xd8e <fputc+0x46>
 d62:	46 81       	ldd	r20, Z+6	; 0x06
 d64:	57 81       	ldd	r21, Z+7	; 0x07
 d66:	24 81       	ldd	r18, Z+4	; 0x04
 d68:	35 81       	ldd	r19, Z+5	; 0x05
 d6a:	42 17       	cp	r20, r18
 d6c:	53 07       	cpc	r21, r19
 d6e:	44 f4       	brge	.+16     	; 0xd80 <fputc+0x38>
 d70:	a0 81       	ld	r26, Z
 d72:	b1 81       	ldd	r27, Z+1	; 0x01
 d74:	9d 01       	movw	r18, r26
 d76:	2f 5f       	subi	r18, 0xFF	; 255
 d78:	3f 4f       	sbci	r19, 0xFF	; 255
 d7a:	31 83       	std	Z+1, r19	; 0x01
 d7c:	20 83       	st	Z, r18
 d7e:	8c 93       	st	X, r24
 d80:	26 81       	ldd	r18, Z+6	; 0x06
 d82:	37 81       	ldd	r19, Z+7	; 0x07
 d84:	2f 5f       	subi	r18, 0xFF	; 255
 d86:	3f 4f       	sbci	r19, 0xFF	; 255
 d88:	37 83       	std	Z+7, r19	; 0x07
 d8a:	26 83       	std	Z+6, r18	; 0x06
 d8c:	14 c0       	rjmp	.+40     	; 0xdb6 <fputc+0x6e>
 d8e:	8b 01       	movw	r16, r22
 d90:	ec 01       	movw	r28, r24
 d92:	fb 01       	movw	r30, r22
 d94:	00 84       	ldd	r0, Z+8	; 0x08
 d96:	f1 85       	ldd	r31, Z+9	; 0x09
 d98:	e0 2d       	mov	r30, r0
 d9a:	19 95       	eicall
 d9c:	89 2b       	or	r24, r25
 d9e:	e1 f6       	brne	.-72     	; 0xd58 <fputc+0x10>
 da0:	d8 01       	movw	r26, r16
 da2:	16 96       	adiw	r26, 0x06	; 6
 da4:	8d 91       	ld	r24, X+
 da6:	9c 91       	ld	r25, X
 da8:	17 97       	sbiw	r26, 0x07	; 7
 daa:	01 96       	adiw	r24, 0x01	; 1
 dac:	17 96       	adiw	r26, 0x07	; 7
 dae:	9c 93       	st	X, r25
 db0:	8e 93       	st	-X, r24
 db2:	16 97       	sbiw	r26, 0x06	; 6
 db4:	ce 01       	movw	r24, r28
 db6:	df 91       	pop	r29
 db8:	cf 91       	pop	r28
 dba:	1f 91       	pop	r17
 dbc:	0f 91       	pop	r16
 dbe:	08 95       	ret

00000dc0 <__ultoa_invert>:
 dc0:	fa 01       	movw	r30, r20
 dc2:	aa 27       	eor	r26, r26
 dc4:	28 30       	cpi	r18, 0x08	; 8
 dc6:	51 f1       	breq	.+84     	; 0xe1c <__ultoa_invert+0x5c>
 dc8:	20 31       	cpi	r18, 0x10	; 16
 dca:	81 f1       	breq	.+96     	; 0xe2c <__ultoa_invert+0x6c>
 dcc:	e8 94       	clt
 dce:	6f 93       	push	r22
 dd0:	6e 7f       	andi	r22, 0xFE	; 254
 dd2:	6e 5f       	subi	r22, 0xFE	; 254
 dd4:	7f 4f       	sbci	r23, 0xFF	; 255
 dd6:	8f 4f       	sbci	r24, 0xFF	; 255
 dd8:	9f 4f       	sbci	r25, 0xFF	; 255
 dda:	af 4f       	sbci	r26, 0xFF	; 255
 ddc:	b1 e0       	ldi	r27, 0x01	; 1
 dde:	3e d0       	rcall	.+124    	; 0xe5c <__ultoa_invert+0x9c>
 de0:	b4 e0       	ldi	r27, 0x04	; 4
 de2:	3c d0       	rcall	.+120    	; 0xe5c <__ultoa_invert+0x9c>
 de4:	67 0f       	add	r22, r23
 de6:	78 1f       	adc	r23, r24
 de8:	89 1f       	adc	r24, r25
 dea:	9a 1f       	adc	r25, r26
 dec:	a1 1d       	adc	r26, r1
 dee:	68 0f       	add	r22, r24
 df0:	79 1f       	adc	r23, r25
 df2:	8a 1f       	adc	r24, r26
 df4:	91 1d       	adc	r25, r1
 df6:	a1 1d       	adc	r26, r1
 df8:	6a 0f       	add	r22, r26
 dfa:	71 1d       	adc	r23, r1
 dfc:	81 1d       	adc	r24, r1
 dfe:	91 1d       	adc	r25, r1
 e00:	a1 1d       	adc	r26, r1
 e02:	20 d0       	rcall	.+64     	; 0xe44 <__ultoa_invert+0x84>
 e04:	09 f4       	brne	.+2      	; 0xe08 <__ultoa_invert+0x48>
 e06:	68 94       	set
 e08:	3f 91       	pop	r19
 e0a:	2a e0       	ldi	r18, 0x0A	; 10
 e0c:	26 9f       	mul	r18, r22
 e0e:	11 24       	eor	r1, r1
 e10:	30 19       	sub	r19, r0
 e12:	30 5d       	subi	r19, 0xD0	; 208
 e14:	31 93       	st	Z+, r19
 e16:	de f6       	brtc	.-74     	; 0xdce <__ultoa_invert+0xe>
 e18:	cf 01       	movw	r24, r30
 e1a:	08 95       	ret
 e1c:	46 2f       	mov	r20, r22
 e1e:	47 70       	andi	r20, 0x07	; 7
 e20:	40 5d       	subi	r20, 0xD0	; 208
 e22:	41 93       	st	Z+, r20
 e24:	b3 e0       	ldi	r27, 0x03	; 3
 e26:	0f d0       	rcall	.+30     	; 0xe46 <__ultoa_invert+0x86>
 e28:	c9 f7       	brne	.-14     	; 0xe1c <__ultoa_invert+0x5c>
 e2a:	f6 cf       	rjmp	.-20     	; 0xe18 <__ultoa_invert+0x58>
 e2c:	46 2f       	mov	r20, r22
 e2e:	4f 70       	andi	r20, 0x0F	; 15
 e30:	40 5d       	subi	r20, 0xD0	; 208
 e32:	4a 33       	cpi	r20, 0x3A	; 58
 e34:	18 f0       	brcs	.+6      	; 0xe3c <__ultoa_invert+0x7c>
 e36:	49 5d       	subi	r20, 0xD9	; 217
 e38:	31 fd       	sbrc	r19, 1
 e3a:	40 52       	subi	r20, 0x20	; 32
 e3c:	41 93       	st	Z+, r20
 e3e:	02 d0       	rcall	.+4      	; 0xe44 <__ultoa_invert+0x84>
 e40:	a9 f7       	brne	.-22     	; 0xe2c <__ultoa_invert+0x6c>
 e42:	ea cf       	rjmp	.-44     	; 0xe18 <__ultoa_invert+0x58>
 e44:	b4 e0       	ldi	r27, 0x04	; 4
 e46:	a6 95       	lsr	r26
 e48:	97 95       	ror	r25
 e4a:	87 95       	ror	r24
 e4c:	77 95       	ror	r23
 e4e:	67 95       	ror	r22
 e50:	ba 95       	dec	r27
 e52:	c9 f7       	brne	.-14     	; 0xe46 <__ultoa_invert+0x86>
 e54:	00 97       	sbiw	r24, 0x00	; 0
 e56:	61 05       	cpc	r22, r1
 e58:	71 05       	cpc	r23, r1
 e5a:	08 95       	ret
 e5c:	9b 01       	movw	r18, r22
 e5e:	ac 01       	movw	r20, r24
 e60:	0a 2e       	mov	r0, r26
 e62:	06 94       	lsr	r0
 e64:	57 95       	ror	r21
 e66:	47 95       	ror	r20
 e68:	37 95       	ror	r19
 e6a:	27 95       	ror	r18
 e6c:	ba 95       	dec	r27
 e6e:	c9 f7       	brne	.-14     	; 0xe62 <__ultoa_invert+0xa2>
 e70:	62 0f       	add	r22, r18
 e72:	73 1f       	adc	r23, r19
 e74:	84 1f       	adc	r24, r20
 e76:	95 1f       	adc	r25, r21
 e78:	a0 1d       	adc	r26, r0
 e7a:	08 95       	ret

00000e7c <_exit>:
 e7c:	f8 94       	cli

00000e7e <__stop_program>:
 e7e:	ff cf       	rjmp	.-2      	; 0xe7e <__stop_program>
