
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800200  0000856a  000085fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000856a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000020ce  008003ba  008003ba  000087b8  2**0
                  ALLOC
  3 .noinit       00000001  00802488  00802488  000087b8  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000087b8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008814  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000aa0  00000000  00000000  00008854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00010e99  00000000  00000000  000092f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004a4e  00000000  00000000  0001a18d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000070a6  00000000  00000000  0001ebdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002910  00000000  00000000  00025c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003d2e  00000000  00000000  00028594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000da2c  00000000  00000000  0002c2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ac8  00000000  00000000  00039cee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9c c2       	rjmp	.+1336   	; 0x53a <__ctors_end>
       2:	00 00       	nop
       4:	c9 c2       	rjmp	.+1426   	; 0x598 <__bad_interrupt>
       6:	00 00       	nop
       8:	c7 c2       	rjmp	.+1422   	; 0x598 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c2       	rjmp	.+1418   	; 0x598 <__bad_interrupt>
       e:	00 00       	nop
      10:	c3 c2       	rjmp	.+1414   	; 0x598 <__bad_interrupt>
      12:	00 00       	nop
      14:	c1 c2       	rjmp	.+1410   	; 0x598 <__bad_interrupt>
      16:	00 00       	nop
      18:	bf c2       	rjmp	.+1406   	; 0x598 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bd c2       	rjmp	.+1402   	; 0x598 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bb c2       	rjmp	.+1398   	; 0x598 <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c2       	rjmp	.+1394   	; 0x598 <__bad_interrupt>
      26:	00 00       	nop
      28:	b7 c2       	rjmp	.+1390   	; 0x598 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b5 c2       	rjmp	.+1386   	; 0x598 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b3 c2       	rjmp	.+1382   	; 0x598 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 f8 21 	jmp	0x43f0	; 0x43f0 <__vector_13>
      38:	af c2       	rjmp	.+1374   	; 0x598 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ad c2       	rjmp	.+1370   	; 0x598 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ab c2       	rjmp	.+1366   	; 0x598 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c2       	rjmp	.+1362   	; 0x598 <__bad_interrupt>
      46:	00 00       	nop
      48:	a7 c2       	rjmp	.+1358   	; 0x598 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a5 c2       	rjmp	.+1354   	; 0x598 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a3 c2       	rjmp	.+1350   	; 0x598 <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c4       	rjmp	.+2182   	; 0x8dc <__vector_21>
      56:	00 00       	nop
      58:	9f c2       	rjmp	.+1342   	; 0x598 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9d c2       	rjmp	.+1338   	; 0x598 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9b c2       	rjmp	.+1334   	; 0x598 <__bad_interrupt>
      62:	00 00       	nop
      64:	99 c2       	rjmp	.+1330   	; 0x598 <__bad_interrupt>
      66:	00 00       	nop
      68:	97 c2       	rjmp	.+1326   	; 0x598 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	95 c2       	rjmp	.+1322   	; 0x598 <__bad_interrupt>
      6e:	00 00       	nop
      70:	93 c2       	rjmp	.+1318   	; 0x598 <__bad_interrupt>
      72:	00 00       	nop
      74:	91 c2       	rjmp	.+1314   	; 0x598 <__bad_interrupt>
      76:	00 00       	nop
      78:	8f c2       	rjmp	.+1310   	; 0x598 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8d c2       	rjmp	.+1306   	; 0x598 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8b c2       	rjmp	.+1302   	; 0x598 <__bad_interrupt>
      82:	00 00       	nop
      84:	89 c2       	rjmp	.+1298   	; 0x598 <__bad_interrupt>
      86:	00 00       	nop
      88:	87 c2       	rjmp	.+1294   	; 0x598 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	85 c2       	rjmp	.+1290   	; 0x598 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__vector_36>
      94:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__vector_37>
      98:	7f c2       	rjmp	.+1278   	; 0x598 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7d c2       	rjmp	.+1274   	; 0x598 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	7b c2       	rjmp	.+1270   	; 0x598 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	79 c2       	rjmp	.+1266   	; 0x598 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 e7 21 	jmp	0x43ce	; 0x43ce <__vector_42>
      ac:	75 c2       	rjmp	.+1258   	; 0x598 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	73 c2       	rjmp	.+1254   	; 0x598 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	71 c2       	rjmp	.+1250   	; 0x598 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6f c2       	rjmp	.+1246   	; 0x598 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6d c2       	rjmp	.+1242   	; 0x598 <__bad_interrupt>
      be:	00 00       	nop
      c0:	6b c2       	rjmp	.+1238   	; 0x598 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	69 c2       	rjmp	.+1234   	; 0x598 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	67 c2       	rjmp	.+1230   	; 0x598 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	65 c2       	rjmp	.+1226   	; 0x598 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	63 c2       	rjmp	.+1222   	; 0x598 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	61 c2       	rjmp	.+1218   	; 0x598 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	5f c2       	rjmp	.+1214   	; 0x598 <__bad_interrupt>
      da:	00 00       	nop
      dc:	5d c2       	rjmp	.+1210   	; 0x598 <__bad_interrupt>
      de:	00 00       	nop
      e0:	5b c2       	rjmp	.+1206   	; 0x598 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	59 c2       	rjmp	.+1202   	; 0x598 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	57 c2       	rjmp	.+1198   	; 0x598 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	55 c2       	rjmp	.+1194   	; 0x598 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	53 c2       	rjmp	.+1190   	; 0x598 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	51 c2       	rjmp	.+1186   	; 0x598 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	4f c2       	rjmp	.+1182   	; 0x598 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	4d c2       	rjmp	.+1178   	; 0x598 <__bad_interrupt>
      fe:	00 00       	nop
     100:	4b c2       	rjmp	.+1174   	; 0x598 <__bad_interrupt>
     102:	00 00       	nop
     104:	49 c2       	rjmp	.+1170   	; 0x598 <__bad_interrupt>
     106:	00 00       	nop
     108:	47 c2       	rjmp	.+1166   	; 0x598 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	45 c2       	rjmp	.+1162   	; 0x598 <__bad_interrupt>
     10e:	00 00       	nop
     110:	43 c2       	rjmp	.+1158   	; 0x598 <__bad_interrupt>
     112:	00 00       	nop
     114:	41 c2       	rjmp	.+1154   	; 0x598 <__bad_interrupt>
     116:	00 00       	nop
     118:	3f c2       	rjmp	.+1150   	; 0x598 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	3d c2       	rjmp	.+1146   	; 0x598 <__bad_interrupt>
     11e:	00 00       	nop
     120:	3b c2       	rjmp	.+1142   	; 0x598 <__bad_interrupt>
     122:	00 00       	nop
     124:	39 c2       	rjmp	.+1138   	; 0x598 <__bad_interrupt>
     126:	00 00       	nop
     128:	37 c2       	rjmp	.+1134   	; 0x598 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	35 c2       	rjmp	.+1130   	; 0x598 <__bad_interrupt>
     12e:	00 00       	nop
     130:	33 c2       	rjmp	.+1126   	; 0x598 <__bad_interrupt>
     132:	00 00       	nop
     134:	d6 20       	and	r13, r6
     136:	d9 20       	and	r13, r9
     138:	e8 20       	and	r14, r8
     13a:	e3 20       	and	r14, r3
     13c:	ed 20       	and	r14, r13
     13e:	f2 20       	and	r15, r2
     140:	f7 20       	and	r15, r7
     142:	05 21       	and	r16, r5
     144:	1a 21       	and	r17, r10
     146:	29 21       	and	r18, r9
     148:	2c 21       	and	r18, r12
     14a:	30 21       	and	r19, r0
     14c:	d4 20       	and	r13, r4
     14e:	34 21       	and	r19, r4
     150:	37 21       	and	r19, r7
     152:	3d 21       	and	r19, r13

00000154 <__trampolines_end>:
     154:	3e 3e       	cpi	r19, 0xEE	; 238
     156:	20 55       	subi	r18, 0x50	; 80
     158:	70 74       	andi	r23, 0x40	; 64
     15a:	69 6d       	ori	r22, 0xD9	; 217
     15c:	65 20       	and	r6, r5
     15e:	25 6c       	ori	r18, 0xC5	; 197
     160:	75 20       	and	r7, r5
     162:	73 65       	ori	r23, 0x53	; 83
     164:	63 0d       	add	r22, r3
     166:	0a 00       	.word	0x000a	; ????

00000168 <__c.3737>:
     168:	3e 3e 20 46 72 65 65 20 52 41 4d 20 69 73 3a 20     >> Free RAM is: 
     178:	25 64 20 62 79 74 65 73 0d 0a 00                    %d bytes...

00000183 <__c.3731>:
     183:	2d 2d 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     --MQTT Connected
     193:	20 45 52 52 4f 52 3a 20 25 6c 64 0d 0a 00            ERROR: %ld...

000001a1 <__c.3735>:
     1a1:	53 75 62 73 63 72 69 62 65 64 20 28 25 73 29 20     Subscribed (%s) 
     1b1:	25 64 0d 0a 00                                      %d...

000001b6 <__c.3729>:
     1b6:	2b 2b 4d 51 54 54 20 43 6f 6e 6e 65 63 74 65 64     ++MQTT Connected
     1c6:	20 53 55 43 43 45 53 53 3a 20 25 6c 64 0d 0a 00      SUCCESS: %ld...

000001d6 <__c.3726>:
     1d6:	3e 3e 54 72 79 69 6e 67 20 63 6f 6e 6e 65 63 74     >>Trying connect
     1e6:	20 74 6f 20 4d 51 54 54 20 62 72 6f 6b 65 72 3a      to MQTT broker:
     1f6:	20 25 64 2e 25 64 2e 25 64 2e 25 64 20 2e 2e 0d      %d.%d.%d.%d ...
     206:	0a 00                                               ..

00000208 <__c.3710>:
     208:	3e 3e 20 46 72 65 65 20 52 41 4d 20 69 73 3a 20     >> Free RAM is: 
     218:	25 64 20 62 79 74 65 73 0d 0a 00                    %d bytes...

00000223 <__c.3708>:
     223:	3e 3e 20 4d 43 55 20 69 73 3a 20 25 53 3b 20 43     >> MCU is: %S; C
     233:	4c 4b 20 69 73 3a 20 25 6c 75 48 7a 0d 0a 00        LK is: %luHz...

00000242 <__c.3706>:
     242:	43 6f 6d 70 69 6c 65 64 20 61 74 3a 20 25 53 20     Compiled at: %S 
     252:	25 53 0d 0a 00                                      %S...

00000257 <__c.3704>:
     257:	25 53 00                                            %S.

0000025a <__c.3680>:
     25a:	44 4e 53 20 53 65 72 76 65 72 20 3a 20 25 64 2e     DNS Server : %d.
     26a:	25 64 2e 25 64 2e 25 64 0a 0d 00                    %d.%d.%d...

00000275 <__c.3678>:
     275:	47 61 74 65 20 77 61 79 20 20 20 3a 20 25 64 2e     Gate way   : %d.
     285:	25 64 2e 25 64 2e 25 64 0a 0d 00                    %d.%d.%d...

00000290 <__c.3676>:
     290:	53 4d 20 4d 61 73 6b 09 20 20 20 3a 20 25 64 2e     SM Mask.   : %d.
     2a0:	25 64 2e 25 64 2e 25 64 0a 0d 00                    %d.%d.%d...

000002ab <__c.3674>:
     2ab:	49 50 20 61 64 64 72 65 73 73 20 3a 20 25 64 2e     IP address : %d.
     2bb:	25 64 2e 25 64 2e 25 64 0a 0d 00                    %d.%d.%d...

000002c6 <__c.3672>:
     2c6:	4d 61 63 20 61 64 64 72 65 73 73 3a 20 25 30 32     Mac address: %02
     2d6:	78 3a 25 30 32 78 3a 25 30 32 78 3a 25 30 32 78     x:%02x:%02x:%02x
     2e6:	3a 25 30 32 78 3a 25 30 32 78 0a 0d 00              :%02x:%02x...

000002f3 <__c.3670>:
     2f3:	44 48 43 50 20 49 50 0d 0a 00                       DHCP IP...

000002fd <__c.3668>:
     2fd:	53 54 41 54 49 43 20 49 50 0d 0a 00                 STATIC IP...

00000309 <__c.3665>:
     309:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     319:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     329:	3d 3d 3d 3d 3d 3d 3d 0d 0a 00                       =======...

00000333 <__c.3663>:
     333:	20 57 49 5a 6e 65 74 20 63 68 69 70 3a 20 20 25      WIZnet chip:  %
     343:	73 20 0d 0a 00                                      s ...

00000348 <__c.3661>:
     348:	0d 0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ..==============
     358:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     368:	3d 3d 3d 3d 3d 3d 3d 3d 3d 0d 0a 00                 =========...

00000374 <__c.3645>:
     374:	0d 0a 00                                            ...

00000377 <__c.3643>:
     377:	44 48 43 50 20 4c 45 41 53 45 44 20 54 49 4d 45     DHCP LEASED TIME
     387:	20 3a 20 25 6c 64 20 53 65 63 2e 0d 0a 00            : %ld Sec....

00000395 <__c.3557>:
     395:	43 6f 6e 6e 65 63 74 69 6f 6e 20 77 69 74 68 20     Connection with 
     3a5:	4d 51 54 54 20 42 72 6f 6b 65 72 20 77 61 73 20     MQTT Broker was 
     3b5:	6c 6f 73 74 21 21 0d 0a 52 65 62 6f 6f 74 20 74     lost!!..Reboot t
     3c5:	68 65 20 62 6f 61 72 64 2e 2e 0d 0a 00              he board.....

000003d2 <__c.3555>:
     3d2:	20 2d 20 45 52 52 4f 52 0d 0a 00                     - ERROR...

000003dd <__c.3553>:
     3dd:	20 2d 20 4f 4b 0d 0a 00                              - OK...

000003e5 <__c.3550>:
     3e5:	3e 3e 4d 51 54 54 20 70 75 62 20 6d 73 67 20 3f     >>MQTT pub msg ?
     3f5:	25 6c 75 20 00                                      %lu .

000003fa <__c.3539>:
     3fa:	3c 3c 4d 51 54 54 20 53 75 62 3a 20 5b 25 73 5d     <<MQTT Sub: [%s]
     40a:	20 25 73 00                                          %s.

0000040e <str_mcu>:
     40e:	55 6e 6b 6e 6f 77 6e 20 43 50 55 00                 Unknown CPU.

0000041a <str_prog_name>:
     41a:	0d 0a 41 74 4d 65 67 61 31 32 38 34 70 20 76 31     ..AtMega1284p v1
     42a:	2e 32 61 20 53 74 61 74 69 63 20 49 50 20 4d 51     .2a Static IP MQ
     43a:	54 54 20 26 26 20 4c 6f 6f 70 2d 62 61 63 6b 20     TT && Loop-back 
     44a:	57 49 5a 4e 45 54 5f 35 35 30 30 20 45 54 48 45     WIZNET_5500 ETHE
     45a:	52 4e 45 54 20 30 37 2f 30 34 2f 32 30 31 39 0d     RNET 07/04/2019.
     46a:	0a 00                                               ..

0000046c <compile_time>:
     46c:	31 33 3a 33 34 3a 34 30 00                          13:34:40.

00000475 <compile_date>:
     475:	41 70 72 20 32 38 20 32 30 32 35 00                 Apr 28 2025.

00000481 <__c.2479>:
     481:	25 64 3a 4f 70 65 6e 65 64 2c 20 55 44 50 20 6c     %d:Opened, UDP l
     491:	6f 6f 70 62 61 63 6b 2c 20 70 6f 72 74 20 5b 25     oopback, port [%
     4a1:	75 5d 0d 0a 00                                      u]...

000004a6 <__c.2472>:
     4a6:	25 64 3a 20 73 65 6e 64 74 6f 20 65 72 72 6f 72     %d: sendto error
     4b6:	2e 20 25 6c 64 0d 0a 00                             . %ld...

000004be <__c.2470>:
     4be:	25 64 3a 20 72 65 63 76 66 72 6f 6d 20 65 72 72     %d: recvfrom err
     4ce:	6f 72 2e 20 25 6c 64 0d 0a 00                       or. %ld...

000004d8 <__c.2430>:
     4d8:	25 64 3a 4c 69 73 74 65 6e 2c 20 54 43 50 20 73     %d:Listen, TCP s
     4e8:	65 72 76 65 72 20 6c 6f 6f 70 62 61 63 6b 2c 20     erver loopback, 
     4f8:	70 6f 72 74 20 5b 25 75 5d 0d 0a 00                 port [%u]...

00000504 <__c.2427>:
     504:	25 64 3a 53 6f 63 6b 65 74 20 43 6c 6f 73 65 64     %d:Socket Closed
     514:	0d 0a 00                                            ...

00000517 <__c.2420>:
     517:	25 64 3a 43 6f 6e 6e 65 63 74 65 64 20 2d 20 25     %d:Connected - %
     527:	64 2e 25 64 2e 25 64 2e 25 64 20 3a 20 25 75 0d     d.%d.%d.%d : %u.
     537:	0a 00 00                                            ...

0000053a <__ctors_end>:
     53a:	11 24       	eor	r1, r1
     53c:	1f be       	out	0x3f, r1	; 63
     53e:	cf ef       	ldi	r28, 0xFF	; 255
     540:	d1 e8       	ldi	r29, 0x81	; 129
     542:	de bf       	out	0x3e, r29	; 62
     544:	cd bf       	out	0x3d, r28	; 61
     546:	00 e0       	ldi	r16, 0x00	; 0
     548:	0c bf       	out	0x3c, r16	; 60

0000054a <get_mcusr>:
	// Deselect the W5500 (CS high)
	cs_desel();

	// Print the read value
	printf("Read back value: 0x%02X\n", read_back);
}
     54a:	84 b7       	in	r24, 0x34	; 52
     54c:	80 93 88 24 	sts	0x2488, r24	; 0x802488 <__bss_end>
     550:	14 be       	out	0x34, r1	; 52
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	a8 95       	wdr
     558:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     55c:	88 61       	ori	r24, 0x18	; 24
     55e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     562:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     566:	0f be       	out	0x3f, r0	; 63

00000568 <__do_copy_data>:
     568:	13 e0       	ldi	r17, 0x03	; 3
     56a:	a0 e0       	ldi	r26, 0x00	; 0
     56c:	b2 e0       	ldi	r27, 0x02	; 2
     56e:	ea e6       	ldi	r30, 0x6A	; 106
     570:	f5 e8       	ldi	r31, 0x85	; 133
     572:	00 e0       	ldi	r16, 0x00	; 0
     574:	0b bf       	out	0x3b, r16	; 59
     576:	02 c0       	rjmp	.+4      	; 0x57c <__do_copy_data+0x14>
     578:	07 90       	elpm	r0, Z+
     57a:	0d 92       	st	X+, r0
     57c:	aa 3b       	cpi	r26, 0xBA	; 186
     57e:	b1 07       	cpc	r27, r17
     580:	d9 f7       	brne	.-10     	; 0x578 <__do_copy_data+0x10>

00000582 <__do_clear_bss>:
     582:	24 e2       	ldi	r18, 0x24	; 36
     584:	aa eb       	ldi	r26, 0xBA	; 186
     586:	b3 e0       	ldi	r27, 0x03	; 3
     588:	01 c0       	rjmp	.+2      	; 0x58c <.do_clear_bss_start>

0000058a <.do_clear_bss_loop>:
     58a:	1d 92       	st	X+, r1

0000058c <.do_clear_bss_start>:
     58c:	a8 38       	cpi	r26, 0x88	; 136
     58e:	b2 07       	cpc	r27, r18
     590:	e1 f7       	brne	.-8      	; 0x58a <.do_clear_bss_loop>
     592:	5e d3       	rcall	.+1724   	; 0xc50 <main>
     594:	0c 94 b3 42 	jmp	0x8566	; 0x8566 <_exit>

00000598 <__bad_interrupt>:
     598:	33 cd       	rjmp	.-1434   	; 0x0 <__vectors>

0000059a <appDataConf>:
     59a:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <appDataReqBusy>
     59e:	08 95       	ret

000005a0 <cs_sel>:
     5a0:	5c 98       	cbi	0x0b, 4	; 11
     5a2:	08 95       	ret

000005a4 <cs_desel>:
     5a4:	5c 9a       	sbi	0x0b, 4	; 11
     5a6:	08 95       	ret

000005a8 <spi_rb>:
     5a8:	1e bc       	out	0x2e, r1	; 46
     5aa:	0d b4       	in	r0, 0x2d	; 45
     5ac:	07 fe       	sbrs	r0, 7
     5ae:	fd cf       	rjmp	.-6      	; 0x5aa <spi_rb+0x2>
     5b0:	8e b5       	in	r24, 0x2e	; 46
     5b2:	08 95       	ret

000005b4 <spi_wb>:
     5b4:	8e bd       	out	0x2e, r24	; 46
     5b6:	0d b4       	in	r0, 0x2d	; 45
     5b8:	07 fe       	sbrs	r0, 7
     5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <spi_wb+0x2>
     5bc:	08 95       	ret

000005be <spi_rb_burst>:
     5be:	61 15       	cp	r22, r1
     5c0:	71 05       	cpc	r23, r1
     5c2:	61 f0       	breq	.+24     	; 0x5dc <spi_rb_burst+0x1e>
     5c4:	fc 01       	movw	r30, r24
     5c6:	68 0f       	add	r22, r24
     5c8:	79 1f       	adc	r23, r25
     5ca:	1e bc       	out	0x2e, r1	; 46
     5cc:	0d b4       	in	r0, 0x2d	; 45
     5ce:	07 fe       	sbrs	r0, 7
     5d0:	fd cf       	rjmp	.-6      	; 0x5cc <spi_rb_burst+0xe>
     5d2:	9e b5       	in	r25, 0x2e	; 46
     5d4:	91 93       	st	Z+, r25
     5d6:	e6 17       	cp	r30, r22
     5d8:	f7 07       	cpc	r31, r23
     5da:	b9 f7       	brne	.-18     	; 0x5ca <spi_rb_burst+0xc>
     5dc:	08 95       	ret

000005de <spi_wb_burst>:
     5de:	61 15       	cp	r22, r1
     5e0:	71 05       	cpc	r23, r1
     5e2:	59 f0       	breq	.+22     	; 0x5fa <spi_wb_burst+0x1c>
     5e4:	fc 01       	movw	r30, r24
     5e6:	68 0f       	add	r22, r24
     5e8:	79 1f       	adc	r23, r25
     5ea:	91 91       	ld	r25, Z+
     5ec:	9e bd       	out	0x2e, r25	; 46
     5ee:	0d b4       	in	r0, 0x2d	; 45
     5f0:	07 fe       	sbrs	r0, 7
     5f2:	fd cf       	rjmp	.-6      	; 0x5ee <spi_wb_burst+0x10>
     5f4:	e6 17       	cp	r30, r22
     5f6:	f7 07       	cpc	r31, r23
     5f8:	c1 f7       	brne	.-16     	; 0x5ea <spi_wb_burst+0xc>
     5fa:	08 95       	ret

000005fc <appSendData>:
     5fc:	cf 93       	push	r28
     5fe:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <appDataReqBusy>
     602:	81 11       	cpse	r24, r1
     604:	28 c0       	rjmp	.+80     	; 0x656 <appSendData+0x5a>
     606:	c0 91 c0 03 	lds	r28, 0x03C0	; 0x8003c0 <appUartBufferPtr>
     60a:	cc 23       	and	r28, r28
     60c:	21 f1       	breq	.+72     	; 0x656 <appSendData+0x5a>
     60e:	4c 2f       	mov	r20, r28
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	61 ec       	ldi	r22, 0xC1	; 193
     614:	73 e0       	ldi	r23, 0x03	; 3
     616:	8e e2       	ldi	r24, 0x2E	; 46
     618:	94 e0       	ldi	r25, 0x04	; 4
     61a:	0e 94 54 3f 	call	0x7ea8	; 0x7ea8 <memcpy>
     61e:	ec e9       	ldi	r30, 0x9C	; 156
     620:	f4 e0       	ldi	r31, 0x04	; 4
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	96 83       	std	Z+6, r25	; 0x06
     628:	85 83       	std	Z+5, r24	; 0x05
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	87 83       	std	Z+7, r24	; 0x07
     62e:	80 87       	std	Z+8, r24	; 0x08
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	81 87       	std	Z+9, r24	; 0x09
     634:	8e e2       	ldi	r24, 0x2E	; 46
     636:	94 e0       	ldi	r25, 0x04	; 4
     638:	93 87       	std	Z+11, r25	; 0x0b
     63a:	82 87       	std	Z+10, r24	; 0x0a
     63c:	c4 87       	std	Z+12, r28	; 0x0c
     63e:	8d ec       	ldi	r24, 0xCD	; 205
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	96 87       	std	Z+14, r25	; 0x0e
     644:	85 87       	std	Z+13, r24	; 0x0d
     646:	cf 01       	movw	r24, r30
     648:	0e 94 c1 34 	call	0x6982	; 0x6982 <NWK_DataReq>
     64c:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <appUartBufferPtr>
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <appDataReqBusy>
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <appTimerHandler>:
     65a:	d0 cf       	rjmp	.-96     	; 0x5fc <appSendData>
     65c:	08 95       	ret

0000065e <messageArrived>:
     65e:	cf 92       	push	r12
     660:	df 92       	push	r13
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	c0 5c       	subi	r28, 0xC0	; 192
     674:	d1 09       	sbc	r29, r1
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <WIZCHIP+0x18>
     684:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <WIZCHIP+0x19>
     688:	3a 83       	std	Y+2, r19	; 0x02
     68a:	29 83       	std	Y+1, r18	; 0x01
     68c:	fe 01       	movw	r30, r28
     68e:	33 96       	adiw	r30, 0x03	; 3
     690:	4e e3       	ldi	r20, 0x3E	; 62
     692:	df 01       	movw	r26, r30
     694:	1d 92       	st	X+, r1
     696:	4a 95       	dec	r20
     698:	e9 f7       	brne	.-6      	; 0x694 <messageArrived+0x36>
     69a:	8e 01       	movw	r16, r28
     69c:	0f 5b       	subi	r16, 0xBF	; 191
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	f8 01       	movw	r30, r16
     6a2:	31 83       	std	Z+1, r19	; 0x01
     6a4:	20 83       	st	Z, r18
     6a6:	32 96       	adiw	r30, 0x02	; 2
     6a8:	2e e7       	ldi	r18, 0x7E	; 126
     6aa:	df 01       	movw	r26, r30
     6ac:	1d 92       	st	X+, r1
     6ae:	2a 95       	dec	r18
     6b0:	e9 f7       	brne	.-6      	; 0x6ac <messageArrived+0x4e>
     6b2:	fc 01       	movw	r30, r24
     6b4:	c0 80       	ld	r12, Z
     6b6:	d1 80       	ldd	r13, Z+1	; 0x01
     6b8:	02 80       	ldd	r0, Z+2	; 0x02
     6ba:	f3 81       	ldd	r31, Z+3	; 0x03
     6bc:	e0 2d       	mov	r30, r0
     6be:	42 81       	ldd	r20, Z+2	; 0x02
     6c0:	53 81       	ldd	r21, Z+3	; 0x03
     6c2:	66 81       	ldd	r22, Z+6	; 0x06
     6c4:	77 81       	ldd	r23, Z+7	; 0x07
     6c6:	ce 01       	movw	r24, r28
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	7c 01       	movw	r14, r24
     6cc:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <strncpy>
     6d0:	d6 01       	movw	r26, r12
     6d2:	17 96       	adiw	r26, 0x07	; 7
     6d4:	4d 91       	ld	r20, X+
     6d6:	5c 91       	ld	r21, X
     6d8:	18 97       	sbiw	r26, 0x08	; 8
     6da:	15 96       	adiw	r26, 0x05	; 5
     6dc:	6d 91       	ld	r22, X+
     6de:	7c 91       	ld	r23, X
     6e0:	16 97       	sbiw	r26, 0x06	; 6
     6e2:	c8 01       	movw	r24, r16
     6e4:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <strncpy>
     6e8:	1f 93       	push	r17
     6ea:	0f 93       	push	r16
     6ec:	ff 92       	push	r15
     6ee:	ef 92       	push	r14
     6f0:	8a ef       	ldi	r24, 0xFA	; 250
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	c0 54       	subi	r28, 0x40	; 64
     70a:	df 4f       	sbci	r29, 0xFF	; 255
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	08 95       	ret

00000728 <my_ip_conflict>:
     728:	8d e1       	ldi	r24, 0x1D	; 29
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <puts>
     730:	ff cf       	rjmp	.-2      	; 0x730 <my_ip_conflict+0x8>

00000732 <HAL_UartBytesReceived>:
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	8c 01       	movw	r16, r24
     73e:	89 2b       	or	r24, r25
     740:	d1 f0       	breq	.+52     	; 0x776 <HAL_UartBytesReceived+0x44>
     742:	c0 e0       	ldi	r28, 0x00	; 0
     744:	d0 e0       	ldi	r29, 0x00	; 0
     746:	0e 94 83 22 	call	0x4506	; 0x4506 <HAL_UartReadByte>
     74a:	f8 2e       	mov	r15, r24
     74c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <appUartBufferPtr>
     750:	8d 36       	cpi	r24, 0x6D	; 109
     752:	09 f4       	brne	.+2      	; 0x756 <HAL_UartBytesReceived+0x24>
     754:	53 df       	rcall	.-346    	; 0x5fc <appSendData>
     756:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <appUartBufferPtr>
     75a:	ed 36       	cpi	r30, 0x6D	; 109
     75c:	40 f4       	brcc	.+16     	; 0x76e <HAL_UartBytesReceived+0x3c>
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	8e 0f       	add	r24, r30
     762:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <appUartBufferPtr>
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	ef 53       	subi	r30, 0x3F	; 63
     76a:	fc 4f       	sbci	r31, 0xFC	; 252
     76c:	f0 82       	st	Z, r15
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	0c 17       	cp	r16, r28
     772:	1d 07       	cpc	r17, r29
     774:	41 f7       	brne	.-48     	; 0x746 <HAL_UartBytesReceived+0x14>
     776:	8d ea       	ldi	r24, 0xAD	; 173
     778:	94 e0       	ldi	r25, 0x04	; 4
     77a:	0e 94 ef 3d 	call	0x7bde	; 0x7bde <SYS_TimerStop>
     77e:	8d ea       	ldi	r24, 0xAD	; 173
     780:	94 e0       	ldi	r25, 0x04	; 4
     782:	0e 94 46 3e 	call	0x7c8c	; 0x7c8c <SYS_TimerStart>
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	08 95       	ret

00000792 <mqtt_pub>:
     792:	af 92       	push	r10
     794:	bf 92       	push	r11
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	29 97       	sbiw	r28, 0x09	; 9
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	8c 01       	movw	r16, r24
     7b8:	7b 01       	movw	r14, r22
     7ba:	6a 01       	movw	r12, r20
     7bc:	59 01       	movw	r10, r18
     7be:	a8 95       	wdr
     7c0:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <mqtt_pub_count.3547>
     7c4:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <mqtt_pub_count.3547+0x1>
     7c8:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <mqtt_pub_count.3547+0x2>
     7cc:	b0 91 be 03 	lds	r27, 0x03BE	; 0x8003be <mqtt_pub_count.3547+0x3>
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	a1 1d       	adc	r26, r1
     7d4:	b1 1d       	adc	r27, r1
     7d6:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <mqtt_pub_count.3547>
     7da:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <mqtt_pub_count.3547+0x1>
     7de:	a0 93 bd 03 	sts	0x03BD, r26	; 0x8003bd <mqtt_pub_count.3547+0x2>
     7e2:	b0 93 be 03 	sts	0x03BE, r27	; 0x8003be <mqtt_pub_count.3547+0x3>
     7e6:	bf 93       	push	r27
     7e8:	af 93       	push	r26
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	85 ee       	ldi	r24, 0xE5	; 229
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	9f 93       	push	r25
     7f4:	8f 93       	push	r24
     7f6:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     7fa:	19 82       	std	Y+1, r1	; 0x01
     7fc:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <mes_id>
     800:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <mes_id+0x1>
     804:	9c 01       	movw	r18, r24
     806:	2f 5f       	subi	r18, 0xFF	; 255
     808:	3f 4f       	sbci	r19, 0xFF	; 255
     80a:	30 93 1d 20 	sts	0x201D, r19	; 0x80201d <mes_id+0x1>
     80e:	20 93 1c 20 	sts	0x201C, r18	; 0x80201c <mes_id>
     812:	9d 83       	std	Y+5, r25	; 0x05
     814:	8c 83       	std	Y+4, r24	; 0x04
     816:	b9 86       	std	Y+9, r11	; 0x09
     818:	a8 86       	std	Y+8, r10	; 0x08
     81a:	df 82       	std	Y+7, r13	; 0x07
     81c:	ce 82       	std	Y+6, r12	; 0x06
     81e:	ae 01       	movw	r20, r28
     820:	4f 5f       	subi	r20, 0xFF	; 255
     822:	5f 4f       	sbci	r21, 0xFF	; 255
     824:	b7 01       	movw	r22, r14
     826:	c8 01       	movw	r24, r16
     828:	0e 94 b1 29 	call	0x5362	; 0x5362 <MQTTPublish>
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	67 2b       	or	r22, r23
     83a:	68 2b       	or	r22, r24
     83c:	69 2b       	or	r22, r25
     83e:	59 f4       	brne	.+22     	; 0x856 <mqtt_pub+0xc4>
     840:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <__data_end>
     844:	8d ed       	ldi	r24, 0xDD	; 221
     846:	93 e0       	ldi	r25, 0x03	; 3
     848:	9f 93       	push	r25
     84a:	8f 93       	push	r24
     84c:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	19 c0       	rjmp	.+50     	; 0x888 <mqtt_pub+0xf6>
     856:	82 ed       	ldi	r24, 0xD2	; 210
     858:	93 e0       	ldi	r25, 0x03	; 3
     85a:	9f 93       	push	r25
     85c:	8f 93       	push	r24
     85e:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     862:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <__data_end>
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	98 0f       	add	r25, r24
     86a:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <__data_end>
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	85 31       	cpi	r24, 0x15	; 21
     874:	48 f0       	brcs	.+18     	; 0x888 <mqtt_pub+0xf6>
     876:	85 e9       	ldi	r24, 0x95	; 149
     878:	93 e0       	ldi	r25, 0x03	; 3
     87a:	9f 93       	push	r25
     87c:	8f 93       	push	r24
     87e:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	ff cf       	rjmp	.-2      	; 0x886 <mqtt_pub+0xf4>
     888:	29 96       	adiw	r28, 0x09	; 9
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	bf 90       	pop	r11
     8a6:	af 90       	pop	r10
     8a8:	08 95       	ret

000008aa <freeRam>:
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	1f 92       	push	r1
     8b0:	1f 92       	push	r1
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <__brkval>
     8ba:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <__brkval+0x1>
     8be:	00 97       	sbiw	r24, 0x00	; 0
     8c0:	11 f0       	breq	.+4      	; 0x8c6 <freeRam+0x1c>
     8c2:	9c 01       	movw	r18, r24
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <freeRam+0x20>
     8c6:	29 e8       	ldi	r18, 0x89	; 137
     8c8:	34 e2       	ldi	r19, 0x24	; 36
     8ca:	ce 01       	movw	r24, r28
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	82 1b       	sub	r24, r18
     8d0:	93 0b       	sbc	r25, r19
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <__vector_21>:
     8dc:	1f 92       	push	r1
     8de:	0f 92       	push	r0
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	0f 92       	push	r0
     8e4:	11 24       	eor	r1, r1
     8e6:	8f 93       	push	r24
     8e8:	9f 93       	push	r25
     8ea:	af 93       	push	r26
     8ec:	bf 93       	push	r27
     8ee:	80 91 18 1e 	lds	r24, 0x1E18	; 0x801e18 <_millis>
     8f2:	90 91 19 1e 	lds	r25, 0x1E19	; 0x801e19 <_millis+0x1>
     8f6:	a0 91 1a 1e 	lds	r26, 0x1E1A	; 0x801e1a <_millis+0x2>
     8fa:	b0 91 1b 1e 	lds	r27, 0x1E1B	; 0x801e1b <_millis+0x3>
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	a1 1d       	adc	r26, r1
     902:	b1 1d       	adc	r27, r1
     904:	80 93 18 1e 	sts	0x1E18, r24	; 0x801e18 <_millis>
     908:	90 93 19 1e 	sts	0x1E19, r25	; 0x801e19 <_millis+0x1>
     90c:	a0 93 1a 1e 	sts	0x1E1A, r26	; 0x801e1a <_millis+0x2>
     910:	b0 93 1b 1e 	sts	0x1E1B, r27	; 0x801e1b <_millis+0x3>
     914:	bf 91       	pop	r27
     916:	af 91       	pop	r26
     918:	9f 91       	pop	r25
     91a:	8f 91       	pop	r24
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <millis>:
     926:	f8 94       	cli
     928:	60 91 18 1e 	lds	r22, 0x1E18	; 0x801e18 <_millis>
     92c:	70 91 19 1e 	lds	r23, 0x1E19	; 0x801e19 <_millis+0x1>
     930:	80 91 1a 1e 	lds	r24, 0x1E1A	; 0x801e1a <_millis+0x2>
     934:	90 91 1b 1e 	lds	r25, 0x1E1B	; 0x801e1b <_millis+0x3>
     938:	78 94       	sei
     93a:	08 95       	ret

0000093c <adc_init>:
     93c:	ea e7       	ldi	r30, 0x7A	; 122
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	10 82       	st	Z, r1
     942:	80 81       	ld	r24, Z
     944:	87 60       	ori	r24, 0x07	; 7
     946:	80 83       	st	Z, r24
     948:	ac e7       	ldi	r26, 0x7C	; 124
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	8c 91       	ld	r24, X
     94e:	80 64       	ori	r24, 0x40	; 64
     950:	8c 93       	st	X, r24
     952:	80 81       	ld	r24, Z
     954:	80 68       	ori	r24, 0x80	; 128
     956:	80 83       	st	Z, r24
     958:	80 81       	ld	r24, Z
     95a:	80 64       	ori	r24, 0x40	; 64
     95c:	80 83       	st	Z, r24
     95e:	08 95       	ret

00000960 <adc_read>:
     960:	ec e7       	ldi	r30, 0x7C	; 124
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	90 81       	ld	r25, Z
     966:	90 7e       	andi	r25, 0xE0	; 224
     968:	90 83       	st	Z, r25
     96a:	90 81       	ld	r25, Z
     96c:	89 2b       	or	r24, r25
     96e:	80 83       	st	Z, r24
     970:	ea e7       	ldi	r30, 0x7A	; 122
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	80 64       	ori	r24, 0x40	; 64
     978:	80 83       	st	Z, r24
     97a:	80 81       	ld	r24, Z
     97c:	86 fd       	sbrc	r24, 6
     97e:	fd cf       	rjmp	.-6      	; 0x97a <adc_read+0x1a>
     980:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     984:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     988:	08 95       	ret

0000098a <IO_LIBRARY_Init>:
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	28 97       	sbiw	r28, 0x08	; 8
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	88 e0       	ldi	r24, 0x08	; 8
     9a0:	ed e9       	ldi	r30, 0x9D	; 157
     9a2:	f2 e0       	ldi	r31, 0x02	; 2
     9a4:	de 01       	movw	r26, r28
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	01 90       	ld	r0, Z+
     9aa:	0d 92       	st	X+, r0
     9ac:	8a 95       	dec	r24
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <IO_LIBRARY_Init+0x1e>
     9b0:	62 ed       	ldi	r22, 0xD2	; 210
     9b2:	72 e0       	ldi	r23, 0x02	; 2
     9b4:	80 ed       	ldi	r24, 0xD0	; 208
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <reg_wizchip_cs_cbfunc>
     9bc:	6a ed       	ldi	r22, 0xDA	; 218
     9be:	72 e0       	ldi	r23, 0x02	; 2
     9c0:	84 ed       	ldi	r24, 0xD4	; 212
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <reg_wizchip_spi_cbfunc>
     9c8:	6f ee       	ldi	r22, 0xEF	; 239
     9ca:	72 e0       	ldi	r23, 0x02	; 2
     9cc:	8f ed       	ldi	r24, 0xDF	; 223
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <reg_wizchip_spiburst_cbfunc>
     9d4:	be 01       	movw	r22, r28
     9d6:	6f 5f       	subi	r22, 0xFF	; 255
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	cb 01       	movw	r24, r22
     9dc:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <wizchip_init>
     9e0:	88 e0       	ldi	r24, 0x08	; 8
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	0e 94 4c 21 	call	0x4298	; 0x4298 <wizchip_setnetinfo>
     9e8:	28 96       	adiw	r28, 0x08	; 8
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <timer0_init>:
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	84 bd       	out	0x24, r24	; 36
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	85 bd       	out	0x25, r24	; 37
     a02:	89 ef       	ldi	r24, 0xF9	; 249
     a04:	87 bd       	out	0x27, r24	; 39
     a06:	ee e6       	ldi	r30, 0x6E	; 110
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	82 60       	ori	r24, 0x02	; 2
     a0e:	80 83       	st	Z, r24
     a10:	08 95       	ret

00000a12 <print_network_information>:
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	6d 97       	sbiw	r28, 0x1d	; 29
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	8e 01       	movw	r16, r28
     a2c:	0f 5f       	subi	r16, 0xFF	; 255
     a2e:	1f 4f       	sbci	r17, 0xFF	; 255
     a30:	86 e0       	ldi	r24, 0x06	; 6
     a32:	f8 01       	movw	r30, r16
     a34:	11 92       	st	Z+, r1
     a36:	8a 95       	dec	r24
     a38:	e9 f7       	brne	.-6      	; 0xa34 <print_network_information+0x22>
     a3a:	b8 01       	movw	r22, r16
     a3c:	88 e0       	ldi	r24, 0x08	; 8
     a3e:	0e 94 c4 20 	call	0x4188	; 0x4188 <ctlwizchip>
     a42:	88 e4       	ldi	r24, 0x48	; 72
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     a4e:	1f 93       	push	r17
     a50:	0f 93       	push	r16
     a52:	83 e3       	ldi	r24, 0x33	; 51
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	9f 93       	push	r25
     a58:	8f 93       	push	r24
     a5a:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     a5e:	89 e0       	ldi	r24, 0x09	; 9
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	9f 93       	push	r25
     a64:	8f 93       	push	r24
     a66:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     a6a:	ce 01       	movw	r24, r28
     a6c:	07 96       	adiw	r24, 0x07	; 7
     a6e:	0e 94 85 21 	call	0x430a	; 0x430a <wizchip_getnetinfo>
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	49 f4       	brne	.+18     	; 0xa94 <print_network_information+0x82>
     a82:	8d ef       	ldi	r24, 0xFD	; 253
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	9f 93       	push	r25
     a88:	8f 93       	push	r24
     a8a:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	08 c0       	rjmp	.+16     	; 0xaa4 <print_network_information+0x92>
     a94:	83 ef       	ldi	r24, 0xF3	; 243
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa6:	1f 92       	push	r1
     aa8:	8f 93       	push	r24
     aaa:	8b 85       	ldd	r24, Y+11	; 0x0b
     aac:	1f 92       	push	r1
     aae:	8f 93       	push	r24
     ab0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ab2:	1f 92       	push	r1
     ab4:	8f 93       	push	r24
     ab6:	89 85       	ldd	r24, Y+9	; 0x09
     ab8:	1f 92       	push	r1
     aba:	8f 93       	push	r24
     abc:	88 85       	ldd	r24, Y+8	; 0x08
     abe:	1f 92       	push	r1
     ac0:	8f 93       	push	r24
     ac2:	8f 81       	ldd	r24, Y+7	; 0x07
     ac4:	1f 92       	push	r1
     ac6:	8f 93       	push	r24
     ac8:	86 ec       	ldi	r24, 0xC6	; 198
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     ad4:	88 89       	ldd	r24, Y+16	; 0x10
     ad6:	1f 92       	push	r1
     ad8:	8f 93       	push	r24
     ada:	8f 85       	ldd	r24, Y+15	; 0x0f
     adc:	1f 92       	push	r1
     ade:	8f 93       	push	r24
     ae0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ae2:	1f 92       	push	r1
     ae4:	8f 93       	push	r24
     ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ae8:	1f 92       	push	r1
     aea:	8f 93       	push	r24
     aec:	8b ea       	ldi	r24, 0xAB	; 171
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	9f 93       	push	r25
     af2:	8f 93       	push	r24
     af4:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     af8:	8c 89       	ldd	r24, Y+20	; 0x14
     afa:	1f 92       	push	r1
     afc:	8f 93       	push	r24
     afe:	8b 89       	ldd	r24, Y+19	; 0x13
     b00:	1f 92       	push	r1
     b02:	8f 93       	push	r24
     b04:	8a 89       	ldd	r24, Y+18	; 0x12
     b06:	1f 92       	push	r1
     b08:	8f 93       	push	r24
     b0a:	89 89       	ldd	r24, Y+17	; 0x11
     b0c:	1f 92       	push	r1
     b0e:	8f 93       	push	r24
     b10:	80 e9       	ldi	r24, 0x90	; 144
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	9f 93       	push	r25
     b16:	8f 93       	push	r24
     b18:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	88 8d       	ldd	r24, Y+24	; 0x18
     b28:	1f 92       	push	r1
     b2a:	8f 93       	push	r24
     b2c:	8f 89       	ldd	r24, Y+23	; 0x17
     b2e:	1f 92       	push	r1
     b30:	8f 93       	push	r24
     b32:	8e 89       	ldd	r24, Y+22	; 0x16
     b34:	1f 92       	push	r1
     b36:	8f 93       	push	r24
     b38:	8d 89       	ldd	r24, Y+21	; 0x15
     b3a:	1f 92       	push	r1
     b3c:	8f 93       	push	r24
     b3e:	85 e7       	ldi	r24, 0x75	; 117
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	9f 93       	push	r25
     b44:	8f 93       	push	r24
     b46:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     b4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b4c:	1f 92       	push	r1
     b4e:	8f 93       	push	r24
     b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b52:	1f 92       	push	r1
     b54:	8f 93       	push	r24
     b56:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b58:	1f 92       	push	r1
     b5a:	8f 93       	push	r24
     b5c:	89 8d       	ldd	r24, Y+25	; 0x19
     b5e:	1f 92       	push	r1
     b60:	8f 93       	push	r24
     b62:	8a e5       	ldi	r24, 0x5A	; 90
     b64:	92 e0       	ldi	r25, 0x02	; 2
     b66:	9f 93       	push	r25
     b68:	8f 93       	push	r24
     b6a:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	6d 96       	adiw	r28, 0x1d	; 29
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	08 95       	ret

00000b8e <my_ip_assign>:
     b8e:	8e e0       	ldi	r24, 0x0E	; 14
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <getIPfromDHCP>
     b96:	86 e1       	ldi	r24, 0x16	; 22
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <getGWfromDHCP>
     b9e:	82 e1       	ldi	r24, 0x12	; 18
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <getSNfromDHCP>
     ba6:	8a e1       	ldi	r24, 0x1A	; 26
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <getDNSfromDHCP>
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <netInfo+0x16>
     bb4:	88 e0       	ldi	r24, 0x08	; 8
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	0e 94 4c 21 	call	0x4298	; 0x4298 <wizchip_setnetinfo>
     bbc:	2a df       	rcall	.-428    	; 0xa12 <print_network_information>
     bbe:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <getDHCPLeasetime>
     bc2:	9f 93       	push	r25
     bc4:	8f 93       	push	r24
     bc6:	7f 93       	push	r23
     bc8:	6f 93       	push	r22
     bca:	87 e7       	ldi	r24, 0x77	; 119
     bcc:	93 e0       	ldi	r25, 0x03	; 3
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     bd6:	84 e7       	ldi	r24, 0x74	; 116
     bd8:	93 e0       	ldi	r25, 0x03	; 3
     bda:	9f 93       	push	r25
     bdc:	8f 93       	push	r24
     bde:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     be2:	8d b7       	in	r24, 0x3d	; 61
     be4:	9e b7       	in	r25, 0x3e	; 62
     be6:	08 96       	adiw	r24, 0x08	; 8
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	9e bf       	out	0x3e, r25	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	8d bf       	out	0x3d, r24	; 61
     bf2:	08 95       	ret

00000bf4 <lwm_mqtt_send>:

void lwm_mqtt_send(uint8_t *data, uint8_t len)
{
	mqtt_pub(&mqtt_client, "lwm/from_node", (char *)data, len);
     bf4:	26 2f       	mov	r18, r22
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	ac 01       	movw	r20, r24
     bfa:	60 e6       	ldi	r22, 0x60	; 96
     bfc:	73 e0       	ldi	r23, 0x03	; 3
     bfe:	8f ed       	ldi	r24, 0xDF	; 223
     c00:	9d e1       	ldi	r25, 0x1D	; 29
     c02:	c7 cd       	rjmp	.-1138   	; 0x792 <mqtt_pub>
     c04:	08 95       	ret

00000c06 <appDataInd>:
(void)timer;
}


static bool appDataInd(NWK_DataInd_t *ind)
{
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	8c 01       	movw	r16, r24
for (uint8_t i = 0; i < ind->size; i++)
     c0e:	dc 01       	movw	r26, r24
     c10:	19 96       	adiw	r26, 0x09	; 9
     c12:	6c 91       	ld	r22, X
     c14:	66 23       	and	r22, r22
     c16:	81 f0       	breq	.+32     	; 0xc38 <appDataInd+0x32>
     c18:	c0 e0       	ldi	r28, 0x00	; 0
	HAL_UartWriteByte(ind->data[i]);
     c1a:	d8 01       	movw	r26, r16
     c1c:	17 96       	adiw	r26, 0x07	; 7
     c1e:	ed 91       	ld	r30, X+
     c20:	fc 91       	ld	r31, X
     c22:	18 97       	sbiw	r26, 0x08	; 8
     c24:	ec 0f       	add	r30, r28
     c26:	f1 1d       	adc	r31, r1
     c28:	80 81       	ld	r24, Z
     c2a:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <HAL_UartWriteByte>
}


static bool appDataInd(NWK_DataInd_t *ind)
{
for (uint8_t i = 0; i < ind->size; i++)
     c2e:	cf 5f       	subi	r28, 0xFF	; 255
     c30:	f8 01       	movw	r30, r16
     c32:	61 85       	ldd	r22, Z+9	; 0x09
     c34:	c6 17       	cp	r28, r22
     c36:	88 f3       	brcs	.-30     	; 0xc1a <appDataInd+0x14>
	HAL_UartWriteByte(ind->data[i]);

// Send the payload to the MQTT
lwm_mqtt_send(ind->data, ind->size);
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	d8 01       	movw	r26, r16
     c3c:	17 96       	adiw	r26, 0x07	; 7
     c3e:	8d 91       	ld	r24, X+
     c40:	9c 91       	ld	r25, X
     c42:	18 97       	sbiw	r26, 0x08	; 8
     c44:	d7 df       	rcall	.-82     	; 0xbf4 <lwm_mqtt_send>

return true;
}
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	08 95       	ret

00000c50 <main>:
}


/*-MAIN------------------------------------------------------------------------*/
int main(void)
{	
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	c5 5b       	subi	r28, 0xB5	; 181
     c5a:	d1 09       	sbc	r29, r1
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
	uint8_t prev_sw1 = 1; // VAR for sw1 pressing detect
	uint8_t run_user_applications = 0;
	// MQTT connection state machine
	uint8_t mqtt_connection = 0;
	
	SYS_Init();
     c66:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <SYS_Init>
	HAL_UartInit(38400);
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	76 e9       	ldi	r23, 0x96	; 150
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 07 22 	call	0x440e	; 0x440e <HAL_UartInit>
	stdout = &uart_str;
     c76:	8f e1       	ldi	r24, 0x1F	; 31
     c78:	92 e0       	ldi	r25, 0x02	; 2
     c7a:	90 93 85 24 	sts	0x2485, r25	; 0x802485 <__iob+0x3>
     c7e:	80 93 84 24 	sts	0x2484, r24	; 0x802484 <__iob+0x2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     c82:	99 e2       	ldi	r25, 0x29	; 41
     c84:	88 e1       	ldi	r24, 0x18	; 24
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	a8 95       	wdr
     c8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
static void avr_init(void)
{
	// Initialize device here.
	// WatchDog INIT
	wdt_enable(WDTO_8S);  // set up wdt reset interval 2 second
	wdt_reset(); // wdt reset ~ every <2000ms
     c96:	a8 95       	wdr

	timer0_init();// Timer0 millis engine init
     c98:	b0 de       	rcall	.-672    	; 0x9fa <timer0_init>
#endif
	// Define Output/Input Stream
	stdout = &uart0_stdout;
*/
	//ADC init
	adc_init();
     c9a:	50 de       	rcall	.-864    	; 0x93c <adc_init>
	adc_read(0); //Dummy read
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	60 de       	rcall	.-832    	; 0x960 <adc_read>
     ca0:	3c 9a       	sbi	0x07, 4	; 7


	led1_conf();
     ca2:	44 98       	cbi	0x08, 4	; 8
	led1_low();// LED1 is OFF
     ca4:	3d 98       	cbi	0x07, 5	; 7


	sw1_conf();//SW1 internal pull-up
     ca6:	45 9a       	sbi	0x08, 5	; 8
     ca8:	78 94       	sei

	sei(); //re-enable global interrupts
     caa:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <spi_init>
	SYS_Init();
	HAL_UartInit(38400);
	stdout = &uart_str;

	avr_init();
	spi_init();
     cae:	8a e1       	ldi	r24, 0x1A	; 26
	// test_spi_communication();
	// test_w5500_version();

	// Print program metrics
	PRINTF("%S", str_prog_name);// ???????? ?????????
     cb0:	94 e0       	ldi	r25, 0x04	; 4
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	87 e5       	ldi	r24, 0x57	; 87
     cb8:	92 e0       	ldi	r25, 0x02	; 2
     cba:	9f 93       	push	r25
     cbc:	8f 93       	push	r24
     cbe:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     cc2:	85 e7       	ldi	r24, 0x75	; 117
	PRINTF("Compiled at: %S %S\r\n", compile_time, compile_date);// ????? ???? ??????????
     cc4:	94 e0       	ldi	r25, 0x04	; 4
     cc6:	9f 93       	push	r25
     cc8:	8f 93       	push	r24
     cca:	8c e6       	ldi	r24, 0x6C	; 108
     ccc:	94 e0       	ldi	r25, 0x04	; 4
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	82 e4       	ldi	r24, 0x42	; 66
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     cde:	1f 92       	push	r1
	PRINTF(">> MCU is: %S; CLK is: %luHz\r\n", str_mcu, F_CPU);// MCU Name && FREQ
     ce0:	8a e7       	ldi	r24, 0x7A	; 122
     ce2:	8f 93       	push	r24
     ce4:	82 e1       	ldi	r24, 0x12	; 18
     ce6:	8f 93       	push	r24
     ce8:	1f 92       	push	r1
     cea:	8e e0       	ldi	r24, 0x0E	; 14
     cec:	94 e0       	ldi	r25, 0x04	; 4
     cee:	9f 93       	push	r25
     cf0:	8f 93       	push	r24
     cf2:	83 e2       	ldi	r24, 0x23	; 35
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	9f 93       	push	r25
     cf8:	8f 93       	push	r24
     cfa:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
	PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());
     cfe:	d5 dd       	rcall	.-1110   	; 0x8aa <freeRam>
     d00:	9f 93       	push	r25
     d02:	8f 93       	push	r24
     d04:	88 e0       	ldi	r24, 0x08	; 8
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	9f 93       	push	r25
     d0a:	8f 93       	push	r24
     d0c:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>

	//Wizchip WIZ5500 Ethernet initialize
	IO_LIBRARY_Init();
     d10:	3c de       	rcall	.-904    	; 0x98a <IO_LIBRARY_Init>
     d12:	0f b6       	in	r0, 0x3f	; 63
	
	if(netInfo.dhcp == NETINFO_DHCP)
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <netInfo+0x16>
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	89 f4       	brne	.+34     	; 0xd46 <main+0xf6>
     d24:	6e e1       	ldi	r22, 0x1E	; 30
	{
		//DHCP IP
		DHCP_init(SOCK_DHCPC, gDATABUF_DHCP);
     d26:	70 e2       	ldi	r23, 0x20	; 32
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <DHCP_init>
     d2e:	44 e9       	ldi	r20, 0x94	; 148
		// if you want different action instead default ip assign, update, conflict.
		// if cbfunc == 0, act as default.
		reg_dhcp_cbfunc(my_ip_assign, my_ip_assign, my_ip_conflict);
     d30:	53 e0       	ldi	r21, 0x03	; 3
     d32:	67 ec       	ldi	r22, 0xC7	; 199
     d34:	75 e0       	ldi	r23, 0x05	; 5
     d36:	cb 01       	movw	r24, r22
     d38:	5d d4       	rcall	.+2234   	; 0x15f4 <reg_dhcp_cbfunc>
     d3a:	c3 55       	subi	r28, 0x53	; 83

		run_user_applications = 0; 	// flag for running user's code
     d3c:	df 4f       	sbci	r29, 0xFF	; 255
     d3e:	18 82       	st	Y, r1
     d40:	cd 5a       	subi	r28, 0xAD	; 173
     d42:	d0 40       	sbci	r29, 0x00	; 0
     d44:	07 c0       	rjmp	.+14     	; 0xd54 <main+0x104>
	}
	else
	{
		// Static IP
		print_network_information();
     d46:	65 de       	rcall	.-822    	; 0xa12 <print_network_information>
     d48:	31 e0       	ldi	r19, 0x01	; 1
		run_user_applications = 1; 	// flag for running user's code
     d4a:	c3 55       	subi	r28, 0x53	; 83
     d4c:	df 4f       	sbci	r29, 0xFF	; 255
     d4e:	38 83       	st	Y, r19
     d50:	cd 5a       	subi	r28, 0xAD	; 173
     d52:	d0 40       	sbci	r29, 0x00	; 0
     d54:	82 e0       	ldi	r24, 0x02	; 2
	//Find MQTT broker and connect with it
	uint8_t mqtt_buf[100];
	int32_t mqtt_rc = 0;
	Network mqtt_network;
	// Client mqtt_client; - made it global variable
	mqtt_network.my_socket = SOCK_MQTT;
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	a9 96       	adiw	r28, 0x29	; 41
     d5e:	8c af       	std	Y+60, r24	; 0x3c
     d60:	9d af       	std	Y+61, r25	; 0x3d
     d62:	ae af       	std	Y+62, r26	; 0x3e
     d64:	bf af       	std	Y+63, r27	; 0x3f
     d66:	a9 97       	sbiw	r28, 0x29	; 41
	//DNS_run(gWIZNETINFO.dns, "test.mosquitto.org", targetIP);
	
	
	

	uint32_t timer_link_1sec = millis();
     d68:	de dd       	rcall	.-1092   	; 0x926 <millis>
     d6a:	c2 55       	subi	r28, 0x52	; 82
     d6c:	df 4f       	sbci	r29, 0xFF	; 255
     d6e:	68 83       	st	Y, r22
     d70:	79 83       	std	Y+1, r23	; 0x01
     d72:	8a 83       	std	Y+2, r24	; 0x02
     d74:	9b 83       	std	Y+3, r25	; 0x03
     d76:	ce 5a       	subi	r28, 0xAE	; 174
	uint32_t timer_dhcp_1sec = millis();
     d78:	d0 40       	sbci	r29, 0x00	; 0
     d7a:	d5 dd       	rcall	.-1110   	; 0x926 <millis>
     d7c:	2b 01       	movw	r4, r22
     d7e:	3c 01       	movw	r6, r24
	uint32_t timer_dhcp_1sec_count = 0;
	uint32_t timer_uptime_60sec = millis();
     d80:	d2 dd       	rcall	.-1116   	; 0x926 <millis>
     d82:	ce 54       	subi	r28, 0x4E	; 78
     d84:	df 4f       	sbci	r29, 0xFF	; 255
     d86:	68 83       	st	Y, r22
     d88:	79 83       	std	Y+1, r23	; 0x01
     d8a:	8a 83       	std	Y+2, r24	; 0x02
     d8c:	9b 83       	std	Y+3, r25	; 0x03
     d8e:	c2 5b       	subi	r28, 0xB2	; 178
     d90:	d0 40       	sbci	r29, 0x00	; 0
	uint32_t timer_mqtt_pub_1sec = millis();
     d92:	c9 dd       	rcall	.-1134   	; 0x926 <millis>
     d94:	10 e0       	ldi	r17, 0x00	; 0
int main(void)
{	
	uint8_t prev_sw1 = 1; // VAR for sw1 pressing detect
	uint8_t run_user_applications = 0;
	// MQTT connection state machine
	uint8_t mqtt_connection = 0;
     d96:	0f 2e       	mov	r0, r31
			}
		}
		
		
		if (mqtt_connection == 0){
			PRINTF(">>Trying connect to MQTT broker: %d.%d.%d.%d ..\r\n", MQTT_targetIP[0], MQTT_targetIP[1], MQTT_targetIP[2], MQTT_targetIP[3]);
     d98:	f4 e0       	ldi	r31, 0x04	; 4
     d9a:	8f 2e       	mov	r8, r31
     d9c:	f2 e0       	ldi	r31, 0x02	; 2
     d9e:	9f 2e       	mov	r9, r31
     da0:	f0 2d       	mov	r31, r0
     da2:	1e 01       	movw	r2, r28
				mqtt_connection = 0;
				while(1);//Reboot the board
			}

			// Subscribe to all topics
			char SubString[] = "/#";// Subscribe for all that begin from "/"
     da4:	4a ea       	ldi	r20, 0xAA	; 170
     da6:	24 0e       	add	r2, r20
     da8:	31 1c       	adc	r3, r1
     daa:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <SYS_TaskHandler>

/*-MAIN LOOP------------------------------------------------------------------------------------------*/

	while (1)
	{
	SYS_TaskHandler();
     dae:	0e 94 1c 23 	call	0x4638	; 0x4638 <HAL_UartTaskHandler>
	HAL_UartTaskHandler();
     db2:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <appState>
}


static void APP_TaskHandler(void)
{
switch (appState)
     db6:	81 11       	cpse	r24, r1
     db8:	2a c0       	rjmp	.+84     	; 0xe0e <main+0x1be>
     dba:	80 e0       	ldi	r24, 0x00	; 0
}


static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 7e 34 	call	0x68fc	; 0x68fc <NWK_SetAddr>
     dc2:	80 e8       	ldi	r24, 0x80	; 128
NWK_SetPanId(APP_PANID);
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 85 34 	call	0x690a	; 0x690a <NWK_SetPanId>
     dca:	8f e0       	ldi	r24, 0x0F	; 15
PHY_SetChannel(APP_CHANNEL);
     dcc:	0e 94 a9 3c 	call	0x7952	; 0x7952 <PHY_SetChannel>
     dd0:	81 e0       	ldi	r24, 0x01	; 1
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     dd2:	0e 94 a5 3c 	call	0x794a	; 0x794a <PHY_SetRxState>
     dd6:	63 e0       	ldi	r22, 0x03	; 3

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     dd8:	76 e0       	ldi	r23, 0x06	; 6
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	0e 94 8c 34 	call	0x6918	; 0x6918 <NWK_OpenEndpoint>
     de0:	84 e1       	ldi	r24, 0x14	; 20

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	a0 e0       	ldi	r26, 0x00	; 0
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <appTimer+0x6>
     dec:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <appTimer+0x7>
     df0:	a0 93 b5 04 	sts	0x04B5, r26	; 0x8004b5 <appTimer+0x8>
     df4:	b0 93 b6 04 	sts	0x04B6, r27	; 0x8004b6 <appTimer+0x9>
     df8:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <appTimer+0xa>
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
appTimer.handler = appTimerHandler;
     dfc:	ad e2       	ldi	r26, 0x2D	; 45
     dfe:	b3 e0       	ldi	r27, 0x03	; 3
     e00:	b0 93 b9 04 	sts	0x04B9, r27	; 0x8004b9 <appTimer+0xc>
     e04:	a0 93 b8 04 	sts	0x04B8, r26	; 0x8004b8 <appTimer+0xb>
switch (appState)
{
case APP_STATE_INITIAL:
{
appInit();
appState = APP_STATE_IDLE;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <appState>
	SYS_TaskHandler();
	HAL_UartTaskHandler();
	APP_TaskHandler();

	//Here at least every 1sec
	wdt_reset(); // WDT reset at least every sec
     e0e:	a8 95       	wdr
	
	    	/* DHCP */
		/*DHCP timer 1 sec interval tick*/
    	if((millis()-timer_dhcp_1sec)> 1000)
     e10:	8a dd       	rcall	.-1260   	; 0x926 <millis>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	84 19       	sub	r24, r4
     e18:	95 09       	sbc	r25, r5
     e1a:	a6 09       	sbc	r26, r6
     e1c:	b7 09       	sbc	r27, r7
     e1e:	89 3e       	cpi	r24, 0xE9	; 233
     e20:	93 40       	sbci	r25, 0x03	; 3
     e22:	a1 05       	cpc	r26, r1
     e24:	b1 05       	cpc	r27, r1
     e26:	28 f0       	brcs	.+10     	; 0xe32 <main+0x1e2>
		{
			//here every 1 sec
			timer_dhcp_1sec = millis();
     e28:	7e dd       	rcall	.-1284   	; 0x926 <millis>
     e2a:	2b 01       	movw	r4, r22
     e2c:	3c 01       	movw	r6, r24
     e2e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <DHCP_time_handler>
			////////////////////////////////////////////////////////
			// SHOULD BE Added DHCP Timer Handler your 1s tick timer
			DHCP_time_handler(); 	// for DHCP timeout counter
     e32:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <netInfo+0x16>
			   PRINTF("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());
#endif
			}
		}
/* DHCP IP allocation and check the DHCP lease time (for IP renewal) */
    	if(netInfo.dhcp == NETINFO_DHCP)
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	31 f5       	brne	.+76     	; 0xe86 <main+0x236>
     e3a:	0e 94 4b 11 	call	0x2296	; 0x2296 <DHCP_run>
    	{
			switch(DHCP_run())
     e3e:	88 23       	and	r24, r24
     e40:	21 f0       	breq	.+8      	; 0xe4a <main+0x1fa>
     e42:	84 30       	cpi	r24, 0x04	; 4
     e44:	09 f4       	brne	.+2      	; 0xe48 <main+0x1f8>
     e46:	5d c1       	rjmp	.+698    	; 0x1102 <main+0x4b2>
     e48:	1e c0       	rjmp	.+60     	; 0xe86 <main+0x236>
					break;
				case DHCP_FAILED:
					/* ===== Example pseudo code =====  */
					// The below code can be replaced your code or omitted.
					// if omitted, retry to process DHCP
					my_dhcp_retry++;
     e4a:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <my_dhcp_retry>
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <my_dhcp_retry>
					if(my_dhcp_retry > MY_MAX_DHCP_RETRY)
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	b8 f0       	brcs	.+46     	; 0xe86 <main+0x236>
					{
						netInfo.dhcp = NETINFO_STATIC;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <netInfo+0x16>
						DHCP_stop();      // if restart, recall DHCP_init()
     e5e:	23 d7       	rcall	.+3654   	; 0x1ca6 <DHCP_stop>
				//#ifdef _MAIN_DEBUG_
				#if 1
						printf(">> DHCP %d Failed\r\n", my_dhcp_retry);
     e60:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <my_dhcp_retry>
     e64:	1f 92       	push	r1
     e66:	8f 93       	push	r24
     e68:	2e e6       	ldi	r18, 0x6E	; 110
     e6a:	33 e0       	ldi	r19, 0x03	; 3
     e6c:	3f 93       	push	r19
     e6e:	2f 93       	push	r18
     e70:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <printf>
						//Net_Conf();
						//Display_Net_Conf();   // print out static netinfo to serial

						IO_LIBRARY_Init(); //After that ping must working
     e74:	8a dd       	rcall	.-1260   	; 0x98a <IO_LIBRARY_Init>
     e76:	cd dd       	rcall	.-1126   	; 0xa12 <print_network_information>
						print_network_information();
     e78:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <my_dhcp_retry>
				#endif
						my_dhcp_retry = 0;
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	3e c1       	rjmp	.+636    	; 0x1102 <main+0x4b2>
     e86:	c3 55       	subi	r28, 0x53	; 83
    	}

		/*TCP-IP & UDP user's applications*/
    	/* Loopback Test: TCP Server and UDP */
    	// Test for Ethernet data transfer validation
    	if(run_user_applications)
     e88:	df 4f       	sbci	r29, 0xFF	; 255
     e8a:	58 81       	ld	r21, Y
     e8c:	cd 5a       	subi	r28, 0xAD	; 173
     e8e:	d0 40       	sbci	r29, 0x00	; 0
     e90:	55 23       	and	r21, r21
		{
			//Use Hercules Terminal to check loopback tcp:5000 and udp:3000
			/*
			 * https://www.hw-group.com/software/hercules-setup-utility
			 * */
			loopback_tcps(SOCK_TCPS,ethBuf0,PORT_TCPS);
     e92:	61 f0       	breq	.+24     	; 0xeac <main+0x25c>
     e94:	48 e8       	ldi	r20, 0x88	; 136
     e96:	53 e1       	ldi	r21, 0x13	; 19
     e98:	64 e4       	ldi	r22, 0x44	; 68
     e9a:	72 e2       	ldi	r23, 0x22	; 34
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	38 d1       	rcall	.+624    	; 0x1110 <loopback_tcps>
			loopback_udps(SOCK_UDPS,ethBuf0,PORT_UDPS);
     ea0:	48 eb       	ldi	r20, 0xB8	; 184
     ea2:	5b e0       	ldi	r21, 0x0B	; 11
     ea4:	64 e4       	ldi	r22, 0x44	; 68
     ea6:	72 e2       	ldi	r23, 0x22	; 34
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	6f d2       	rcall	.+1246   	; 0x138a <loopback_udps>
     eac:	3c dd       	rcall	.-1416   	; 0x926 <millis>
			//loopback_ret = loopback_tcpc(SOCK_TCPS, gDATABUF, destip, destport);
			//if(loopback_ret < 0) printf("loopback ret: %ld\r\n", loopback_ret); // TCP Socket Error code
		}
		
					/*PHY LINK DETECT*/
    	if((millis()-timer_link_1sec)> 1000)
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	c2 55       	subi	r28, 0x52	; 82
     eb4:	df 4f       	sbci	r29, 0xFF	; 255
     eb6:	28 81       	ld	r18, Y
     eb8:	39 81       	ldd	r19, Y+1	; 0x01
     eba:	4a 81       	ldd	r20, Y+2	; 0x02
     ebc:	5b 81       	ldd	r21, Y+3	; 0x03
     ebe:	ce 5a       	subi	r28, 0xAE	; 174
     ec0:	d0 40       	sbci	r29, 0x00	; 0
     ec2:	82 1b       	sub	r24, r18
     ec4:	93 0b       	sbc	r25, r19
     ec6:	a4 0b       	sbc	r26, r20
     ec8:	b5 0b       	sbc	r27, r21
     eca:	89 3e       	cpi	r24, 0xE9	; 233
     ecc:	93 40       	sbci	r25, 0x03	; 3
     ece:	a1 05       	cpc	r26, r1
     ed0:	b1 05       	cpc	r27, r1
     ed2:	80 f0       	brcs	.+32     	; 0xef4 <main+0x2a4>
     ed4:	28 dd       	rcall	.-1456   	; 0x926 <millis>
		{
			//here every 1 sec
			timer_link_1sec = millis();
     ed6:	c2 55       	subi	r28, 0x52	; 82
     ed8:	df 4f       	sbci	r29, 0xFF	; 255
     eda:	68 83       	st	Y, r22
     edc:	79 83       	std	Y+1, r23	; 0x01
     ede:	8a 83       	std	Y+2, r24	; 0x02
     ee0:	9b 83       	std	Y+3, r25	; 0x03
     ee2:	ce 5a       	subi	r28, 0xAE	; 174
     ee4:	d0 40       	sbci	r29, 0x00	; 0
     ee6:	0e 94 17 20 	call	0x402e	; 0x402e <wizphy_getphylink>
			if(wizphy_getphylink() == PHY_LINK_ON)
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	11 f4       	brne	.+4      	; 0xef2 <main+0x2a2>
     eee:	44 9a       	sbi	0x08, 4	; 8
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <main+0x2a4>
			{
				// printf("Ethernet Link is ON\r\n");
				led1_high();
     ef2:	44 98       	cbi	0x08, 4	; 8
     ef4:	11 11       	cpse	r17, r1
			}
			else
			{
				// printf("Ethernet Link is OFF\r\n");
				led1_low();
     ef6:	c7 c0       	rjmp	.+398    	; 0x1086 <main+0x436>
			}
		}
		
		
		if (mqtt_connection == 0){
     ef8:	d4 01       	movw	r26, r8
     efa:	13 96       	adiw	r26, 0x03	; 3
			PRINTF(">>Trying connect to MQTT broker: %d.%d.%d.%d ..\r\n", MQTT_targetIP[0], MQTT_targetIP[1], MQTT_targetIP[2], MQTT_targetIP[3]);
     efc:	8c 91       	ld	r24, X
     efe:	13 97       	sbiw	r26, 0x03	; 3
     f00:	1f 92       	push	r1
     f02:	8f 93       	push	r24
     f04:	12 96       	adiw	r26, 0x02	; 2
     f06:	8c 91       	ld	r24, X
     f08:	12 97       	sbiw	r26, 0x02	; 2
     f0a:	1f 92       	push	r1
     f0c:	8f 93       	push	r24
     f0e:	11 96       	adiw	r26, 0x01	; 1
     f10:	8c 91       	ld	r24, X
     f12:	11 97       	sbiw	r26, 0x01	; 1
     f14:	1f 92       	push	r1
     f16:	8f 93       	push	r24
     f18:	8c 91       	ld	r24, X
     f1a:	1f 92       	push	r1
     f1c:	8f 93       	push	r24
     f1e:	e6 ed       	ldi	r30, 0xD6	; 214
     f20:	f1 e0       	ldi	r31, 0x01	; 1
     f22:	ff 93       	push	r31
     f24:	ef 93       	push	r30
     f26:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
     f2a:	ce 01       	movw	r24, r28
     f2c:	8b 59       	subi	r24, 0x9B	; 155
			NewNetwork(&mqtt_network);
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <NewNetwork>
     f34:	4b e5       	ldi	r20, 0x5B	; 91
     f36:	57 e0       	ldi	r21, 0x07	; 7
			ConnectNetwork(&mqtt_network, MQTT_targetIP, 1883);
     f38:	b4 01       	movw	r22, r8
     f3a:	ce 01       	movw	r24, r28
     f3c:	8b 59       	subi	r24, 0x9B	; 155
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <ConnectNetwork>
     f44:	a1 2c       	mov	r10, r1
     f46:	68 94       	set
			MQTTClient(&mqtt_client, &mqtt_network, 1000, mqtt_buf, 100, mqtt_readBuffer, MQTT_BUFFER_SIZE);
     f48:	bb 24       	eor	r11, r11
     f4a:	b1 f8       	bld	r11, 1
     f4c:	0f 2e       	mov	r0, r31
     f4e:	fc e1       	ldi	r31, 0x1C	; 28
     f50:	cf 2e       	mov	r12, r31
     f52:	fe e1       	ldi	r31, 0x1E	; 30
     f54:	df 2e       	mov	r13, r31
     f56:	f0 2d       	mov	r31, r0
     f58:	0f 2e       	mov	r0, r31
     f5a:	f4 e6       	ldi	r31, 0x64	; 100
     f5c:	ef 2e       	mov	r14, r31
     f5e:	f1 2c       	mov	r15, r1
     f60:	f0 2d       	mov	r31, r0
     f62:	8e 01       	movw	r16, r28
     f64:	0f 5f       	subi	r16, 0xFF	; 255
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	28 ee       	ldi	r18, 0xE8	; 232
     f6a:	33 e0       	ldi	r19, 0x03	; 3
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	be 01       	movw	r22, r28
     f72:	6b 59       	subi	r22, 0x9B	; 155
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	8f ed       	ldi	r24, 0xDF	; 223
     f78:	9d e1       	ldi	r25, 0x1D	; 29
     f7a:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <MQTTClient>
     f7e:	8b e3       	ldi	r24, 0x3B	; 59
     f80:	e7 ea       	ldi	r30, 0xA7	; 167

			//Connection to MQTT broker
			MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
     f82:	f2 e0       	ldi	r31, 0x02	; 2
     f84:	de 01       	movw	r26, r28
     f86:	a1 59       	subi	r26, 0x91	; 145
     f88:	bf 4f       	sbci	r27, 0xFF	; 255
     f8a:	01 90       	ld	r0, Z+
     f8c:	0d 92       	st	X+, r0
     f8e:	8a 95       	dec	r24
     f90:	e1 f7       	brne	.-8      	; 0xf8a <main+0x33a>
     f92:	cf 57       	subi	r28, 0x7F	; 127
     f94:	df 4f       	sbci	r29, 0xFF	; 255
			data.willFlag = 0;
     f96:	18 82       	st	Y, r1
     f98:	c1 58       	subi	r28, 0x81	; 129
     f9a:	d0 40       	sbci	r29, 0x00	; 0
     f9c:	84 e0       	ldi	r24, 0x04	; 4
     f9e:	e6 96       	adiw	r28, 0x36	; 54
			data.MQTTVersion = 4;//3;
     fa0:	8f af       	std	Y+63, r24	; 0x3f
     fa2:	e6 97       	sbiw	r28, 0x36	; 54
     fa4:	42 e8       	ldi	r20, 0x82	; 130
     fa6:	53 e0       	ldi	r21, 0x03	; 3
			data.clientID.cstring = (char*)"w5500_avr_client";
     fa8:	e8 96       	adiw	r28, 0x38	; 56
     faa:	5f af       	std	Y+63, r21	; 0x3f
     fac:	4e af       	std	Y+62, r20	; 0x3e
     fae:	e8 97       	sbiw	r28, 0x38	; 56
     fb0:	83 e9       	ldi	r24, 0x93	; 147
     fb2:	93 e0       	ldi	r25, 0x03	; 3
			data.username.cstring = (char*)"user1234";
     fb4:	c6 56       	subi	r28, 0x66	; 102
     fb6:	df 4f       	sbci	r29, 0xFF	; 255
     fb8:	99 83       	std	Y+1, r25	; 0x01
     fba:	88 83       	st	Y, r24
     fbc:	ca 59       	subi	r28, 0x9A	; 154
     fbe:	d0 40       	sbci	r29, 0x00	; 0
     fc0:	85 ea       	ldi	r24, 0xA5	; 165
     fc2:	92 e0       	ldi	r25, 0x02	; 2
			data.password.cstring = (char*)"\0";
     fc4:	ce 55       	subi	r28, 0x5E	; 94
     fc6:	df 4f       	sbci	r29, 0xFF	; 255
     fc8:	99 83       	std	Y+1, r25	; 0x01
     fca:	88 83       	st	Y, r24
     fcc:	c2 5a       	subi	r28, 0xA2	; 162
     fce:	d0 40       	sbci	r29, 0x00	; 0
     fd0:	8c e3       	ldi	r24, 0x3C	; 60
     fd2:	90 e0       	ldi	r25, 0x00	; 0
			data.keepAliveInterval = 60;
     fd4:	c2 58       	subi	r28, 0x82	; 130
     fd6:	df 4f       	sbci	r29, 0xFF	; 255
     fd8:	99 83       	std	Y+1, r25	; 0x01
     fda:	88 83       	st	Y, r24
     fdc:	ce 57       	subi	r28, 0x7E	; 126
     fde:	d0 40       	sbci	r29, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	c0 58       	subi	r28, 0x80	; 128
			data.cleansession = 1;
     fe4:	df 4f       	sbci	r29, 0xFF	; 255
     fe6:	88 83       	st	Y, r24
     fe8:	c0 58       	subi	r28, 0x80	; 128
     fea:	d0 40       	sbci	r29, 0x00	; 0
     fec:	be 01       	movw	r22, r28
     fee:	61 59       	subi	r22, 0x91	; 145
			mqtt_rc = MQTTConnect(&mqtt_client, &data);
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	8f ed       	ldi	r24, 0xDF	; 223
     ff4:	9d e1       	ldi	r25, 0x1D	; 29
     ff6:	0e 94 f6 27 	call	0x4fec	; 0x4fec <MQTTConnect>
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
			if (mqtt_rc == SUCCESSS)
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	61 15       	cp	r22, r1
    1006:	71 05       	cpc	r23, r1
    1008:	81 05       	cpc	r24, r1
    100a:	91 05       	cpc	r25, r1
    100c:	59 f5       	brne	.+86     	; 0x1064 <main+0x414>
    100e:	1f 92       	push	r1
    1010:	1f 92       	push	r1
			{
				PRINTF("++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
    1012:	1f 92       	push	r1
    1014:	1f 92       	push	r1
    1016:	86 eb       	ldi	r24, 0xB6	; 182
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	9f 93       	push	r25
    101c:	8f 93       	push	r24
    101e:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
    1022:	8f e2       	ldi	r24, 0x2F	; 47
    1024:	93 e2       	ldi	r25, 0x23	; 35
				mqtt_connection = 0;
				while(1);//Reboot the board
			}

			// Subscribe to all topics
			char SubString[] = "/#";// Subscribe for all that begin from "/"
    1026:	f1 01       	movw	r30, r2
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	80 83       	st	Z, r24
    102c:	12 82       	std	Z+2, r1	; 0x02
    102e:	2f e2       	ldi	r18, 0x2F	; 47
    1030:	33 e0       	ldi	r19, 0x03	; 3
			mqtt_rc = MQTTSubscribe(&mqtt_client, SubString, QOS0, messageArrived);
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	b1 01       	movw	r22, r2
    1036:	8f ed       	ldi	r24, 0xDF	; 223
    1038:	9d e1       	ldi	r25, 0x1D	; 29
    103a:	0e 94 ae 28 	call	0x515c	; 0x515c <MQTTSubscribe>
    103e:	9f 93       	push	r25
    1040:	8f 93       	push	r24
			PRINTF("Subscribed (%s) %d\r\n", SubString, mqtt_rc);
    1042:	7f 93       	push	r23
    1044:	6f 93       	push	r22
    1046:	3f 92       	push	r3
    1048:	2f 92       	push	r2
    104a:	81 ea       	ldi	r24, 0xA1	; 161
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	9f 93       	push	r25
    1050:	8f 93       	push	r24
    1052:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	11 e0       	ldi	r17, 0x01	; 1
			mqtt_rc = MQTTConnect(&mqtt_client, &data);
			if (mqtt_rc == SUCCESSS)
			{
				PRINTF("++MQTT Connected SUCCESS: %ld\r\n", mqtt_rc);
				// Connected
				mqtt_connection = 1;
    1062:	11 c0       	rjmp	.+34     	; 0x1086 <main+0x436>
    1064:	9f 93       	push	r25
			}
			else
			{
				PRINTF("--MQTT Connected ERROR: %ld\r\n", mqtt_rc);
    1066:	8f 93       	push	r24
    1068:	7f 93       	push	r23
    106a:	6f 93       	push	r22
    106c:	83 e8       	ldi	r24, 0x83	; 131
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	9f 93       	push	r25
    1072:	8f 93       	push	r24
    1074:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	ff cf       	rjmp	.-2      	; 0x1084 <main+0x434>
    1086:	4f dc       	rcall	.-1890   	; 0x926 <millis>
			}
		}

	}
	*/
	if((millis()-timer_uptime_60sec)> 60000)
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	ce 54       	subi	r28, 0x4E	; 78
    108e:	df 4f       	sbci	r29, 0xFF	; 255
    1090:	28 81       	ld	r18, Y
    1092:	39 81       	ldd	r19, Y+1	; 0x01
    1094:	4a 81       	ldd	r20, Y+2	; 0x02
    1096:	5b 81       	ldd	r21, Y+3	; 0x03
    1098:	c2 5b       	subi	r28, 0xB2	; 178
    109a:	d0 40       	sbci	r29, 0x00	; 0
    109c:	82 1b       	sub	r24, r18
    109e:	93 0b       	sbc	r25, r19
    10a0:	a4 0b       	sbc	r26, r20
    10a2:	b5 0b       	sbc	r27, r21
    10a4:	81 36       	cpi	r24, 0x61	; 97
    10a6:	9a 4e       	sbci	r25, 0xEA	; 234
    10a8:	a1 05       	cpc	r26, r1
    10aa:	b1 05       	cpc	r27, r1
    10ac:	08 f4       	brcc	.+2      	; 0x10b0 <main+0x460>
	{
		//here every 60 sec
		timer_uptime_60sec = millis();
    10ae:	7d ce       	rjmp	.-774    	; 0xdaa <main+0x15a>
    10b0:	3a dc       	rcall	.-1932   	; 0x926 <millis>
    10b2:	ce 54       	subi	r28, 0x4E	; 78
    10b4:	df 4f       	sbci	r29, 0xFF	; 255
    10b6:	68 83       	st	Y, r22
    10b8:	79 83       	std	Y+1, r23	; 0x01
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	9b 83       	std	Y+3, r25	; 0x03
    10be:	c2 5b       	subi	r28, 0xB2	; 178
    10c0:	d0 40       	sbci	r29, 0x00	; 0
	#ifdef CHK_RAM_LEAKAGE
				//Printout RAM usage every 1 minute
   				PRINTF(">> Free RAM is: %d bytes\r\n", freeRam());
    10c2:	f3 db       	rcall	.-2074   	; 0x8aa <freeRam>
    10c4:	9f 93       	push	r25
    10c6:	8f 93       	push	r24
    10c8:	88 e6       	ldi	r24, 0x68	; 104
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	9f 93       	push	r25
    10ce:	8f 93       	push	r24
    10d0:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
    10d4:	28 dc       	rcall	.-1968   	; 0x926 <millis>
	#endif

	#ifdef CHK_UPTIME
				//Printout RAM usage every 1 minute
   				PRINTF(">> Uptime %lu sec\r\n", millis()/1000);
    10d6:	28 ee       	ldi	r18, 0xE8	; 232
    10d8:	33 e0       	ldi	r19, 0x03	; 3
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	0e 94 bc 3e 	call	0x7d78	; 0x7d78 <__udivmodsi4>
    10e2:	5f 93       	push	r21
    10e4:	4f 93       	push	r20
    10e6:	3f 93       	push	r19
    10e8:	2f 93       	push	r18
    10ea:	84 e5       	ldi	r24, 0x54	; 84
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	9f 93       	push	r25
    10f0:	8f 93       	push	r24
    10f2:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	54 ce       	rjmp	.-856    	; 0xdaa <main+0x15a>
    1102:	51 e0       	ldi	r21, 0x01	; 1
    1104:	c3 55       	subi	r28, 0x53	; 83
int main(void)
{	
	uint8_t prev_sw1 = 1; // VAR for sw1 pressing detect
	uint8_t run_user_applications = 0;
	// MQTT connection state machine
	uint8_t mqtt_connection = 0;
    1106:	df 4f       	sbci	r29, 0xFF	; 255
    1108:	58 83       	st	Y, r21
    110a:	cd 5a       	subi	r28, 0xAD	; 173
    110c:	d0 40       	sbci	r29, 0x00	; 0
    110e:	c2 ce       	rjmp	.-636    	; 0xe94 <main+0x244>

00001110 <loopback_tcps>:
    1110:	7f 92       	push	r7
    1112:	8f 92       	push	r8
         break;
      default:
         break;
   }
   return 1;
}
    1114:	9f 92       	push	r9
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	00 d0       	rcall	.+0      	; 0x112c <loopback_tcps+0x1c>
    112c:	1f 92       	push	r1
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	78 2e       	mov	r7, r24
    1134:	5b 01       	movw	r10, r22
    1136:	e4 2e       	mov	r14, r20
    1138:	f5 2e       	mov	r15, r21
    113a:	08 2f       	mov	r16, r24
    113c:	10 e0       	ldi	r17, 0x00	; 0
    113e:	00 0f       	add	r16, r16
    1140:	11 1f       	adc	r17, r17
    1142:	00 0f       	add	r16, r16
    1144:	11 1f       	adc	r17, r17
    1146:	0f 5f       	subi	r16, 0xFF	; 255
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	00 0f       	add	r16, r16
    114c:	11 1f       	adc	r17, r17
    114e:	00 0f       	add	r16, r16
    1150:	11 1f       	adc	r17, r17
    1152:	00 0f       	add	r16, r16
    1154:	11 1f       	adc	r17, r17
    1156:	b8 01       	movw	r22, r16
    1158:	7d 5f       	subi	r23, 0xFD	; 253
    115a:	07 2e       	mov	r0, r23
    115c:	00 0c       	add	r0, r0
    115e:	88 0b       	sbc	r24, r24
    1160:	99 0b       	sbc	r25, r25
    1162:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
    1166:	83 31       	cpi	r24, 0x13	; 19
    1168:	09 f4       	brne	.+2      	; 0x116c <loopback_tcps+0x5c>
    116a:	b6 c0       	rjmp	.+364    	; 0x12d8 <loopback_tcps+0x1c8>
    116c:	20 f4       	brcc	.+8      	; 0x1176 <loopback_tcps+0x66>
    116e:	88 23       	and	r24, r24
    1170:	09 f4       	brne	.+2      	; 0x1174 <loopback_tcps+0x64>
    1172:	cb c0       	rjmp	.+406    	; 0x130a <loopback_tcps+0x1fa>
    1174:	e4 c0       	rjmp	.+456    	; 0x133e <loopback_tcps+0x22e>
    1176:	87 31       	cpi	r24, 0x17	; 23
    1178:	21 f0       	breq	.+8      	; 0x1182 <loopback_tcps+0x72>
    117a:	8c 31       	cpi	r24, 0x1C	; 28
    117c:	09 f4       	brne	.+2      	; 0x1180 <loopback_tcps+0x70>
    117e:	8e c0       	rjmp	.+284    	; 0x129c <loopback_tcps+0x18c>
    1180:	de c0       	rjmp	.+444    	; 0x133e <loopback_tcps+0x22e>
    1182:	68 01       	movw	r12, r16
    1184:	4e ef       	ldi	r20, 0xFE	; 254
    1186:	d4 1a       	sub	r13, r20
    1188:	0d 2c       	mov	r0, r13
    118a:	00 0c       	add	r0, r0
    118c:	ee 08       	sbc	r14, r14
    118e:	ff 08       	sbc	r15, r15
    1190:	c7 01       	movw	r24, r14
    1192:	b6 01       	movw	r22, r12
    1194:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
    1198:	80 ff       	sbrs	r24, 0
    119a:	46 c0       	rjmp	.+140    	; 0x1228 <loopback_tcps+0x118>
    119c:	b8 01       	movw	r22, r16
    119e:	74 5f       	subi	r23, 0xF4	; 244
    11a0:	07 2e       	mov	r0, r23
    11a2:	00 0c       	add	r0, r0
    11a4:	88 0b       	sbc	r24, r24
    11a6:	99 0b       	sbc	r25, r25
    11a8:	24 e0       	ldi	r18, 0x04	; 4
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	ae 01       	movw	r20, r28
    11ae:	4f 5f       	subi	r20, 0xFF	; 255
    11b0:	5f 4f       	sbci	r21, 0xFF	; 255
    11b2:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <WIZCHIP_READ_BUF>
    11b6:	b8 01       	movw	r22, r16
    11b8:	70 5f       	subi	r23, 0xF0	; 240
    11ba:	07 2e       	mov	r0, r23
    11bc:	00 0c       	add	r0, r0
    11be:	88 0b       	sbc	r24, r24
    11c0:	99 0b       	sbc	r25, r25
    11c2:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
    11c6:	98 2e       	mov	r9, r24
    11c8:	b8 01       	movw	r22, r16
    11ca:	7f 5e       	subi	r23, 0xEF	; 239
    11cc:	07 2e       	mov	r0, r23
    11ce:	00 0c       	add	r0, r0
    11d0:	88 0b       	sbc	r24, r24
    11d2:	99 0b       	sbc	r25, r25
    11d4:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
    11d8:	29 2d       	mov	r18, r9
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	32 2f       	mov	r19, r18
    11de:	22 27       	eor	r18, r18
    11e0:	a9 01       	movw	r20, r18
    11e2:	48 0f       	add	r20, r24
    11e4:	51 1d       	adc	r21, r1
    11e6:	ca 01       	movw	r24, r20
    11e8:	9f 93       	push	r25
    11ea:	4f 93       	push	r20
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	1f 92       	push	r1
    11f0:	8f 93       	push	r24
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	1f 92       	push	r1
    11f6:	8f 93       	push	r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	1f 92       	push	r1
    11fc:	8f 93       	push	r24
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	1f 92       	push	r1
    1202:	8f 93       	push	r24
    1204:	1f 92       	push	r1
    1206:	7f 92       	push	r7
    1208:	87 e1       	ldi	r24, 0x17	; 23
    120a:	95 e0       	ldi	r25, 0x05	; 5
    120c:	9f 93       	push	r25
    120e:	8f 93       	push	r24
    1210:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	c7 01       	movw	r24, r14
    1218:	b6 01       	movw	r22, r12
    121a:	0e 94 06 1b 	call	0x360c	; 0x360c <WIZCHIP_WRITE>
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	87 2d       	mov	r24, r7
    122a:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <getSn_RX_RSR>
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	09 f4       	brne	.+2      	; 0x1234 <loopback_tcps+0x124>
    1232:	8a c0       	rjmp	.+276    	; 0x1348 <loopback_tcps+0x238>
    1234:	ac 01       	movw	r20, r24
    1236:	41 30       	cpi	r20, 0x01	; 1
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	59 07       	cpc	r21, r25
    123c:	10 f0       	brcs	.+4      	; 0x1242 <loopback_tcps+0x132>
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	52 e0       	ldi	r21, 0x02	; 2
    1242:	b5 01       	movw	r22, r10
    1244:	87 2d       	mov	r24, r7
    1246:	0e 94 90 16 	call	0x2d20	; 0x2d20 <recv>
    124a:	16 16       	cp	r1, r22
    124c:	17 06       	cpc	r1, r23
    124e:	18 06       	cpc	r1, r24
    1250:	19 06       	cpc	r1, r25
    1252:	0c f0       	brlt	.+2      	; 0x1256 <loopback_tcps+0x146>
    1254:	88 c0       	rjmp	.+272    	; 0x1366 <loopback_tcps+0x256>
    1256:	8b 01       	movw	r16, r22
    1258:	67 2b       	or	r22, r23
    125a:	09 f4       	brne	.+2      	; 0x125e <loopback_tcps+0x14e>
    125c:	7a c0       	rjmp	.+244    	; 0x1352 <loopback_tcps+0x242>
    125e:	81 2c       	mov	r8, r1
    1260:	91 2c       	mov	r9, r1
    1262:	a8 01       	movw	r20, r16
    1264:	48 19       	sub	r20, r8
    1266:	59 09       	sbc	r21, r9
    1268:	b5 01       	movw	r22, r10
    126a:	68 0d       	add	r22, r8
    126c:	79 1d       	adc	r23, r9
    126e:	87 2d       	mov	r24, r7
    1270:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <send>
    1274:	6b 01       	movw	r12, r22
    1276:	7c 01       	movw	r14, r24
    1278:	99 23       	and	r25, r25
    127a:	34 f4       	brge	.+12     	; 0x1288 <loopback_tcps+0x178>
    127c:	87 2d       	mov	r24, r7
    127e:	0e 94 4f 12 	call	0x249e	; 0x249e <close>
    1282:	c7 01       	movw	r24, r14
    1284:	b6 01       	movw	r22, r12
    1286:	6f c0       	rjmp	.+222    	; 0x1366 <loopback_tcps+0x256>
    1288:	86 0e       	add	r8, r22
    128a:	97 1e       	adc	r9, r23
    128c:	08 15       	cp	r16, r8
    128e:	19 05       	cpc	r17, r9
    1290:	41 f7       	brne	.-48     	; 0x1262 <loopback_tcps+0x152>
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	65 c0       	rjmp	.+202    	; 0x1366 <loopback_tcps+0x256>
    129c:	87 2d       	mov	r24, r7
    129e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <disconnect>
    12a2:	c8 2e       	mov	r12, r24
    12a4:	88 0f       	add	r24, r24
    12a6:	dd 08       	sbc	r13, r13
    12a8:	ee 08       	sbc	r14, r14
    12aa:	ff 08       	sbc	r15, r15
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	c4 16       	cp	r12, r20
    12b0:	d1 04       	cpc	r13, r1
    12b2:	e1 04       	cpc	r14, r1
    12b4:	f1 04       	cpc	r15, r1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <loopback_tcps+0x1aa>
    12b8:	51 c0       	rjmp	.+162    	; 0x135c <loopback_tcps+0x24c>
    12ba:	1f 92       	push	r1
    12bc:	7f 92       	push	r7
    12be:	84 e0       	ldi	r24, 0x04	; 4
    12c0:	95 e0       	ldi	r25, 0x05	; 5
    12c2:	9f 93       	push	r25
    12c4:	8f 93       	push	r24
    12c6:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	c7 01       	movw	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	47 c0       	rjmp	.+142    	; 0x1366 <loopback_tcps+0x256>
    12d8:	ff 92       	push	r15
    12da:	ef 92       	push	r14
    12dc:	1f 92       	push	r1
    12de:	7f 92       	push	r7
    12e0:	88 ed       	ldi	r24, 0xD8	; 216
    12e2:	94 e0       	ldi	r25, 0x04	; 4
    12e4:	9f 93       	push	r25
    12e6:	8f 93       	push	r24
    12e8:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
    12ec:	87 2d       	mov	r24, r7
    12ee:	0e 94 ca 13 	call	0x2794	; 0x2794 <listen>
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	68 2f       	mov	r22, r24
    1300:	88 0f       	add	r24, r24
    1302:	77 0b       	sbc	r23, r23
    1304:	88 0b       	sbc	r24, r24
    1306:	99 0b       	sbc	r25, r25
    1308:	2e c0       	rjmp	.+92     	; 0x1366 <loopback_tcps+0x256>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	4e 2d       	mov	r20, r14
    130e:	5f 2d       	mov	r21, r15
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	87 2d       	mov	r24, r7
    1314:	0e 94 c7 12 	call	0x258e	; 0x258e <socket>
    1318:	08 2e       	mov	r0, r24
    131a:	00 0c       	add	r0, r0
    131c:	99 0b       	sbc	r25, r25
    131e:	aa 0b       	sbc	r26, r26
    1320:	bb 0b       	sbc	r27, r27
    1322:	07 2d       	mov	r16, r7
    1324:	10 e0       	ldi	r17, 0x00	; 0
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	80 17       	cp	r24, r16
    132c:	91 07       	cpc	r25, r17
    132e:	a2 07       	cpc	r26, r18
    1330:	b3 07       	cpc	r27, r19
    1332:	b9 f4       	brne	.+46     	; 0x1362 <loopback_tcps+0x252>
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	14 c0       	rjmp	.+40     	; 0x1366 <loopback_tcps+0x256>
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <loopback_tcps+0x256>
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0a c0       	rjmp	.+20     	; 0x1366 <loopback_tcps+0x256>
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	05 c0       	rjmp	.+10     	; 0x1366 <loopback_tcps+0x256>
    135c:	c7 01       	movw	r24, r14
    135e:	b6 01       	movw	r22, r12
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <loopback_tcps+0x256>
    1362:	bc 01       	movw	r22, r24
    1364:	cd 01       	movw	r24, r26
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	bf 90       	pop	r11
    1380:	af 90       	pop	r10
    1382:	9f 90       	pop	r9
    1384:	8f 90       	pop	r8
    1386:	7f 90       	pop	r7
    1388:	08 95       	ret

0000138a <loopback_udps>:


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
    138a:	4f 92       	push	r4
    138c:	5f 92       	push	r5
    138e:	6f 92       	push	r6
    1390:	7f 92       	push	r7
    1392:	9f 92       	push	r9
    1394:	af 92       	push	r10
    1396:	bf 92       	push	r11
    1398:	cf 92       	push	r12
    139a:	df 92       	push	r13
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <loopback_udps+0x20>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <loopback_udps+0x22>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	98 2e       	mov	r9, r24
    13b2:	5b 01       	movw	r10, r22
    13b4:	14 2f       	mov	r17, r20
    13b6:	05 2f       	mov	r16, r21
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
    13b8:	80 e2       	ldi	r24, 0x20	; 32
    13ba:	98 9e       	mul	r9, r24
    13bc:	b0 01       	movw	r22, r0
    13be:	11 24       	eor	r1, r1
    13c0:	68 5f       	subi	r22, 0xF8	; 248
    13c2:	7c 4f       	sbci	r23, 0xFC	; 252
    13c4:	07 2e       	mov	r0, r23
    13c6:	00 0c       	add	r0, r0
    13c8:	88 0b       	sbc	r24, r24
    13ca:	99 0b       	sbc	r25, r25
    13cc:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
    13d0:	88 23       	and	r24, r24
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <loopback_udps+0x4c>
    13d4:	6e c0       	rjmp	.+220    	; 0x14b2 <loopback_udps+0x128>
    13d6:	82 32       	cpi	r24, 0x22	; 34
    13d8:	09 f0       	breq	.+2      	; 0x13dc <loopback_udps+0x52>
    13da:	95 c0       	rjmp	.+298    	; 0x1506 <loopback_udps+0x17c>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
    13dc:	89 2d       	mov	r24, r9
    13de:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <getSn_RX_RSR>
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <loopback_udps+0x5e>
    13e6:	94 c0       	rjmp	.+296    	; 0x1510 <loopback_udps+0x186>
         {
            if(size > LOOPBACK_DATA_BUF_SIZE) size = LOOPBACK_DATA_BUF_SIZE;
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
    13e8:	ac 01       	movw	r20, r24
    13ea:	41 30       	cpi	r20, 0x01	; 1
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	59 07       	cpc	r21, r25
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <loopback_udps+0x6c>
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	52 e0       	ldi	r21, 0x02	; 2
    13f6:	8e 01       	movw	r16, r28
    13f8:	0b 5f       	subi	r16, 0xFB	; 251
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	9e 01       	movw	r18, r28
    13fe:	2f 5f       	subi	r18, 0xFF	; 255
    1400:	3f 4f       	sbci	r19, 0xFF	; 255
    1402:	b5 01       	movw	r22, r10
    1404:	89 2d       	mov	r24, r9
    1406:	0e 94 b1 18 	call	0x3162	; 0x3162 <recvfrom>
    140a:	6b 01       	movw	r12, r22
    140c:	7c 01       	movw	r14, r24
            if(ret <= 0)
    140e:	16 16       	cp	r1, r22
    1410:	17 06       	cpc	r1, r23
    1412:	18 06       	cpc	r1, r24
    1414:	19 06       	cpc	r1, r25
    1416:	b4 f0       	brlt	.+44     	; 0x1444 <loopback_udps+0xba>
            {
#ifdef _LOOPBACK_DEBUG_
            	PRINTF("%d: recvfrom error. %ld\r\n",sn,ret);
    1418:	ff 92       	push	r15
    141a:	ef 92       	push	r14
    141c:	df 92       	push	r13
    141e:	6f 93       	push	r22
    1420:	1f 92       	push	r1
    1422:	9f 92       	push	r9
    1424:	8e eb       	ldi	r24, 0xBE	; 190
    1426:	94 e0       	ldi	r25, 0x04	; 4
    1428:	9f 93       	push	r25
    142a:	8f 93       	push	r24
    142c:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
#endif
               return ret;
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	3c 2d       	mov	r19, r12
    143c:	2d 2d       	mov	r18, r13
    143e:	8e 2d       	mov	r24, r14
    1440:	9f 2d       	mov	r25, r15
    1442:	74 c0       	rjmp	.+232    	; 0x152c <loopback_udps+0x1a2>
            }
            size = (uint16_t) ret;
            sentsize = 0;
            while(sentsize != size)
    1444:	67 2b       	or	r22, r23
    1446:	09 f4       	brne	.+2      	; 0x144a <loopback_udps+0xc0>
    1448:	68 c0       	rjmp	.+208    	; 0x151a <loopback_udps+0x190>
    144a:	e1 2c       	mov	r14, r1
    144c:	f1 2c       	mov	r15, r1
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
    144e:	0d 81       	ldd	r16, Y+5	; 0x05
    1450:	1e 81       	ldd	r17, Y+6	; 0x06
    1452:	9e 01       	movw	r18, r28
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	a6 01       	movw	r20, r12
    145a:	4e 19       	sub	r20, r14
    145c:	5f 09       	sbc	r21, r15
    145e:	b5 01       	movw	r22, r10
    1460:	6e 0d       	add	r22, r14
    1462:	7f 1d       	adc	r23, r15
    1464:	89 2d       	mov	r24, r9
    1466:	0e 94 88 17 	call	0x2f10	; 0x2f10 <sendto>
    146a:	2b 01       	movw	r4, r22
    146c:	3c 01       	movw	r6, r24
               if(ret < 0)
    146e:	99 23       	and	r25, r25
    1470:	b4 f4       	brge	.+44     	; 0x149e <loopback_udps+0x114>
               {
#ifdef _LOOPBACK_DEBUG_
            	   PRINTF("%d: sendto error. %ld\r\n",sn,ret);
    1472:	7f 92       	push	r7
    1474:	6f 92       	push	r6
    1476:	5f 92       	push	r5
    1478:	6f 93       	push	r22
    147a:	1f 92       	push	r1
    147c:	9f 92       	push	r9
    147e:	86 ea       	ldi	r24, 0xA6	; 166
    1480:	94 e0       	ldi	r25, 0x04	; 4
    1482:	9f 93       	push	r25
    1484:	8f 93       	push	r24
    1486:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
#endif
                  return ret;
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
            }
            size = (uint16_t) ret;
            sentsize = 0;
            while(sentsize != size)
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
    1494:	34 2d       	mov	r19, r4
    1496:	25 2d       	mov	r18, r5
    1498:	86 2d       	mov	r24, r6
    149a:	97 2d       	mov	r25, r7
               if(ret < 0)
               {
#ifdef _LOOPBACK_DEBUG_
            	   PRINTF("%d: sendto error. %ld\r\n",sn,ret);
#endif
                  return ret;
    149c:	47 c0       	rjmp	.+142    	; 0x152c <loopback_udps+0x1a2>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
    149e:	e6 0e       	add	r14, r22
    14a0:	f7 1e       	adc	r15, r23
#endif
               return ret;
            }
            size = (uint16_t) ret;
            sentsize = 0;
            while(sentsize != size)
    14a2:	ce 14       	cp	r12, r14
    14a4:	df 04       	cpc	r13, r15
    14a6:	99 f6       	brne	.-90     	; 0x144e <loopback_udps+0xc4>
#endif
         break;
      default :
         break;
   }
   return 1;
    14a8:	31 e0       	ldi	r19, 0x01	; 1
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	3d c0       	rjmp	.+122    	; 0x152c <loopback_udps+0x1a2>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	41 2f       	mov	r20, r17
    14b6:	50 2f       	mov	r21, r16
    14b8:	62 e0       	ldi	r22, 0x02	; 2
    14ba:	89 2d       	mov	r24, r9
    14bc:	0e 94 c7 12 	call	0x258e	; 0x258e <socket>
    14c0:	48 2f       	mov	r20, r24
    14c2:	88 0f       	add	r24, r24
    14c4:	55 0b       	sbc	r21, r21
    14c6:	66 0b       	sbc	r22, r22
    14c8:	77 0b       	sbc	r23, r23
    14ca:	89 2d       	mov	r24, r9
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a0 e0       	ldi	r26, 0x00	; 0
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	48 17       	cp	r20, r24
    14d4:	59 07       	cpc	r21, r25
    14d6:	6a 07       	cpc	r22, r26
    14d8:	7b 07       	cpc	r23, r27
    14da:	21 f5       	brne	.+72     	; 0x1524 <loopback_udps+0x19a>
            return ret;
#ifdef _LOOPBACK_DEBUG_
         PRINTF("%d:Opened, UDP loopback, port [%u]\r\n", sn, port);
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	1f 92       	push	r1
    14e2:	9f 92       	push	r9
    14e4:	81 e8       	ldi	r24, 0x81	; 129
    14e6:	94 e0       	ldi	r25, 0x04	; 4
    14e8:	9f 93       	push	r25
    14ea:	8f 93       	push	r24
    14ec:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <printf_P>
#endif
         break;
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
      default :
         break;
   }
   return 1;
    14fc:	31 e0       	ldi	r19, 0x01	; 1
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
            return ret;
#ifdef _LOOPBACK_DEBUG_
         PRINTF("%d:Opened, UDP loopback, port [%u]\r\n", sn, port);
#endif
         break;
    1504:	13 c0       	rjmp	.+38     	; 0x152c <loopback_udps+0x1a2>
      default :
         break;
   }
   return 1;
    1506:	31 e0       	ldi	r19, 0x01	; 1
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e c0       	rjmp	.+28     	; 0x152c <loopback_udps+0x1a2>
    1510:	31 e0       	ldi	r19, 0x01	; 1
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	09 c0       	rjmp	.+18     	; 0x152c <loopback_udps+0x1a2>
    151a:	31 e0       	ldi	r19, 0x01	; 1
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	04 c0       	rjmp	.+8      	; 0x152c <loopback_udps+0x1a2>
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
            return ret;
    1524:	34 2f       	mov	r19, r20
    1526:	25 2f       	mov	r18, r21
    1528:	86 2f       	mov	r24, r22
    152a:	97 2f       	mov	r25, r23
         break;
      default :
         break;
   }
   return 1;
}
    152c:	63 2f       	mov	r22, r19
    152e:	72 2f       	mov	r23, r18
    1530:	26 96       	adiw	r28, 0x06	; 6
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	bf 90       	pop	r11
    154e:	af 90       	pop	r10
    1550:	9f 90       	pop	r9
    1552:	7f 90       	pop	r7
    1554:	6f 90       	pop	r6
    1556:	5f 90       	pop	r5
    1558:	4f 90       	pop	r4
    155a:	08 95       	ret

0000155c <default_ip_assign>:
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
   setSIPR(DHCP_allocated_ip);
    155c:	24 e0       	ldi	r18, 0x04	; 4
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4d ec       	ldi	r20, 0xCD	; 205
    1562:	54 e0       	ldi	r21, 0x04	; 4
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	7f e0       	ldi	r23, 0x0F	; 15
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 00 1c 	call	0x3800	; 0x3800 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
    1570:	24 e0       	ldi	r18, 0x04	; 4
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	45 ec       	ldi	r20, 0xC5	; 197
    1576:	54 e0       	ldi	r21, 0x04	; 4
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	75 e0       	ldi	r23, 0x05	; 5
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 00 1c 	call	0x3800	; 0x3800 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
    1584:	24 e0       	ldi	r18, 0x04	; 4
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	49 ec       	ldi	r20, 0xC9	; 201
    158a:	54 e0       	ldi	r21, 0x04	; 4
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	71 e0       	ldi	r23, 0x01	; 1
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <WIZCHIP_WRITE_BUF>
    1598:	08 95       	ret

0000159a <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
	/* WIZchip Software Reset */
   setMR(MR_RST);
    159a:	40 e8       	ldi	r20, 0x80	; 128
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	cb 01       	movw	r24, r22
    15a2:	0e 94 06 1b 	call	0x360c	; 0x360c <WIZCHIP_WRITE>
   getMR(); // for delay
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	cb 01       	movw	r24, r22
    15ac:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
   default_ip_assign();
    15b0:	d5 df       	rcall	.-86     	; 0x155c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
    15b2:	26 e0       	ldi	r18, 0x06	; 6
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	44 e4       	ldi	r20, 0x44	; 68
    15b8:	54 e2       	ldi	r21, 0x24	; 36
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	79 e0       	ldi	r23, 0x09	; 9
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <WIZCHIP_WRITE_BUF>
    15c6:	08 95       	ret

000015c8 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
	// WIZchip Software Reset
	setMR(MR_RST);
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	cb 01       	movw	r24, r22
    15d0:	0e 94 06 1b 	call	0x360c	; 0x360c <WIZCHIP_WRITE>
	getMR(); // for delay
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	cb 01       	movw	r24, r22
    15da:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
    15de:	26 e0       	ldi	r18, 0x06	; 6
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	44 e4       	ldi	r20, 0x44	; 68
    15e4:	54 e2       	ldi	r21, 0x24	; 36
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	79 e0       	ldi	r23, 0x09	; 9
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <WIZCHIP_WRITE_BUF>
    15f2:	08 95       	ret

000015f4 <reg_dhcp_cbfunc>:
}

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
   dhcp_ip_assign   = default_ip_assign;
    15f4:	2e ea       	ldi	r18, 0xAE	; 174
    15f6:	3a e0       	ldi	r19, 0x0A	; 10
    15f8:	30 93 32 02 	sts	0x0232, r19	; 0x800232 <dhcp_ip_assign+0x1>
    15fc:	20 93 31 02 	sts	0x0231, r18	; 0x800231 <dhcp_ip_assign>
   dhcp_ip_update   = default_ip_update;
    1600:	2d ec       	ldi	r18, 0xCD	; 205
    1602:	3a e0       	ldi	r19, 0x0A	; 10
    1604:	30 93 30 02 	sts	0x0230, r19	; 0x800230 <dhcp_ip_update+0x1>
    1608:	20 93 2f 02 	sts	0x022F, r18	; 0x80022f <dhcp_ip_update>
   dhcp_ip_conflict = default_ip_conflict;
    160c:	24 ee       	ldi	r18, 0xE4	; 228
    160e:	3a e0       	ldi	r19, 0x0A	; 10
    1610:	30 93 2e 02 	sts	0x022E, r19	; 0x80022e <dhcp_ip_conflict+0x1>
    1614:	20 93 2d 02 	sts	0x022D, r18	; 0x80022d <dhcp_ip_conflict>
   if(ip_assign)   dhcp_ip_assign = ip_assign;
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	21 f0       	breq	.+8      	; 0x1624 <reg_dhcp_cbfunc+0x30>
    161c:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <dhcp_ip_assign+0x1>
    1620:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <dhcp_ip_assign>
   if(ip_update)   dhcp_ip_update = ip_update;
    1624:	61 15       	cp	r22, r1
    1626:	71 05       	cpc	r23, r1
    1628:	21 f0       	breq	.+8      	; 0x1632 <reg_dhcp_cbfunc+0x3e>
    162a:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <dhcp_ip_update+0x1>
    162e:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <dhcp_ip_update>
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
    1632:	41 15       	cp	r20, r1
    1634:	51 05       	cpc	r21, r1
    1636:	21 f0       	breq	.+8      	; 0x1640 <reg_dhcp_cbfunc+0x4c>
    1638:	50 93 2e 02 	sts	0x022E, r21	; 0x80022e <dhcp_ip_conflict+0x1>
    163c:	40 93 2d 02 	sts	0x022D, r20	; 0x80022d <dhcp_ip_conflict>
    1640:	08 95       	ret

00001642 <makeDHCPMSG>:
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	00 d0       	rcall	.+0      	; 0x1648 <makeDHCPMSG+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <makeDHCPMSG+0x8>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
    164e:	26 e0       	ldi	r18, 0x06	; 6
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	ae 01       	movw	r20, r28
    1654:	4f 5f       	subi	r20, 0xFF	; 255
    1656:	5f 4f       	sbci	r21, 0xFF	; 255
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	79 e0       	ldi	r23, 0x09	; 9
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
    1664:	e0 91 52 24 	lds	r30, 0x2452	; 0x802452 <pDHCPMSG>
    1668:	f0 91 53 24 	lds	r31, 0x2453	; 0x802453 <pDHCPMSG+0x1>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	80 83       	st	Z, r24
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
    1670:	e0 91 52 24 	lds	r30, 0x2452	; 0x802452 <pDHCPMSG>
    1674:	f0 91 53 24 	lds	r31, 0x2453	; 0x802453 <pDHCPMSG+0x1>
    1678:	81 83       	std	Z+1, r24	; 0x01
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
    167a:	80 91 52 24 	lds	r24, 0x2452	; 0x802452 <pDHCPMSG>
    167e:	90 91 53 24 	lds	r25, 0x2453	; 0x802453 <pDHCPMSG+0x1>
    1682:	26 e0       	ldi	r18, 0x06	; 6
    1684:	dc 01       	movw	r26, r24
    1686:	12 96       	adiw	r26, 0x02	; 2
    1688:	2c 93       	st	X, r18
    168a:	12 97       	sbiw	r26, 0x02	; 2
	pDHCPMSG->hops    = DHCP_HOPS;
    168c:	13 96       	adiw	r26, 0x03	; 3
    168e:	1c 92       	st	X, r1
    1690:	13 97       	sbiw	r26, 0x03	; 3
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
    1692:	20 91 4a 24 	lds	r18, 0x244A	; 0x80244a <DHCP_XID>
    1696:	30 91 4b 24 	lds	r19, 0x244B	; 0x80244b <DHCP_XID+0x1>
    169a:	40 91 4c 24 	lds	r20, 0x244C	; 0x80244c <DHCP_XID+0x2>
    169e:	50 91 4d 24 	lds	r21, 0x244D	; 0x80244d <DHCP_XID+0x3>
    16a2:	14 96       	adiw	r26, 0x04	; 4
    16a4:	5c 93       	st	X, r21
    16a6:	14 97       	sbiw	r26, 0x04	; 4
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
    16a8:	15 96       	adiw	r26, 0x05	; 5
    16aa:	4c 93       	st	X, r20
    16ac:	15 97       	sbiw	r26, 0x05	; 5
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
    16ae:	16 96       	adiw	r26, 0x06	; 6
    16b0:	3c 93       	st	X, r19
    16b2:	16 97       	sbiw	r26, 0x06	; 6
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
    16b4:	17 96       	adiw	r26, 0x07	; 7
    16b6:	2c 93       	st	X, r18
    16b8:	17 97       	sbiw	r26, 0x07	; 7
	pDHCPMSG->secs    = DHCP_SECS;
    16ba:	19 96       	adiw	r26, 0x09	; 9
    16bc:	1c 92       	st	X, r1
    16be:	1e 92       	st	-X, r1
    16c0:	18 97       	sbiw	r26, 0x08	; 8
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
    16c2:	20 e8       	ldi	r18, 0x80	; 128
    16c4:	1a 96       	adiw	r26, 0x0a	; 10
    16c6:	2c 93       	st	X, r18
    16c8:	1a 97       	sbiw	r26, 0x0a	; 10
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
    16ca:	1b 96       	adiw	r26, 0x0b	; 11
    16cc:	1c 92       	st	X, r1
    16ce:	1b 97       	sbiw	r26, 0x0b	; 11

	pDHCPMSG->ciaddr[0] = 0;
    16d0:	1c 96       	adiw	r26, 0x0c	; 12
    16d2:	1c 92       	st	X, r1
    16d4:	1c 97       	sbiw	r26, 0x0c	; 12
	pDHCPMSG->ciaddr[1] = 0;
    16d6:	1d 96       	adiw	r26, 0x0d	; 13
    16d8:	1c 92       	st	X, r1
    16da:	1d 97       	sbiw	r26, 0x0d	; 13
	pDHCPMSG->ciaddr[2] = 0;
    16dc:	1e 96       	adiw	r26, 0x0e	; 14
    16de:	1c 92       	st	X, r1
    16e0:	1e 97       	sbiw	r26, 0x0e	; 14
	pDHCPMSG->ciaddr[3] = 0;
    16e2:	1f 96       	adiw	r26, 0x0f	; 15
    16e4:	1c 92       	st	X, r1
    16e6:	1f 97       	sbiw	r26, 0x0f	; 15

	pDHCPMSG->yiaddr[0] = 0;
    16e8:	50 96       	adiw	r26, 0x10	; 16
    16ea:	1c 92       	st	X, r1
    16ec:	50 97       	sbiw	r26, 0x10	; 16
	pDHCPMSG->yiaddr[1] = 0;
    16ee:	51 96       	adiw	r26, 0x11	; 17
    16f0:	1c 92       	st	X, r1
    16f2:	51 97       	sbiw	r26, 0x11	; 17
	pDHCPMSG->yiaddr[2] = 0;
    16f4:	52 96       	adiw	r26, 0x12	; 18
    16f6:	1c 92       	st	X, r1
    16f8:	52 97       	sbiw	r26, 0x12	; 18
	pDHCPMSG->yiaddr[3] = 0;
    16fa:	53 96       	adiw	r26, 0x13	; 19
    16fc:	1c 92       	st	X, r1
    16fe:	53 97       	sbiw	r26, 0x13	; 19

	pDHCPMSG->siaddr[0] = 0;
    1700:	54 96       	adiw	r26, 0x14	; 20
    1702:	1c 92       	st	X, r1
    1704:	54 97       	sbiw	r26, 0x14	; 20
	pDHCPMSG->siaddr[1] = 0;
    1706:	55 96       	adiw	r26, 0x15	; 21
    1708:	1c 92       	st	X, r1
    170a:	55 97       	sbiw	r26, 0x15	; 21
	pDHCPMSG->siaddr[2] = 0;
    170c:	56 96       	adiw	r26, 0x16	; 22
    170e:	1c 92       	st	X, r1
    1710:	56 97       	sbiw	r26, 0x16	; 22
	pDHCPMSG->siaddr[3] = 0;
    1712:	57 96       	adiw	r26, 0x17	; 23
    1714:	1c 92       	st	X, r1
    1716:	57 97       	sbiw	r26, 0x17	; 23

	pDHCPMSG->giaddr[0] = 0;
    1718:	58 96       	adiw	r26, 0x18	; 24
    171a:	1c 92       	st	X, r1
    171c:	58 97       	sbiw	r26, 0x18	; 24
	pDHCPMSG->giaddr[1] = 0;
    171e:	59 96       	adiw	r26, 0x19	; 25
    1720:	1c 92       	st	X, r1
    1722:	59 97       	sbiw	r26, 0x19	; 25
	pDHCPMSG->giaddr[2] = 0;
    1724:	5a 96       	adiw	r26, 0x1a	; 26
    1726:	1c 92       	st	X, r1
    1728:	5a 97       	sbiw	r26, 0x1a	; 26
	pDHCPMSG->giaddr[3] = 0;
    172a:	5b 96       	adiw	r26, 0x1b	; 27
    172c:	1c 92       	st	X, r1
    172e:	5b 97       	sbiw	r26, 0x1b	; 27

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
    1730:	e4 e4       	ldi	r30, 0x44	; 68
    1732:	f4 e2       	ldi	r31, 0x24	; 36
    1734:	20 81       	ld	r18, Z
    1736:	5c 96       	adiw	r26, 0x1c	; 28
    1738:	2c 93       	st	X, r18
    173a:	5c 97       	sbiw	r26, 0x1c	; 28
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
    173c:	21 81       	ldd	r18, Z+1	; 0x01
    173e:	5d 96       	adiw	r26, 0x1d	; 29
    1740:	2c 93       	st	X, r18
    1742:	5d 97       	sbiw	r26, 0x1d	; 29
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
    1744:	22 81       	ldd	r18, Z+2	; 0x02
    1746:	5e 96       	adiw	r26, 0x1e	; 30
    1748:	2c 93       	st	X, r18
    174a:	5e 97       	sbiw	r26, 0x1e	; 30
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
    174c:	23 81       	ldd	r18, Z+3	; 0x03
    174e:	5f 96       	adiw	r26, 0x1f	; 31
    1750:	2c 93       	st	X, r18
    1752:	5f 97       	sbiw	r26, 0x1f	; 31
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
    1754:	24 81       	ldd	r18, Z+4	; 0x04
    1756:	90 96       	adiw	r26, 0x20	; 32
    1758:	2c 93       	st	X, r18
    175a:	90 97       	sbiw	r26, 0x20	; 32
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
    175c:	25 81       	ldd	r18, Z+5	; 0x05
    175e:	91 96       	adiw	r26, 0x21	; 33
    1760:	2c 93       	st	X, r18
    1762:	91 97       	sbiw	r26, 0x21	; 33
    1764:	92 96       	adiw	r26, 0x22	; 34
    1766:	fc 01       	movw	r30, r24
    1768:	bc 96       	adiw	r30, 0x2c	; 44

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
    176a:	1d 92       	st	X+, r1
    176c:	ea 17       	cp	r30, r26
    176e:	fb 07       	cpc	r31, r27
    1770:	e1 f7       	brne	.-8      	; 0x176a <makeDHCPMSG+0x128>
    1772:	dc 01       	movw	r26, r24
    1774:	a4 59       	subi	r26, 0x94	; 148
    1776:	bf 4f       	sbci	r27, 0xFF	; 255
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
    1778:	11 92       	st	Z+, r1
    177a:	ae 17       	cp	r26, r30
    177c:	bf 07       	cpc	r27, r31
    177e:	e1 f7       	brne	.-8      	; 0x1778 <makeDHCPMSG+0x136>
    1780:	9c 01       	movw	r18, r24
    1782:	24 51       	subi	r18, 0x14	; 20
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
    1786:	1d 92       	st	X+, r1
    1788:	2a 17       	cp	r18, r26
    178a:	3b 07       	cpc	r19, r27
    178c:	e1 f7       	brne	.-8      	; 0x1786 <makeDHCPMSG+0x144>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
    178e:	fc 01       	movw	r30, r24
    1790:	e4 51       	subi	r30, 0x14	; 20
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	23 e6       	ldi	r18, 0x63	; 99
    1796:	20 83       	st	Z, r18
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
    1798:	31 96       	adiw	r30, 0x01	; 1
    179a:	32 e8       	ldi	r19, 0x82	; 130
    179c:	30 83       	st	Z, r19
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
    179e:	31 96       	adiw	r30, 0x01	; 1
    17a0:	33 e5       	ldi	r19, 0x53	; 83
    17a2:	30 83       	st	Z, r19
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
    17a4:	31 96       	adiw	r30, 0x01	; 1
    17a6:	20 83       	st	Z, r18
}
    17a8:	26 96       	adiw	r28, 0x06	; 6
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	08 95       	ret

000017ba <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
    17ba:	af 92       	push	r10
    17bc:	bf 92       	push	r11
    17be:	df 92       	push	r13
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <send_DHCP_DISCOVER+0x14>
    17ce:	1f 92       	push	r1
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
   
   makeDHCPMSG();
    17d4:	36 df       	rcall	.-404    	; 0x1642 <makeDHCPMSG>

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
    17d6:	60 91 52 24 	lds	r22, 0x2452	; 0x802452 <pDHCPMSG>
    17da:	70 91 53 24 	lds	r23, 0x2453	; 0x802453 <pDHCPMSG+0x1>
    17de:	fb 01       	movw	r30, r22
    17e0:	e0 51       	subi	r30, 0x10	; 16
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	85 e3       	ldi	r24, 0x35	; 53
    17e6:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = 0x01;
    17e8:	31 96       	adiw	r30, 0x01	; 1
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
    17ee:	31 96       	adiw	r30, 0x01	; 1
    17f0:	80 83       	st	Z, r24
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
    17f2:	31 96       	adiw	r30, 0x01	; 1
    17f4:	9d e3       	ldi	r25, 0x3D	; 61
    17f6:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x07;
    17f8:	31 96       	adiw	r30, 0x01	; 1
    17fa:	97 e0       	ldi	r25, 0x07	; 7
    17fc:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x01;
    17fe:	31 96       	adiw	r30, 0x01	; 1
    1800:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
    1802:	db 01       	movw	r26, r22
    1804:	aa 50       	subi	r26, 0x0A	; 10
    1806:	bf 4f       	sbci	r27, 0xFF	; 255
    1808:	e4 e4       	ldi	r30, 0x44	; 68
    180a:	f4 e2       	ldi	r31, 0x24	; 36
    180c:	80 81       	ld	r24, Z
    180e:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
    1810:	11 96       	adiw	r26, 0x01	; 1
    1812:	81 81       	ldd	r24, Z+1	; 0x01
    1814:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
    1816:	11 96       	adiw	r26, 0x01	; 1
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
    181c:	d3 80       	ldd	r13, Z+3	; 0x03
    181e:	11 96       	adiw	r26, 0x01	; 1
    1820:	dc 92       	st	X, r13
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
    1822:	e4 80       	ldd	r14, Z+4	; 0x04
    1824:	11 96       	adiw	r26, 0x01	; 1
    1826:	ec 92       	st	X, r14
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    1828:	f5 80       	ldd	r15, Z+5	; 0x05
    182a:	fb 01       	movw	r30, r22
    182c:	e5 50       	subi	r30, 0x05	; 5
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	f0 82       	st	Z, r15
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
    1832:	31 96       	adiw	r30, 0x01	; 1
    1834:	8c e0       	ldi	r24, 0x0C	; 12
    1836:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
    1838:	31 96       	adiw	r30, 0x01	; 1
    183a:	10 82       	st	Z, r1
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    183c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <HOST_NAME>
    1840:	88 23       	and	r24, r24
    1842:	b1 f0       	breq	.+44     	; 0x1870 <send_DHCP_DISCOVER+0xb6>
    1844:	ab 01       	movw	r20, r22
    1846:	42 50       	subi	r20, 0x02	; 2
    1848:	5f 4f       	sbci	r21, 0xFF	; 255
    184a:	a4 e3       	ldi	r26, 0x34	; 52
    184c:	b2 e0       	ldi	r27, 0x02	; 2
    184e:	22 e1       	ldi	r18, 0x12	; 18
    1850:	30 e0       	ldi	r19, 0x00	; 0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    1852:	59 01       	movw	r10, r18
    1854:	9f ef       	ldi	r25, 0xFF	; 255
    1856:	a9 1a       	sub	r10, r25
    1858:	b9 0a       	sbc	r11, r25
    185a:	fa 01       	movw	r30, r20
    185c:	81 93       	st	Z+, r24
    185e:	af 01       	movw	r20, r30
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    1860:	89 01       	movw	r16, r18
    1862:	01 51       	subi	r16, 0x11	; 17
    1864:	11 09       	sbc	r17, r1
    1866:	8d 91       	ld	r24, X+
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    1868:	95 01       	movw	r18, r10
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    186a:	81 11       	cpse	r24, r1
    186c:	f2 cf       	rjmp	.-28     	; 0x1852 <send_DHCP_DISCOVER+0x98>
    186e:	07 c0       	rjmp	.+14     	; 0x187e <send_DHCP_DISCOVER+0xc4>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
    1870:	0f 2e       	mov	r0, r31
    1872:	f2 e1       	ldi	r31, 0x12	; 18
    1874:	af 2e       	mov	r10, r31
    1876:	b1 2c       	mov	r11, r1
    1878:	f0 2d       	mov	r31, r0
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    187a:	00 e0       	ldi	r16, 0x00	; 0
    187c:	10 e0       	ldi	r17, 0x00	; 0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
    187e:	cb 01       	movw	r24, r22
    1880:	8a 0d       	add	r24, r10
    1882:	9b 1d       	adc	r25, r11
    1884:	dc 01       	movw	r26, r24
    1886:	a4 51       	subi	r26, 0x14	; 20
    1888:	bf 4f       	sbci	r27, 0xFF	; 255
    188a:	dc 92       	st	X, r13
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
    188c:	11 96       	adiw	r26, 0x01	; 1
    188e:	ec 92       	st	X, r14
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    1890:	11 96       	adiw	r26, 0x01	; 1
    1892:	fc 92       	st	X, r15
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
    1894:	95 01       	movw	r18, r10
    1896:	2d 5f       	subi	r18, 0xFD	; 253
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	d9 01       	movw	r26, r18
    189c:	a0 1b       	sub	r26, r16
    189e:	b1 0b       	sbc	r27, r17
    18a0:	a6 0f       	add	r26, r22
    18a2:	b7 1f       	adc	r27, r23
    18a4:	a8 51       	subi	r26, 0x18	; 24
    18a6:	bf 4f       	sbci	r27, 0xFF	; 255
    18a8:	0d 5f       	subi	r16, 0xFD	; 253
    18aa:	0c 93       	st	X, r16

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
    18ac:	26 0f       	add	r18, r22
    18ae:	37 1f       	adc	r19, r23
    18b0:	d9 01       	movw	r26, r18
    18b2:	a4 51       	subi	r26, 0x14	; 20
    18b4:	bf 4f       	sbci	r27, 0xFF	; 255
    18b6:	27 e3       	ldi	r18, 0x37	; 55
    18b8:	2c 93       	st	X, r18
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
    18ba:	dc 01       	movw	r26, r24
    18bc:	a0 51       	subi	r26, 0x10	; 16
    18be:	bf 4f       	sbci	r27, 0xFF	; 255
    18c0:	26 e0       	ldi	r18, 0x06	; 6
    18c2:	2c 93       	st	X, r18
	pDHCPMSG->OPT[k++] = subnetMask;
    18c4:	11 96       	adiw	r26, 0x01	; 1
    18c6:	31 e0       	ldi	r19, 0x01	; 1
    18c8:	3c 93       	st	X, r19
	pDHCPMSG->OPT[k++] = routersOnSubnet;
    18ca:	11 96       	adiw	r26, 0x01	; 1
    18cc:	33 e0       	ldi	r19, 0x03	; 3
    18ce:	3c 93       	st	X, r19
	pDHCPMSG->OPT[k++] = dns;
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	2c 93       	st	X, r18
	pDHCPMSG->OPT[k++] = domainName;
    18d4:	11 96       	adiw	r26, 0x01	; 1
    18d6:	2f e0       	ldi	r18, 0x0F	; 15
    18d8:	2c 93       	st	X, r18
	pDHCPMSG->OPT[k++] = dhcpT1value;
    18da:	11 96       	adiw	r26, 0x01	; 1
    18dc:	2a e3       	ldi	r18, 0x3A	; 58
    18de:	2c 93       	st	X, r18
	pDHCPMSG->OPT[k++] = dhcpT2value;
    18e0:	11 96       	adiw	r26, 0x01	; 1
    18e2:	2b e3       	ldi	r18, 0x3B	; 59
    18e4:	2c 93       	st	X, r18
	pDHCPMSG->OPT[k++] = endOption;
    18e6:	11 96       	adiw	r26, 0x01	; 1
    18e8:	2f ef       	ldi	r18, 0xFF	; 255
    18ea:	2c 93       	st	X, r18

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
    18ec:	c5 01       	movw	r24, r10
    18ee:	0c 96       	adiw	r24, 0x0c	; 12
    18f0:	88 33       	cpi	r24, 0x38	; 56
    18f2:	91 40       	sbci	r25, 0x01	; 1
    18f4:	60 f4       	brcc	.+24     	; 0x190e <send_DHCP_DISCOVER+0x154>
    18f6:	f5 01       	movw	r30, r10
    18f8:	e8 50       	subi	r30, 0x08	; 8
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	e6 0f       	add	r30, r22
    18fe:	f7 1f       	adc	r31, r23
    1900:	cb 01       	movw	r24, r22
    1902:	8c 5d       	subi	r24, 0xDC	; 220
    1904:	9d 4f       	sbci	r25, 0xFD	; 253
    1906:	11 92       	st	Z+, r1
    1908:	e8 17       	cp	r30, r24
    190a:	f9 07       	cpc	r31, r25
    190c:	e1 f7       	brne	.-8      	; 0x1906 <send_DHCP_DISCOVER+0x14c>

	// send broadcasting packet
	ip[0] = 255;
    190e:	8f ef       	ldi	r24, 0xFF	; 255
    1910:	89 83       	std	Y+1, r24	; 0x01
	ip[1] = 255;
    1912:	8a 83       	std	Y+2, r24	; 0x02
	ip[2] = 255;
    1914:	8b 83       	std	Y+3, r24	; 0x03
	ip[3] = 255;
    1916:	8c 83       	std	Y+4, r24	; 0x04

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
    1918:	03 e4       	ldi	r16, 0x43	; 67
    191a:	10 e0       	ldi	r17, 0x00	; 0
    191c:	9e 01       	movw	r18, r28
    191e:	2f 5f       	subi	r18, 0xFF	; 255
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	44 e2       	ldi	r20, 0x24	; 36
    1924:	52 e0       	ldi	r21, 0x02	; 2
    1926:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <DHCP_SOCKET>
    192a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <sendto>
}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
    1942:	df 90       	pop	r13
    1944:	bf 90       	pop	r11
    1946:	af 90       	pop	r10
    1948:	08 95       	ret

0000194a <send_DHCP_DECLINE>:

}

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	00 d0       	rcall	.+0      	; 0x1954 <send_DHCP_DECLINE+0xa>
    1954:	1f 92       	push	r1
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
	
	makeDHCPMSG();
    195a:	73 de       	rcall	.-794    	; 0x1642 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
    195c:	60 91 52 24 	lds	r22, 0x2452	; 0x802452 <pDHCPMSG>
    1960:	70 91 53 24 	lds	r23, 0x2453	; 0x802453 <pDHCPMSG+0x1>
    1964:	fb 01       	movw	r30, r22
    1966:	12 86       	std	Z+10, r1	; 0x0a
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
    1968:	13 86       	std	Z+11, r1	; 0x0b

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
    196a:	e0 51       	subi	r30, 0x10	; 16
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	85 e3       	ldi	r24, 0x35	; 53
    1970:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = 0x01;
    1972:	31 96       	adiw	r30, 0x01	; 1
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
    1978:	31 96       	adiw	r30, 0x01	; 1
    197a:	84 e0       	ldi	r24, 0x04	; 4
    197c:	80 83       	st	Z, r24

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
    197e:	31 96       	adiw	r30, 0x01	; 1
    1980:	2d e3       	ldi	r18, 0x3D	; 61
    1982:	20 83       	st	Z, r18
	pDHCPMSG->OPT[k++] = 0x07;
    1984:	31 96       	adiw	r30, 0x01	; 1
    1986:	27 e0       	ldi	r18, 0x07	; 7
    1988:	20 83       	st	Z, r18
	pDHCPMSG->OPT[k++] = 0x01;
    198a:	31 96       	adiw	r30, 0x01	; 1
    198c:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
    198e:	db 01       	movw	r26, r22
    1990:	aa 50       	subi	r26, 0x0A	; 10
    1992:	bf 4f       	sbci	r27, 0xFF	; 255
    1994:	e4 e4       	ldi	r30, 0x44	; 68
    1996:	f4 e2       	ldi	r31, 0x24	; 36
    1998:	90 81       	ld	r25, Z
    199a:	9c 93       	st	X, r25
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
    199c:	11 96       	adiw	r26, 0x01	; 1
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	9c 93       	st	X, r25
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
    19a2:	11 96       	adiw	r26, 0x01	; 1
    19a4:	92 81       	ldd	r25, Z+2	; 0x02
    19a6:	9c 93       	st	X, r25
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
    19a8:	11 96       	adiw	r26, 0x01	; 1
    19aa:	93 81       	ldd	r25, Z+3	; 0x03
    19ac:	9c 93       	st	X, r25
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
    19ae:	11 96       	adiw	r26, 0x01	; 1
    19b0:	94 81       	ldd	r25, Z+4	; 0x04
    19b2:	9c 93       	st	X, r25
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    19b4:	11 96       	adiw	r26, 0x01	; 1
    19b6:	95 81       	ldd	r25, Z+5	; 0x05
    19b8:	9c 93       	st	X, r25

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
    19ba:	fb 01       	movw	r30, r22
    19bc:	e4 50       	subi	r30, 0x04	; 4
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	92 e3       	ldi	r25, 0x32	; 50
    19c2:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x04;
    19c4:	31 96       	adiw	r30, 0x01	; 1
    19c6:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
    19c8:	13 96       	adiw	r26, 0x03	; 3
    19ca:	ed ec       	ldi	r30, 0xCD	; 205
    19cc:	f4 e0       	ldi	r31, 0x04	; 4
    19ce:	90 81       	ld	r25, Z
    19d0:	9c 93       	st	X, r25
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
    19d2:	11 96       	adiw	r26, 0x01	; 1
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	9c 93       	st	X, r25
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
    19d8:	11 96       	adiw	r26, 0x01	; 1
    19da:	92 81       	ldd	r25, Z+2	; 0x02
    19dc:	9c 93       	st	X, r25
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	9c 93       	st	X, r25

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
    19e4:	fb 01       	movw	r30, r22
    19e6:	ee 5f       	subi	r30, 0xFE	; 254
    19e8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ea:	96 e3       	ldi	r25, 0x36	; 54
    19ec:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x04;
    19ee:	31 96       	adiw	r30, 0x01	; 1
    19f0:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
    19f2:	13 96       	adiw	r26, 0x03	; 3
    19f4:	ee e4       	ldi	r30, 0x4E	; 78
    19f6:	f4 e2       	ldi	r31, 0x24	; 36
    19f8:	80 81       	ld	r24, Z
    19fa:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
    19fc:	11 96       	adiw	r26, 0x01	; 1
    19fe:	81 81       	ldd	r24, Z+1	; 0x01
    1a00:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
    1a02:	11 96       	adiw	r26, 0x01	; 1
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
    1a08:	11 96       	adiw	r26, 0x01	; 1
    1a0a:	83 81       	ldd	r24, Z+3	; 0x03
    1a0c:	8c 93       	st	X, r24

	pDHCPMSG->OPT[k++] = endOption;
    1a0e:	fb 01       	movw	r30, r22
    1a10:	e8 5f       	subi	r30, 0xF8	; 248
    1a12:	fe 4f       	sbci	r31, 0xFE	; 254
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	80 83       	st	Z, r24
    1a18:	31 96       	adiw	r30, 0x01	; 1
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8c 5d       	subi	r24, 0xDC	; 220
    1a1e:	9d 4f       	sbci	r25, 0xFD	; 253

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
    1a20:	11 92       	st	Z+, r1
    1a22:	e8 17       	cp	r30, r24
    1a24:	f9 07       	cpc	r31, r25
    1a26:	e1 f7       	brne	.-8      	; 0x1a20 <send_DHCP_DECLINE+0xd6>

	//send broadcasting packet
	ip[0] = 0xFF;
    1a28:	8f ef       	ldi	r24, 0xFF	; 255
    1a2a:	89 83       	std	Y+1, r24	; 0x01
	ip[1] = 0xFF;
    1a2c:	8a 83       	std	Y+2, r24	; 0x02
	ip[2] = 0xFF;
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
	ip[3] = 0xFF;
    1a30:	8c 83       	std	Y+4, r24	; 0x04

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
    1a32:	03 e4       	ldi	r16, 0x43	; 67
    1a34:	10 e0       	ldi	r17, 0x00	; 0
    1a36:	9e 01       	movw	r18, r28
    1a38:	2f 5f       	subi	r18, 0xFF	; 255
    1a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3c:	44 e2       	ldi	r20, 0x24	; 36
    1a3e:	52 e0       	ldi	r21, 0x02	; 2
    1a40:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <DHCP_SOCKET>
    1a44:	0e 94 88 17 	call	0x2f10	; 0x2f10 <sendto>
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	08 95       	ret

00001a5a <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	28 97       	sbiw	r28, 0x08	; 8
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
    1a7e:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <DHCP_SOCKET>
    1a82:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <getSn_RX_RSR>
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <parseDHCPMSG+0x32>
    1a8a:	ef c0       	rjmp	.+478    	; 0x1c6a <parseDHCPMSG+0x210>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
    1a8c:	60 91 52 24 	lds	r22, 0x2452	; 0x802452 <pDHCPMSG>
    1a90:	70 91 53 24 	lds	r23, 0x2453	; 0x802453 <pDHCPMSG+0x1>
    1a94:	8e 01       	movw	r16, r28
    1a96:	09 5f       	subi	r16, 0xF9	; 249
    1a98:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9a:	9e 01       	movw	r18, r28
    1a9c:	2f 5f       	subi	r18, 0xFF	; 255
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	ac 01       	movw	r20, r24
    1aa2:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <DHCP_SOCKET>
    1aa6:	0e 94 b1 18 	call	0x3162	; 0x3162 <recvfrom>
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
    1aaa:	2f 81       	ldd	r18, Y+7	; 0x07
    1aac:	38 85       	ldd	r19, Y+8	; 0x08
    1aae:	23 34       	cpi	r18, 0x43	; 67
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <parseDHCPMSG+0x5c>
    1ab4:	d8 c0       	rjmp	.+432    	; 0x1c66 <parseDHCPMSG+0x20c>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
    1ab6:	e0 91 52 24 	lds	r30, 0x2452	; 0x802452 <pDHCPMSG>
    1aba:	f0 91 53 24 	lds	r31, 0x2453	; 0x802453 <pDHCPMSG+0x1>
    1abe:	34 8d       	ldd	r19, Z+28	; 0x1c
    1ac0:	20 91 44 24 	lds	r18, 0x2444	; 0x802444 <DHCP_CHADDR>
    1ac4:	32 13       	cpse	r19, r18
    1ac6:	d3 c0       	rjmp	.+422    	; 0x1c6e <parseDHCPMSG+0x214>
    1ac8:	35 8d       	ldd	r19, Z+29	; 0x1d
    1aca:	20 91 45 24 	lds	r18, 0x2445	; 0x802445 <DHCP_CHADDR+0x1>
    1ace:	32 13       	cpse	r19, r18
    1ad0:	d0 c0       	rjmp	.+416    	; 0x1c72 <parseDHCPMSG+0x218>
    1ad2:	36 8d       	ldd	r19, Z+30	; 0x1e
    1ad4:	20 91 46 24 	lds	r18, 0x2446	; 0x802446 <DHCP_CHADDR+0x2>
    1ad8:	32 13       	cpse	r19, r18
    1ada:	cd c0       	rjmp	.+410    	; 0x1c76 <parseDHCPMSG+0x21c>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
    1adc:	37 8d       	ldd	r19, Z+31	; 0x1f
    1ade:	20 91 47 24 	lds	r18, 0x2447	; 0x802447 <DHCP_CHADDR+0x3>
    1ae2:	32 13       	cpse	r19, r18
    1ae4:	ca c0       	rjmp	.+404    	; 0x1c7a <parseDHCPMSG+0x220>
    1ae6:	30 a1       	ldd	r19, Z+32	; 0x20
    1ae8:	20 91 48 24 	lds	r18, 0x2448	; 0x802448 <DHCP_CHADDR+0x4>
    1aec:	32 13       	cpse	r19, r18
    1aee:	c7 c0       	rjmp	.+398    	; 0x1c7e <parseDHCPMSG+0x224>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
    1af0:	31 a1       	ldd	r19, Z+33	; 0x21
    1af2:	20 91 49 24 	lds	r18, 0x2449	; 0x802449 <DHCP_CHADDR+0x5>
    1af6:	32 13       	cpse	r19, r18
    1af8:	c4 c0       	rjmp	.+392    	; 0x1c82 <parseDHCPMSG+0x228>
         return 0;
		p = (uint8_t *)(&pDHCPMSG->op);
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
    1afa:	e0 51       	subi	r30, 0x10	; 16
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
		e = p + (len - 240);
    1afe:	ab 01       	movw	r20, r22
    1b00:	40 5f       	subi	r20, 0xF0	; 240
    1b02:	51 09       	sbc	r21, r1
    1b04:	4e 0f       	add	r20, r30
    1b06:	5f 1f       	adc	r21, r31
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
    1b08:	80 e0       	ldi	r24, 0x00	; 0
   				p = p + (opt_len - 4);
   				break;
   			case dns :
   				p++;                  
   				opt_len = *p++;       
   				DHCP_allocated_dns[0] = *p++;
    1b0a:	01 ec       	ldi	r16, 0xC1	; 193
    1b0c:	14 e0       	ldi	r17, 0x04	; 4
 				#endif
   				break;
   			case dhcpServerIdentifier :
   				p++;
   				opt_len = *p++;
   				DHCP_SIP[0] = *p++;
    1b0e:	6e e4       	ldi	r22, 0x4E	; 78
    1b10:	74 e2       	ldi	r23, 0x24	; 36
   				type = *p++;
   				break;
   			case subnetMask :
   				p++;
   				p++;
   				DHCP_allocated_sn[0] = *p++;
    1b12:	25 ec       	ldi	r18, 0xC5	; 197
    1b14:	34 e0       	ldi	r19, 0x04	; 4
   				DHCP_allocated_sn[3] = *p++;
   				break;
   			case routersOnSubnet :
   				p++;
   				opt_len = *p++;       
   				DHCP_allocated_gw[0] = *p++;
    1b16:	0f 2e       	mov	r0, r31
    1b18:	f9 ec       	ldi	r31, 0xC9	; 201
    1b1a:	af 2e       	mov	r10, r31
    1b1c:	f4 e0       	ldi	r31, 0x04	; 4
    1b1e:	bf 2e       	mov	r11, r31
    1b20:	f0 2d       	mov	r31, r0
         return 0;
		p = (uint8_t *)(&pDHCPMSG->op);
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
		e = p + (len - 240);

		while ( p < e ) {
    1b22:	9c c0       	rjmp	.+312    	; 0x1c5c <parseDHCPMSG+0x202>

			switch ( *p ) {
    1b24:	90 81       	ld	r25, Z
    1b26:	96 30       	cpi	r25, 0x06	; 6
    1b28:	e9 f1       	breq	.+122    	; 0x1ba4 <parseDHCPMSG+0x14a>
    1b2a:	30 f4       	brcc	.+12     	; 0x1b38 <parseDHCPMSG+0xde>
    1b2c:	91 30       	cpi	r25, 0x01	; 1
    1b2e:	b9 f0       	breq	.+46     	; 0x1b5e <parseDHCPMSG+0x104>
    1b30:	88 f0       	brcs	.+34     	; 0x1b54 <parseDHCPMSG+0xfa>
    1b32:	93 30       	cpi	r25, 0x03	; 3
    1b34:	21 f1       	breq	.+72     	; 0x1b7e <parseDHCPMSG+0x124>
    1b36:	8a c0       	rjmp	.+276    	; 0x1c4c <parseDHCPMSG+0x1f2>
    1b38:	95 33       	cpi	r25, 0x35	; 53
    1b3a:	71 f0       	breq	.+28     	; 0x1b58 <parseDHCPMSG+0xfe>
    1b3c:	20 f4       	brcc	.+8      	; 0x1b46 <parseDHCPMSG+0xec>
    1b3e:	93 33       	cpi	r25, 0x33	; 51
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <parseDHCPMSG+0xea>
    1b42:	43 c0       	rjmp	.+134    	; 0x1bca <parseDHCPMSG+0x170>
    1b44:	83 c0       	rjmp	.+262    	; 0x1c4c <parseDHCPMSG+0x1f2>
    1b46:	96 33       	cpi	r25, 0x36	; 54
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <parseDHCPMSG+0xf2>
    1b4a:	70 c0       	rjmp	.+224    	; 0x1c2c <parseDHCPMSG+0x1d2>
    1b4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <parseDHCPMSG+0xf8>
    1b50:	99 c0       	rjmp	.+306    	; 0x1c84 <parseDHCPMSG+0x22a>
    1b52:	7c c0       	rjmp	.+248    	; 0x1c4c <parseDHCPMSG+0x1f2>

   			case endOption :
   			   p = e;   // for break while(p < e)
   				break;
            case padOption :
   				p++;
    1b54:	31 96       	adiw	r30, 0x01	; 1
   				break;
    1b56:	82 c0       	rjmp	.+260    	; 0x1c5c <parseDHCPMSG+0x202>
   			case dhcpMessageType :
   				p++;
   				p++;
   				type = *p++;
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	33 96       	adiw	r30, 0x03	; 3
   				break;
    1b5c:	7f c0       	rjmp	.+254    	; 0x1c5c <parseDHCPMSG+0x202>
   			case subnetMask :
   				p++;
   				p++;
   				DHCP_allocated_sn[0] = *p++;
    1b5e:	92 81       	ldd	r25, Z+2	; 0x02
    1b60:	d9 01       	movw	r26, r18
    1b62:	9c 93       	st	X, r25
   				DHCP_allocated_sn[1] = *p++;
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	11 96       	adiw	r26, 0x01	; 1
    1b68:	9c 93       	st	X, r25
    1b6a:	11 97       	sbiw	r26, 0x01	; 1
   				DHCP_allocated_sn[2] = *p++;
    1b6c:	94 81       	ldd	r25, Z+4	; 0x04
    1b6e:	12 96       	adiw	r26, 0x02	; 2
    1b70:	9c 93       	st	X, r25
    1b72:	12 97       	sbiw	r26, 0x02	; 2
   				DHCP_allocated_sn[3] = *p++;
    1b74:	95 81       	ldd	r25, Z+5	; 0x05
    1b76:	13 96       	adiw	r26, 0x03	; 3
    1b78:	9c 93       	st	X, r25
    1b7a:	36 96       	adiw	r30, 0x06	; 6
   				break;
    1b7c:	6f c0       	rjmp	.+222    	; 0x1c5c <parseDHCPMSG+0x202>
   			case routersOnSubnet :
   				p++;
   				opt_len = *p++;       
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
   				DHCP_allocated_gw[0] = *p++;
    1b80:	f2 80       	ldd	r15, Z+2	; 0x02
    1b82:	d5 01       	movw	r26, r10
    1b84:	fc 92       	st	X, r15
   				DHCP_allocated_gw[1] = *p++;
    1b86:	f3 80       	ldd	r15, Z+3	; 0x03
    1b88:	11 96       	adiw	r26, 0x01	; 1
    1b8a:	fc 92       	st	X, r15
    1b8c:	11 97       	sbiw	r26, 0x01	; 1
   				DHCP_allocated_gw[2] = *p++;
    1b8e:	f4 80       	ldd	r15, Z+4	; 0x04
    1b90:	12 96       	adiw	r26, 0x02	; 2
    1b92:	fc 92       	st	X, r15
    1b94:	12 97       	sbiw	r26, 0x02	; 2
   				DHCP_allocated_gw[3] = *p++;
    1b96:	f5 80       	ldd	r15, Z+5	; 0x05
    1b98:	13 96       	adiw	r26, 0x03	; 3
    1b9a:	fc 92       	st	X, r15
   				p = p + (opt_len - 4);
    1b9c:	e9 0f       	add	r30, r25
    1b9e:	f1 1d       	adc	r31, r1
    1ba0:	32 96       	adiw	r30, 0x02	; 2
   				break;
    1ba2:	5c c0       	rjmp	.+184    	; 0x1c5c <parseDHCPMSG+0x202>
   			case dns :
   				p++;                  
   				opt_len = *p++;       
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
   				DHCP_allocated_dns[0] = *p++;
    1ba6:	f2 80       	ldd	r15, Z+2	; 0x02
    1ba8:	d8 01       	movw	r26, r16
    1baa:	fc 92       	st	X, r15
   				DHCP_allocated_dns[1] = *p++;
    1bac:	f3 80       	ldd	r15, Z+3	; 0x03
    1bae:	11 96       	adiw	r26, 0x01	; 1
    1bb0:	fc 92       	st	X, r15
    1bb2:	11 97       	sbiw	r26, 0x01	; 1
   				DHCP_allocated_dns[2] = *p++;
    1bb4:	f4 80       	ldd	r15, Z+4	; 0x04
    1bb6:	12 96       	adiw	r26, 0x02	; 2
    1bb8:	fc 92       	st	X, r15
    1bba:	12 97       	sbiw	r26, 0x02	; 2
   				DHCP_allocated_dns[3] = *p++;
    1bbc:	f5 80       	ldd	r15, Z+5	; 0x05
    1bbe:	13 96       	adiw	r26, 0x03	; 3
    1bc0:	fc 92       	st	X, r15
   				p = p + (opt_len - 4);
    1bc2:	e9 0f       	add	r30, r25
    1bc4:	f1 1d       	adc	r31, r1
    1bc6:	32 96       	adiw	r30, 0x02	; 2
   				break;
    1bc8:	49 c0       	rjmp	.+146    	; 0x1c5c <parseDHCPMSG+0x202>
   			case dhcpIPaddrLeaseTime :
   				p++;
   				opt_len = *p++;
   				dhcp_lease_time  = *p++;
    1bca:	c2 80       	ldd	r12, Z+2	; 0x02
    1bcc:	d1 2c       	mov	r13, r1
    1bce:	e1 2c       	mov	r14, r1
    1bd0:	f1 2c       	mov	r15, r1
    1bd2:	c0 92 3f 02 	sts	0x023F, r12	; 0x80023f <dhcp_lease_time>
    1bd6:	d0 92 40 02 	sts	0x0240, r13	; 0x800240 <dhcp_lease_time+0x1>
    1bda:	e0 92 41 02 	sts	0x0241, r14	; 0x800241 <dhcp_lease_time+0x2>
    1bde:	f0 92 42 02 	sts	0x0242, r15	; 0x800242 <dhcp_lease_time+0x3>
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
    1be2:	fe 2c       	mov	r15, r14
    1be4:	ed 2c       	mov	r14, r13
    1be6:	dc 2c       	mov	r13, r12
    1be8:	cc 24       	eor	r12, r12
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	c9 0e       	add	r12, r25
    1bee:	d1 1c       	adc	r13, r1
    1bf0:	e1 1c       	adc	r14, r1
    1bf2:	f1 1c       	adc	r15, r1
    1bf4:	fe 2c       	mov	r15, r14
    1bf6:	ed 2c       	mov	r14, r13
    1bf8:	dc 2c       	mov	r13, r12
    1bfa:	cc 24       	eor	r12, r12
    1bfc:	94 81       	ldd	r25, Z+4	; 0x04
    1bfe:	c9 0e       	add	r12, r25
    1c00:	d1 1c       	adc	r13, r1
    1c02:	e1 1c       	adc	r14, r1
    1c04:	f1 1c       	adc	r15, r1
    1c06:	fe 2c       	mov	r15, r14
    1c08:	ed 2c       	mov	r14, r13
    1c0a:	dc 2c       	mov	r13, r12
    1c0c:	cc 24       	eor	r12, r12
    1c0e:	95 81       	ldd	r25, Z+5	; 0x05
    1c10:	c9 0e       	add	r12, r25
    1c12:	d1 1c       	adc	r13, r1
    1c14:	e1 1c       	adc	r14, r1
    1c16:	f1 1c       	adc	r15, r1
    1c18:	c0 92 3f 02 	sts	0x023F, r12	; 0x80023f <dhcp_lease_time>
    1c1c:	d0 92 40 02 	sts	0x0240, r13	; 0x800240 <dhcp_lease_time+0x1>
    1c20:	e0 92 41 02 	sts	0x0241, r14	; 0x800241 <dhcp_lease_time+0x2>
    1c24:	f0 92 42 02 	sts	0x0242, r15	; 0x800242 <dhcp_lease_time+0x3>
    1c28:	36 96       	adiw	r30, 0x06	; 6
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
    1c2a:	18 c0       	rjmp	.+48     	; 0x1c5c <parseDHCPMSG+0x202>
   			case dhcpServerIdentifier :
   				p++;
   				opt_len = *p++;
   				DHCP_SIP[0] = *p++;
    1c2c:	92 81       	ldd	r25, Z+2	; 0x02
    1c2e:	db 01       	movw	r26, r22
    1c30:	9c 93       	st	X, r25
   				DHCP_SIP[1] = *p++;
    1c32:	93 81       	ldd	r25, Z+3	; 0x03
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	9c 93       	st	X, r25
    1c38:	11 97       	sbiw	r26, 0x01	; 1
   				DHCP_SIP[2] = *p++;
    1c3a:	94 81       	ldd	r25, Z+4	; 0x04
    1c3c:	12 96       	adiw	r26, 0x02	; 2
    1c3e:	9c 93       	st	X, r25
    1c40:	12 97       	sbiw	r26, 0x02	; 2
   				DHCP_SIP[3] = *p++;
    1c42:	95 81       	ldd	r25, Z+5	; 0x05
    1c44:	13 96       	adiw	r26, 0x03	; 3
    1c46:	9c 93       	st	X, r25
    1c48:	36 96       	adiw	r30, 0x06	; 6
   				break;
    1c4a:	08 c0       	rjmp	.+16     	; 0x1c5c <parseDHCPMSG+0x202>
   			default :
   				p++;
   				opt_len = *p++;
    1c4c:	7f 01       	movw	r14, r30
    1c4e:	b2 e0       	ldi	r27, 0x02	; 2
    1c50:	eb 0e       	add	r14, r27
    1c52:	f1 1c       	adc	r15, r1
   				p += opt_len;
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	f7 01       	movw	r30, r14
    1c58:	e9 0f       	add	r30, r25
    1c5a:	f1 1d       	adc	r31, r1
         return 0;
		p = (uint8_t *)(&pDHCPMSG->op);
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
		e = p + (len - 240);

		while ( p < e ) {
    1c5c:	e4 17       	cp	r30, r20
    1c5e:	f5 07       	cpc	r31, r21
    1c60:	08 f4       	brcc	.+2      	; 0x1c64 <parseDHCPMSG+0x20a>
    1c62:	60 cf       	rjmp	.-320    	; 0x1b24 <parseDHCPMSG+0xca>
    1c64:	0f c0       	rjmp	.+30     	; 0x1c84 <parseDHCPMSG+0x22a>
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
    1c66:	80 e0       	ldi	r24, 0x00	; 0
   				p += opt_len;
   				break;
			} // switch
		} // while
	} // if
	return	type;
    1c68:	0d c0       	rjmp	.+26     	; 0x1c84 <parseDHCPMSG+0x22a>
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	0b c0       	rjmp	.+22     	; 0x1c84 <parseDHCPMSG+0x22a>
	if (svr_port == DHCP_SERVER_PORT) {
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
         return 0;
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	09 c0       	rjmp	.+18     	; 0x1c84 <parseDHCPMSG+0x22a>
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	07 c0       	rjmp	.+14     	; 0x1c84 <parseDHCPMSG+0x22a>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	05 c0       	rjmp	.+10     	; 0x1c84 <parseDHCPMSG+0x22a>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	03 c0       	rjmp	.+6      	; 0x1c84 <parseDHCPMSG+0x22a>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <parseDHCPMSG+0x22a>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
   				break;
			} // switch
		} // while
	} // if
	return	type;
}
    1c84:	28 96       	adiw	r28, 0x08	; 8
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	df 90       	pop	r13
    1c9e:	cf 90       	pop	r12
    1ca0:	bf 90       	pop	r11
    1ca2:	af 90       	pop	r10
    1ca4:	08 95       	ret

00001ca6 <DHCP_stop>:
	return ret;
}

void    DHCP_stop(void)
{
   close(DHCP_SOCKET);
    1ca6:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <DHCP_SOCKET>
    1caa:	f9 d3       	rcall	.+2034   	; 0x249e <close>
   dhcp_state = STATE_DHCP_STOP;
    1cac:	86 e0       	ldi	r24, 0x06	; 6
    1cae:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <dhcp_state>
    1cb2:	08 95       	ret

00001cb4 <check_DHCP_leasedIP>:
	}
	return ret;
}

int8_t check_DHCP_leasedIP(void)
{
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	7b e1       	ldi	r23, 0x1B	; 27
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
    1cce:	c8 2f       	mov	r28, r24
	setRCR(0x03);
    1cd0:	43 e0       	ldi	r20, 0x03	; 3
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	7b e1       	ldi	r23, 0x1B	; 27
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 06 1b 	call	0x360c	; 0x360c <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
    1cde:	08 e8       	ldi	r16, 0x88	; 136
    1ce0:	13 e1       	ldi	r17, 0x13	; 19
    1ce2:	2d ec       	ldi	r18, 0xCD	; 205
    1ce4:	34 e0       	ldi	r19, 0x04	; 4
    1ce6:	41 e1       	ldi	r20, 0x11	; 17
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	6c e9       	ldi	r22, 0x9C	; 156
    1cec:	73 e0       	ldi	r23, 0x03	; 3
    1cee:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <DHCP_SOCKET>
    1cf2:	0e 94 88 17 	call	0x2f10	; 0x2f10 <sendto>
    1cf6:	6b 01       	movw	r12, r22
    1cf8:	7c 01       	movw	r14, r24

	// RCR value restore
	setRCR(tmp);
    1cfa:	4c 2f       	mov	r20, r28
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	7b e1       	ldi	r23, 0x1B	; 27
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 06 1b 	call	0x360c	; 0x360c <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
    1d08:	83 ef       	ldi	r24, 0xF3	; 243
    1d0a:	c8 16       	cp	r12, r24
    1d0c:	8f ef       	ldi	r24, 0xFF	; 255
    1d0e:	d8 06       	cpc	r13, r24
    1d10:	e8 06       	cpc	r14, r24
    1d12:	f8 06       	cpc	r15, r24
    1d14:	d9 f0       	breq	.+54     	; 0x1d4c <check_DHCP_leasedIP+0x98>
#endif

		return 1;
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
    1d16:	19 de       	rcall	.-974    	; 0x194a <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
    1d18:	40 91 bb 04 	lds	r20, 0x04BB	; 0x8004bb <dhcp_tick_1s>
    1d1c:	50 91 bc 04 	lds	r21, 0x04BC	; 0x8004bc <dhcp_tick_1s+0x1>
    1d20:	60 91 bd 04 	lds	r22, 0x04BD	; 0x8004bd <dhcp_tick_1s+0x2>
    1d24:	70 91 be 04 	lds	r23, 0x04BE	; 0x8004be <dhcp_tick_1s+0x3>
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
    1d28:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <dhcp_tick_1s>
    1d2c:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <dhcp_tick_1s+0x1>
    1d30:	a0 91 bd 04 	lds	r26, 0x04BD	; 0x8004bd <dhcp_tick_1s+0x2>
    1d34:	b0 91 be 04 	lds	r27, 0x04BE	; 0x8004be <dhcp_tick_1s+0x3>
    1d38:	84 1b       	sub	r24, r20
    1d3a:	95 0b       	sbc	r25, r21
    1d3c:	a6 0b       	sbc	r26, r22
    1d3e:	b7 0b       	sbc	r27, r23
    1d40:	02 97       	sbiw	r24, 0x02	; 2
    1d42:	a1 05       	cpc	r26, r1
    1d44:	b1 05       	cpc	r27, r1
    1d46:	80 f3       	brcs	.-32     	; 0x1d28 <check_DHCP_leasedIP+0x74>

		return 0;
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <check_DHCP_leasedIP+0x9a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
		ret = dhcp_tick_1s;
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;

		return 0;
	}
}	
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	df 90       	pop	r13
    1d5a:	cf 90       	pop	r12
    1d5c:	08 95       	ret

00001d5e <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
	dhcp_tick_1s = 0;
    1d5e:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <dhcp_tick_1s>
    1d62:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <dhcp_tick_1s+0x1>
    1d66:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <dhcp_tick_1s+0x2>
    1d6a:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <dhcp_tick_1s+0x3>
	dhcp_tick_next = DHCP_WAIT_TIME;
    1d6e:	8a e0       	ldi	r24, 0x0A	; 10
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	a0 e0       	ldi	r26, 0x00	; 0
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <dhcp_tick_next>
    1d7a:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <dhcp_tick_next+0x1>
    1d7e:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <dhcp_tick_next+0x2>
    1d82:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <dhcp_tick_next+0x3>
	dhcp_retry_count = 0;
    1d86:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <dhcp_retry_count>
    1d8a:	08 95       	ret

00001d8c <DHCP_init>:
		return 0;
	}
}	

void DHCP_init(uint8_t s, uint8_t * buf)
{
    1d8c:	ff 92       	push	r15
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <DHCP_init+0xc>
    1d98:	1f 92       	push	r1
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	f8 2e       	mov	r15, r24
    1da0:	8b 01       	movw	r16, r22
   uint8_t zeroip[4] = {0,0,0,0};
    1da2:	19 82       	std	Y+1, r1	; 0x01
    1da4:	1a 82       	std	Y+2, r1	; 0x02
    1da6:	1b 82       	std	Y+3, r1	; 0x03
    1da8:	1c 82       	std	Y+4, r1	; 0x04
   getSHAR(DHCP_CHADDR);
    1daa:	26 e0       	ldi	r18, 0x06	; 6
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	44 e4       	ldi	r20, 0x44	; 68
    1db0:	54 e2       	ldi	r21, 0x24	; 36
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	79 e0       	ldi	r23, 0x09	; 9
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
    1dbe:	e4 e4       	ldi	r30, 0x44	; 68
    1dc0:	f4 e2       	ldi	r31, 0x24	; 36
    1dc2:	90 81       	ld	r25, Z
    1dc4:	81 81       	ldd	r24, Z+1	; 0x01
    1dc6:	89 2b       	or	r24, r25
    1dc8:	92 81       	ldd	r25, Z+2	; 0x02
    1dca:	89 2b       	or	r24, r25
    1dcc:	93 81       	ldd	r25, Z+3	; 0x03
    1dce:	89 2b       	or	r24, r25
    1dd0:	94 81       	ldd	r25, Z+4	; 0x04
    1dd2:	89 2b       	or	r24, r25
    1dd4:	95 81       	ldd	r25, Z+5	; 0x05
    1dd6:	89 2b       	or	r24, r25
    1dd8:	89 f4       	brne	.+34     	; 0x1dfc <DHCP_init+0x70>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
    1dda:	10 82       	st	Z, r1
      DHCP_CHADDR[1] = 0x08;
    1ddc:	88 e0       	ldi	r24, 0x08	; 8
    1dde:	81 83       	std	Z+1, r24	; 0x01
      DHCP_CHADDR[2] = 0xdc;      
    1de0:	8c ed       	ldi	r24, 0xDC	; 220
    1de2:	82 83       	std	Z+2, r24	; 0x02
      DHCP_CHADDR[3] = 0x00;
    1de4:	13 82       	std	Z+3, r1	; 0x03
      DHCP_CHADDR[4] = 0x00;
    1de6:	14 82       	std	Z+4, r1	; 0x04
      DHCP_CHADDR[5] = 0x00; 
    1de8:	15 82       	std	Z+5, r1	; 0x05
      setSHAR(DHCP_CHADDR);     
    1dea:	26 e0       	ldi	r18, 0x06	; 6
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	af 01       	movw	r20, r30
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	79 e0       	ldi	r23, 0x09	; 9
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 00 1c 	call	0x3800	; 0x3800 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
    1dfc:	f0 92 54 24 	sts	0x2454, r15	; 0x802454 <DHCP_SOCKET>
	pDHCPMSG = (RIP_MSG*)buf;
    1e00:	10 93 53 24 	sts	0x2453, r17	; 0x802453 <pDHCPMSG+0x1>
    1e04:	00 93 52 24 	sts	0x2452, r16	; 0x802452 <pDHCPMSG>
	DHCP_XID = 0x12345678;
    1e08:	88 e7       	ldi	r24, 0x78	; 120
    1e0a:	96 e5       	ldi	r25, 0x56	; 86
    1e0c:	a4 e3       	ldi	r26, 0x34	; 52
    1e0e:	b2 e1       	ldi	r27, 0x12	; 18
    1e10:	80 93 4a 24 	sts	0x244A, r24	; 0x80244a <DHCP_XID>
    1e14:	90 93 4b 24 	sts	0x244B, r25	; 0x80244b <DHCP_XID+0x1>
    1e18:	a0 93 4c 24 	sts	0x244C, r26	; 0x80244c <DHCP_XID+0x2>
    1e1c:	b0 93 4d 24 	sts	0x244D, r27	; 0x80244d <DHCP_XID+0x3>

	// WIZchip Netinfo Clear
	setSIPR(zeroip);
    1e20:	24 e0       	ldi	r18, 0x04	; 4
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	ae 01       	movw	r20, r28
    1e26:	4f 5f       	subi	r20, 0xFF	; 255
    1e28:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	7f e0       	ldi	r23, 0x0F	; 15
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 00 1c 	call	0x3800	; 0x3800 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
    1e36:	24 e0       	ldi	r18, 0x04	; 4
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	ae 01       	movw	r20, r28
    1e3c:	4f 5f       	subi	r20, 0xFF	; 255
    1e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	71 e0       	ldi	r23, 0x01	; 1
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0e 94 00 1c 	call	0x3800	; 0x3800 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
    1e4c:	88 df       	rcall	.-240    	; 0x1d5e <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
    1e4e:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <dhcp_state>
}
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	ff 90       	pop	r15
    1e64:	08 95       	ret

00001e66 <DHCP_time_handler>:
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
	dhcp_tick_1s++;
    1e66:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <dhcp_tick_1s>
    1e6a:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <dhcp_tick_1s+0x1>
    1e6e:	a0 91 bd 04 	lds	r26, 0x04BD	; 0x8004bd <dhcp_tick_1s+0x2>
    1e72:	b0 91 be 04 	lds	r27, 0x04BE	; 0x8004be <dhcp_tick_1s+0x3>
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	a1 1d       	adc	r26, r1
    1e7a:	b1 1d       	adc	r27, r1
    1e7c:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <dhcp_tick_1s>
    1e80:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <dhcp_tick_1s+0x1>
    1e84:	a0 93 bd 04 	sts	0x04BD, r26	; 0x8004bd <dhcp_tick_1s+0x2>
    1e88:	b0 93 be 04 	sts	0x04BE, r27	; 0x8004be <dhcp_tick_1s+0x3>
    1e8c:	08 95       	ret

00001e8e <getIPfromDHCP>:
}

void getIPfromDHCP(uint8_t* ip)
{
    1e8e:	fc 01       	movw	r30, r24
	ip[0] = DHCP_allocated_ip[0];
    1e90:	ad ec       	ldi	r26, 0xCD	; 205
    1e92:	b4 e0       	ldi	r27, 0x04	; 4
    1e94:	8c 91       	ld	r24, X
    1e96:	80 83       	st	Z, r24
	ip[1] = DHCP_allocated_ip[1];
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	8c 91       	ld	r24, X
    1e9c:	11 97       	sbiw	r26, 0x01	; 1
    1e9e:	81 83       	std	Z+1, r24	; 0x01
	ip[2] = DHCP_allocated_ip[2];	
    1ea0:	12 96       	adiw	r26, 0x02	; 2
    1ea2:	8c 91       	ld	r24, X
    1ea4:	12 97       	sbiw	r26, 0x02	; 2
    1ea6:	82 83       	std	Z+2, r24	; 0x02
	ip[3] = DHCP_allocated_ip[3];
    1ea8:	13 96       	adiw	r26, 0x03	; 3
    1eaa:	8c 91       	ld	r24, X
    1eac:	83 83       	std	Z+3, r24	; 0x03
    1eae:	08 95       	ret

00001eb0 <getGWfromDHCP>:
}

void getGWfromDHCP(uint8_t* ip)
{
    1eb0:	fc 01       	movw	r30, r24
	ip[0] =DHCP_allocated_gw[0];
    1eb2:	a9 ec       	ldi	r26, 0xC9	; 201
    1eb4:	b4 e0       	ldi	r27, 0x04	; 4
    1eb6:	8c 91       	ld	r24, X
    1eb8:	80 83       	st	Z, r24
	ip[1] =DHCP_allocated_gw[1];
    1eba:	11 96       	adiw	r26, 0x01	; 1
    1ebc:	8c 91       	ld	r24, X
    1ebe:	11 97       	sbiw	r26, 0x01	; 1
    1ec0:	81 83       	std	Z+1, r24	; 0x01
	ip[2] =DHCP_allocated_gw[2];
    1ec2:	12 96       	adiw	r26, 0x02	; 2
    1ec4:	8c 91       	ld	r24, X
    1ec6:	12 97       	sbiw	r26, 0x02	; 2
    1ec8:	82 83       	std	Z+2, r24	; 0x02
	ip[3] =DHCP_allocated_gw[3];			
    1eca:	13 96       	adiw	r26, 0x03	; 3
    1ecc:	8c 91       	ld	r24, X
    1ece:	83 83       	std	Z+3, r24	; 0x03
    1ed0:	08 95       	ret

00001ed2 <getSNfromDHCP>:
}

void getSNfromDHCP(uint8_t* ip)
{
    1ed2:	fc 01       	movw	r30, r24
   ip[0] = DHCP_allocated_sn[0];
    1ed4:	a5 ec       	ldi	r26, 0xC5	; 197
    1ed6:	b4 e0       	ldi	r27, 0x04	; 4
    1ed8:	8c 91       	ld	r24, X
    1eda:	80 83       	st	Z, r24
   ip[1] = DHCP_allocated_sn[1];
    1edc:	11 96       	adiw	r26, 0x01	; 1
    1ede:	8c 91       	ld	r24, X
    1ee0:	11 97       	sbiw	r26, 0x01	; 1
    1ee2:	81 83       	std	Z+1, r24	; 0x01
   ip[2] = DHCP_allocated_sn[2];
    1ee4:	12 96       	adiw	r26, 0x02	; 2
    1ee6:	8c 91       	ld	r24, X
    1ee8:	12 97       	sbiw	r26, 0x02	; 2
    1eea:	82 83       	std	Z+2, r24	; 0x02
   ip[3] = DHCP_allocated_sn[3];         
    1eec:	13 96       	adiw	r26, 0x03	; 3
    1eee:	8c 91       	ld	r24, X
    1ef0:	83 83       	std	Z+3, r24	; 0x03
    1ef2:	08 95       	ret

00001ef4 <getDNSfromDHCP>:
}

void getDNSfromDHCP(uint8_t* ip)
{
    1ef4:	fc 01       	movw	r30, r24
   ip[0] = DHCP_allocated_dns[0];
    1ef6:	a1 ec       	ldi	r26, 0xC1	; 193
    1ef8:	b4 e0       	ldi	r27, 0x04	; 4
    1efa:	8c 91       	ld	r24, X
    1efc:	80 83       	st	Z, r24
   ip[1] = DHCP_allocated_dns[1];
    1efe:	11 96       	adiw	r26, 0x01	; 1
    1f00:	8c 91       	ld	r24, X
    1f02:	11 97       	sbiw	r26, 0x01	; 1
    1f04:	81 83       	std	Z+1, r24	; 0x01
   ip[2] = DHCP_allocated_dns[2];
    1f06:	12 96       	adiw	r26, 0x02	; 2
    1f08:	8c 91       	ld	r24, X
    1f0a:	12 97       	sbiw	r26, 0x02	; 2
    1f0c:	82 83       	std	Z+2, r24	; 0x02
   ip[3] = DHCP_allocated_dns[3];         
    1f0e:	13 96       	adiw	r26, 0x03	; 3
    1f10:	8c 91       	ld	r24, X
    1f12:	83 83       	std	Z+3, r24	; 0x03
    1f14:	08 95       	ret

00001f16 <getDHCPLeasetime>:
}

uint32_t getDHCPLeasetime(void)
{
	return dhcp_lease_time;
    1f16:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <dhcp_lease_time>
    1f1a:	70 91 40 02 	lds	r23, 0x0240	; 0x800240 <dhcp_lease_time+0x1>
    1f1e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <dhcp_lease_time+0x2>
    1f22:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <dhcp_lease_time+0x3>
}
    1f26:	08 95       	ret

00001f28 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
  nibble &= 0x0F;
    1f28:	8f 70       	andi	r24, 0x0F	; 15
  if (nibble <= 9)
    1f2a:	8a 30       	cpi	r24, 0x0A	; 10
    1f2c:	10 f4       	brcc	.+4      	; 0x1f32 <NibbleToHex+0xa>
    return nibble + '0';
    1f2e:	80 5d       	subi	r24, 0xD0	; 208
    1f30:	08 95       	ret
  else 
    return nibble + ('A'-0x0A);
    1f32:	89 5c       	subi	r24, 0xC9	; 201
}
    1f34:	08 95       	ret

00001f36 <send_DHCP_REQUEST>:
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
}

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
    1f36:	7f 92       	push	r7
    1f38:	8f 92       	push	r8
    1f3a:	9f 92       	push	r9
    1f3c:	af 92       	push	r10
    1f3e:	bf 92       	push	r11
    1f40:	cf 92       	push	r12
    1f42:	df 92       	push	r13
    1f44:	ef 92       	push	r14
    1f46:	ff 92       	push	r15
    1f48:	0f 93       	push	r16
    1f4a:	1f 93       	push	r17
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <send_DHCP_REQUEST+0x1c>
    1f52:	1f 92       	push	r1
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
	int i;
	uint8_t ip[4];
	uint16_t k = 0;

   makeDHCPMSG();
    1f58:	74 db       	rcall	.-2328   	; 0x1642 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
    1f5a:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <dhcp_state>
    1f5e:	83 50       	subi	r24, 0x03	; 3
    1f60:	82 30       	cpi	r24, 0x02	; 2
    1f62:	00 f5       	brcc	.+64     	; 0x1fa4 <send_DHCP_REQUEST+0x6e>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
    1f64:	e0 91 52 24 	lds	r30, 0x2452	; 0x802452 <pDHCPMSG>
    1f68:	f0 91 53 24 	lds	r31, 0x2453	; 0x802453 <pDHCPMSG+0x1>
    1f6c:	12 86       	std	Z+10, r1	; 0x0a
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
    1f6e:	13 86       	std	Z+11, r1	; 0x0b
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
    1f70:	ad ec       	ldi	r26, 0xCD	; 205
    1f72:	b4 e0       	ldi	r27, 0x04	; 4
    1f74:	8c 91       	ld	r24, X
    1f76:	84 87       	std	Z+12, r24	; 0x0c
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
    1f78:	11 96       	adiw	r26, 0x01	; 1
    1f7a:	8c 91       	ld	r24, X
    1f7c:	11 97       	sbiw	r26, 0x01	; 1
    1f7e:	85 87       	std	Z+13, r24	; 0x0d
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
    1f80:	12 96       	adiw	r26, 0x02	; 2
    1f82:	8c 91       	ld	r24, X
    1f84:	12 97       	sbiw	r26, 0x02	; 2
    1f86:	86 87       	std	Z+14, r24	; 0x0e
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
    1f88:	13 96       	adiw	r26, 0x03	; 3
    1f8a:	8c 91       	ld	r24, X
    1f8c:	87 87       	std	Z+15, r24	; 0x0f
   	ip[0] = DHCP_SIP[0];
    1f8e:	ee e4       	ldi	r30, 0x4E	; 78
    1f90:	f4 e2       	ldi	r31, 0x24	; 36
    1f92:	80 81       	ld	r24, Z
    1f94:	89 83       	std	Y+1, r24	; 0x01
   	ip[1] = DHCP_SIP[1];
    1f96:	81 81       	ldd	r24, Z+1	; 0x01
    1f98:	8a 83       	std	Y+2, r24	; 0x02
   	ip[2] = DHCP_SIP[2];
    1f9a:	82 81       	ldd	r24, Z+2	; 0x02
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
   	ip[3] = DHCP_SIP[3];   	   	   	
    1f9e:	83 81       	ldd	r24, Z+3	; 0x03
    1fa0:	8c 83       	std	Y+4, r24	; 0x04
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <send_DHCP_REQUEST+0x78>
   }
   else
   {
   	ip[0] = 255;
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	89 83       	std	Y+1, r24	; 0x01
   	ip[1] = 255;
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
   	ip[2] = 255;
    1faa:	8b 83       	std	Y+3, r24	; 0x03
   	ip[3] = 255;   	   	   	
    1fac:	8c 83       	std	Y+4, r24	; 0x04
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
    1fae:	e0 90 52 24 	lds	r14, 0x2452	; 0x802452 <pDHCPMSG>
    1fb2:	f0 90 53 24 	lds	r15, 0x2453	; 0x802453 <pDHCPMSG+0x1>
    1fb6:	f7 01       	movw	r30, r14
    1fb8:	e0 51       	subi	r30, 0x10	; 16
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	85 e3       	ldi	r24, 0x35	; 53
    1fbe:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = 0x01;
    1fc0:	31 96       	adiw	r30, 0x01	; 1
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
    1fc6:	31 96       	adiw	r30, 0x01	; 1
    1fc8:	93 e0       	ldi	r25, 0x03	; 3
    1fca:	90 83       	st	Z, r25

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
    1fcc:	31 96       	adiw	r30, 0x01	; 1
    1fce:	9d e3       	ldi	r25, 0x3D	; 61
    1fd0:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x07;
    1fd2:	31 96       	adiw	r30, 0x01	; 1
    1fd4:	97 e0       	ldi	r25, 0x07	; 7
    1fd6:	90 83       	st	Z, r25
	pDHCPMSG->OPT[k++] = 0x01;
    1fd8:	31 96       	adiw	r30, 0x01	; 1
    1fda:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
    1fdc:	d7 01       	movw	r26, r14
    1fde:	aa 50       	subi	r26, 0x0A	; 10
    1fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe2:	e4 e4       	ldi	r30, 0x44	; 68
    1fe4:	f4 e2       	ldi	r31, 0x24	; 36
    1fe6:	80 81       	ld	r24, Z
    1fe8:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
    1fea:	11 96       	adiw	r26, 0x01	; 1
    1fec:	81 81       	ldd	r24, Z+1	; 0x01
    1fee:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
    1ff0:	11 96       	adiw	r26, 0x01	; 1
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	8c 93       	st	X, r24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
    1ff6:	73 80       	ldd	r7, Z+3	; 0x03
    1ff8:	11 96       	adiw	r26, 0x01	; 1
    1ffa:	7c 92       	st	X, r7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
    1ffc:	84 80       	ldd	r8, Z+4	; 0x04
    1ffe:	11 96       	adiw	r26, 0x01	; 1
    2000:	8c 92       	st	X, r8
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    2002:	95 80       	ldd	r9, Z+5	; 0x05
    2004:	f7 01       	movw	r30, r14
    2006:	e5 50       	subi	r30, 0x05	; 5
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	90 82       	st	Z, r9

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	8f 3f       	cpi	r24, 0xFF	; 255
    2010:	71 f5       	brne	.+92     	; 0x206e <__EEPROM_REGION_LENGTH__+0x6e>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
    2012:	82 e3       	ldi	r24, 0x32	; 50
    2014:	31 96       	adiw	r30, 0x01	; 1
    2016:	80 83       	st	Z, r24
		pDHCPMSG->OPT[k++] = 0x04;
    2018:	84 e0       	ldi	r24, 0x04	; 4
    201a:	31 96       	adiw	r30, 0x01	; 1
    201c:	80 83       	st	Z, r24
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
    201e:	ed ec       	ldi	r30, 0xCD	; 205
    2020:	f4 e0       	ldi	r31, 0x04	; 4
    2022:	90 81       	ld	r25, Z
    2024:	14 96       	adiw	r26, 0x04	; 4
    2026:	9c 93       	st	X, r25
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	11 96       	adiw	r26, 0x01	; 1
    202c:	9c 93       	st	X, r25
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
    202e:	92 81       	ldd	r25, Z+2	; 0x02
    2030:	11 96       	adiw	r26, 0x01	; 1
    2032:	9c 93       	st	X, r25
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	f7 01       	movw	r30, r14
    2038:	ef 5f       	subi	r30, 0xFF	; 255
    203a:	fe 4f       	sbci	r31, 0xFE	; 254
    203c:	90 83       	st	Z, r25
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
    203e:	96 e3       	ldi	r25, 0x36	; 54
    2040:	31 96       	adiw	r30, 0x01	; 1
    2042:	90 83       	st	Z, r25
		pDHCPMSG->OPT[k++] = 0x04;
    2044:	31 96       	adiw	r30, 0x01	; 1
    2046:	80 83       	st	Z, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
    2048:	ee e4       	ldi	r30, 0x4E	; 78
    204a:	f4 e2       	ldi	r31, 0x24	; 36
    204c:	80 81       	ld	r24, Z
    204e:	14 96       	adiw	r26, 0x04	; 4
    2050:	8c 93       	st	X, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
    2052:	81 81       	ldd	r24, Z+1	; 0x01
    2054:	11 96       	adiw	r26, 0x01	; 1
    2056:	8c 93       	st	X, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	11 96       	adiw	r26, 0x01	; 1
    205c:	8c 93       	st	X, r24
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
    205e:	83 81       	ldd	r24, Z+3	; 0x03
    2060:	f7 01       	movw	r30, r14
    2062:	e9 5f       	subi	r30, 0xF9	; 249
    2064:	fe 4f       	sbci	r31, 0xFE	; 254
    2066:	80 83       	st	Z, r24
    2068:	ec e1       	ldi	r30, 0x1C	; 28
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <__EEPROM_REGION_LENGTH__+0x72>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
    206e:	e0 e1       	ldi	r30, 0x10	; 16
    2070:	f0 e0       	ldi	r31, 0x00	; 0
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
    2072:	c7 01       	movw	r24, r14
    2074:	8e 0f       	add	r24, r30
    2076:	9f 1f       	adc	r25, r31
    2078:	dc 01       	movw	r26, r24
    207a:	a4 51       	subi	r26, 0x14	; 20
    207c:	bf 4f       	sbci	r27, 0xFF	; 255
    207e:	2c e0       	ldi	r18, 0x0C	; 12
    2080:	2c 93       	st	X, r18
	pDHCPMSG->OPT[k++] = 0; // length of hostname
    2082:	8f 01       	movw	r16, r30
    2084:	0e 5f       	subi	r16, 0xFE	; 254
    2086:	1f 4f       	sbci	r17, 0xFF	; 255
    2088:	11 96       	adiw	r26, 0x01	; 1
    208a:	1c 92       	st	X, r1
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    208c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <HOST_NAME>
    2090:	88 23       	and	r24, r24
    2092:	91 f0       	breq	.+36     	; 0x20b8 <__EEPROM_REGION_LENGTH__+0xb8>
    2094:	e2 51       	subi	r30, 0x12	; 18
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	ee 0d       	add	r30, r14
    209a:	ff 1d       	adc	r31, r15
    209c:	a4 e3       	ldi	r26, 0x34	; 52
    209e:	b2 e0       	ldi	r27, 0x02	; 2
    20a0:	a1 2c       	mov	r10, r1
    20a2:	b1 2c       	mov	r11, r1
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
    20a4:	0f 5f       	subi	r16, 0xFF	; 255
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	81 93       	st	Z+, r24
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0; // length of hostname
	for(i = 0 ; HOST_NAME[i] != 0; i++)
    20aa:	2f ef       	ldi	r18, 0xFF	; 255
    20ac:	a2 1a       	sub	r10, r18
    20ae:	b2 0a       	sbc	r11, r18
    20b0:	8d 91       	ld	r24, X+
    20b2:	81 11       	cpse	r24, r1
    20b4:	f7 cf       	rjmp	.-18     	; 0x20a4 <__EEPROM_REGION_LENGTH__+0xa4>
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <__EEPROM_REGION_LENGTH__+0xbc>
    20b8:	a1 2c       	mov	r10, r1
    20ba:	b1 2c       	mov	r11, r1
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
    20bc:	87 2d       	mov	r24, r7
    20be:	82 95       	swap	r24
    20c0:	8f 70       	andi	r24, 0x0F	; 15
    20c2:	32 df       	rcall	.-412    	; 0x1f28 <NibbleToHex>
    20c4:	67 01       	movw	r12, r14
    20c6:	c0 0e       	add	r12, r16
    20c8:	d1 1e       	adc	r13, r17
    20ca:	f6 01       	movw	r30, r12
    20cc:	e4 51       	subi	r30, 0x14	; 20
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
    20d2:	87 2d       	mov	r24, r7
    20d4:	29 df       	rcall	.-430    	; 0x1f28 <NibbleToHex>
    20d6:	f6 01       	movw	r30, r12
    20d8:	e3 51       	subi	r30, 0x13	; 19
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 83       	st	Z, r24
    20de:	88 2d       	mov	r24, r8
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
    20e0:	82 95       	swap	r24
    20e2:	8f 70       	andi	r24, 0x0F	; 15
    20e4:	21 df       	rcall	.-446    	; 0x1f28 <NibbleToHex>
    20e6:	f6 01       	movw	r30, r12
    20e8:	e2 51       	subi	r30, 0x12	; 18
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
    20ee:	88 2d       	mov	r24, r8
    20f0:	1b df       	rcall	.-458    	; 0x1f28 <NibbleToHex>
    20f2:	f6 01       	movw	r30, r12
    20f4:	e1 51       	subi	r30, 0x11	; 17
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
    20fa:	89 2d       	mov	r24, r9
    20fc:	82 95       	swap	r24
    20fe:	8f 70       	andi	r24, 0x0F	; 15
    2100:	13 df       	rcall	.-474    	; 0x1f28 <NibbleToHex>
    2102:	f6 01       	movw	r30, r12
    2104:	e0 51       	subi	r30, 0x10	; 16
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 83       	st	Z, r24
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
    210a:	89 2d       	mov	r24, r9
    210c:	0d df       	rcall	.-486    	; 0x1f28 <NibbleToHex>
    210e:	f6 01       	movw	r30, r12
    2110:	ef 50       	subi	r30, 0x0F	; 15
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 83       	st	Z, r24
    2116:	f8 01       	movw	r30, r16
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
    2118:	31 97       	sbiw	r30, 0x01	; 1
    211a:	ea 19       	sub	r30, r10
    211c:	fb 09       	sbc	r31, r11
    211e:	ee 0d       	add	r30, r14
    2120:	ff 1d       	adc	r31, r15
    2122:	e4 51       	subi	r30, 0x14	; 20
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	86 e0       	ldi	r24, 0x06	; 6
    2128:	8a 0d       	add	r24, r10
    212a:	80 83       	st	Z, r24
    212c:	f6 01       	movw	r30, r12
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
    212e:	ee 50       	subi	r30, 0x0E	; 14
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	87 e3       	ldi	r24, 0x37	; 55
    2134:	80 83       	st	Z, r24
    2136:	31 96       	adiw	r30, 0x01	; 1
	pDHCPMSG->OPT[k++] = 0x08;
    2138:	88 e0       	ldi	r24, 0x08	; 8
    213a:	80 83       	st	Z, r24
    213c:	31 96       	adiw	r30, 0x01	; 1
	pDHCPMSG->OPT[k++] = subnetMask;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	80 83       	st	Z, r24
    2142:	31 96       	adiw	r30, 0x01	; 1
	pDHCPMSG->OPT[k++] = routersOnSubnet;
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	80 83       	st	Z, r24
    2148:	31 96       	adiw	r30, 0x01	; 1
	pDHCPMSG->OPT[k++] = dns;
    214a:	86 e0       	ldi	r24, 0x06	; 6
    214c:	80 83       	st	Z, r24
    214e:	31 96       	adiw	r30, 0x01	; 1
	pDHCPMSG->OPT[k++] = domainName;
    2150:	8f e0       	ldi	r24, 0x0F	; 15
    2152:	80 83       	st	Z, r24
    2154:	31 96       	adiw	r30, 0x01	; 1
	pDHCPMSG->OPT[k++] = dhcpT1value;
    2156:	8a e3       	ldi	r24, 0x3A	; 58
    2158:	80 83       	st	Z, r24
    215a:	31 96       	adiw	r30, 0x01	; 1
	pDHCPMSG->OPT[k++] = dhcpT2value;
    215c:	8b e3       	ldi	r24, 0x3B	; 59
    215e:	80 83       	st	Z, r24
    2160:	31 96       	adiw	r30, 0x01	; 1
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
    2162:	8f e1       	ldi	r24, 0x1F	; 31
    2164:	80 83       	st	Z, r24
    2166:	31 96       	adiw	r30, 0x01	; 1
	pDHCPMSG->OPT[k++] = staticRoute;
    2168:	81 e2       	ldi	r24, 0x21	; 33
    216a:	80 83       	st	Z, r24
    216c:	31 96       	adiw	r30, 0x01	; 1
	pDHCPMSG->OPT[k++] = endOption;
    216e:	8f ef       	ldi	r24, 0xFF	; 255
    2170:	80 83       	st	Z, r24
    2172:	c8 01       	movw	r24, r16

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
    2174:	41 96       	adiw	r24, 0x11	; 17
    2176:	88 33       	cpi	r24, 0x38	; 56
    2178:	91 40       	sbci	r25, 0x01	; 1
    217a:	64 f4       	brge	.+24     	; 0x2194 <__EEPROM_REGION_LENGTH__+0x194>
    217c:	f8 01       	movw	r30, r16
    217e:	e3 50       	subi	r30, 0x03	; 3
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	ee 0d       	add	r30, r14
    2184:	ff 1d       	adc	r31, r15
    2186:	c7 01       	movw	r24, r14
    2188:	8c 5d       	subi	r24, 0xDC	; 220
    218a:	9d 4f       	sbci	r25, 0xFD	; 253
    218c:	11 92       	st	Z+, r1
    218e:	e8 17       	cp	r30, r24
    2190:	f9 07       	cpc	r31, r25
    2192:	e1 f7       	brne	.-8      	; 0x218c <__EEPROM_REGION_LENGTH__+0x18c>
    2194:	03 e4       	ldi	r16, 0x43	; 67

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
    2196:	10 e0       	ldi	r17, 0x00	; 0
    2198:	9e 01       	movw	r18, r28
    219a:	2f 5f       	subi	r18, 0xFF	; 255
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	44 e2       	ldi	r20, 0x24	; 36
    21a0:	52 e0       	ldi	r21, 0x02	; 2
    21a2:	b7 01       	movw	r22, r14
    21a4:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <DHCP_SOCKET>
    21a8:	b3 d6       	rcall	.+3430   	; 0x2f10 <sendto>
    21aa:	0f 90       	pop	r0

}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	df 90       	pop	r13
    21c0:	cf 90       	pop	r12
    21c2:	bf 90       	pop	r11
    21c4:	af 90       	pop	r10
    21c6:	9f 90       	pop	r9
    21c8:	8f 90       	pop	r8
    21ca:	7f 90       	pop	r7
    21cc:	08 95       	ret

000021ce <check_DHCP_timeout>:
    21ce:	cf 93       	push	r28

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
    21d0:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <dhcp_retry_count>
    21d4:	82 30       	cpi	r24, 0x02	; 2
    21d6:	0c f0       	brlt	.+2      	; 0x21da <check_DHCP_timeout+0xc>
    21d8:	45 c0       	rjmp	.+138    	; 0x2264 <check_DHCP_timeout+0x96>
		if (dhcp_tick_next < dhcp_tick_1s) {
    21da:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <dhcp_tick_1s>
    21de:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <dhcp_tick_1s+0x1>
    21e2:	a0 91 bd 04 	lds	r26, 0x04BD	; 0x8004bd <dhcp_tick_1s+0x2>
    21e6:	b0 91 be 04 	lds	r27, 0x04BE	; 0x8004be <dhcp_tick_1s+0x3>
    21ea:	40 91 3b 02 	lds	r20, 0x023B	; 0x80023b <dhcp_tick_next>
    21ee:	50 91 3c 02 	lds	r21, 0x023C	; 0x80023c <dhcp_tick_next+0x1>
    21f2:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <dhcp_tick_next+0x2>
    21f6:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <dhcp_tick_next+0x3>
    21fa:	48 17       	cp	r20, r24
    21fc:	59 07       	cpc	r21, r25
    21fe:	6a 07       	cpc	r22, r26
    2200:	7b 07       	cpc	r23, r27
    2202:	08 f0       	brcs	.+2      	; 0x2206 <check_DHCP_timeout+0x38>
    2204:	44 c0       	rjmp	.+136    	; 0x228e <check_DHCP_timeout+0xc0>

			switch ( dhcp_state ) {
    2206:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <dhcp_state>
    220a:	82 30       	cpi	r24, 0x02	; 2
    220c:	31 f0       	breq	.+12     	; 0x221a <check_DHCP_timeout+0x4c>
    220e:	84 30       	cpi	r24, 0x04	; 4
    2210:	31 f0       	breq	.+12     	; 0x221e <check_DHCP_timeout+0x50>
    2212:	81 30       	cpi	r24, 0x01	; 1
    2214:	29 f4       	brne	.+10     	; 0x2220 <check_DHCP_timeout+0x52>
				case STATE_DHCP_DISCOVER :
//					printf("<<timeout>> state : STATE_DHCP_DISCOVER\r\n");
					send_DHCP_DISCOVER();
    2216:	d1 da       	rcall	.-2654   	; 0x17ba <send_DHCP_DISCOVER>
				break;
		
				case STATE_DHCP_REQUEST :
//					printf("<<timeout>> state : STATE_DHCP_REQUEST\r\n");

					send_DHCP_REQUEST();
    2218:	03 c0       	rjmp	.+6      	; 0x2220 <check_DHCP_timeout+0x52>
				break;
    221a:	8d de       	rcall	.-742    	; 0x1f36 <send_DHCP_REQUEST>

				case STATE_DHCP_REREQUEST :
//					printf("<<timeout>> state : STATE_DHCP_REREQUEST\r\n");
					
					send_DHCP_REQUEST();
    221c:	01 c0       	rjmp	.+2      	; 0x2220 <check_DHCP_timeout+0x52>
    221e:	8b de       	rcall	.-746    	; 0x1f36 <send_DHCP_REQUEST>
		
				default :
				break;
			}

			dhcp_tick_1s = 0;
    2220:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <dhcp_tick_1s>
    2224:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <dhcp_tick_1s+0x1>
    2228:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <dhcp_tick_1s+0x2>
    222c:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <dhcp_tick_1s+0x3>
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
    2230:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <dhcp_tick_1s>
    2234:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <dhcp_tick_1s+0x1>
    2238:	a0 91 bd 04 	lds	r26, 0x04BD	; 0x8004bd <dhcp_tick_1s+0x2>
    223c:	b0 91 be 04 	lds	r27, 0x04BE	; 0x8004be <dhcp_tick_1s+0x3>
    2240:	0a 96       	adiw	r24, 0x0a	; 10
    2242:	a1 1d       	adc	r26, r1
    2244:	b1 1d       	adc	r27, r1
    2246:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <dhcp_tick_next>
    224a:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <dhcp_tick_next+0x1>
    224e:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <dhcp_tick_next+0x2>
    2252:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <dhcp_tick_next+0x3>
			dhcp_retry_count++;
    2256:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <dhcp_retry_count>
    225a:	8f 5f       	subi	r24, 0xFF	; 255
    225c:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <dhcp_retry_count>
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    2260:	c1 e0       	ldi	r28, 0x01	; 1
    2262:	16 c0       	rjmp	.+44     	; 0x2290 <check_DHCP_timeout+0xc2>
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
			dhcp_retry_count++;
		}
	} else { // timeout occurred

		switch(dhcp_state) {
    2264:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <dhcp_state>
    2268:	82 30       	cpi	r24, 0x02	; 2
    226a:	41 f0       	breq	.+16     	; 0x227c <check_DHCP_timeout+0xae>
    226c:	84 30       	cpi	r24, 0x04	; 4
    226e:	31 f0       	breq	.+12     	; 0x227c <check_DHCP_timeout+0xae>
    2270:	81 30       	cpi	r24, 0x01	; 1
    2272:	51 f4       	brne	.+20     	; 0x2288 <check_DHCP_timeout+0xba>
			case STATE_DHCP_DISCOVER:
				dhcp_state = STATE_DHCP_INIT;
    2274:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <dhcp_state>
				ret = DHCP_FAILED;
				break;
    2278:	c0 e0       	ldi	r28, 0x00	; 0
			case STATE_DHCP_REQUEST:
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
    227a:	07 c0       	rjmp	.+14     	; 0x228a <check_DHCP_timeout+0xbc>
    227c:	9e da       	rcall	.-2756   	; 0x17ba <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <dhcp_state>
				break;
    2284:	c1 e0       	ldi	r28, 0x01	; 1
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    2286:	01 c0       	rjmp	.+2      	; 0x228a <check_DHCP_timeout+0xbc>
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
		}
		reset_DHCP_timeout();
    2288:	c1 e0       	ldi	r28, 0x01	; 1
    228a:	69 dd       	rcall	.-1326   	; 0x1d5e <reset_DHCP_timeout>
    228c:	01 c0       	rjmp	.+2      	; 0x2290 <check_DHCP_timeout+0xc2>
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
	uint8_t ret = DHCP_RUNNING;
    228e:	c1 e0       	ldi	r28, 0x01	; 1
				break;
		}
		reset_DHCP_timeout();
	}
	return ret;
}
    2290:	8c 2f       	mov	r24, r28
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <DHCP_run>:
	} // if
	return	type;
}

uint8_t DHCP_run(void)
{
    2296:	cf 93       	push	r28
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
    2298:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <dhcp_state>
    229c:	86 30       	cpi	r24, 0x06	; 6
    229e:	09 f4       	brne	.+2      	; 0x22a2 <DHCP_run+0xc>
    22a0:	f5 c0       	rjmp	.+490    	; 0x248c <DHCP_run+0x1f6>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
    22a2:	60 91 54 24 	lds	r22, 0x2454	; 0x802454 <DHCP_SOCKET>
    22a6:	20 e2       	ldi	r18, 0x20	; 32
    22a8:	62 9f       	mul	r22, r18
    22aa:	b0 01       	movw	r22, r0
    22ac:	11 24       	eor	r1, r1
    22ae:	68 5f       	subi	r22, 0xF8	; 248
    22b0:	7c 4f       	sbci	r23, 0xFC	; 252
    22b2:	07 2e       	mov	r0, r23
    22b4:	00 0c       	add	r0, r0
    22b6:	88 0b       	sbc	r24, r24
    22b8:	99 0b       	sbc	r25, r25
    22ba:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
    22be:	82 32       	cpi	r24, 0x22	; 34
    22c0:	39 f0       	breq	.+14     	; 0x22d0 <DHCP_run+0x3a>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	44 e4       	ldi	r20, 0x44	; 68
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	62 e0       	ldi	r22, 0x02	; 2
    22ca:	80 91 54 24 	lds	r24, 0x2454	; 0x802454 <DHCP_SOCKET>
    22ce:	5f d1       	rcall	.+702    	; 0x258e <socket>

	ret = DHCP_RUNNING;
	type = parseDHCPMSG();
    22d0:	c4 db       	rcall	.-2168   	; 0x1a5a <parseDHCPMSG>
    22d2:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <dhcp_state>

	switch ( dhcp_state ) {
    22d6:	92 30       	cpi	r25, 0x02	; 2
    22d8:	b9 f1       	breq	.+110    	; 0x2348 <DHCP_run+0xb2>
    22da:	2c f4       	brge	.+10     	; 0x22e6 <DHCP_run+0x50>
    22dc:	99 23       	and	r25, r25
    22de:	51 f0       	breq	.+20     	; 0x22f4 <DHCP_run+0x5e>
    22e0:	91 30       	cpi	r25, 0x01	; 1
    22e2:	99 f0       	breq	.+38     	; 0x230a <DHCP_run+0x74>
    22e4:	d5 c0       	rjmp	.+426    	; 0x2490 <DHCP_run+0x1fa>
    22e6:	93 30       	cpi	r25, 0x03	; 3
    22e8:	09 f4       	brne	.+2      	; 0x22ec <DHCP_run+0x56>
    22ea:	51 c0       	rjmp	.+162    	; 0x238e <DHCP_run+0xf8>
    22ec:	94 30       	cpi	r25, 0x04	; 4
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <DHCP_run+0x5c>
    22f0:	99 c0       	rjmp	.+306    	; 0x2424 <DHCP_run+0x18e>
    22f2:	ce c0       	rjmp	.+412    	; 0x2490 <DHCP_run+0x1fa>
    22f4:	ed ec       	ldi	r30, 0xCD	; 205
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
    22f6:	f4 e0       	ldi	r31, 0x04	; 4
    22f8:	10 82       	st	Z, r1
    22fa:	11 82       	std	Z+1, r1	; 0x01
         DHCP_allocated_ip[1] = 0;
    22fc:	12 82       	std	Z+2, r1	; 0x02
         DHCP_allocated_ip[2] = 0;
         DHCP_allocated_ip[3] = 0;
    22fe:	13 82       	std	Z+3, r1	; 0x03
   		send_DHCP_DISCOVER();
    2300:	5c da       	rcall	.-2888   	; 0x17ba <send_DHCP_DISCOVER>
    2302:	81 e0       	ldi	r24, 0x01	; 1
   		dhcp_state = STATE_DHCP_DISCOVER;
    2304:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <dhcp_state>
    2308:	c8 c0       	rjmp	.+400    	; 0x249a <DHCP_run+0x204>
   		break;
    230a:	82 30       	cpi	r24, 0x02	; 2
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
    230c:	d9 f4       	brne	.+54     	; 0x2344 <DHCP_run+0xae>
    230e:	a0 91 52 24 	lds	r26, 0x2452	; 0x802452 <pDHCPMSG>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
    2312:	b0 91 53 24 	lds	r27, 0x2453	; 0x802453 <pDHCPMSG+0x1>
    2316:	ed ec       	ldi	r30, 0xCD	; 205
    2318:	f4 e0       	ldi	r31, 0x04	; 4
    231a:	50 96       	adiw	r26, 0x10	; 16
    231c:	8c 91       	ld	r24, X
    231e:	50 97       	sbiw	r26, 0x10	; 16
    2320:	80 83       	st	Z, r24
    2322:	51 96       	adiw	r26, 0x11	; 17
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
    2324:	8c 91       	ld	r24, X
    2326:	51 97       	sbiw	r26, 0x11	; 17
    2328:	81 83       	std	Z+1, r24	; 0x01
    232a:	52 96       	adiw	r26, 0x12	; 18
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
    232c:	8c 91       	ld	r24, X
    232e:	52 97       	sbiw	r26, 0x12	; 18
    2330:	82 83       	std	Z+2, r24	; 0x02
    2332:	53 96       	adiw	r26, 0x13	; 19
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
    2334:	8c 91       	ld	r24, X
    2336:	83 83       	std	Z+3, r24	; 0x03

				send_DHCP_REQUEST();
    2338:	fe dd       	rcall	.-1028   	; 0x1f36 <send_DHCP_REQUEST>
    233a:	82 e0       	ldi	r24, 0x02	; 2
				dhcp_state = STATE_DHCP_REQUEST;
    233c:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <dhcp_state>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	ab c0       	rjmp	.+342    	; 0x249a <DHCP_run+0x204>
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];

				send_DHCP_REQUEST();
				dhcp_state = STATE_DHCP_REQUEST;
			} else ret = check_DHCP_timeout();
    2344:	44 df       	rcall	.-376    	; 0x21ce <check_DHCP_timeout>
    2346:	a9 c0       	rjmp	.+338    	; 0x249a <DHCP_run+0x204>
         break;

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
    2348:	85 30       	cpi	r24, 0x05	; 5
    234a:	c1 f4       	brne	.+48     	; 0x237c <DHCP_run+0xe6>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
    234c:	b3 dc       	rcall	.-1690   	; 0x1cb4 <check_DHCP_leasedIP>
    234e:	88 23       	and	r24, r24
    2350:	59 f0       	breq	.+22     	; 0x2368 <DHCP_run+0xd2>
					// Network info assignment from DHCP
					dhcp_ip_assign();
    2352:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <dhcp_ip_assign>
    2356:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <dhcp_ip_assign+0x1>
    235a:	19 95       	eicall
					reset_DHCP_timeout();
    235c:	00 dd       	rcall	.-1536   	; 0x1d5e <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
    235e:	83 e0       	ldi	r24, 0x03	; 3
    2360:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <dhcp_state>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	99 c0       	rjmp	.+306    	; 0x249a <DHCP_run+0x204>
					reset_DHCP_timeout();

					dhcp_state = STATE_DHCP_LEASED;
				} else {
					// IP address conflict occurred
					reset_DHCP_timeout();
    2368:	fa dc       	rcall	.-1548   	; 0x1d5e <reset_DHCP_timeout>
    236a:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <dhcp_ip_conflict>
					dhcp_ip_conflict();
    236e:	f0 91 2e 02 	lds	r31, 0x022E	; 0x80022e <dhcp_ip_conflict+0x1>
    2372:	19 95       	eicall
				    dhcp_state = STATE_DHCP_INIT;
    2374:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <dhcp_state>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    2378:	81 e0       	ldi	r24, 0x01	; 1
					// IP address conflict occurred
					reset_DHCP_timeout();
					dhcp_ip_conflict();
				    dhcp_state = STATE_DHCP_INIT;
				}
			} else if (type == DHCP_NAK) {
    237a:	8f c0       	rjmp	.+286    	; 0x249a <DHCP_run+0x204>
    237c:	86 30       	cpi	r24, 0x06	; 6

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_NACK\r\n");
#endif

				reset_DHCP_timeout();
    237e:	29 f4       	brne	.+10     	; 0x238a <DHCP_run+0xf4>
    2380:	ee dc       	rcall	.-1572   	; 0x1d5e <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_DISCOVER;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <dhcp_state>
    2388:	88 c0       	rjmp	.+272    	; 0x249a <DHCP_run+0x204>
			} else ret = check_DHCP_timeout();
    238a:	21 df       	rcall	.-446    	; 0x21ce <check_DHCP_timeout>
    238c:	86 c0       	rjmp	.+268    	; 0x249a <DHCP_run+0x204>
    238e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <dhcp_lease_time>
		break;

		case STATE_DHCP_LEASED :
			ret = DHCP_IP_LEASED;
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
    2392:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <dhcp_lease_time+0x1>
    2396:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <dhcp_lease_time+0x2>
    239a:	b0 91 42 02 	lds	r27, 0x0242	; 0x800242 <dhcp_lease_time+0x3>
    239e:	8f 3f       	cpi	r24, 0xFF	; 255
    23a0:	2f ef       	ldi	r18, 0xFF	; 255
    23a2:	92 07       	cpc	r25, r18
    23a4:	a2 07       	cpc	r26, r18
    23a6:	b2 07       	cpc	r27, r18
    23a8:	09 f4       	brne	.+2      	; 0x23ac <DHCP_run+0x116>
    23aa:	74 c0       	rjmp	.+232    	; 0x2494 <DHCP_run+0x1fe>
    23ac:	40 91 bb 04 	lds	r20, 0x04BB	; 0x8004bb <dhcp_tick_1s>
    23b0:	50 91 bc 04 	lds	r21, 0x04BC	; 0x8004bc <dhcp_tick_1s+0x1>
    23b4:	60 91 bd 04 	lds	r22, 0x04BD	; 0x8004bd <dhcp_tick_1s+0x2>
    23b8:	70 91 be 04 	lds	r23, 0x04BE	; 0x8004be <dhcp_tick_1s+0x3>
    23bc:	b6 95       	lsr	r27
    23be:	a7 95       	ror	r26
    23c0:	97 95       	ror	r25
    23c2:	87 95       	ror	r24
    23c4:	84 17       	cp	r24, r20
    23c6:	95 07       	cpc	r25, r21
    23c8:	a6 07       	cpc	r26, r22
    23ca:	b7 07       	cpc	r27, r23
    23cc:	08 f0       	brcs	.+2      	; 0x23d0 <DHCP_run+0x13a>
    23ce:	64 c0       	rjmp	.+200    	; 0x2498 <DHCP_run+0x202>
    23d0:	e1 ed       	ldi	r30, 0xD1	; 209
 				printf("> dhcp_lease_time: %lu\r\n", dhcp_lease_time);
 				printf("> dhcp_tick_1s: %lu\r\n", dhcp_tick_1s);
#endif

				type = 0;
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
    23d2:	f4 e0       	ldi	r31, 0x04	; 4
    23d4:	ad ec       	ldi	r26, 0xCD	; 205
    23d6:	b4 e0       	ldi	r27, 0x04	; 4
    23d8:	8c 91       	ld	r24, X
    23da:	80 83       	st	Z, r24
    23dc:	11 96       	adiw	r26, 0x01	; 1
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
    23de:	8c 91       	ld	r24, X
    23e0:	11 97       	sbiw	r26, 0x01	; 1
    23e2:	81 83       	std	Z+1, r24	; 0x01
    23e4:	12 96       	adiw	r26, 0x02	; 2
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
    23e6:	8c 91       	ld	r24, X
    23e8:	12 97       	sbiw	r26, 0x02	; 2
    23ea:	82 83       	std	Z+2, r24	; 0x02
    23ec:	13 96       	adiw	r26, 0x03	; 3
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
    23ee:	8c 91       	ld	r24, X
    23f0:	83 83       	std	Z+3, r24	; 0x03
    23f2:	80 91 4a 24 	lds	r24, 0x244A	; 0x80244a <DHCP_XID>
				
				DHCP_XID++;
    23f6:	90 91 4b 24 	lds	r25, 0x244B	; 0x80244b <DHCP_XID+0x1>
    23fa:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <DHCP_XID+0x2>
    23fe:	b0 91 4d 24 	lds	r27, 0x244D	; 0x80244d <DHCP_XID+0x3>
    2402:	01 96       	adiw	r24, 0x01	; 1
    2404:	a1 1d       	adc	r26, r1
    2406:	b1 1d       	adc	r27, r1
    2408:	80 93 4a 24 	sts	0x244A, r24	; 0x80244a <DHCP_XID>
    240c:	90 93 4b 24 	sts	0x244B, r25	; 0x80244b <DHCP_XID+0x1>
    2410:	a0 93 4c 24 	sts	0x244C, r26	; 0x80244c <DHCP_XID+0x2>
    2414:	b0 93 4d 24 	sts	0x244D, r27	; 0x80244d <DHCP_XID+0x3>

				send_DHCP_REQUEST();
    2418:	8e dd       	rcall	.-1252   	; 0x1f36 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
    241a:	a1 dc       	rcall	.-1726   	; 0x1d5e <reset_DHCP_timeout>
    241c:	84 e0       	ldi	r24, 0x04	; 4

				dhcp_state = STATE_DHCP_REREQUEST;
    241e:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <dhcp_state>
    2422:	3b c0       	rjmp	.+118    	; 0x249a <DHCP_run+0x204>
    2424:	85 30       	cpi	r24, 0x05	; 5
			}
		break;

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
			if (type == DHCP_ACK) {
    2426:	41 f5       	brne	.+80     	; 0x2478 <DHCP_run+0x1e2>
    2428:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <dhcp_retry_count>
				dhcp_retry_count = 0;
    242c:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <OLD_allocated_ip>
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
    2430:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <DHCP_allocated_ip>
    2434:	98 13       	cpse	r25, r24
    2436:	12 c0       	rjmp	.+36     	; 0x245c <DHCP_run+0x1c6>
    2438:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <OLD_allocated_ip+0x1>
    243c:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <DHCP_allocated_ip+0x1>
    2440:	98 13       	cpse	r25, r24
    2442:	0c c0       	rjmp	.+24     	; 0x245c <DHCP_run+0x1c6>
    2444:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <OLD_allocated_ip+0x2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
    2448:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <DHCP_allocated_ip+0x2>
    244c:	98 13       	cpse	r25, r24
    244e:	06 c0       	rjmp	.+12     	; 0x245c <DHCP_run+0x1c6>
    2450:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <OLD_allocated_ip+0x3>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
    2454:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <DHCP_allocated_ip+0x3>
    2458:	98 17       	cp	r25, r24
    245a:	39 f0       	breq	.+14     	; 0x246a <DHCP_run+0x1d4>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
				{
					ret = DHCP_IP_CHANGED;
					dhcp_ip_update();
    245c:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <dhcp_ip_update>
    2460:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <dhcp_ip_update+0x1>
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
				{
					ret = DHCP_IP_CHANGED;
    2464:	19 95       	eicall
    2466:	c3 e0       	ldi	r28, 0x03	; 3
				dhcp_state = STATE_DHCP_REREQUEST;
			}
		break;

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
    2468:	01 c0       	rjmp	.+2      	; 0x246c <DHCP_run+0x1d6>
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
    246a:	c4 e0       	ldi	r28, 0x04	; 4
    246c:	78 dc       	rcall	.-1808   	; 0x1d5e <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
    246e:	83 e0       	ldi	r24, 0x03	; 3
    2470:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <dhcp_state>
    2474:	8c 2f       	mov	r24, r28
			} else if (type == DHCP_NAK) {
    2476:	11 c0       	rjmp	.+34     	; 0x249a <DHCP_run+0x204>
    2478:	86 30       	cpi	r24, 0x06	; 6

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_NACK, Failed to maintain ip\r\n");
#endif

				reset_DHCP_timeout();
    247a:	31 f4       	brne	.+12     	; 0x2488 <DHCP_run+0x1f2>
    247c:	70 dc       	rcall	.-1824   	; 0x1d5e <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_DISCOVER;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <dhcp_state>
				dhcp_state = STATE_DHCP_REREQUEST;
			}
		break;

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
    2484:	84 e0       	ldi	r24, 0x04	; 4
    2486:	09 c0       	rjmp	.+18     	; 0x249a <DHCP_run+0x204>
#endif

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
    2488:	a2 de       	rcall	.-700    	; 0x21ce <check_DHCP_timeout>
    248a:	07 c0       	rjmp	.+14     	; 0x249a <DHCP_run+0x204>
    248c:	85 e0       	ldi	r24, 0x05	; 5
uint8_t DHCP_run(void)
{
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
    248e:	05 c0       	rjmp	.+10     	; 0x249a <DHCP_run+0x204>
    2490:	81 e0       	ldi	r24, 0x01	; 1

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);

	ret = DHCP_RUNNING;
    2492:	03 c0       	rjmp	.+6      	; 0x249a <DHCP_run+0x204>
    2494:	84 e0       	ldi	r24, 0x04	; 4
				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;

		case STATE_DHCP_LEASED :
			ret = DHCP_IP_LEASED;
    2496:	01 c0       	rjmp	.+2      	; 0x249a <DHCP_run+0x204>
    2498:	84 e0       	ldi	r24, 0x04	; 4
    249a:	cf 91       	pop	r28
		default :
   		break;
	}

	return ret;
}
    249c:	08 95       	ret

0000249e <close>:
   while(getSn_SR(sn) == SOCK_CLOSED);
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
    249e:	8f 92       	push	r8
    24a0:	9f 92       	push	r9
    24a2:	af 92       	push	r10
    24a4:	bf 92       	push	r11
    24a6:	cf 92       	push	r12
    24a8:	df 92       	push	r13
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
	CHECK_SOCKNUM();
    24b2:	89 30       	cpi	r24, 0x09	; 9
    24b4:	08 f0       	brcs	.+2      	; 0x24b8 <close+0x1a>
    24b6:	5f c0       	rjmp	.+190    	; 0x2576 <close+0xd8>
    24b8:	f8 2e       	mov	r15, r24
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
    24ba:	c8 2f       	mov	r28, r24
    24bc:	d0 e0       	ldi	r29, 0x00	; 0
    24be:	6e 01       	movw	r12, r28
    24c0:	cc 0c       	add	r12, r12
    24c2:	dd 1c       	adc	r13, r13
    24c4:	cc 0c       	add	r12, r12
    24c6:	dd 1c       	adc	r13, r13
    24c8:	8f ef       	ldi	r24, 0xFF	; 255
    24ca:	c8 1a       	sub	r12, r24
    24cc:	d8 0a       	sbc	r13, r24
    24ce:	cc 0c       	add	r12, r12
    24d0:	dd 1c       	adc	r13, r13
    24d2:	cc 0c       	add	r12, r12
    24d4:	dd 1c       	adc	r13, r13
    24d6:	cc 0c       	add	r12, r12
    24d8:	dd 1c       	adc	r13, r13
    24da:	46 01       	movw	r8, r12
    24dc:	93 94       	inc	r9
    24de:	09 2c       	mov	r0, r9
    24e0:	00 0c       	add	r0, r0
    24e2:	aa 08       	sbc	r10, r10
    24e4:	bb 08       	sbc	r11, r11
    24e6:	40 e1       	ldi	r20, 0x10	; 16
    24e8:	c5 01       	movw	r24, r10
    24ea:	b4 01       	movw	r22, r8
    24ec:	0e 94 06 1b 	call	0x360c	; 0x360c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
    24f0:	c5 01       	movw	r24, r10
    24f2:	b4 01       	movw	r22, r8
    24f4:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
    24f8:	81 11       	cpse	r24, r1
    24fa:	fa cf       	rjmp	.-12     	; 0x24f0 <close+0x52>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
    24fc:	b6 01       	movw	r22, r12
    24fe:	7e 5f       	subi	r23, 0xFE	; 254
    2500:	07 2e       	mov	r0, r23
    2502:	00 0c       	add	r0, r0
    2504:	88 0b       	sbc	r24, r24
    2506:	99 0b       	sbc	r25, r25
    2508:	4f e1       	ldi	r20, 0x1F	; 31
    250a:	0e 94 06 1b 	call	0x360c	; 0x360c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <close+0x7a>
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	fa 94       	dec	r15
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <close+0x76>
    251c:	80 95       	com	r24
    251e:	90 95       	com	r25
    2520:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <sock_io_mode>
    2524:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <sock_io_mode+0x1>
    2528:	28 23       	and	r18, r24
    252a:	39 23       	and	r19, r25
    252c:	30 93 f0 04 	sts	0x04F0, r19	; 0x8004f0 <sock_io_mode+0x1>
    2530:	20 93 ef 04 	sts	0x04EF, r18	; 0x8004ef <sock_io_mode>
	//
	sock_is_sending &= ~(1<<sn);
    2534:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <sock_is_sending>
    2538:	30 91 ee 04 	lds	r19, 0x04EE	; 0x8004ee <sock_is_sending+0x1>
    253c:	82 23       	and	r24, r18
    253e:	93 23       	and	r25, r19
    2540:	90 93 ee 04 	sts	0x04EE, r25	; 0x8004ee <sock_is_sending+0x1>
    2544:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <sock_is_sending>
	sock_remained_size[sn] = 0;
    2548:	fe 01       	movw	r30, r28
    254a:	ee 0f       	add	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	e3 52       	subi	r30, 0x23	; 35
    2550:	fb 4f       	sbci	r31, 0xFB	; 251
    2552:	11 82       	std	Z+1, r1	; 0x01
    2554:	10 82       	st	Z, r1
	sock_pack_info[sn] = 0;
    2556:	cb 52       	subi	r28, 0x2B	; 43
    2558:	db 4f       	sbci	r29, 0xFB	; 251
    255a:	18 82       	st	Y, r1
	while(getSn_SR(sn) != SOCK_CLOSED);
    255c:	8d ef       	ldi	r24, 0xFD	; 253
    255e:	d8 1a       	sub	r13, r24
    2560:	0d 2c       	mov	r0, r13
    2562:	00 0c       	add	r0, r0
    2564:	ee 08       	sbc	r14, r14
    2566:	ff 08       	sbc	r15, r15
    2568:	c7 01       	movw	r24, r14
    256a:	b6 01       	movw	r22, r12
    256c:	e8 d7       	rcall	.+4048   	; 0x353e <WIZCHIP_READ>
    256e:	81 11       	cpse	r24, r1
    2570:	fb cf       	rjmp	.-10     	; 0x2568 <close+0xca>
	return SOCK_OK;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <close+0xda>
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
    2576:	8f ef       	ldi	r24, 0xFF	; 255
	sock_is_sending &= ~(1<<sn);
	sock_remained_size[sn] = 0;
	sock_pack_info[sn] = 0;
	while(getSn_SR(sn) != SOCK_CLOSED);
	return SOCK_OK;
}
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	df 90       	pop	r13
    2582:	cf 90       	pop	r12
    2584:	bf 90       	pop	r11
    2586:	af 90       	pop	r10
    2588:	9f 90       	pop	r9
    258a:	8f 90       	pop	r8
    258c:	08 95       	ret

0000258e <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
    258e:	4f 92       	push	r4
    2590:	5f 92       	push	r5
    2592:	6f 92       	push	r6
    2594:	7f 92       	push	r7
    2596:	af 92       	push	r10
    2598:	bf 92       	push	r11
    259a:	cf 92       	push	r12
    259c:	df 92       	push	r13
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <socket+0x1e>
    25ac:	1f 92       	push	r1
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	18 2f       	mov	r17, r24
    25b4:	56 2e       	mov	r5, r22
    25b6:	3a 01       	movw	r6, r20
    25b8:	02 2f       	mov	r16, r18
	CHECK_SOCKNUM();
    25ba:	89 30       	cpi	r24, 0x09	; 9
    25bc:	08 f0       	brcs	.+2      	; 0x25c0 <socket+0x32>
    25be:	cc c0       	rjmp	.+408    	; 0x2758 <socket+0x1ca>
	switch(protocol)
    25c0:	21 e0       	ldi	r18, 0x01	; 1
    25c2:	62 17       	cp	r22, r18
    25c4:	39 f0       	breq	.+14     	; 0x25d4 <socket+0x46>
    25c6:	62 17       	cp	r22, r18
    25c8:	08 f4       	brcc	.+2      	; 0x25cc <socket+0x3e>
    25ca:	c8 c0       	rjmp	.+400    	; 0x275c <socket+0x1ce>
    25cc:	84 e0       	ldi	r24, 0x04	; 4
    25ce:	86 17       	cp	r24, r22
    25d0:	b0 f4       	brcc	.+44     	; 0x25fe <socket+0x70>
    25d2:	c4 c0       	rjmp	.+392    	; 0x275c <socket+0x1ce>
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
    25d4:	24 e0       	ldi	r18, 0x04	; 4
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	ae 01       	movw	r20, r28
    25da:	4f 5f       	subi	r20, 0xFF	; 255
    25dc:	5f 4f       	sbci	r21, 0xFF	; 255
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	7f e0       	ldi	r23, 0x0F	; 15
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	ab 81       	ldd	r26, Y+3	; 0x03
    25f0:	bc 81       	ldd	r27, Y+4	; 0x04
    25f2:	89 2b       	or	r24, r25
    25f4:	8a 2b       	or	r24, r26
    25f6:	8b 2b       	or	r24, r27
    25f8:	11 f4       	brne	.+4      	; 0x25fe <socket+0x70>
    25fa:	8d ef       	ldi	r24, 0xFD	; 253
    25fc:	b8 c0       	rjmp	.+368    	; 0x276e <socket+0x1e0>
      default :
         return SOCKERR_SOCKMODE;
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
    25fe:	02 fd       	sbrc	r16, 2
    2600:	af c0       	rjmp	.+350    	; 0x2760 <socket+0x1d2>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
    2602:	00 23       	and	r16, r16
    2604:	a9 f0       	breq	.+42     	; 0x2630 <socket+0xa2>
	{
   	switch(protocol)
    2606:	21 e0       	ldi	r18, 0x01	; 1
    2608:	52 16       	cp	r5, r18
    260a:	21 f0       	breq	.+8      	; 0x2614 <socket+0x86>
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	58 16       	cp	r5, r24
    2610:	29 f0       	breq	.+10     	; 0x261c <socket+0x8e>
    2612:	0e c0       	rjmp	.+28     	; 0x2630 <socket+0xa2>
   	   case Sn_MR_TCP:
   		  //M20150601 :  For SF_TCP_ALIGN & W5300
          #if _WIZCHIP_ == 5300
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
          #else
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
    2614:	80 2f       	mov	r24, r16
    2616:	81 72       	andi	r24, 0x21	; 33
    2618:	59 f4       	brne	.+22     	; 0x2630 <socket+0xa2>
    261a:	a4 c0       	rjmp	.+328    	; 0x2764 <socket+0x1d6>
          #endif

   	      break;
   	   case Sn_MR_UDP:
   	      if(flag & SF_IGMP_VER2)
    261c:	05 ff       	sbrs	r16, 5
    261e:	03 c0       	rjmp	.+6      	; 0x2626 <socket+0x98>
   	      {
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
    2620:	00 23       	and	r16, r16
    2622:	34 f0       	brlt	.+12     	; 0x2630 <socket+0xa2>
    2624:	a1 c0       	rjmp	.+322    	; 0x2768 <socket+0x1da>
   	      }
   	      #if _WIZCHIP_ == 5500
      	      if(flag & SF_UNI_BLOCK)
    2626:	04 ff       	sbrs	r16, 4
    2628:	03 c0       	rjmp	.+6      	; 0x2630 <socket+0xa2>
      	      {
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
    262a:	00 23       	and	r16, r16
    262c:	0c f0       	brlt	.+2      	; 0x2630 <socket+0xa2>
    262e:	9e c0       	rjmp	.+316    	; 0x276c <socket+0x1de>
   	      break;
   	   default:
   	      break;
   	}
   }
	close(sn);
    2630:	81 2f       	mov	r24, r17
    2632:	35 df       	rcall	.-406    	; 0x249e <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    2634:	a1 2e       	mov	r10, r17
    2636:	b1 2c       	mov	r11, r1
    2638:	65 01       	movw	r12, r10
    263a:	cc 0c       	add	r12, r12
    263c:	dd 1c       	adc	r13, r13
    263e:	cc 0c       	add	r12, r12
    2640:	dd 1c       	adc	r13, r13
    2642:	2f ef       	ldi	r18, 0xFF	; 255
    2644:	c2 1a       	sub	r12, r18
    2646:	d2 0a       	sbc	r13, r18
    2648:	cc 0c       	add	r12, r12
    264a:	dd 1c       	adc	r13, r13
    264c:	cc 0c       	add	r12, r12
    264e:	dd 1c       	adc	r13, r13
    2650:	cc 0c       	add	r12, r12
    2652:	dd 1c       	adc	r13, r13
    2654:	40 2f       	mov	r20, r16
    2656:	40 7f       	andi	r20, 0xF0	; 240
    2658:	45 29       	or	r20, r5
    265a:	b6 01       	movw	r22, r12
    265c:	0d 2c       	mov	r0, r13
    265e:	00 0c       	add	r0, r0
    2660:	88 0b       	sbc	r24, r24
    2662:	99 0b       	sbc	r25, r25
    2664:	d3 d7       	rcall	.+4006   	; 0x360c <WIZCHIP_WRITE>
    #endif
	if(!port)
    2666:	61 14       	cp	r6, r1
    2668:	71 04       	cpc	r7, r1
    266a:	a9 f4       	brne	.+42     	; 0x2696 <socket+0x108>
	{
	   port = sock_any_port++;
    266c:	60 90 43 02 	lds	r6, 0x0243	; 0x800243 <sock_any_port>
    2670:	70 90 44 02 	lds	r7, 0x0244	; 0x800244 <sock_any_port+0x1>
    2674:	c3 01       	movw	r24, r6
    2676:	01 96       	adiw	r24, 0x01	; 1
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    2678:	80 3f       	cpi	r24, 0xF0	; 240
    267a:	2f ef       	ldi	r18, 0xFF	; 255
    267c:	92 07       	cpc	r25, r18
    267e:	29 f0       	breq	.+10     	; 0x268a <socket+0xfc>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
	{
	   port = sock_any_port++;
    2680:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <sock_any_port+0x1>
    2684:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <sock_any_port>
    2688:	06 c0       	rjmp	.+12     	; 0x2696 <socket+0x108>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 ec       	ldi	r25, 0xC0	; 192
    268e:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <sock_any_port+0x1>
    2692:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <sock_any_port>
	}
   setSn_PORT(sn,port);	
    2696:	b6 01       	movw	r22, r12
    2698:	7c 5f       	subi	r23, 0xFC	; 252
    269a:	07 2e       	mov	r0, r23
    269c:	00 0c       	add	r0, r0
    269e:	88 0b       	sbc	r24, r24
    26a0:	99 0b       	sbc	r25, r25
    26a2:	47 2d       	mov	r20, r7
    26a4:	b3 d7       	rcall	.+3942   	; 0x360c <WIZCHIP_WRITE>
    26a6:	b6 01       	movw	r22, r12
    26a8:	7b 5f       	subi	r23, 0xFB	; 251
    26aa:	07 2e       	mov	r0, r23
    26ac:	00 0c       	add	r0, r0
    26ae:	88 0b       	sbc	r24, r24
    26b0:	99 0b       	sbc	r25, r25
    26b2:	46 2d       	mov	r20, r6
    26b4:	ab d7       	rcall	.+3926   	; 0x360c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
    26b6:	26 01       	movw	r4, r12
    26b8:	53 94       	inc	r5
    26ba:	05 2c       	mov	r0, r5
    26bc:	00 0c       	add	r0, r0
    26be:	66 08       	sbc	r6, r6
    26c0:	77 08       	sbc	r7, r7
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	c3 01       	movw	r24, r6
    26c6:	b2 01       	movw	r22, r4
    26c8:	a1 d7       	rcall	.+3906   	; 0x360c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
    26ca:	c3 01       	movw	r24, r6
    26cc:	b2 01       	movw	r22, r4
    26ce:	37 d7       	rcall	.+3694   	; 0x353e <WIZCHIP_READ>
    26d0:	81 11       	cpse	r24, r1
    26d2:	fb cf       	rjmp	.-10     	; 0x26ca <socket+0x13c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	01 2e       	mov	r0, r17
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <socket+0x152>
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	0a 94       	dec	r0
    26e2:	e2 f7       	brpl	.-8      	; 0x26dc <socket+0x14e>
    26e4:	80 95       	com	r24
    26e6:	90 95       	com	r25
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
    26e8:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <sock_io_mode>
    26ec:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <sock_io_mode+0x1>
    26f0:	28 23       	and	r18, r24
    26f2:	39 23       	and	r19, r25
    26f4:	00 fb       	bst	r16, 0
    26f6:	ee 24       	eor	r14, r14
    26f8:	e0 f8       	bld	r14, 0
    26fa:	f1 2c       	mov	r15, r1
    26fc:	01 2e       	mov	r0, r17
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <socket+0x176>
    2700:	ee 0c       	add	r14, r14
    2702:	ff 1c       	adc	r15, r15
    2704:	0a 94       	dec	r0
    2706:	e2 f7       	brpl	.-8      	; 0x2700 <socket+0x172>
    2708:	e2 2a       	or	r14, r18
    270a:	f3 2a       	or	r15, r19
    270c:	f0 92 f0 04 	sts	0x04F0, r15	; 0x8004f0 <sock_io_mode+0x1>
    2710:	e0 92 ef 04 	sts	0x04EF, r14	; 0x8004ef <sock_io_mode>
   sock_is_sending &= ~(1<<sn);
    2714:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <sock_is_sending>
    2718:	30 91 ee 04 	lds	r19, 0x04EE	; 0x8004ee <sock_is_sending+0x1>
    271c:	82 23       	and	r24, r18
    271e:	93 23       	and	r25, r19
    2720:	90 93 ee 04 	sts	0x04EE, r25	; 0x8004ee <sock_is_sending+0x1>
    2724:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <sock_is_sending>
   sock_remained_size[sn] = 0;
    2728:	f5 01       	movw	r30, r10
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	e3 52       	subi	r30, 0x23	; 35
    2730:	fb 4f       	sbci	r31, 0xFB	; 251
    2732:	11 82       	std	Z+1, r1	; 0x01
    2734:	10 82       	st	Z, r1
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
    2736:	f5 01       	movw	r30, r10
    2738:	eb 52       	subi	r30, 0x2B	; 43
    273a:	fb 4f       	sbci	r31, 0xFB	; 251
    273c:	10 82       	st	Z, r1
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
    273e:	2d ef       	ldi	r18, 0xFD	; 253
    2740:	d2 1a       	sub	r13, r18
    2742:	0d 2c       	mov	r0, r13
    2744:	00 0c       	add	r0, r0
    2746:	ee 08       	sbc	r14, r14
    2748:	ff 08       	sbc	r15, r15
    274a:	c7 01       	movw	r24, r14
    274c:	b6 01       	movw	r22, r12
    274e:	f7 d6       	rcall	.+3566   	; 0x353e <WIZCHIP_READ>
    2750:	88 23       	and	r24, r24
    2752:	d9 f3       	breq	.-10     	; 0x274a <socket+0x1bc>
   return (int8_t)sn;
    2754:	81 2f       	mov	r24, r17
    2756:	0b c0       	rjmp	.+22     	; 0x276e <socket+0x1e0>



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
	CHECK_SOCKNUM();
    2758:	8f ef       	ldi	r24, 0xFF	; 255
    275a:	09 c0       	rjmp	.+18     	; 0x276e <socket+0x1e0>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
    275c:	8b ef       	ldi	r24, 0xFB	; 251
    275e:	07 c0       	rjmp	.+14     	; 0x276e <socket+0x1e0>
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
    2760:	8a ef       	ldi	r24, 0xFA	; 250
    2762:	05 c0       	rjmp	.+10     	; 0x276e <socket+0x1e0>
   	   case Sn_MR_TCP:
   		  //M20150601 :  For SF_TCP_ALIGN & W5300
          #if _WIZCHIP_ == 5300
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
          #else
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
    2764:	8a ef       	ldi	r24, 0xFA	; 250
    2766:	03 c0       	rjmp	.+6      	; 0x276e <socket+0x1e0>

   	      break;
   	   case Sn_MR_UDP:
   	      if(flag & SF_IGMP_VER2)
   	      {
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
    2768:	8a ef       	ldi	r24, 0xFA	; 250
    276a:	01 c0       	rjmp	.+2      	; 0x276e <socket+0x1e0>
   	      }
   	      #if _WIZCHIP_ == 5500
      	      if(flag & SF_UNI_BLOCK)
      	      {
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
    276c:	8a ef       	ldi	r24, 0xFA	; 250
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
   return (int8_t)sn;
}	   
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	df 90       	pop	r13
    2784:	cf 90       	pop	r12
    2786:	bf 90       	pop	r11
    2788:	af 90       	pop	r10
    278a:	7f 90       	pop	r7
    278c:	6f 90       	pop	r6
    278e:	5f 90       	pop	r5
    2790:	4f 90       	pop	r4
    2792:	08 95       	ret

00002794 <listen>:
	while(getSn_SR(sn) != SOCK_CLOSED);
	return SOCK_OK;
}

int8_t listen(uint8_t sn)
{
    2794:	8f 92       	push	r8
    2796:	9f 92       	push	r9
    2798:	af 92       	push	r10
    279a:	bf 92       	push	r11
    279c:	cf 92       	push	r12
    279e:	df 92       	push	r13
    27a0:	ef 92       	push	r14
    27a2:	ff 92       	push	r15
    27a4:	cf 93       	push	r28
	CHECK_SOCKNUM();
    27a6:	89 30       	cpi	r24, 0x09	; 9
    27a8:	08 f0       	brcs	.+2      	; 0x27ac <listen+0x18>
    27aa:	3f c0       	rjmp	.+126    	; 0x282a <listen+0x96>
    27ac:	c8 2f       	mov	r28, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
    27ae:	c8 2e       	mov	r12, r24
    27b0:	d1 2c       	mov	r13, r1
    27b2:	cc 0c       	add	r12, r12
    27b4:	dd 1c       	adc	r13, r13
    27b6:	cc 0c       	add	r12, r12
    27b8:	dd 1c       	adc	r13, r13
    27ba:	8f ef       	ldi	r24, 0xFF	; 255
    27bc:	c8 1a       	sub	r12, r24
    27be:	d8 0a       	sbc	r13, r24
    27c0:	cc 0c       	add	r12, r12
    27c2:	dd 1c       	adc	r13, r13
    27c4:	cc 0c       	add	r12, r12
    27c6:	dd 1c       	adc	r13, r13
    27c8:	cc 0c       	add	r12, r12
    27ca:	dd 1c       	adc	r13, r13
    27cc:	b6 01       	movw	r22, r12
    27ce:	0d 2c       	mov	r0, r13
    27d0:	00 0c       	add	r0, r0
    27d2:	88 0b       	sbc	r24, r24
    27d4:	99 0b       	sbc	r25, r25
    27d6:	b3 d6       	rcall	.+3430   	; 0x353e <WIZCHIP_READ>
    27d8:	8f 70       	andi	r24, 0x0F	; 15
    27da:	81 30       	cpi	r24, 0x01	; 1
    27dc:	41 f5       	brne	.+80     	; 0x282e <listen+0x9a>
	CHECK_SOCKINIT();
    27de:	46 01       	movw	r8, r12
    27e0:	8d ef       	ldi	r24, 0xFD	; 253
    27e2:	98 1a       	sub	r9, r24
    27e4:	09 2c       	mov	r0, r9
    27e6:	00 0c       	add	r0, r0
    27e8:	aa 08       	sbc	r10, r10
    27ea:	bb 08       	sbc	r11, r11
    27ec:	c5 01       	movw	r24, r10
    27ee:	b4 01       	movw	r22, r8
    27f0:	a6 d6       	rcall	.+3404   	; 0x353e <WIZCHIP_READ>
    27f2:	83 31       	cpi	r24, 0x13	; 19
    27f4:	f1 f4       	brne	.+60     	; 0x2832 <listen+0x9e>
	setSn_CR(sn,Sn_CR_LISTEN);
    27f6:	d3 94       	inc	r13
    27f8:	0d 2c       	mov	r0, r13
    27fa:	00 0c       	add	r0, r0
    27fc:	ee 08       	sbc	r14, r14
    27fe:	ff 08       	sbc	r15, r15
    2800:	42 e0       	ldi	r20, 0x02	; 2
    2802:	c7 01       	movw	r24, r14
    2804:	b6 01       	movw	r22, r12
    2806:	02 d7       	rcall	.+3588   	; 0x360c <WIZCHIP_WRITE>
	while(getSn_CR(sn));
    2808:	c7 01       	movw	r24, r14
    280a:	b6 01       	movw	r22, r12
    280c:	98 d6       	rcall	.+3376   	; 0x353e <WIZCHIP_READ>
    280e:	81 11       	cpse	r24, r1
    2810:	fb cf       	rjmp	.-10     	; 0x2808 <listen+0x74>
    2812:	04 c0       	rjmp	.+8      	; 0x281c <listen+0x88>
   while(getSn_SR(sn) != SOCK_LISTEN)
   {
         close(sn);
    2814:	8c 2f       	mov	r24, r28
    2816:	43 de       	rcall	.-890    	; 0x249e <close>
         return SOCKERR_SOCKCLOSED;
    2818:	8c ef       	ldi	r24, 0xFC	; 252
    281a:	0c c0       	rjmp	.+24     	; 0x2834 <listen+0xa0>
	CHECK_SOCKNUM();
   CHECK_SOCKMODE(Sn_MR_TCP);
	CHECK_SOCKINIT();
	setSn_CR(sn,Sn_CR_LISTEN);
	while(getSn_CR(sn));
   while(getSn_SR(sn) != SOCK_LISTEN)
    281c:	c5 01       	movw	r24, r10
    281e:	b4 01       	movw	r22, r8
    2820:	8e d6       	rcall	.+3356   	; 0x353e <WIZCHIP_READ>
    2822:	84 31       	cpi	r24, 0x14	; 20
    2824:	b9 f7       	brne	.-18     	; 0x2814 <listen+0x80>
    2826:	81 e0       	ldi	r24, 0x01	; 1
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <listen+0xa0>
    282a:	8f ef       	ldi	r24, 0xFF	; 255
	return SOCK_OK;
}

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
    282c:	03 c0       	rjmp	.+6      	; 0x2834 <listen+0xa0>
    282e:	8b ef       	ldi	r24, 0xFB	; 251
   CHECK_SOCKMODE(Sn_MR_TCP);
    2830:	01 c0       	rjmp	.+2      	; 0x2834 <listen+0xa0>
    2832:	8d ef       	ldi	r24, 0xFD	; 253
	CHECK_SOCKINIT();
    2834:	cf 91       	pop	r28
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
}
    2836:	ff 90       	pop	r15
    2838:	ef 90       	pop	r14
    283a:	df 90       	pop	r13
    283c:	cf 90       	pop	r12
    283e:	bf 90       	pop	r11
    2840:	af 90       	pop	r10
    2842:	9f 90       	pop	r9
    2844:	8f 90       	pop	r8
    2846:	08 95       	ret

00002848 <connect>:
    2848:	4f 92       	push	r4


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
    284a:	5f 92       	push	r5
    284c:	6f 92       	push	r6
    284e:	7f 92       	push	r7
    2850:	8f 92       	push	r8
    2852:	9f 92       	push	r9
    2854:	af 92       	push	r10
    2856:	bf 92       	push	r11
    2858:	cf 92       	push	r12
    285a:	df 92       	push	r13
    285c:	ef 92       	push	r14
    285e:	ff 92       	push	r15
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
   CHECK_SOCKNUM();
    2866:	89 30       	cpi	r24, 0x09	; 9
    2868:	08 f0       	brcs	.+2      	; 0x286c <connect+0x24>
    286a:	b0 c0       	rjmp	.+352    	; 0x29cc <connect+0x184>
    286c:	7a 01       	movw	r14, r20
    286e:	eb 01       	movw	r28, r22
    2870:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
    2872:	c8 2e       	mov	r12, r24
    2874:	d1 2c       	mov	r13, r1
    2876:	cc 0c       	add	r12, r12
    2878:	dd 1c       	adc	r13, r13
    287a:	cc 0c       	add	r12, r12
    287c:	dd 1c       	adc	r13, r13
    287e:	8f ef       	ldi	r24, 0xFF	; 255
    2880:	c8 1a       	sub	r12, r24
    2882:	d8 0a       	sbc	r13, r24
    2884:	cc 0c       	add	r12, r12
    2886:	dd 1c       	adc	r13, r13
    2888:	cc 0c       	add	r12, r12
    288a:	dd 1c       	adc	r13, r13
    288c:	cc 0c       	add	r12, r12
    288e:	dd 1c       	adc	r13, r13
    2890:	b6 01       	movw	r22, r12
    2892:	0d 2c       	mov	r0, r13
    2894:	00 0c       	add	r0, r0
    2896:	88 0b       	sbc	r24, r24
    2898:	99 0b       	sbc	r25, r25
    289a:	51 d6       	rcall	.+3234   	; 0x353e <WIZCHIP_READ>
    289c:	8f 70       	andi	r24, 0x0F	; 15
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <connect+0x5c>
    28a2:	96 c0       	rjmp	.+300    	; 0x29d0 <connect+0x188>
   CHECK_SOCKINIT();
    28a4:	46 01       	movw	r8, r12
    28a6:	8d ef       	ldi	r24, 0xFD	; 253
    28a8:	98 1a       	sub	r9, r24
    28aa:	09 2c       	mov	r0, r9
    28ac:	00 0c       	add	r0, r0
    28ae:	aa 08       	sbc	r10, r10
    28b0:	bb 08       	sbc	r11, r11
    28b2:	c5 01       	movw	r24, r10
    28b4:	b4 01       	movw	r22, r8
    28b6:	43 d6       	rcall	.+3206   	; 0x353e <WIZCHIP_READ>
    28b8:	83 31       	cpi	r24, 0x13	; 19
    28ba:	09 f0       	breq	.+2      	; 0x28be <connect+0x76>
    28bc:	8b c0       	rjmp	.+278    	; 0x29d4 <connect+0x18c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
    28be:	48 81       	ld	r20, Y
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	76 2f       	mov	r23, r22
    28c8:	65 2f       	mov	r22, r21
    28ca:	54 2f       	mov	r21, r20
    28cc:	44 27       	eor	r20, r20
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	48 0f       	add	r20, r24
    28d2:	51 1d       	adc	r21, r1
    28d4:	61 1d       	adc	r22, r1
    28d6:	71 1d       	adc	r23, r1
    28d8:	76 2f       	mov	r23, r22
    28da:	65 2f       	mov	r22, r21
    28dc:	54 2f       	mov	r21, r20
    28de:	44 27       	eor	r20, r20
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	48 0f       	add	r20, r24
    28e4:	51 1d       	adc	r21, r1
    28e6:	61 1d       	adc	r22, r1
    28e8:	71 1d       	adc	r23, r1
    28ea:	76 2f       	mov	r23, r22
    28ec:	65 2f       	mov	r22, r21
    28ee:	54 2f       	mov	r21, r20
    28f0:	44 27       	eor	r20, r20
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e0       	ldi	r26, 0x00	; 0
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	a1 09       	sbc	r26, r1
    28fe:	b1 09       	sbc	r27, r1
    2900:	48 0f       	add	r20, r24
    2902:	59 1f       	adc	r21, r25
    2904:	6a 1f       	adc	r22, r26
    2906:	7b 1f       	adc	r23, r27
    2908:	4e 3f       	cpi	r20, 0xFE	; 254
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	6f 4f       	sbci	r22, 0xFF	; 255
    290e:	7f 4f       	sbci	r23, 0xFF	; 255
    2910:	08 f0       	brcs	.+2      	; 0x2914 <connect+0xcc>
    2912:	62 c0       	rjmp	.+196    	; 0x29d8 <connect+0x190>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
    2914:	e1 14       	cp	r14, r1
    2916:	f1 04       	cpc	r15, r1
    2918:	09 f4       	brne	.+2      	; 0x291c <connect+0xd4>
    291a:	60 c0       	rjmp	.+192    	; 0x29dc <connect+0x194>
	setSn_DIPR(sn,addr);
    291c:	b6 01       	movw	r22, r12
    291e:	74 5f       	subi	r23, 0xF4	; 244
    2920:	07 2e       	mov	r0, r23
    2922:	00 0c       	add	r0, r0
    2924:	88 0b       	sbc	r24, r24
    2926:	99 0b       	sbc	r25, r25
    2928:	24 e0       	ldi	r18, 0x04	; 4
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	ae 01       	movw	r20, r28
    292e:	68 d7       	rcall	.+3792   	; 0x3800 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
    2930:	b6 01       	movw	r22, r12
    2932:	70 5f       	subi	r23, 0xF0	; 240
    2934:	07 2e       	mov	r0, r23
    2936:	00 0c       	add	r0, r0
    2938:	88 0b       	sbc	r24, r24
    293a:	99 0b       	sbc	r25, r25
    293c:	4f 2d       	mov	r20, r15
    293e:	66 d6       	rcall	.+3276   	; 0x360c <WIZCHIP_WRITE>
    2940:	b6 01       	movw	r22, r12
    2942:	7f 5e       	subi	r23, 0xEF	; 239
    2944:	07 2e       	mov	r0, r23
    2946:	00 0c       	add	r0, r0
    2948:	88 0b       	sbc	r24, r24
    294a:	99 0b       	sbc	r25, r25
    294c:	4e 2d       	mov	r20, r14
    294e:	5e d6       	rcall	.+3260   	; 0x360c <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
    2950:	26 01       	movw	r4, r12
    2952:	53 94       	inc	r5
    2954:	05 2c       	mov	r0, r5
    2956:	00 0c       	add	r0, r0
    2958:	66 08       	sbc	r6, r6
    295a:	77 08       	sbc	r7, r7
    295c:	44 e0       	ldi	r20, 0x04	; 4
    295e:	c3 01       	movw	r24, r6
    2960:	b2 01       	movw	r22, r4
   while(getSn_CR(sn));
    2962:	54 d6       	rcall	.+3240   	; 0x360c <WIZCHIP_WRITE>
    2964:	c3 01       	movw	r24, r6
    2966:	b2 01       	movw	r22, r4
    2968:	ea d5       	rcall	.+3028   	; 0x353e <WIZCHIP_READ>
    296a:	81 11       	cpse	r24, r1
    296c:	fb cf       	rjmp	.-10     	; 0x2964 <connect+0x11c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <connect+0x130>
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	1a 95       	dec	r17
    297a:	e2 f7       	brpl	.-8      	; 0x2974 <connect+0x12c>
    297c:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <sock_io_mode>
    2980:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <sock_io_mode+0x1>
    2984:	82 23       	and	r24, r18
    2986:	93 23       	and	r25, r19
    2988:	89 2b       	or	r24, r25
    298a:	51 f5       	brne	.+84     	; 0x29e0 <connect+0x198>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
    298c:	8e ef       	ldi	r24, 0xFE	; 254
    298e:	d8 1a       	sub	r13, r24
    2990:	0d 2c       	mov	r0, r13
    2992:	00 0c       	add	r0, r0
    2994:	ee 08       	sbc	r14, r14
    2996:	ff 08       	sbc	r15, r15
    2998:	12 c0       	rjmp	.+36     	; 0x29be <connect+0x176>
    299a:	c7 01       	movw	r24, r14
    299c:	b6 01       	movw	r22, r12
    299e:	cf d5       	rcall	.+2974   	; 0x353e <WIZCHIP_READ>
    29a0:	83 ff       	sbrs	r24, 3
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
    29a2:	08 c0       	rjmp	.+16     	; 0x29b4 <connect+0x16c>
    29a4:	48 e0       	ldi	r20, 0x08	; 8
    29a6:	6c 2d       	mov	r22, r12
    29a8:	7d 2d       	mov	r23, r13
    29aa:	8e 2d       	mov	r24, r14
    29ac:	9f 2d       	mov	r25, r15
            return SOCKERR_TIMEOUT;
    29ae:	2e d6       	rcall	.+3164   	; 0x360c <WIZCHIP_WRITE>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
    29b0:	83 ef       	ldi	r24, 0xF3	; 243
    29b2:	19 c0       	rjmp	.+50     	; 0x29e6 <connect+0x19e>
    29b4:	c5 01       	movw	r24, r10
    29b6:	b4 01       	movw	r22, r8
    29b8:	c2 d5       	rcall	.+2948   	; 0x353e <WIZCHIP_READ>
    29ba:	88 23       	and	r24, r24
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
    29bc:	99 f0       	breq	.+38     	; 0x29e4 <connect+0x19c>
    29be:	c5 01       	movw	r24, r10
    29c0:	b4 01       	movw	r22, r8
    29c2:	bd d5       	rcall	.+2938   	; 0x353e <WIZCHIP_READ>
    29c4:	87 31       	cpi	r24, 0x17	; 23
    29c6:	49 f7       	brne	.-46     	; 0x299a <connect+0x152>
		{
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	0d c0       	rjmp	.+26     	; 0x29e6 <connect+0x19e>
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
   CHECK_SOCKNUM();
    29cc:	8f ef       	ldi	r24, 0xFF	; 255
    29ce:	0b c0       	rjmp	.+22     	; 0x29e6 <connect+0x19e>
   CHECK_SOCKMODE(Sn_MR_TCP);
    29d0:	8b ef       	ldi	r24, 0xFB	; 251
    29d2:	09 c0       	rjmp	.+18     	; 0x29e6 <connect+0x19e>
   CHECK_SOCKINIT();
    29d4:	8d ef       	ldi	r24, 0xFD	; 253
    29d6:	07 c0       	rjmp	.+14     	; 0x29e6 <connect+0x19e>
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
    29d8:	84 ef       	ldi	r24, 0xF4	; 244
    29da:	05 c0       	rjmp	.+10     	; 0x29e6 <connect+0x19e>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
    29dc:	85 ef       	ldi	r24, 0xF5	; 245
    29de:	03 c0       	rjmp	.+6      	; 0x29e6 <connect+0x19e>
	setSn_DIPR(sn,addr);
	setSn_DPORT(sn,port);
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	01 c0       	rjmp	.+2      	; 0x29e6 <connect+0x19e>
            return SOCKERR_TIMEOUT;
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
		{
			return SOCKERR_SOCKCLOSED;
    29e4:	8c ef       	ldi	r24, 0xFC	; 252
		}
	}
   
   return SOCK_OK;
}
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	ff 90       	pop	r15
    29ee:	ef 90       	pop	r14
    29f0:	df 90       	pop	r13
    29f2:	cf 90       	pop	r12
    29f4:	bf 90       	pop	r11
    29f6:	af 90       	pop	r10
    29f8:	9f 90       	pop	r9
    29fa:	8f 90       	pop	r8
    29fc:	7f 90       	pop	r7
    29fe:	6f 90       	pop	r6
    2a00:	5f 90       	pop	r5
    2a02:	4f 90       	pop	r4
    2a04:	08 95       	ret

00002a06 <disconnect>:

int8_t disconnect(uint8_t sn)
{
    2a06:	8f 92       	push	r8
    2a08:	9f 92       	push	r9
    2a0a:	af 92       	push	r10
    2a0c:	bf 92       	push	r11
    2a0e:	cf 92       	push	r12
    2a10:	df 92       	push	r13
    2a12:	ef 92       	push	r14
    2a14:	ff 92       	push	r15
    2a16:	1f 93       	push	r17
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
   CHECK_SOCKNUM();
    2a1c:	89 30       	cpi	r24, 0x09	; 9
    2a1e:	08 f0       	brcs	.+2      	; 0x2a22 <disconnect+0x1c>
    2a20:	63 c0       	rjmp	.+198    	; 0x2ae8 <disconnect+0xe2>
    2a22:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
    2a24:	c8 2f       	mov	r28, r24
    2a26:	d0 e0       	ldi	r29, 0x00	; 0
    2a28:	cc 0f       	add	r28, r28
    2a2a:	dd 1f       	adc	r29, r29
    2a2c:	cc 0f       	add	r28, r28
    2a2e:	dd 1f       	adc	r29, r29
    2a30:	21 96       	adiw	r28, 0x01	; 1
    2a32:	cc 0f       	add	r28, r28
    2a34:	dd 1f       	adc	r29, r29
    2a36:	cc 0f       	add	r28, r28
    2a38:	dd 1f       	adc	r29, r29
    2a3a:	cc 0f       	add	r28, r28
    2a3c:	dd 1f       	adc	r29, r29
    2a3e:	be 01       	movw	r22, r28
    2a40:	0d 2e       	mov	r0, r29
    2a42:	00 0c       	add	r0, r0
    2a44:	88 0b       	sbc	r24, r24
    2a46:	99 0b       	sbc	r25, r25
    2a48:	7a d5       	rcall	.+2804   	; 0x353e <WIZCHIP_READ>
    2a4a:	8f 70       	andi	r24, 0x0F	; 15
    2a4c:	81 30       	cpi	r24, 0x01	; 1
    2a4e:	09 f0       	breq	.+2      	; 0x2a52 <disconnect+0x4c>
    2a50:	4d c0       	rjmp	.+154    	; 0x2aec <disconnect+0xe6>
	setSn_CR(sn,Sn_CR_DISCON);
    2a52:	6e 01       	movw	r12, r28
    2a54:	d3 94       	inc	r13
    2a56:	0d 2c       	mov	r0, r13
    2a58:	00 0c       	add	r0, r0
    2a5a:	ee 08       	sbc	r14, r14
    2a5c:	ff 08       	sbc	r15, r15
    2a5e:	48 e0       	ldi	r20, 0x08	; 8
    2a60:	c7 01       	movw	r24, r14
    2a62:	b6 01       	movw	r22, r12
    2a64:	d3 d5       	rcall	.+2982   	; 0x360c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
    2a66:	c7 01       	movw	r24, r14
    2a68:	b6 01       	movw	r22, r12
    2a6a:	69 d5       	rcall	.+2770   	; 0x353e <WIZCHIP_READ>
    2a6c:	81 11       	cpse	r24, r1
    2a6e:	fb cf       	rjmp	.-10     	; 0x2a66 <disconnect+0x60>
	sock_is_sending &= ~(1<<sn);
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	01 2e       	mov	r0, r17
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <disconnect+0x76>
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	0a 94       	dec	r0
    2a7e:	e2 f7       	brpl	.-8      	; 0x2a78 <disconnect+0x72>
    2a80:	9c 01       	movw	r18, r24
    2a82:	20 95       	com	r18
    2a84:	30 95       	com	r19
    2a86:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <sock_is_sending>
    2a8a:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <sock_is_sending+0x1>
    2a8e:	24 23       	and	r18, r20
    2a90:	35 23       	and	r19, r21
    2a92:	30 93 ee 04 	sts	0x04EE, r19	; 0x8004ee <sock_is_sending+0x1>
    2a96:	20 93 ed 04 	sts	0x04ED, r18	; 0x8004ed <sock_is_sending>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    2a9a:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <sock_io_mode>
    2a9e:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <sock_io_mode+0x1>
    2aa2:	82 23       	and	r24, r18
    2aa4:	93 23       	and	r25, r19
    2aa6:	89 2b       	or	r24, r25
    2aa8:	19 f5       	brne	.+70     	; 0x2af0 <disconnect+0xea>
	while(getSn_SR(sn) != SOCK_CLOSED)
    2aaa:	4e 01       	movw	r8, r28
    2aac:	8d ef       	ldi	r24, 0xFD	; 253
    2aae:	98 1a       	sub	r9, r24
    2ab0:	09 2c       	mov	r0, r9
    2ab2:	00 0c       	add	r0, r0
    2ab4:	aa 08       	sbc	r10, r10
    2ab6:	bb 08       	sbc	r11, r11
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
    2ab8:	6e 01       	movw	r12, r28
    2aba:	8e ef       	ldi	r24, 0xFE	; 254
    2abc:	d8 1a       	sub	r13, r24
    2abe:	0d 2c       	mov	r0, r13
    2ac0:	00 0c       	add	r0, r0
    2ac2:	ee 08       	sbc	r14, r14
    2ac4:	ff 08       	sbc	r15, r15
    2ac6:	09 c0       	rjmp	.+18     	; 0x2ada <disconnect+0xd4>
    2ac8:	c7 01       	movw	r24, r14
    2aca:	b6 01       	movw	r22, r12
    2acc:	38 d5       	rcall	.+2672   	; 0x353e <WIZCHIP_READ>
    2ace:	83 ff       	sbrs	r24, 3
	   {
	      close(sn);
    2ad0:	04 c0       	rjmp	.+8      	; 0x2ada <disconnect+0xd4>
    2ad2:	81 2f       	mov	r24, r17
	      return SOCKERR_TIMEOUT;
    2ad4:	e4 dc       	rcall	.-1592   	; 0x249e <close>
    2ad6:	83 ef       	ldi	r24, 0xF3	; 243
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
	while(getSn_SR(sn) != SOCK_CLOSED)
    2ad8:	0c c0       	rjmp	.+24     	; 0x2af2 <disconnect+0xec>
    2ada:	c5 01       	movw	r24, r10
    2adc:	b4 01       	movw	r22, r8
    2ade:	2f d5       	rcall	.+2654   	; 0x353e <WIZCHIP_READ>
    2ae0:	81 11       	cpse	r24, r1
    2ae2:	f2 cf       	rjmp	.-28     	; 0x2ac8 <disconnect+0xc2>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	05 c0       	rjmp	.+10     	; 0x2af2 <disconnect+0xec>
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
    2ae8:	8f ef       	ldi	r24, 0xFF	; 255
    2aea:	03 c0       	rjmp	.+6      	; 0x2af2 <disconnect+0xec>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2aec:	8b ef       	ldi	r24, 0xFB	; 251
    2aee:	01 c0       	rjmp	.+2      	; 0x2af2 <disconnect+0xec>
	setSn_CR(sn,Sn_CR_DISCON);
	/* wait to process the command... */
	while(getSn_CR(sn));
	sock_is_sending &= ~(1<<sn);
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    2af0:	80 e0       	ldi	r24, 0x00	; 0
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
}
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	1f 91       	pop	r17
    2af8:	ff 90       	pop	r15
    2afa:	ef 90       	pop	r14
    2afc:	df 90       	pop	r13
    2afe:	cf 90       	pop	r12
    2b00:	bf 90       	pop	r11
    2b02:	af 90       	pop	r10
    2b04:	9f 90       	pop	r9
    2b06:	8f 90       	pop	r8
    2b08:	08 95       	ret

00002b0a <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
    2b0a:	2f 92       	push	r2
    2b0c:	3f 92       	push	r3
    2b0e:	4f 92       	push	r4
    2b10:	5f 92       	push	r5
    2b12:	6f 92       	push	r6
    2b14:	7f 92       	push	r7
    2b16:	8f 92       	push	r8
    2b18:	9f 92       	push	r9
    2b1a:	af 92       	push	r10
    2b1c:	bf 92       	push	r11
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <send+0x24>
    2b2e:	1f 92       	push	r1
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
    2b34:	89 30       	cpi	r24, 0x09	; 9
    2b36:	08 f0       	brcs	.+2      	; 0x2b3a <send+0x30>
    2b38:	c3 c0       	rjmp	.+390    	; 0x2cc0 <send+0x1b6>
    2b3a:	6a 01       	movw	r12, r20
    2b3c:	1b 01       	movw	r2, r22
    2b3e:	18 2f       	mov	r17, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
    2b40:	e8 2e       	mov	r14, r24
    2b42:	f1 2c       	mov	r15, r1
    2b44:	ee 0c       	add	r14, r14
    2b46:	ff 1c       	adc	r15, r15
    2b48:	ee 0c       	add	r14, r14
    2b4a:	ff 1c       	adc	r15, r15
    2b4c:	2f ef       	ldi	r18, 0xFF	; 255
    2b4e:	e2 1a       	sub	r14, r18
    2b50:	f2 0a       	sbc	r15, r18
    2b52:	ee 0c       	add	r14, r14
    2b54:	ff 1c       	adc	r15, r15
    2b56:	ee 0c       	add	r14, r14
    2b58:	ff 1c       	adc	r15, r15
    2b5a:	ee 0c       	add	r14, r14
    2b5c:	ff 1c       	adc	r15, r15
    2b5e:	b7 01       	movw	r22, r14
    2b60:	0f 2c       	mov	r0, r15
    2b62:	00 0c       	add	r0, r0
    2b64:	88 0b       	sbc	r24, r24
    2b66:	99 0b       	sbc	r25, r25
    2b68:	ea d4       	rcall	.+2516   	; 0x353e <WIZCHIP_READ>
    2b6a:	8f 70       	andi	r24, 0x0F	; 15
    2b6c:	81 30       	cpi	r24, 0x01	; 1
    2b6e:	09 f0       	breq	.+2      	; 0x2b72 <send+0x68>
    2b70:	ab c0       	rjmp	.+342    	; 0x2cc8 <send+0x1be>
   CHECK_SOCKDATA();
    2b72:	c1 14       	cp	r12, r1
    2b74:	d1 04       	cpc	r13, r1
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <send+0x70>
    2b78:	ac c0       	rjmp	.+344    	; 0x2cd2 <send+0x1c8>
   tmp = getSn_SR(sn);
    2b7a:	27 01       	movw	r4, r14
    2b7c:	3d ef       	ldi	r19, 0xFD	; 253
    2b7e:	53 1a       	sub	r5, r19
    2b80:	05 2c       	mov	r0, r5
    2b82:	00 0c       	add	r0, r0
    2b84:	66 08       	sbc	r6, r6
    2b86:	77 08       	sbc	r7, r7
    2b88:	c3 01       	movw	r24, r6
    2b8a:	b2 01       	movw	r22, r4
    2b8c:	d8 d4       	rcall	.+2480   	; 0x353e <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    2b8e:	87 31       	cpi	r24, 0x17	; 23
    2b90:	19 f0       	breq	.+6      	; 0x2b98 <send+0x8e>
    2b92:	8c 31       	cpi	r24, 0x1C	; 28
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <send+0x8e>
    2b96:	a2 c0       	rjmp	.+324    	; 0x2cdc <send+0x1d2>
   if( sock_is_sending & (1<<sn) )
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	4c 01       	movw	r8, r24
    2b9e:	01 2e       	mov	r0, r17
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <send+0x9c>
    2ba2:	88 0c       	add	r8, r8
    2ba4:	99 1c       	adc	r9, r9
    2ba6:	0a 94       	dec	r0
    2ba8:	e2 f7       	brpl	.-8      	; 0x2ba2 <send+0x98>
    2baa:	54 01       	movw	r10, r8
    2bac:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <sock_is_sending>
    2bb0:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <sock_is_sending+0x1>
    2bb4:	88 21       	and	r24, r8
    2bb6:	99 21       	and	r25, r9
    2bb8:	89 2b       	or	r24, r25
    2bba:	61 f1       	breq	.+88     	; 0x2c14 <send+0x10a>
   {
      tmp = getSn_IR(sn);
    2bbc:	c7 01       	movw	r24, r14
    2bbe:	9e 5f       	subi	r25, 0xFE	; 254
    2bc0:	9c 01       	movw	r18, r24
    2bc2:	99 0f       	add	r25, r25
    2bc4:	44 0b       	sbc	r20, r20
    2bc6:	55 0b       	sbc	r21, r21
    2bc8:	29 83       	std	Y+1, r18	; 0x01
    2bca:	3a 83       	std	Y+2, r19	; 0x02
    2bcc:	4b 83       	std	Y+3, r20	; 0x03
    2bce:	5c 83       	std	Y+4, r21	; 0x04
    2bd0:	ca 01       	movw	r24, r20
    2bd2:	b9 01       	movw	r22, r18
    2bd4:	b4 d4       	rcall	.+2408   	; 0x353e <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    2bd6:	84 ff       	sbrs	r24, 4
    2bd8:	14 c0       	rjmp	.+40     	; 0x2c02 <send+0xf8>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
    2bda:	40 e1       	ldi	r20, 0x10	; 16
    2bdc:	69 81       	ldd	r22, Y+1	; 0x01
    2bde:	7a 81       	ldd	r23, Y+2	; 0x02
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	9c 81       	ldd	r25, Y+4	; 0x04
    2be4:	13 d5       	rcall	.+2598   	; 0x360c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
    2be6:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <sock_is_sending>
    2bea:	30 91 ee 04 	lds	r19, 0x04EE	; 0x8004ee <sock_is_sending+0x1>
    2bee:	c4 01       	movw	r24, r8
    2bf0:	80 95       	com	r24
    2bf2:	90 95       	com	r25
    2bf4:	82 23       	and	r24, r18
    2bf6:	93 23       	and	r25, r19
    2bf8:	90 93 ee 04 	sts	0x04EE, r25	; 0x8004ee <sock_is_sending+0x1>
    2bfc:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <sock_is_sending>
      }
      else if(tmp & Sn_IR_TIMEOUT)
    2c00:	09 c0       	rjmp	.+18     	; 0x2c14 <send+0x10a>
    2c02:	83 ff       	sbrs	r24, 3
      {
         close(sn);
    2c04:	70 c0       	rjmp	.+224    	; 0x2ce6 <send+0x1dc>
    2c06:	81 2f       	mov	r24, r17
    2c08:	4a dc       	rcall	.-1900   	; 0x249e <close>
         return SOCKERR_TIMEOUT;
    2c0a:	63 ef       	ldi	r22, 0xF3	; 243
    2c0c:	7f ef       	ldi	r23, 0xFF	; 255
    2c0e:	8f ef       	ldi	r24, 0xFF	; 255
    2c10:	9f ef       	ldi	r25, 0xFF	; 255
    2c12:	70 c0       	rjmp	.+224    	; 0x2cf4 <send+0x1ea>
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
    2c14:	b7 01       	movw	r22, r14
    2c16:	71 5e       	subi	r23, 0xE1	; 225
    2c18:	07 2e       	mov	r0, r23
    2c1a:	00 0c       	add	r0, r0
    2c1c:	88 0b       	sbc	r24, r24
    2c1e:	99 0b       	sbc	r25, r25
    2c20:	8e d4       	rcall	.+2332   	; 0x353e <WIZCHIP_READ>
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	98 2f       	mov	r25, r24
    2c26:	88 27       	eor	r24, r24
    2c28:	99 0f       	add	r25, r25
    2c2a:	99 0f       	add	r25, r25
    2c2c:	8c 15       	cp	r24, r12
    2c2e:	9d 05       	cpc	r25, r13
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <send+0x12a>
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
    2c32:	6c 01       	movw	r12, r24
    2c34:	81 2f       	mov	r24, r17
    2c36:	72 d6       	rcall	.+3300   	; 0x391c <getSn_TX_FSR>
    2c38:	9a 83       	std	Y+2, r25	; 0x02
      tmp = getSn_SR(sn);
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	c3 01       	movw	r24, r6
    2c3e:	b2 01       	movw	r22, r4
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
    2c40:	7e d4       	rcall	.+2300   	; 0x353e <WIZCHIP_READ>
    2c42:	87 31       	cpi	r24, 0x17	; 23
    2c44:	49 f0       	breq	.+18     	; 0x2c58 <send+0x14e>
    2c46:	8c 31       	cpi	r24, 0x1C	; 28
      {
         close(sn);
    2c48:	39 f0       	breq	.+14     	; 0x2c58 <send+0x14e>
    2c4a:	81 2f       	mov	r24, r17
    2c4c:	28 dc       	rcall	.-1968   	; 0x249e <close>
         return SOCKERR_SOCKSTATUS;
    2c4e:	69 ef       	ldi	r22, 0xF9	; 249
    2c50:	7f ef       	ldi	r23, 0xFF	; 255
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	9f ef       	ldi	r25, 0xFF	; 255
    2c56:	4e c0       	rjmp	.+156    	; 0x2cf4 <send+0x1ea>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    2c58:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <sock_io_mode>
    2c5c:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <sock_io_mode+0x1>
    2c60:	8a 21       	and	r24, r10
    2c62:	9b 21       	and	r25, r11
    2c64:	89 2b       	or	r24, r25
    2c66:	31 f0       	breq	.+12     	; 0x2c74 <send+0x16a>
    2c68:	49 81       	ldd	r20, Y+1	; 0x01
    2c6a:	5a 81       	ldd	r21, Y+2	; 0x02
    2c6c:	4c 15       	cp	r20, r12
    2c6e:	5d 05       	cpc	r21, r13
    2c70:	30 f4       	brcc	.+12     	; 0x2c7e <send+0x174>
      if(len <= freesize) break;
    2c72:	3d c0       	rjmp	.+122    	; 0x2cee <send+0x1e4>
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	9a 81       	ldd	r25, Y+2	; 0x02
    2c78:	8c 15       	cp	r24, r12
    2c7a:	9d 05       	cpc	r25, r13
   }
   wiz_send_data(sn, buf, len);
    2c7c:	d8 f2       	brcs	.-74     	; 0x2c34 <send+0x12a>
    2c7e:	a6 01       	movw	r20, r12
    2c80:	b1 01       	movw	r22, r2
    2c82:	81 2f       	mov	r24, r17

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
    2c84:	f3 d6       	rcall	.+3558   	; 0x3a6c <wiz_send_data>
    2c86:	27 01       	movw	r4, r14
    2c88:	53 94       	inc	r5
    2c8a:	05 2c       	mov	r0, r5
    2c8c:	00 0c       	add	r0, r0
    2c8e:	66 08       	sbc	r6, r6
    2c90:	77 08       	sbc	r7, r7
    2c92:	40 e2       	ldi	r20, 0x20	; 32
    2c94:	c3 01       	movw	r24, r6
    2c96:	b2 01       	movw	r22, r4
   /* wait to process the command... */
   while(getSn_CR(sn));
    2c98:	b9 d4       	rcall	.+2418   	; 0x360c <WIZCHIP_WRITE>
    2c9a:	c3 01       	movw	r24, r6
    2c9c:	b2 01       	movw	r22, r4
    2c9e:	4f d4       	rcall	.+2206   	; 0x353e <WIZCHIP_READ>
    2ca0:	81 11       	cpse	r24, r1
    2ca2:	fb cf       	rjmp	.-10     	; 0x2c9a <send+0x190>
   sock_is_sending |= (1 << sn);
    2ca4:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <sock_is_sending>
    2ca8:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <sock_is_sending+0x1>
    2cac:	88 2a       	or	r8, r24
    2cae:	99 2a       	or	r9, r25
    2cb0:	90 92 ee 04 	sts	0x04EE, r9	; 0x8004ee <sock_is_sending+0x1>
    2cb4:	80 92 ed 04 	sts	0x04ED, r8	; 0x8004ed <sock_is_sending>
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    2cb8:	b6 01       	movw	r22, r12
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	1a c0       	rjmp	.+52     	; 0x2cf4 <send+0x1ea>
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
    2cc0:	6f ef       	ldi	r22, 0xFF	; 255
    2cc2:	7f ef       	ldi	r23, 0xFF	; 255
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	16 c0       	rjmp	.+44     	; 0x2cf4 <send+0x1ea>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2cc8:	6b ef       	ldi	r22, 0xFB	; 251
    2cca:	7f ef       	ldi	r23, 0xFF	; 255
    2ccc:	8f ef       	ldi	r24, 0xFF	; 255
    2cce:	9f ef       	ldi	r25, 0xFF	; 255
    2cd0:	11 c0       	rjmp	.+34     	; 0x2cf4 <send+0x1ea>
   CHECK_SOCKDATA();
    2cd2:	62 ef       	ldi	r22, 0xF2	; 242
    2cd4:	7f ef       	ldi	r23, 0xFF	; 255
    2cd6:	8f ef       	ldi	r24, 0xFF	; 255
    2cd8:	9f ef       	ldi	r25, 0xFF	; 255
    2cda:	0c c0       	rjmp	.+24     	; 0x2cf4 <send+0x1ea>
   tmp = getSn_SR(sn);
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    2cdc:	69 ef       	ldi	r22, 0xF9	; 249
    2cde:	7f ef       	ldi	r23, 0xFF	; 255
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	9f ef       	ldi	r25, 0xFF	; 255
    2ce4:	07 c0       	rjmp	.+14     	; 0x2cf4 <send+0x1ea>
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
    2ce8:	70 e0       	ldi	r23, 0x00	; 0
    2cea:	cb 01       	movw	r24, r22
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <send+0x1ea>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    2cee:	60 e0       	ldi	r22, 0x00	; 0
    2cf0:	70 e0       	ldi	r23, 0x00	; 0
    2cf2:	cb 01       	movw	r24, r22
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	df 91       	pop	r29
    2cfe:	cf 91       	pop	r28
    2d00:	1f 91       	pop	r17
    2d02:	ff 90       	pop	r15
    2d04:	ef 90       	pop	r14
    2d06:	df 90       	pop	r13
    2d08:	cf 90       	pop	r12
    2d0a:	bf 90       	pop	r11
    2d0c:	af 90       	pop	r10
    2d0e:	9f 90       	pop	r9
    2d10:	8f 90       	pop	r8
    2d12:	7f 90       	pop	r7
    2d14:	6f 90       	pop	r6
    2d16:	5f 90       	pop	r5
    2d18:	4f 90       	pop	r4
    2d1a:	3f 90       	pop	r3
    2d1c:	2f 90       	pop	r2
    2d1e:	08 95       	ret

00002d20 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
    2d20:	2f 92       	push	r2
    2d22:	3f 92       	push	r3
    2d24:	4f 92       	push	r4
    2d26:	5f 92       	push	r5
    2d28:	6f 92       	push	r6
    2d2a:	7f 92       	push	r7
    2d2c:	8f 92       	push	r8
    2d2e:	9f 92       	push	r9
    2d30:	af 92       	push	r10
    2d32:	bf 92       	push	r11
    2d34:	cf 92       	push	r12
    2d36:	df 92       	push	r13
    2d38:	ef 92       	push	r14
    2d3a:	ff 92       	push	r15
    2d3c:	0f 93       	push	r16
    2d3e:	1f 93       	push	r17
    2d40:	cf 93       	push	r28
    2d42:	df 93       	push	r29
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <recv+0x26>
    2d46:	1f 92       	push	r1
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
    2d4c:	89 30       	cpi	r24, 0x09	; 9
    2d4e:	08 f0       	brcs	.+2      	; 0x2d52 <recv+0x32>
    2d50:	a8 c0       	rjmp	.+336    	; 0x2ea2 <recv+0x182>
    2d52:	6a 01       	movw	r12, r20
    2d54:	7a 83       	std	Y+2, r23	; 0x02
    2d56:	69 83       	std	Y+1, r22	; 0x01
    2d58:	38 2e       	mov	r3, r24
   CHECK_SOCKMODE(Sn_MR_TCP);
    2d5a:	08 2f       	mov	r16, r24
    2d5c:	10 e0       	ldi	r17, 0x00	; 0
    2d5e:	00 0f       	add	r16, r16
    2d60:	11 1f       	adc	r17, r17
    2d62:	00 0f       	add	r16, r16
    2d64:	11 1f       	adc	r17, r17
    2d66:	0f 5f       	subi	r16, 0xFF	; 255
    2d68:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6a:	00 0f       	add	r16, r16
    2d6c:	11 1f       	adc	r17, r17
    2d6e:	00 0f       	add	r16, r16
    2d70:	11 1f       	adc	r17, r17
    2d72:	00 0f       	add	r16, r16
    2d74:	11 1f       	adc	r17, r17
    2d76:	b8 01       	movw	r22, r16
    2d78:	01 2e       	mov	r0, r17
    2d7a:	00 0c       	add	r0, r0
    2d7c:	88 0b       	sbc	r24, r24
    2d7e:	99 0b       	sbc	r25, r25
    2d80:	de d3       	rcall	.+1980   	; 0x353e <WIZCHIP_READ>
    2d82:	8f 70       	andi	r24, 0x0F	; 15
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	09 f0       	breq	.+2      	; 0x2d8a <recv+0x6a>
    2d88:	90 c0       	rjmp	.+288    	; 0x2eaa <recv+0x18a>
   CHECK_SOCKDATA();
    2d8a:	c1 14       	cp	r12, r1
    2d8c:	d1 04       	cpc	r13, r1
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <recv+0x72>
    2d90:	91 c0       	rjmp	.+290    	; 0x2eb4 <recv+0x194>
   
   recvsize = getSn_RxMAX(sn);
    2d92:	b8 01       	movw	r22, r16
    2d94:	72 5e       	subi	r23, 0xE2	; 226
    2d96:	07 2e       	mov	r0, r23
    2d98:	00 0c       	add	r0, r0
    2d9a:	88 0b       	sbc	r24, r24
    2d9c:	99 0b       	sbc	r25, r25
    2d9e:	cf d3       	rcall	.+1950   	; 0x353e <WIZCHIP_READ>
    2da0:	28 2e       	mov	r2, r24
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	7c 01       	movw	r14, r24
    2da8:	03 2c       	mov	r0, r3
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <recv+0x90>
    2dac:	ee 0c       	add	r14, r14
    2dae:	ff 1c       	adc	r15, r15
    2db0:	0a 94       	dec	r0
    2db2:	e2 f7       	brpl	.-8      	; 0x2dac <recv+0x8c>
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
         tmp = getSn_SR(sn);
    2db4:	48 01       	movw	r8, r16
    2db6:	2d ef       	ldi	r18, 0xFD	; 253
    2db8:	92 1a       	sub	r9, r18
    2dba:	09 2c       	mov	r0, r9
    2dbc:	00 0c       	add	r0, r0
    2dbe:	aa 08       	sbc	r10, r10
    2dc0:	bb 08       	sbc	r11, r11
         if (tmp != SOCK_ESTABLISHED)
         {
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    2dc2:	28 01       	movw	r4, r16
    2dc4:	31 ee       	ldi	r19, 0xE1	; 225
    2dc6:	53 1a       	sub	r5, r19
    2dc8:	05 2c       	mov	r0, r5
    2dca:	00 0c       	add	r0, r0
    2dcc:	66 08       	sbc	r6, r6
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
    2dce:	77 08       	sbc	r7, r7
    2dd0:	83 2d       	mov	r24, r3
    2dd2:	f8 d5       	rcall	.+3056   	; 0x39c4 <getSn_RX_RSR>
    2dd4:	9c 83       	std	Y+4, r25	; 0x04
         tmp = getSn_SR(sn);
    2dd6:	8b 83       	std	Y+3, r24	; 0x03
    2dd8:	c5 01       	movw	r24, r10
    2dda:	b4 01       	movw	r22, r8
    2ddc:	b0 d3       	rcall	.+1888   	; 0x353e <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
    2dde:	87 31       	cpi	r24, 0x17	; 23
    2de0:	31 f1       	breq	.+76     	; 0x2e2e <recv+0x10e>
         {
            if(tmp == SOCK_CLOSE_WAIT)
    2de2:	8c 31       	cpi	r24, 0x1C	; 28
    2de4:	e9 f4       	brne	.+58     	; 0x2e20 <recv+0x100>
            {
               if(recvsize != 0) break;
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	89 2b       	or	r24, r25
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    2dec:	91 f5       	brne	.+100    	; 0x2e52 <recv+0x132>
    2dee:	83 2d       	mov	r24, r3
    2df0:	95 d5       	rcall	.+2858   	; 0x391c <getSn_TX_FSR>
    2df2:	9c 83       	std	Y+4, r25	; 0x04
    2df4:	8b 83       	std	Y+3, r24	; 0x03
    2df6:	c3 01       	movw	r24, r6
    2df8:	b2 01       	movw	r22, r4
    2dfa:	a1 d3       	rcall	.+1858   	; 0x353e <WIZCHIP_READ>
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	98 2f       	mov	r25, r24
    2e00:	88 27       	eor	r24, r24
    2e02:	99 0f       	add	r25, r25
    2e04:	99 0f       	add	r25, r25
    2e06:	2b 81       	ldd	r18, Y+3	; 0x03
    2e08:	3c 81       	ldd	r19, Y+4	; 0x04
    2e0a:	28 17       	cp	r18, r24
    2e0c:	39 07       	cpc	r19, r25
    2e0e:	09 f0       	breq	.+2      	; 0x2e12 <recv+0xf2>
               {
                  close(sn);
    2e10:	5e c0       	rjmp	.+188    	; 0x2ece <recv+0x1ae>
    2e12:	83 2d       	mov	r24, r3
                  return SOCKERR_SOCKSTATUS;
    2e14:	44 db       	rcall	.-2424   	; 0x249e <close>
    2e16:	69 ef       	ldi	r22, 0xF9	; 249
    2e18:	7f ef       	ldi	r23, 0xFF	; 255
    2e1a:	8f ef       	ldi	r24, 0xFF	; 255
    2e1c:	9f ef       	ldi	r25, 0xFF	; 255
               }
            }
            else
            {
               close(sn);
    2e1e:	61 c0       	rjmp	.+194    	; 0x2ee2 <recv+0x1c2>
    2e20:	83 2d       	mov	r24, r3
    2e22:	3d db       	rcall	.-2438   	; 0x249e <close>
               return SOCKERR_SOCKSTATUS;
    2e24:	69 ef       	ldi	r22, 0xF9	; 249
    2e26:	7f ef       	ldi	r23, 0xFF	; 255
    2e28:	8f ef       	ldi	r24, 0xFF	; 255
    2e2a:	9f ef       	ldi	r25, 0xFF	; 255
    2e2c:	5a c0       	rjmp	.+180    	; 0x2ee2 <recv+0x1c2>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    2e2e:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <sock_io_mode>
    2e32:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <sock_io_mode+0x1>
    2e36:	8e 21       	and	r24, r14
    2e38:	9f 21       	and	r25, r15
    2e3a:	89 2b       	or	r24, r25
    2e3c:	29 f0       	breq	.+10     	; 0x2e48 <recv+0x128>
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	9c 81       	ldd	r25, Y+4	; 0x04
    2e42:	89 2b       	or	r24, r25
    2e44:	31 f4       	brne	.+12     	; 0x2e52 <recv+0x132>
    2e46:	3b c0       	rjmp	.+118    	; 0x2ebe <recv+0x19e>
         if(recvsize != 0) break;
    2e48:	2b 81       	ldd	r18, Y+3	; 0x03
    2e4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e4c:	23 2b       	or	r18, r19
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <recv+0x132>
    2e50:	bf cf       	rjmp	.-130    	; 0x2dd0 <recv+0xb0>
//
   CHECK_SOCKNUM();
   CHECK_SOCKMODE(Sn_MR_TCP);
   CHECK_SOCKDATA();
   
   recvsize = getSn_RxMAX(sn);
    2e52:	82 2d       	mov	r24, r2
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	98 2f       	mov	r25, r24
    2e58:	88 27       	eor	r24, r24
    2e5a:	99 0f       	add	r25, r25
    2e5c:	99 0f       	add	r25, r25
    2e5e:	8c 15       	cp	r24, r12
    2e60:	9d 05       	cpc	r25, r13
    2e62:	08 f4       	brcc	.+2      	; 0x2e66 <recv+0x146>
    2e64:	6c 01       	movw	r12, r24
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6a:	8c 15       	cp	r24, r12
    2e6c:	9d 05       	cpc	r25, r13
    2e6e:	08 f4       	brcc	.+2      	; 0x2e72 <recv+0x152>
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
   wiz_recv_data(sn, buf, len);
    2e70:	6c 01       	movw	r12, r24
    2e72:	a6 01       	movw	r20, r12
    2e74:	69 81       	ldd	r22, Y+1	; 0x01
    2e76:	7a 81       	ldd	r23, Y+2	; 0x02
    2e78:	83 2d       	mov	r24, r3
    2e7a:	7f d6       	rcall	.+3326   	; 0x3b7a <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
    2e7c:	48 01       	movw	r8, r16
    2e7e:	93 94       	inc	r9
    2e80:	09 2c       	mov	r0, r9
    2e82:	00 0c       	add	r0, r0
    2e84:	aa 08       	sbc	r10, r10
    2e86:	bb 08       	sbc	r11, r11
    2e88:	40 e4       	ldi	r20, 0x40	; 64
    2e8a:	c5 01       	movw	r24, r10
    2e8c:	b4 01       	movw	r22, r8
   while(getSn_CR(sn));
    2e8e:	be d3       	rcall	.+1916   	; 0x360c <WIZCHIP_WRITE>
    2e90:	c5 01       	movw	r24, r10
    2e92:	b4 01       	movw	r22, r8
    2e94:	54 d3       	rcall	.+1704   	; 0x353e <WIZCHIP_READ>
    2e96:	81 11       	cpse	r24, r1
    2e98:	fb cf       	rjmp	.-10     	; 0x2e90 <recv+0x170>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    2e9a:	b6 01       	movw	r22, r12
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	20 c0       	rjmp	.+64     	; 0x2ee2 <recv+0x1c2>
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
    2ea2:	6f ef       	ldi	r22, 0xFF	; 255
    2ea4:	7f ef       	ldi	r23, 0xFF	; 255
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	1c c0       	rjmp	.+56     	; 0x2ee2 <recv+0x1c2>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2eaa:	6b ef       	ldi	r22, 0xFB	; 251
    2eac:	7f ef       	ldi	r23, 0xFF	; 255
    2eae:	8f ef       	ldi	r24, 0xFF	; 255
    2eb0:	9f ef       	ldi	r25, 0xFF	; 255
    2eb2:	17 c0       	rjmp	.+46     	; 0x2ee2 <recv+0x1c2>
   CHECK_SOCKDATA();
    2eb4:	62 ef       	ldi	r22, 0xF2	; 242
    2eb6:	7f ef       	ldi	r23, 0xFF	; 255
    2eb8:	8f ef       	ldi	r24, 0xFF	; 255
    2eba:	9f ef       	ldi	r25, 0xFF	; 255
    2ebc:	12 c0       	rjmp	.+36     	; 0x2ee2 <recv+0x1c2>
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    2ebe:	60 e0       	ldi	r22, 0x00	; 0
    2ec0:	70 e0       	ldi	r23, 0x00	; 0
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	0e c0       	rjmp	.+28     	; 0x2ee2 <recv+0x1c2>
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	70 e0       	ldi	r23, 0x00	; 0
    2eca:	cb 01       	movw	r24, r22
    2ecc:	0a c0       	rjmp	.+20     	; 0x2ee2 <recv+0x1c2>
    2ece:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <sock_io_mode>
    2ed2:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <sock_io_mode+0x1>
    2ed6:	8e 21       	and	r24, r14
    2ed8:	9f 21       	and	r25, r15
    2eda:	89 2b       	or	r24, r25
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <recv+0x1c0>
    2ede:	78 cf       	rjmp	.-272    	; 0x2dd0 <recv+0xb0>
    2ee0:	f2 cf       	rjmp	.-28     	; 0x2ec6 <recv+0x1a6>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	1f 91       	pop	r17
    2ef0:	0f 91       	pop	r16
    2ef2:	ff 90       	pop	r15
    2ef4:	ef 90       	pop	r14
    2ef6:	df 90       	pop	r13
    2ef8:	cf 90       	pop	r12
    2efa:	bf 90       	pop	r11
    2efc:	af 90       	pop	r10
    2efe:	9f 90       	pop	r9
    2f00:	8f 90       	pop	r8
    2f02:	7f 90       	pop	r7
    2f04:	6f 90       	pop	r6
    2f06:	5f 90       	pop	r5
    2f08:	4f 90       	pop	r4
    2f0a:	3f 90       	pop	r3
    2f0c:	2f 90       	pop	r2
    2f0e:	08 95       	ret

00002f10 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
    2f10:	4f 92       	push	r4
    2f12:	5f 92       	push	r5
    2f14:	7f 92       	push	r7
    2f16:	8f 92       	push	r8
    2f18:	9f 92       	push	r9
    2f1a:	af 92       	push	r10
    2f1c:	bf 92       	push	r11
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    2f2e:	89 30       	cpi	r24, 0x09	; 9
    2f30:	08 f0       	brcs	.+2      	; 0x2f34 <sendto+0x24>
    2f32:	e2 c0       	rjmp	.+452    	; 0x30f8 <sendto+0x1e8>
    2f34:	69 01       	movw	r12, r18
    2f36:	7a 01       	movw	r14, r20
    2f38:	2b 01       	movw	r4, r22
    2f3a:	78 2e       	mov	r7, r24
   switch(getSn_MR(sn) & 0x0F)
    2f3c:	c8 2f       	mov	r28, r24
    2f3e:	d0 e0       	ldi	r29, 0x00	; 0
    2f40:	cc 0f       	add	r28, r28
    2f42:	dd 1f       	adc	r29, r29
    2f44:	cc 0f       	add	r28, r28
    2f46:	dd 1f       	adc	r29, r29
    2f48:	21 96       	adiw	r28, 0x01	; 1
    2f4a:	cc 0f       	add	r28, r28
    2f4c:	dd 1f       	adc	r29, r29
    2f4e:	cc 0f       	add	r28, r28
    2f50:	dd 1f       	adc	r29, r29
    2f52:	cc 0f       	add	r28, r28
    2f54:	dd 1f       	adc	r29, r29
    2f56:	4e 01       	movw	r8, r28
    2f58:	0d 2e       	mov	r0, r29
    2f5a:	00 0c       	add	r0, r0
    2f5c:	aa 08       	sbc	r10, r10
    2f5e:	bb 08       	sbc	r11, r11
    2f60:	c5 01       	movw	r24, r10
    2f62:	b4 01       	movw	r22, r8
    2f64:	ec d2       	rcall	.+1496   	; 0x353e <WIZCHIP_READ>
    2f66:	8f 70       	andi	r24, 0x0F	; 15
    2f68:	82 50       	subi	r24, 0x02	; 2
    2f6a:	83 30       	cpi	r24, 0x03	; 3
    2f6c:	08 f0       	brcs	.+2      	; 0x2f70 <sendto+0x60>
    2f6e:	c8 c0       	rjmp	.+400    	; 0x3100 <sendto+0x1f0>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    2f70:	e1 14       	cp	r14, r1
    2f72:	f1 04       	cpc	r15, r1
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <sendto+0x68>
    2f76:	c9 c0       	rjmp	.+402    	; 0x310a <sendto+0x1fa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
    2f78:	f6 01       	movw	r30, r12
    2f7a:	80 81       	ld	r24, Z
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	a0 e0       	ldi	r26, 0x00	; 0
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	ba 2f       	mov	r27, r26
    2f84:	a9 2f       	mov	r26, r25
    2f86:	98 2f       	mov	r25, r24
    2f88:	88 27       	eor	r24, r24
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
    2f8a:	21 81       	ldd	r18, Z+1	; 0x01
    2f8c:	82 0f       	add	r24, r18
    2f8e:	91 1d       	adc	r25, r1
    2f90:	a1 1d       	adc	r26, r1
    2f92:	b1 1d       	adc	r27, r1
    2f94:	ba 2f       	mov	r27, r26
    2f96:	a9 2f       	mov	r26, r25
    2f98:	98 2f       	mov	r25, r24
    2f9a:	88 27       	eor	r24, r24
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
    2f9c:	22 81       	ldd	r18, Z+2	; 0x02
    2f9e:	82 0f       	add	r24, r18
    2fa0:	91 1d       	adc	r25, r1
    2fa2:	a1 1d       	adc	r26, r1
    2fa4:	b1 1d       	adc	r27, r1
    2fa6:	ba 2f       	mov	r27, r26
    2fa8:	a9 2f       	mov	r26, r25
    2faa:	98 2f       	mov	r25, r24
    2fac:	88 27       	eor	r24, r24
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    2fae:	23 81       	ldd	r18, Z+3	; 0x03
    2fb0:	82 0f       	add	r24, r18
    2fb2:	91 1d       	adc	r25, r1
    2fb4:	a1 1d       	adc	r26, r1
    2fb6:	b1 1d       	adc	r27, r1
    2fb8:	89 2b       	or	r24, r25
    2fba:	8a 2b       	or	r24, r26
    2fbc:	8b 2b       	or	r24, r27
    2fbe:	29 f4       	brne	.+10     	; 0x2fca <sendto+0xba>
    2fc0:	c5 01       	movw	r24, r10
    2fc2:	b4 01       	movw	r22, r8
    2fc4:	bc d2       	rcall	.+1400   	; 0x353e <WIZCHIP_READ>
    2fc6:	82 ff       	sbrs	r24, 2
    2fc8:	a5 c0       	rjmp	.+330    	; 0x3114 <sendto+0x204>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    2fca:	01 15       	cp	r16, r1
    2fcc:	11 05       	cpc	r17, r1
    2fce:	29 f4       	brne	.+10     	; 0x2fda <sendto+0xca>
    2fd0:	c5 01       	movw	r24, r10
    2fd2:	b4 01       	movw	r22, r8
    2fd4:	b4 d2       	rcall	.+1384   	; 0x353e <WIZCHIP_READ>
    2fd6:	82 ff       	sbrs	r24, 2
    2fd8:	a2 c0       	rjmp	.+324    	; 0x311e <sendto+0x20e>
   tmp = getSn_SR(sn);
    2fda:	4e 01       	movw	r8, r28
    2fdc:	fd ef       	ldi	r31, 0xFD	; 253
    2fde:	9f 1a       	sub	r9, r31
    2fe0:	09 2c       	mov	r0, r9
    2fe2:	00 0c       	add	r0, r0
    2fe4:	aa 08       	sbc	r10, r10
    2fe6:	bb 08       	sbc	r11, r11
    2fe8:	c5 01       	movw	r24, r10
    2fea:	b4 01       	movw	r22, r8
    2fec:	a8 d2       	rcall	.+1360   	; 0x353e <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    2fee:	82 34       	cpi	r24, 0x42	; 66
    2ff0:	21 f0       	breq	.+8      	; 0x2ffa <sendto+0xea>
    2ff2:	8f 7e       	andi	r24, 0xEF	; 239
    2ff4:	82 32       	cpi	r24, 0x22	; 34
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <sendto+0xea>
    2ff8:	97 c0       	rjmp	.+302    	; 0x3128 <sendto+0x218>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
    2ffa:	be 01       	movw	r22, r28
    2ffc:	74 5f       	subi	r23, 0xF4	; 244
    2ffe:	07 2e       	mov	r0, r23
    3000:	00 0c       	add	r0, r0
    3002:	88 0b       	sbc	r24, r24
    3004:	99 0b       	sbc	r25, r25
    3006:	24 e0       	ldi	r18, 0x04	; 4
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	a6 01       	movw	r20, r12
    300c:	f9 d3       	rcall	.+2034   	; 0x3800 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
    300e:	be 01       	movw	r22, r28
    3010:	70 5f       	subi	r23, 0xF0	; 240
    3012:	07 2e       	mov	r0, r23
    3014:	00 0c       	add	r0, r0
    3016:	88 0b       	sbc	r24, r24
    3018:	99 0b       	sbc	r25, r25
    301a:	41 2f       	mov	r20, r17
    301c:	f7 d2       	rcall	.+1518   	; 0x360c <WIZCHIP_WRITE>
    301e:	be 01       	movw	r22, r28
    3020:	7f 5e       	subi	r23, 0xEF	; 239
    3022:	07 2e       	mov	r0, r23
    3024:	00 0c       	add	r0, r0
    3026:	88 0b       	sbc	r24, r24
    3028:	99 0b       	sbc	r25, r25
    302a:	40 2f       	mov	r20, r16
    302c:	ef d2       	rcall	.+1502   	; 0x360c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
    302e:	be 01       	movw	r22, r28
    3030:	71 5e       	subi	r23, 0xE1	; 225
    3032:	07 2e       	mov	r0, r23
    3034:	00 0c       	add	r0, r0
    3036:	88 0b       	sbc	r24, r24
    3038:	99 0b       	sbc	r25, r25
    303a:	81 d2       	rcall	.+1282   	; 0x353e <WIZCHIP_READ>
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	98 2f       	mov	r25, r24
    3040:	88 27       	eor	r24, r24
    3042:	99 0f       	add	r25, r25
    3044:	99 0f       	add	r25, r25
    3046:	8e 15       	cp	r24, r14
    3048:	9f 05       	cpc	r25, r15
    304a:	08 f4       	brcc	.+2      	; 0x304e <sendto+0x13e>
    304c:	7c 01       	movw	r14, r24
    304e:	81 e0       	ldi	r24, 0x01	; 1
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	6c 01       	movw	r12, r24
    3054:	07 2c       	mov	r0, r7
    3056:	02 c0       	rjmp	.+4      	; 0x305c <sendto+0x14c>
    3058:	cc 0c       	add	r12, r12
    305a:	dd 1c       	adc	r13, r13
    305c:	0a 94       	dec	r0
   setSn_DPORT(sn,port);      
   freesize = getSn_TxMAX(sn);
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
    305e:	e2 f7       	brpl	.-8      	; 0x3058 <sendto+0x148>
    3060:	87 2d       	mov	r24, r7
    3062:	5c d4       	rcall	.+2232   	; 0x391c <getSn_TX_FSR>
    3064:	8c 01       	movw	r16, r24
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    3066:	c5 01       	movw	r24, r10
    3068:	b4 01       	movw	r22, r8
    306a:	69 d2       	rcall	.+1234   	; 0x353e <WIZCHIP_READ>
    306c:	88 23       	and	r24, r24
    306e:	09 f4       	brne	.+2      	; 0x3072 <sendto+0x162>
    3070:	60 c0       	rjmp	.+192    	; 0x3132 <sendto+0x222>
    3072:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <sock_io_mode>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    3076:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <sock_io_mode+0x1>
    307a:	8c 21       	and	r24, r12
    307c:	9d 21       	and	r25, r13
    307e:	89 2b       	or	r24, r25
    3080:	21 f0       	breq	.+8      	; 0x308a <sendto+0x17a>
    3082:	0e 15       	cp	r16, r14
    3084:	1f 05       	cpc	r17, r15
    3086:	20 f4       	brcc	.+8      	; 0x3090 <sendto+0x180>
    3088:	59 c0       	rjmp	.+178    	; 0x313c <sendto+0x22c>
      if(len <= freesize) break;
    308a:	0e 15       	cp	r16, r14
    308c:	1f 05       	cpc	r17, r15
    308e:	40 f3       	brcs	.-48     	; 0x3060 <sendto+0x150>
   };
	wiz_send_data(sn, buf, len);
    3090:	a7 01       	movw	r20, r14
    3092:	b2 01       	movw	r22, r4
    3094:	87 2d       	mov	r24, r7
    3096:	ea d4       	rcall	.+2516   	; 0x3a6c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
    3098:	4e 01       	movw	r8, r28
    309a:	93 94       	inc	r9
    309c:	09 2c       	mov	r0, r9
    309e:	00 0c       	add	r0, r0
    30a0:	aa 08       	sbc	r10, r10
    30a2:	bb 08       	sbc	r11, r11
    30a4:	40 e2       	ldi	r20, 0x20	; 32
    30a6:	c5 01       	movw	r24, r10
    30a8:	b4 01       	movw	r22, r8
    30aa:	b0 d2       	rcall	.+1376   	; 0x360c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
    30ac:	c5 01       	movw	r24, r10
    30ae:	b4 01       	movw	r22, r8
    30b0:	46 d2       	rcall	.+1164   	; 0x353e <WIZCHIP_READ>
    30b2:	81 11       	cpse	r24, r1
    30b4:	fb cf       	rjmp	.-10     	; 0x30ac <sendto+0x19c>
   while(1)
   {
      tmp = getSn_IR(sn);
    30b6:	de 5f       	subi	r29, 0xFE	; 254
    30b8:	4e 01       	movw	r8, r28
    30ba:	dd 0f       	add	r29, r29
    30bc:	aa 08       	sbc	r10, r10
    30be:	bb 08       	sbc	r11, r11
    30c0:	c5 01       	movw	r24, r10
    30c2:	b4 01       	movw	r22, r8
    30c4:	3c d2       	rcall	.+1144   	; 0x353e <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    30c6:	84 ff       	sbrs	r24, 4
    30c8:	0a c0       	rjmp	.+20     	; 0x30de <sendto+0x1ce>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
    30ca:	40 e1       	ldi	r20, 0x10	; 16
    30cc:	68 2d       	mov	r22, r8
    30ce:	79 2d       	mov	r23, r9
    30d0:	8a 2d       	mov	r24, r10
    30d2:	9b 2d       	mov	r25, r11
    30d4:	9b d2       	rcall	.+1334   	; 0x360c <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    30d6:	b7 01       	movw	r22, r14
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	32 c0       	rjmp	.+100    	; 0x3142 <sendto+0x232>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
    30de:	83 ff       	sbrs	r24, 3
    30e0:	ef cf       	rjmp	.-34     	; 0x30c0 <sendto+0x1b0>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
    30e2:	48 e0       	ldi	r20, 0x08	; 8
    30e4:	68 2d       	mov	r22, r8
    30e6:	79 2d       	mov	r23, r9
    30e8:	8a 2d       	mov	r24, r10
    30ea:	9b 2d       	mov	r25, r11
    30ec:	8f d2       	rcall	.+1310   	; 0x360c <WIZCHIP_WRITE>
    30ee:	63 ef       	ldi	r22, 0xF3	; 243
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
    30f0:	7f ef       	ldi	r23, 0xFF	; 255
    30f2:	8f ef       	ldi	r24, 0xFF	; 255
    30f4:	9f ef       	ldi	r25, 0xFF	; 255
    30f6:	25 c0       	rjmp	.+74     	; 0x3142 <sendto+0x232>
    30f8:	6f ef       	ldi	r22, 0xFF	; 255
{
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    30fa:	7f ef       	ldi	r23, 0xFF	; 255
    30fc:	cb 01       	movw	r24, r22
    30fe:	21 c0       	rjmp	.+66     	; 0x3142 <sendto+0x232>
    3100:	6b ef       	ldi	r22, 0xFB	; 251
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
    3102:	7f ef       	ldi	r23, 0xFF	; 255
    3104:	8f ef       	ldi	r24, 0xFF	; 255
    3106:	9f ef       	ldi	r25, 0xFF	; 255
    3108:	1c c0       	rjmp	.+56     	; 0x3142 <sendto+0x232>
    310a:	62 ef       	ldi	r22, 0xF2	; 242
   }
   CHECK_SOCKDATA();
    310c:	7f ef       	ldi	r23, 0xFF	; 255
    310e:	8f ef       	ldi	r24, 0xFF	; 255
    3110:	9f ef       	ldi	r25, 0xFF	; 255
    3112:	17 c0       	rjmp	.+46     	; 0x3142 <sendto+0x232>
    3114:	64 ef       	ldi	r22, 0xF4	; 244
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    3116:	7f ef       	ldi	r23, 0xFF	; 255
    3118:	8f ef       	ldi	r24, 0xFF	; 255
    311a:	9f ef       	ldi	r25, 0xFF	; 255
    311c:	12 c0       	rjmp	.+36     	; 0x3142 <sendto+0x232>
    311e:	65 ef       	ldi	r22, 0xF5	; 245
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    3120:	7f ef       	ldi	r23, 0xFF	; 255
    3122:	8f ef       	ldi	r24, 0xFF	; 255
    3124:	9f ef       	ldi	r25, 0xFF	; 255
    3126:	0d c0       	rjmp	.+26     	; 0x3142 <sendto+0x232>
    3128:	69 ef       	ldi	r22, 0xF9	; 249
   tmp = getSn_SR(sn);
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    312a:	7f ef       	ldi	r23, 0xFF	; 255
    312c:	8f ef       	ldi	r24, 0xFF	; 255
    312e:	9f ef       	ldi	r25, 0xFF	; 255
    3130:	08 c0       	rjmp	.+16     	; 0x3142 <sendto+0x232>
    3132:	6c ef       	ldi	r22, 0xFC	; 252
   freesize = getSn_TxMAX(sn);
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    3134:	7f ef       	ldi	r23, 0xFF	; 255
    3136:	8f ef       	ldi	r24, 0xFF	; 255
    3138:	9f ef       	ldi	r25, 0xFF	; 255
    313a:	03 c0       	rjmp	.+6      	; 0x3142 <sendto+0x232>
    313c:	60 e0       	ldi	r22, 0x00	; 0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    313e:	70 e0       	ldi	r23, 0x00	; 0
    3140:	cb 01       	movw	r24, r22
    3142:	df 91       	pop	r29
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    3144:	cf 91       	pop	r28
    3146:	1f 91       	pop	r17
    3148:	0f 91       	pop	r16
    314a:	ff 90       	pop	r15
    314c:	ef 90       	pop	r14
    314e:	df 90       	pop	r13
    3150:	cf 90       	pop	r12
    3152:	bf 90       	pop	r11
    3154:	af 90       	pop	r10
    3156:	9f 90       	pop	r9
    3158:	8f 90       	pop	r8
    315a:	7f 90       	pop	r7
    315c:	5f 90       	pop	r5
    315e:	4f 90       	pop	r4
    3160:	08 95       	ret

00003162 <recvfrom>:
    3162:	2f 92       	push	r2



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
    3164:	3f 92       	push	r3
    3166:	4f 92       	push	r4
    3168:	5f 92       	push	r5
    316a:	6f 92       	push	r6
    316c:	7f 92       	push	r7
    316e:	8f 92       	push	r8
    3170:	9f 92       	push	r9
    3172:	af 92       	push	r10
    3174:	bf 92       	push	r11
    3176:	cf 92       	push	r12
    3178:	df 92       	push	r13
    317a:	ef 92       	push	r14
    317c:	ff 92       	push	r15
    317e:	0f 93       	push	r16
    3180:	1f 93       	push	r17
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	2e 97       	sbiw	r28, 0x0e	; 14
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    3196:	89 30       	cpi	r24, 0x09	; 9
    3198:	08 f0       	brcs	.+2      	; 0x319c <recvfrom+0x3a>
    319a:	95 c1       	rjmp	.+810    	; 0x34c6 <recvfrom+0x364>
    319c:	1e 87       	std	Y+14, r17	; 0x0e
    319e:	0d 87       	std	Y+13, r16	; 0x0d
    31a0:	3a 87       	std	Y+10, r19	; 0x0a
    31a2:	29 87       	std	Y+9, r18	; 0x09
    31a4:	4a 01       	movw	r8, r20
    31a6:	7c 87       	std	Y+12, r23	; 0x0c
    31a8:	6b 87       	std	Y+11, r22	; 0x0b
    31aa:	38 2e       	mov	r3, r24
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
    31ac:	a8 2e       	mov	r10, r24
    31ae:	b1 2c       	mov	r11, r1
    31b0:	75 01       	movw	r14, r10
    31b2:	ee 0c       	add	r14, r14
    31b4:	ff 1c       	adc	r15, r15
    31b6:	ee 0c       	add	r14, r14
    31b8:	ff 1c       	adc	r15, r15
    31ba:	2f ef       	ldi	r18, 0xFF	; 255
    31bc:	e2 1a       	sub	r14, r18
    31be:	f2 0a       	sbc	r15, r18
    31c0:	ee 0c       	add	r14, r14
    31c2:	ff 1c       	adc	r15, r15
    31c4:	ee 0c       	add	r14, r14
    31c6:	ff 1c       	adc	r15, r15
    31c8:	ee 0c       	add	r14, r14
    31ca:	ff 1c       	adc	r15, r15
    31cc:	b7 01       	movw	r22, r14
    31ce:	0f 2c       	mov	r0, r15
    31d0:	00 0c       	add	r0, r0
    31d2:	88 0b       	sbc	r24, r24
    31d4:	99 0b       	sbc	r25, r25
    31d6:	b3 d1       	rcall	.+870    	; 0x353e <WIZCHIP_READ>
    31d8:	28 2e       	mov	r2, r24
    31da:	8f 70       	andi	r24, 0x0F	; 15
    31dc:	82 50       	subi	r24, 0x02	; 2
    31de:	83 30       	cpi	r24, 0x03	; 3
    31e0:	08 f0       	brcs	.+2      	; 0x31e4 <recvfrom+0x82>
    31e2:	75 c1       	rjmp	.+746    	; 0x34ce <recvfrom+0x36c>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    31e4:	81 14       	cp	r8, r1
    31e6:	91 04       	cpc	r9, r1
    31e8:	09 f4       	brne	.+2      	; 0x31ec <recvfrom+0x8a>
    31ea:	76 c1       	rjmp	.+748    	; 0x34d8 <recvfrom+0x376>
   if(sock_remained_size[sn] == 0)
    31ec:	f5 01       	movw	r30, r10
    31ee:	ee 0f       	add	r30, r30
    31f0:	ff 1f       	adc	r31, r31
    31f2:	e3 52       	subi	r30, 0x23	; 35
    31f4:	fb 4f       	sbci	r31, 0xFB	; 251
    31f6:	80 81       	ld	r24, Z
    31f8:	91 81       	ldd	r25, Z+1	; 0x01
    31fa:	89 2b       	or	r24, r25
    31fc:	09 f0       	breq	.+2      	; 0x3200 <recvfrom+0x9e>
    31fe:	7a c1       	rjmp	.+756    	; 0x34f4 <recvfrom+0x392>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	6c 01       	movw	r12, r24
    3206:	03 2c       	mov	r0, r3
    3208:	02 c0       	rjmp	.+4      	; 0x320e <recvfrom+0xac>
    320a:	cc 0c       	add	r12, r12
    320c:	dd 1c       	adc	r13, r13
    320e:	0a 94       	dec	r0
    3210:	e2 f7       	brpl	.-8      	; 0x320a <recvfrom+0xa8>
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    3212:	27 01       	movw	r4, r14
    3214:	8d ef       	ldi	r24, 0xFD	; 253
    3216:	58 1a       	sub	r5, r24
    3218:	05 2c       	mov	r0, r5
    321a:	00 0c       	add	r0, r0
    321c:	66 08       	sbc	r6, r6
    321e:	77 08       	sbc	r7, r7
   CHECK_SOCKDATA();
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
    3220:	83 2d       	mov	r24, r3
    3222:	d0 d3       	rcall	.+1952   	; 0x39c4 <getSn_RX_RSR>
    3224:	8c 01       	movw	r16, r24
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    3226:	c3 01       	movw	r24, r6
    3228:	b2 01       	movw	r22, r4
    322a:	89 d1       	rcall	.+786    	; 0x353e <WIZCHIP_READ>
    322c:	88 23       	and	r24, r24
    322e:	09 f4       	brne	.+2      	; 0x3232 <recvfrom+0xd0>
    3230:	58 c1       	rjmp	.+688    	; 0x34e2 <recvfrom+0x380>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    3232:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <sock_io_mode>
    3236:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <sock_io_mode+0x1>
    323a:	8c 21       	and	r24, r12
    323c:	9d 21       	and	r25, r13
    323e:	89 2b       	or	r24, r25
    3240:	21 f0       	breq	.+8      	; 0x324a <recvfrom+0xe8>
    3242:	01 15       	cp	r16, r1
    3244:	11 05       	cpc	r17, r1
    3246:	21 f4       	brne	.+8      	; 0x3250 <recvfrom+0xee>
    3248:	51 c1       	rjmp	.+674    	; 0x34ec <recvfrom+0x38a>
         if(pack_len != 0) break;
    324a:	01 15       	cp	r16, r1
    324c:	11 05       	cpc	r17, r1
    324e:	41 f3       	breq	.-48     	; 0x3220 <recvfrom+0xbe>
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    3250:	82 2d       	mov	r24, r2
    3252:	87 70       	andi	r24, 0x07	; 7
    3254:	83 30       	cpi	r24, 0x03	; 3
    3256:	09 f4       	brne	.+2      	; 0x325a <recvfrom+0xf8>
    3258:	b1 c0       	rjmp	.+354    	; 0x33bc <recvfrom+0x25a>
    325a:	84 30       	cpi	r24, 0x04	; 4
    325c:	09 f4       	brne	.+2      	; 0x3260 <recvfrom+0xfe>
    325e:	5d c0       	rjmp	.+186    	; 0x331a <recvfrom+0x1b8>
    3260:	82 30       	cpi	r24, 0x02	; 2
    3262:	09 f0       	breq	.+2      	; 0x3266 <recvfrom+0x104>
    3264:	fb c0       	rjmp	.+502    	; 0x345c <recvfrom+0x2fa>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
    3266:	f5 01       	movw	r30, r10
    3268:	ee 0f       	add	r30, r30
    326a:	ff 1f       	adc	r31, r31
    326c:	e3 52       	subi	r30, 0x23	; 35
    326e:	fb 4f       	sbci	r31, 0xFB	; 251
    3270:	80 81       	ld	r24, Z
    3272:	91 81       	ldd	r25, Z+1	; 0x01
    3274:	89 2b       	or	r24, r25
    3276:	09 f0       	breq	.+2      	; 0x327a <recvfrom+0x118>
    3278:	3e c0       	rjmp	.+124    	; 0x32f6 <recvfrom+0x194>
	      {
   			wiz_recv_data(sn, head, 8);
    327a:	48 e0       	ldi	r20, 0x08	; 8
    327c:	50 e0       	ldi	r21, 0x00	; 0
    327e:	be 01       	movw	r22, r28
    3280:	6f 5f       	subi	r22, 0xFF	; 255
    3282:	7f 4f       	sbci	r23, 0xFF	; 255
    3284:	83 2d       	mov	r24, r3
    3286:	79 d4       	rcall	.+2290   	; 0x3b7a <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    3288:	27 01       	movw	r4, r14
    328a:	53 94       	inc	r5
    328c:	05 2c       	mov	r0, r5
    328e:	00 0c       	add	r0, r0
    3290:	66 08       	sbc	r6, r6
    3292:	77 08       	sbc	r7, r7
    3294:	40 e4       	ldi	r20, 0x40	; 64
    3296:	c3 01       	movw	r24, r6
    3298:	b2 01       	movw	r22, r4
   			while(getSn_CR(sn));
    329a:	b8 d1       	rcall	.+880    	; 0x360c <WIZCHIP_WRITE>
    329c:	c3 01       	movw	r24, r6
    329e:	b2 01       	movw	r22, r4
    32a0:	4e d1       	rcall	.+668    	; 0x353e <WIZCHIP_READ>
    32a2:	81 11       	cpse	r24, r1
    32a4:	fb cf       	rjmp	.-10     	; 0x329c <recvfrom+0x13a>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	e9 85       	ldd	r30, Y+9	; 0x09
    32aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    32ac:	80 83       	st	Z, r24
      			addr[1] = head[1];
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	81 83       	std	Z+1, r24	; 0x01
      			addr[2] = head[2];
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	82 83       	std	Z+2, r24	; 0x02
      			addr[3] = head[3];
    32b6:	8c 81       	ldd	r24, Y+4	; 0x04
    32b8:	83 83       	std	Z+3, r24	; 0x03
      			*port = head[4];
      			*port = (*port << 8) + head[5];
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	98 2f       	mov	r25, r24
    32c0:	88 27       	eor	r24, r24
    32c2:	2e 81       	ldd	r18, Y+6	; 0x06
    32c4:	82 0f       	add	r24, r18
    32c6:	91 1d       	adc	r25, r1
    32c8:	ed 85       	ldd	r30, Y+13	; 0x0d
    32ca:	fe 85       	ldd	r31, Y+14	; 0x0e
    32cc:	91 83       	std	Z+1, r25	; 0x01
    32ce:	80 83       	st	Z, r24
      			sock_remained_size[sn] = head[6];
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
    32d0:	f5 01       	movw	r30, r10
    32d2:	ee 0f       	add	r30, r30
    32d4:	ff 1f       	adc	r31, r31
    32d6:	e3 52       	subi	r30, 0x23	; 35
    32d8:	fb 4f       	sbci	r31, 0xFB	; 251
    32da:	8f 81       	ldd	r24, Y+7	; 0x07
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	98 2f       	mov	r25, r24
    32e0:	88 27       	eor	r24, r24
    32e2:	28 85       	ldd	r18, Y+8	; 0x08
    32e4:	82 0f       	add	r24, r18
    32e6:	91 1d       	adc	r25, r1
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	80 83       	st	Z, r24
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
    32ec:	80 e8       	ldi	r24, 0x80	; 128
    32ee:	f5 01       	movw	r30, r10
    32f0:	eb 52       	subi	r30, 0x2B	; 43
    32f2:	fb 4f       	sbci	r31, 0xFB	; 251
    32f4:	80 83       	st	Z, r24
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    32f6:	f5 01       	movw	r30, r10
    32f8:	ee 0f       	add	r30, r30
    32fa:	ff 1f       	adc	r31, r31
    32fc:	e3 52       	subi	r30, 0x23	; 35
    32fe:	fb 4f       	sbci	r31, 0xFB	; 251
    3300:	80 81       	ld	r24, Z
    3302:	91 81       	ldd	r25, Z+1	; 0x01
    3304:	84 01       	movw	r16, r8
    3306:	88 15       	cp	r24, r8
    3308:	99 05       	cpc	r25, r9
    330a:	08 f4       	brcc	.+2      	; 0x330e <recvfrom+0x1ac>
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    330c:	8c 01       	movw	r16, r24
    330e:	a8 01       	movw	r20, r16
    3310:	6b 85       	ldd	r22, Y+11	; 0x0b
    3312:	7c 85       	ldd	r23, Y+12	; 0x0c
    3314:	83 2d       	mov	r24, r3
    3316:	31 d4       	rcall	.+2146   	; 0x3b7a <wiz_recv_data>
			break;
    3318:	ab c0       	rjmp	.+342    	; 0x3470 <recvfrom+0x30e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
    331a:	f5 01       	movw	r30, r10
    331c:	ee 0f       	add	r30, r30
    331e:	ff 1f       	adc	r31, r31
    3320:	e3 52       	subi	r30, 0x23	; 35
    3322:	fb 4f       	sbci	r31, 0xFB	; 251
    3324:	80 81       	ld	r24, Z
    3326:	91 81       	ldd	r25, Z+1	; 0x01
    3328:	89 2b       	or	r24, r25
	      {
   			wiz_recv_data(sn, head, 2);
    332a:	b1 f5       	brne	.+108    	; 0x3398 <recvfrom+0x236>
    332c:	42 e0       	ldi	r20, 0x02	; 2
    332e:	50 e0       	ldi	r21, 0x00	; 0
    3330:	be 01       	movw	r22, r28
    3332:	6f 5f       	subi	r22, 0xFF	; 255
    3334:	7f 4f       	sbci	r23, 0xFF	; 255
    3336:	83 2d       	mov	r24, r3
    3338:	20 d4       	rcall	.+2112   	; 0x3b7a <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    333a:	27 01       	movw	r4, r14
    333c:	53 94       	inc	r5
    333e:	05 2c       	mov	r0, r5
    3340:	00 0c       	add	r0, r0
    3342:	66 08       	sbc	r6, r6
    3344:	77 08       	sbc	r7, r7
    3346:	40 e4       	ldi	r20, 0x40	; 64
    3348:	c3 01       	movw	r24, r6
    334a:	b2 01       	movw	r22, r4
   			while(getSn_CR(sn));
    334c:	5f d1       	rcall	.+702    	; 0x360c <WIZCHIP_WRITE>
    334e:	c3 01       	movw	r24, r6
    3350:	b2 01       	movw	r22, r4
    3352:	f5 d0       	rcall	.+490    	; 0x353e <WIZCHIP_READ>
    3354:	81 11       	cpse	r24, r1
    3356:	fb cf       	rjmp	.-10     	; 0x334e <recvfrom+0x1ec>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	38 2f       	mov	r19, r24
    335e:	22 27       	eor	r18, r18
    3360:	9a 81       	ldd	r25, Y+2	; 0x02
    3362:	89 2f       	mov	r24, r25
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	02 97       	sbiw	r24, 0x02	; 2
    3368:	82 0f       	add	r24, r18
    336a:	93 1f       	adc	r25, r19
    336c:	f5 01       	movw	r30, r10
    336e:	ee 0f       	add	r30, r30
    3370:	ff 1f       	adc	r31, r31
    3372:	e3 52       	subi	r30, 0x23	; 35
    3374:	fb 4f       	sbci	r31, 0xFB	; 251
    3376:	91 83       	std	Z+1, r25	; 0x01
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
    3378:	80 83       	st	Z, r24
    337a:	8b 3e       	cpi	r24, 0xEB	; 235
    337c:	95 40       	sbci	r25, 0x05	; 5
   			{
   			   close(sn);
    337e:	38 f0       	brcs	.+14     	; 0x338e <recvfrom+0x22c>
    3380:	83 2d       	mov	r24, r3
    3382:	8d d8       	rcall	.-3814   	; 0x249e <close>
   			   return SOCKFATAL_PACKLEN;
    3384:	67 e1       	ldi	r22, 0x17	; 23
    3386:	7c ef       	ldi	r23, 0xFC	; 252
    3388:	8f ef       	ldi	r24, 0xFF	; 255
    338a:	9f ef       	ldi	r25, 0xFF	; 255
    338c:	bf c0       	rjmp	.+382    	; 0x350c <recvfrom+0x3aa>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
    338e:	80 e8       	ldi	r24, 0x80	; 128
    3390:	f5 01       	movw	r30, r10
    3392:	eb 52       	subi	r30, 0x2B	; 43
    3394:	fb 4f       	sbci	r31, 0xFB	; 251
    3396:	80 83       	st	Z, r24
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
    3398:	f5 01       	movw	r30, r10
    339a:	ee 0f       	add	r30, r30
    339c:	ff 1f       	adc	r31, r31
    339e:	e3 52       	subi	r30, 0x23	; 35
    33a0:	fb 4f       	sbci	r31, 0xFB	; 251
    33a2:	80 81       	ld	r24, Z
    33a4:	91 81       	ldd	r25, Z+1	; 0x01
    33a6:	84 01       	movw	r16, r8
    33a8:	88 15       	cp	r24, r8
    33aa:	99 05       	cpc	r25, r9
    33ac:	08 f4       	brcc	.+2      	; 0x33b0 <recvfrom+0x24e>
			else pack_len = sock_remained_size[sn];
			wiz_recv_data(sn,buf,pack_len);
    33ae:	8c 01       	movw	r16, r24
    33b0:	a8 01       	movw	r20, r16
    33b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b6:	83 2d       	mov	r24, r3
    33b8:	e0 d3       	rcall	.+1984   	; 0x3b7a <wiz_recv_data>
		   break;
    33ba:	5a c0       	rjmp	.+180    	; 0x3470 <recvfrom+0x30e>
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
    33bc:	f5 01       	movw	r30, r10
    33be:	ee 0f       	add	r30, r30
    33c0:	ff 1f       	adc	r31, r31
    33c2:	e3 52       	subi	r30, 0x23	; 35
    33c4:	fb 4f       	sbci	r31, 0xFB	; 251
    33c6:	80 81       	ld	r24, Z
    33c8:	91 81       	ldd	r25, Z+1	; 0x01
    33ca:	89 2b       	or	r24, r25
		   {
   			wiz_recv_data(sn, head, 6);
    33cc:	99 f5       	brne	.+102    	; 0x3434 <recvfrom+0x2d2>
    33ce:	46 e0       	ldi	r20, 0x06	; 6
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	be 01       	movw	r22, r28
    33d4:	6f 5f       	subi	r22, 0xFF	; 255
    33d6:	7f 4f       	sbci	r23, 0xFF	; 255
    33d8:	83 2d       	mov	r24, r3
   			setSn_CR(sn,Sn_CR_RECV);
    33da:	cf d3       	rcall	.+1950   	; 0x3b7a <wiz_recv_data>
    33dc:	27 01       	movw	r4, r14
    33de:	53 94       	inc	r5
    33e0:	05 2c       	mov	r0, r5
    33e2:	00 0c       	add	r0, r0
    33e4:	66 08       	sbc	r6, r6
    33e6:	77 08       	sbc	r7, r7
    33e8:	40 e4       	ldi	r20, 0x40	; 64
    33ea:	c3 01       	movw	r24, r6
    33ec:	b2 01       	movw	r22, r4
   			while(getSn_CR(sn));
    33ee:	0e d1       	rcall	.+540    	; 0x360c <WIZCHIP_WRITE>
    33f0:	c3 01       	movw	r24, r6
    33f2:	b2 01       	movw	r22, r4
    33f4:	a4 d0       	rcall	.+328    	; 0x353e <WIZCHIP_READ>
    33f6:	81 11       	cpse	r24, r1
    33f8:	fb cf       	rjmp	.-10     	; 0x33f0 <recvfrom+0x28e>
   			addr[0] = head[0];
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	e9 85       	ldd	r30, Y+9	; 0x09
    33fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    3400:	80 83       	st	Z, r24
   			addr[1] = head[1];
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	81 83       	std	Z+1, r24	; 0x01
   			addr[2] = head[2];
    3406:	8b 81       	ldd	r24, Y+3	; 0x03
    3408:	82 83       	std	Z+2, r24	; 0x02
   			addr[3] = head[3];
    340a:	8c 81       	ldd	r24, Y+4	; 0x04
    340c:	83 83       	std	Z+3, r24	; 0x03
   			sock_remained_size[sn] = head[4];
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
    340e:	f5 01       	movw	r30, r10
    3410:	ee 0f       	add	r30, r30
    3412:	ff 1f       	adc	r31, r31
    3414:	e3 52       	subi	r30, 0x23	; 35
    3416:	fb 4f       	sbci	r31, 0xFB	; 251
    3418:	8d 81       	ldd	r24, Y+5	; 0x05
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	98 2f       	mov	r25, r24
    341e:	88 27       	eor	r24, r24
    3420:	2e 81       	ldd	r18, Y+6	; 0x06
    3422:	82 0f       	add	r24, r18
    3424:	91 1d       	adc	r25, r1
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	80 83       	st	Z, r24
   			sock_pack_info[sn] = PACK_FIRST;
    342a:	80 e8       	ldi	r24, 0x80	; 128
    342c:	f5 01       	movw	r30, r10
    342e:	eb 52       	subi	r30, 0x2B	; 43
    3430:	fb 4f       	sbci	r31, 0xFB	; 251
    3432:	80 83       	st	Z, r24
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
    3434:	f5 01       	movw	r30, r10
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	e3 52       	subi	r30, 0x23	; 35
    343c:	fb 4f       	sbci	r31, 0xFB	; 251
    343e:	80 81       	ld	r24, Z
    3440:	91 81       	ldd	r25, Z+1	; 0x01
    3442:	84 01       	movw	r16, r8
    3444:	88 15       	cp	r24, r8
    3446:	99 05       	cpc	r25, r9
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    3448:	08 f4       	brcc	.+2      	; 0x344c <recvfrom+0x2ea>
    344a:	8c 01       	movw	r16, r24
    344c:	a8 01       	movw	r20, r16
    344e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3450:	7c 85       	ldd	r23, Y+12	; 0x0c
    3452:	83 2d       	mov	r24, r3
			break;
    3454:	92 d3       	rcall	.+1828   	; 0x3b7a <wiz_recv_data>
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
    3456:	0c c0       	rjmp	.+24     	; 0x3470 <recvfrom+0x30e>
    3458:	00 e0       	ldi	r16, 0x00	; 0
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
    345a:	10 e0       	ldi	r17, 0x00	; 0
    345c:	b8 01       	movw	r22, r16
    345e:	83 2d       	mov	r24, r3
    3460:	13 d4       	rcall	.+2086   	; 0x3c88 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
    3462:	f5 01       	movw	r30, r10
    3464:	ee 0f       	add	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	e3 52       	subi	r30, 0x23	; 35
    346a:	fb 4f       	sbci	r31, 0xFB	; 251
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
    346c:	11 83       	std	Z+1, r17	; 0x01
    346e:	00 83       	st	Z, r16
    3470:	67 01       	movw	r12, r14
    3472:	d3 94       	inc	r13
    3474:	0d 2c       	mov	r0, r13
    3476:	00 0c       	add	r0, r0
    3478:	ee 08       	sbc	r14, r14
    347a:	ff 08       	sbc	r15, r15
    347c:	40 e4       	ldi	r20, 0x40	; 64
    347e:	c7 01       	movw	r24, r14
    3480:	b6 01       	movw	r22, r12
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
    3482:	c4 d0       	rcall	.+392    	; 0x360c <WIZCHIP_WRITE>
    3484:	c7 01       	movw	r24, r14
    3486:	b6 01       	movw	r22, r12
    3488:	5a d0       	rcall	.+180    	; 0x353e <WIZCHIP_READ>
    348a:	81 11       	cpse	r24, r1
    348c:	fb cf       	rjmp	.-10     	; 0x3484 <recvfrom+0x322>
	sock_remained_size[sn] -= pack_len;
    348e:	f5 01       	movw	r30, r10
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	e3 52       	subi	r30, 0x23	; 35
    3496:	fb 4f       	sbci	r31, 0xFB	; 251
    3498:	80 81       	ld	r24, Z
    349a:	91 81       	ldd	r25, Z+1	; 0x01
    349c:	80 1b       	sub	r24, r16
    349e:	91 0b       	sbc	r25, r17
    34a0:	91 83       	std	Z+1, r25	; 0x01
    34a2:	80 83       	st	Z, r24
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
    34a4:	89 2b       	or	r24, r25
    34a6:	39 f0       	breq	.+14     	; 0x34b6 <recvfrom+0x354>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
    34a8:	f5 01       	movw	r30, r10
    34aa:	eb 52       	subi	r30, 0x2B	; 43
    34ac:	fb 4f       	sbci	r31, 0xFB	; 251
    34ae:	80 81       	ld	r24, Z
    34b0:	81 60       	ori	r24, 0x01	; 1
    34b2:	80 83       	st	Z, r24
    34b4:	04 c0       	rjmp	.+8      	; 0x34be <recvfrom+0x35c>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
    34b6:	f5 01       	movw	r30, r10
    34b8:	eb 52       	subi	r30, 0x2B	; 43
    34ba:	fb 4f       	sbci	r31, 0xFB	; 251
    34bc:	10 82       	st	Z, r1
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
    34be:	b8 01       	movw	r22, r16
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	23 c0       	rjmp	.+70     	; 0x350c <recvfrom+0x3aa>
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    34c6:	6f ef       	ldi	r22, 0xFF	; 255
    34c8:	7f ef       	ldi	r23, 0xFF	; 255
    34ca:	cb 01       	movw	r24, r22
    34cc:	1f c0       	rjmp	.+62     	; 0x350c <recvfrom+0x3aa>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
    34ce:	6b ef       	ldi	r22, 0xFB	; 251
    34d0:	7f ef       	ldi	r23, 0xFF	; 255
    34d2:	8f ef       	ldi	r24, 0xFF	; 255
    34d4:	9f ef       	ldi	r25, 0xFF	; 255
    34d6:	1a c0       	rjmp	.+52     	; 0x350c <recvfrom+0x3aa>
   }
   CHECK_SOCKDATA();
    34d8:	62 ef       	ldi	r22, 0xF2	; 242
    34da:	7f ef       	ldi	r23, 0xFF	; 255
    34dc:	8f ef       	ldi	r24, 0xFF	; 255
    34de:	9f ef       	ldi	r25, 0xFF	; 255
    34e0:	15 c0       	rjmp	.+42     	; 0x350c <recvfrom+0x3aa>
   if(sock_remained_size[sn] == 0)
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    34e2:	6c ef       	ldi	r22, 0xFC	; 252
    34e4:	7f ef       	ldi	r23, 0xFF	; 255
    34e6:	8f ef       	ldi	r24, 0xFF	; 255
    34e8:	9f ef       	ldi	r25, 0xFF	; 255
    34ea:	10 c0       	rjmp	.+32     	; 0x350c <recvfrom+0x3aa>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    34ec:	60 e0       	ldi	r22, 0x00	; 0
    34ee:	70 e0       	ldi	r23, 0x00	; 0
    34f0:	cb 01       	movw	r24, r22
    34f2:	0c c0       	rjmp	.+24     	; 0x350c <recvfrom+0x3aa>
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    34f4:	82 2d       	mov	r24, r2
    34f6:	87 70       	andi	r24, 0x07	; 7
    34f8:	83 30       	cpi	r24, 0x03	; 3
    34fa:	09 f4       	brne	.+2      	; 0x34fe <recvfrom+0x39c>
    34fc:	5f cf       	rjmp	.-322    	; 0x33bc <recvfrom+0x25a>
    34fe:	84 30       	cpi	r24, 0x04	; 4
    3500:	09 f4       	brne	.+2      	; 0x3504 <recvfrom+0x3a2>
    3502:	0b cf       	rjmp	.-490    	; 0x331a <recvfrom+0x1b8>
    3504:	82 30       	cpi	r24, 0x02	; 2
    3506:	09 f0       	breq	.+2      	; 0x350a <recvfrom+0x3a8>
    3508:	a7 cf       	rjmp	.-178    	; 0x3458 <recvfrom+0x2f6>
    350a:	f5 ce       	rjmp	.-534    	; 0x32f6 <recvfrom+0x194>
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
    350c:	2e 96       	adiw	r28, 0x0e	; 14
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	df 91       	pop	r29
    351a:	cf 91       	pop	r28
    351c:	1f 91       	pop	r17
    351e:	0f 91       	pop	r16
    3520:	ff 90       	pop	r15
    3522:	ef 90       	pop	r14
    3524:	df 90       	pop	r13
    3526:	cf 90       	pop	r12
    3528:	bf 90       	pop	r11
    352a:	af 90       	pop	r10
    352c:	9f 90       	pop	r9
    352e:	8f 90       	pop	r8
    3530:	7f 90       	pop	r7
    3532:	6f 90       	pop	r6
    3534:	5f 90       	pop	r5
    3536:	4f 90       	pop	r4
    3538:	3f 90       	pop	r3
    353a:	2f 90       	pop	r2
    353c:	08 95       	ret

0000353e <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    353e:	df 92       	push	r13
    3540:	ef 92       	push	r14
    3542:	ff 92       	push	r15
    3544:	0f 93       	push	r16
    3546:	1f 93       	push	r17
    3548:	cf 93       	push	r28
    354a:	df 93       	push	r29
    354c:	00 d0       	rcall	.+0      	; 0x354e <WIZCHIP_READ+0x10>
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
    3552:	f6 2e       	mov	r15, r22
    3554:	e7 2e       	mov	r14, r23
    3556:	d8 2e       	mov	r13, r24
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    3558:	05 e4       	ldi	r16, 0x45	; 69
    355a:	12 e0       	ldi	r17, 0x02	; 2
    355c:	d8 01       	movw	r26, r16
    355e:	18 96       	adiw	r26, 0x08	; 8
    3560:	ed 91       	ld	r30, X+
    3562:	fc 91       	ld	r31, X
    3564:	19 97       	sbiw	r26, 0x09	; 9
    3566:	19 95       	eicall
   WIZCHIP.CS._select();
    3568:	d8 01       	movw	r26, r16
    356a:	1c 96       	adiw	r26, 0x0c	; 12
    356c:	ed 91       	ld	r30, X+
    356e:	fc 91       	ld	r31, X
    3570:	1d 97       	sbiw	r26, 0x0d	; 13
    3572:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    3574:	f8 01       	movw	r30, r16
    3576:	84 89       	ldd	r24, Z+20	; 0x14
    3578:	95 89       	ldd	r25, Z+21	; 0x15
    357a:	89 2b       	or	r24, r25
    357c:	31 f0       	breq	.+12     	; 0x358a <WIZCHIP_READ+0x4c>
    357e:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <WIZCHIP+0x16>
    3582:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <WIZCHIP+0x17>
    3586:	30 97       	sbiw	r30, 0x00	; 0
    3588:	c1 f4       	brne	.+48     	; 0x35ba <WIZCHIP_READ+0x7c>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    358a:	05 e4       	ldi	r16, 0x45	; 69
    358c:	12 e0       	ldi	r17, 0x02	; 2
    358e:	d8 01       	movw	r26, r16
    3590:	52 96       	adiw	r26, 0x12	; 18
    3592:	ed 91       	ld	r30, X+
    3594:	fc 91       	ld	r31, X
    3596:	53 97       	sbiw	r26, 0x13	; 19
    3598:	8d 2d       	mov	r24, r13
    359a:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    359c:	d8 01       	movw	r26, r16
    359e:	52 96       	adiw	r26, 0x12	; 18
    35a0:	ed 91       	ld	r30, X+
    35a2:	fc 91       	ld	r31, X
    35a4:	53 97       	sbiw	r26, 0x13	; 19
    35a6:	8e 2d       	mov	r24, r14
    35a8:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    35aa:	d8 01       	movw	r26, r16
    35ac:	52 96       	adiw	r26, 0x12	; 18
    35ae:	ed 91       	ld	r30, X+
    35b0:	fc 91       	ld	r31, X
    35b2:	53 97       	sbiw	r26, 0x13	; 19
    35b4:	8f 2d       	mov	r24, r15
    35b6:	19 95       	eicall
    35b8:	08 c0       	rjmp	.+16     	; 0x35ca <WIZCHIP_READ+0x8c>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    35ba:	d9 82       	std	Y+1, r13	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    35bc:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    35be:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    35c0:	63 e0       	ldi	r22, 0x03	; 3
    35c2:	70 e0       	ldi	r23, 0x00	; 0
    35c4:	ce 01       	movw	r24, r28
    35c6:	01 96       	adiw	r24, 0x01	; 1
    35c8:	19 95       	eicall
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    35ca:	05 e4       	ldi	r16, 0x45	; 69
    35cc:	12 e0       	ldi	r17, 0x02	; 2
    35ce:	d8 01       	movw	r26, r16
    35d0:	50 96       	adiw	r26, 0x10	; 16
    35d2:	ed 91       	ld	r30, X+
    35d4:	fc 91       	ld	r31, X
    35d6:	51 97       	sbiw	r26, 0x11	; 17
    35d8:	19 95       	eicall
    35da:	f8 2e       	mov	r15, r24

   WIZCHIP.CS._deselect();
    35dc:	d8 01       	movw	r26, r16
    35de:	1e 96       	adiw	r26, 0x0e	; 14
    35e0:	ed 91       	ld	r30, X+
    35e2:	fc 91       	ld	r31, X
    35e4:	1f 97       	sbiw	r26, 0x0f	; 15
    35e6:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    35e8:	d8 01       	movw	r26, r16
    35ea:	1a 96       	adiw	r26, 0x0a	; 10
    35ec:	ed 91       	ld	r30, X+
    35ee:	fc 91       	ld	r31, X
    35f0:	1b 97       	sbiw	r26, 0x0b	; 11
    35f2:	19 95       	eicall
   return ret;
}
    35f4:	8f 2d       	mov	r24, r15
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	1f 91       	pop	r17
    3602:	0f 91       	pop	r16
    3604:	ff 90       	pop	r15
    3606:	ef 90       	pop	r14
    3608:	df 90       	pop	r13
    360a:	08 95       	ret

0000360c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    360c:	4f 92       	push	r4
    360e:	5f 92       	push	r5
    3610:	6f 92       	push	r6
    3612:	7f 92       	push	r7
    3614:	bf 92       	push	r11
    3616:	cf 92       	push	r12
    3618:	df 92       	push	r13
    361a:	ef 92       	push	r14
    361c:	ff 92       	push	r15
    361e:	0f 93       	push	r16
    3620:	1f 93       	push	r17
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29
    3626:	00 d0       	rcall	.+0      	; 0x3628 <WIZCHIP_WRITE+0x1c>
    3628:	1f 92       	push	r1
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	6b 01       	movw	r12, r22
    3630:	7c 01       	movw	r14, r24
    3632:	b4 2e       	mov	r11, r20
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    3634:	05 e4       	ldi	r16, 0x45	; 69
    3636:	12 e0       	ldi	r17, 0x02	; 2
    3638:	d8 01       	movw	r26, r16
    363a:	18 96       	adiw	r26, 0x08	; 8
    363c:	ed 91       	ld	r30, X+
    363e:	fc 91       	ld	r31, X
    3640:	19 97       	sbiw	r26, 0x09	; 9
    3642:	19 95       	eicall
   WIZCHIP.CS._select();
    3644:	d8 01       	movw	r26, r16
    3646:	1c 96       	adiw	r26, 0x0c	; 12
    3648:	ed 91       	ld	r30, X+
    364a:	fc 91       	ld	r31, X
    364c:	1d 97       	sbiw	r26, 0x0d	; 13
    364e:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    3650:	26 01       	movw	r4, r12
    3652:	37 01       	movw	r6, r14
    3654:	68 94       	set
    3656:	42 f8       	bld	r4, 2

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    3658:	d8 01       	movw	r26, r16
    365a:	56 96       	adiw	r26, 0x16	; 22
    365c:	ed 91       	ld	r30, X+
    365e:	fc 91       	ld	r31, X
    3660:	57 97       	sbiw	r26, 0x17	; 23
    3662:	30 97       	sbiw	r30, 0x00	; 0
    3664:	e1 f4       	brne	.+56     	; 0x369e <WIZCHIP_WRITE+0x92>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    3666:	52 96       	adiw	r26, 0x12	; 18
    3668:	ed 91       	ld	r30, X+
    366a:	fc 91       	ld	r31, X
    366c:	53 97       	sbiw	r26, 0x13	; 19
    366e:	8e 2d       	mov	r24, r14
    3670:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    3672:	d8 01       	movw	r26, r16
    3674:	52 96       	adiw	r26, 0x12	; 18
    3676:	ed 91       	ld	r30, X+
    3678:	fc 91       	ld	r31, X
    367a:	53 97       	sbiw	r26, 0x13	; 19
    367c:	8d 2d       	mov	r24, r13
    367e:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    3680:	d8 01       	movw	r26, r16
    3682:	52 96       	adiw	r26, 0x12	; 18
    3684:	ed 91       	ld	r30, X+
    3686:	fc 91       	ld	r31, X
    3688:	53 97       	sbiw	r26, 0x13	; 19
    368a:	84 2d       	mov	r24, r4
    368c:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte(wb);
    368e:	d8 01       	movw	r26, r16
    3690:	52 96       	adiw	r26, 0x12	; 18
    3692:	ed 91       	ld	r30, X+
    3694:	fc 91       	ld	r31, X
    3696:	53 97       	sbiw	r26, 0x13	; 19
    3698:	8b 2d       	mov	r24, r11
    369a:	19 95       	eicall
    369c:	09 c0       	rjmp	.+18     	; 0x36b0 <WIZCHIP_WRITE+0xa4>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    369e:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    36a0:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    36a2:	4b 82       	std	Y+3, r4	; 0x03
		spi_data[3] = wb;
    36a4:	bc 82       	std	Y+4, r11	; 0x04
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    36a6:	64 e0       	ldi	r22, 0x04	; 4
    36a8:	70 e0       	ldi	r23, 0x00	; 0
    36aa:	ce 01       	movw	r24, r28
    36ac:	01 96       	adiw	r24, 0x01	; 1
    36ae:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    36b0:	05 e4       	ldi	r16, 0x45	; 69
    36b2:	12 e0       	ldi	r17, 0x02	; 2
    36b4:	d8 01       	movw	r26, r16
    36b6:	1e 96       	adiw	r26, 0x0e	; 14
    36b8:	ed 91       	ld	r30, X+
    36ba:	fc 91       	ld	r31, X
    36bc:	1f 97       	sbiw	r26, 0x0f	; 15
    36be:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    36c0:	d8 01       	movw	r26, r16
    36c2:	1a 96       	adiw	r26, 0x0a	; 10
    36c4:	ed 91       	ld	r30, X+
    36c6:	fc 91       	ld	r31, X
    36c8:	1b 97       	sbiw	r26, 0x0b	; 11
    36ca:	19 95       	eicall
}
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	ff 90       	pop	r15
    36de:	ef 90       	pop	r14
    36e0:	df 90       	pop	r13
    36e2:	cf 90       	pop	r12
    36e4:	bf 90       	pop	r11
    36e6:	7f 90       	pop	r7
    36e8:	6f 90       	pop	r6
    36ea:	5f 90       	pop	r5
    36ec:	4f 90       	pop	r4
    36ee:	08 95       	ret

000036f0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    36f0:	9f 92       	push	r9
    36f2:	af 92       	push	r10
    36f4:	bf 92       	push	r11
    36f6:	cf 92       	push	r12
    36f8:	df 92       	push	r13
    36fa:	ef 92       	push	r14
    36fc:	ff 92       	push	r15
    36fe:	0f 93       	push	r16
    3700:	1f 93       	push	r17
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	00 d0       	rcall	.+0      	; 0x3708 <WIZCHIP_READ_BUF+0x18>
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	b6 2e       	mov	r11, r22
    370e:	a7 2e       	mov	r10, r23
    3710:	98 2e       	mov	r9, r24
    3712:	7a 01       	movw	r14, r20
    3714:	69 01       	movw	r12, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    3716:	05 e4       	ldi	r16, 0x45	; 69
    3718:	12 e0       	ldi	r17, 0x02	; 2
    371a:	d8 01       	movw	r26, r16
    371c:	18 96       	adiw	r26, 0x08	; 8
    371e:	ed 91       	ld	r30, X+
    3720:	fc 91       	ld	r31, X
    3722:	19 97       	sbiw	r26, 0x09	; 9
    3724:	19 95       	eicall
   WIZCHIP.CS._select();
    3726:	d8 01       	movw	r26, r16
    3728:	1c 96       	adiw	r26, 0x0c	; 12
    372a:	ed 91       	ld	r30, X+
    372c:	fc 91       	ld	r31, X
    372e:	1d 97       	sbiw	r26, 0x0d	; 13
    3730:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    3732:	f8 01       	movw	r30, r16
    3734:	84 89       	ldd	r24, Z+20	; 0x14
    3736:	95 89       	ldd	r25, Z+21	; 0x15
    3738:	89 2b       	or	r24, r25
    373a:	31 f0       	breq	.+12     	; 0x3748 <WIZCHIP_READ_BUF+0x58>
    373c:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <WIZCHIP+0x16>
    3740:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <WIZCHIP+0x17>
    3744:	30 97       	sbiw	r30, 0x00	; 0
    3746:	81 f5       	brne	.+96     	; 0x37a8 <WIZCHIP_READ_BUF+0xb8>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    3748:	05 e4       	ldi	r16, 0x45	; 69
    374a:	12 e0       	ldi	r17, 0x02	; 2
    374c:	d8 01       	movw	r26, r16
    374e:	52 96       	adiw	r26, 0x12	; 18
    3750:	ed 91       	ld	r30, X+
    3752:	fc 91       	ld	r31, X
    3754:	53 97       	sbiw	r26, 0x13	; 19
    3756:	89 2d       	mov	r24, r9
    3758:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    375a:	d8 01       	movw	r26, r16
    375c:	52 96       	adiw	r26, 0x12	; 18
    375e:	ed 91       	ld	r30, X+
    3760:	fc 91       	ld	r31, X
    3762:	53 97       	sbiw	r26, 0x13	; 19
    3764:	8a 2d       	mov	r24, r10
    3766:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    3768:	d8 01       	movw	r26, r16
    376a:	52 96       	adiw	r26, 0x12	; 18
    376c:	ed 91       	ld	r30, X+
    376e:	fc 91       	ld	r31, X
    3770:	53 97       	sbiw	r26, 0x13	; 19
    3772:	8b 2d       	mov	r24, r11
    3774:	19 95       	eicall
		for(i = 0; i < len; i++)
    3776:	c1 14       	cp	r12, r1
    3778:	d1 04       	cpc	r13, r1
    377a:	29 f1       	breq	.+74     	; 0x37c6 <WIZCHIP_READ_BUF+0xd6>
    377c:	87 01       	movw	r16, r14
    377e:	ce 0c       	add	r12, r14
    3780:	df 1c       	adc	r13, r15
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    3782:	0f 2e       	mov	r0, r31
    3784:	f5 e4       	ldi	r31, 0x45	; 69
    3786:	ef 2e       	mov	r14, r31
    3788:	f2 e0       	ldi	r31, 0x02	; 2
    378a:	ff 2e       	mov	r15, r31
    378c:	f0 2d       	mov	r31, r0
    378e:	d7 01       	movw	r26, r14
    3790:	50 96       	adiw	r26, 0x10	; 16
    3792:	ed 91       	ld	r30, X+
    3794:	fc 91       	ld	r31, X
    3796:	51 97       	sbiw	r26, 0x11	; 17
    3798:	19 95       	eicall
    379a:	f8 01       	movw	r30, r16
    379c:	81 93       	st	Z+, r24
    379e:	8f 01       	movw	r16, r30
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    37a0:	ec 15       	cp	r30, r12
    37a2:	fd 05       	cpc	r31, r13
    37a4:	a1 f7       	brne	.-24     	; 0x378e <WIZCHIP_READ_BUF+0x9e>
    37a6:	0f c0       	rjmp	.+30     	; 0x37c6 <WIZCHIP_READ_BUF+0xd6>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    37a8:	99 82       	std	Y+1, r9	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    37aa:	aa 82       	std	Y+2, r10	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    37ac:	bb 82       	std	Y+3, r11	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    37ae:	63 e0       	ldi	r22, 0x03	; 3
    37b0:	70 e0       	ldi	r23, 0x00	; 0
    37b2:	ce 01       	movw	r24, r28
    37b4:	01 96       	adiw	r24, 0x01	; 1
    37b6:	19 95       	eicall
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    37b8:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <WIZCHIP+0x14>
    37bc:	f0 91 5a 02 	lds	r31, 0x025A	; 0x80025a <WIZCHIP+0x15>
    37c0:	b6 01       	movw	r22, r12
    37c2:	c7 01       	movw	r24, r14
    37c4:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    37c6:	05 e4       	ldi	r16, 0x45	; 69
    37c8:	12 e0       	ldi	r17, 0x02	; 2
    37ca:	d8 01       	movw	r26, r16
    37cc:	1e 96       	adiw	r26, 0x0e	; 14
    37ce:	ed 91       	ld	r30, X+
    37d0:	fc 91       	ld	r31, X
    37d2:	1f 97       	sbiw	r26, 0x0f	; 15
    37d4:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    37d6:	d8 01       	movw	r26, r16
    37d8:	1a 96       	adiw	r26, 0x0a	; 10
    37da:	ed 91       	ld	r30, X+
    37dc:	fc 91       	ld	r31, X
    37de:	1b 97       	sbiw	r26, 0x0b	; 11
    37e0:	19 95       	eicall
}
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	ff 90       	pop	r15
    37f2:	ef 90       	pop	r14
    37f4:	df 90       	pop	r13
    37f6:	cf 90       	pop	r12
    37f8:	bf 90       	pop	r11
    37fa:	af 90       	pop	r10
    37fc:	9f 90       	pop	r9
    37fe:	08 95       	ret

00003800 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    3800:	4f 92       	push	r4
    3802:	5f 92       	push	r5
    3804:	6f 92       	push	r6
    3806:	7f 92       	push	r7
    3808:	8f 92       	push	r8
    380a:	9f 92       	push	r9
    380c:	af 92       	push	r10
    380e:	bf 92       	push	r11
    3810:	cf 92       	push	r12
    3812:	df 92       	push	r13
    3814:	ef 92       	push	r14
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	00 d0       	rcall	.+0      	; 0x3822 <WIZCHIP_WRITE_BUF+0x22>
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	6b 01       	movw	r12, r22
    3828:	7c 01       	movw	r14, r24
    382a:	4a 01       	movw	r8, r20
    382c:	59 01       	movw	r10, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    382e:	05 e4       	ldi	r16, 0x45	; 69
    3830:	12 e0       	ldi	r17, 0x02	; 2
    3832:	d8 01       	movw	r26, r16
    3834:	18 96       	adiw	r26, 0x08	; 8
    3836:	ed 91       	ld	r30, X+
    3838:	fc 91       	ld	r31, X
    383a:	19 97       	sbiw	r26, 0x09	; 9
    383c:	19 95       	eicall
   WIZCHIP.CS._select();
    383e:	d8 01       	movw	r26, r16
    3840:	1c 96       	adiw	r26, 0x0c	; 12
    3842:	ed 91       	ld	r30, X+
    3844:	fc 91       	ld	r31, X
    3846:	1d 97       	sbiw	r26, 0x0d	; 13
    3848:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    384a:	26 01       	movw	r4, r12
    384c:	37 01       	movw	r6, r14
    384e:	68 94       	set
    3850:	42 f8       	bld	r4, 2

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    3852:	d8 01       	movw	r26, r16
    3854:	56 96       	adiw	r26, 0x16	; 22
    3856:	ed 91       	ld	r30, X+
    3858:	fc 91       	ld	r31, X
    385a:	57 97       	sbiw	r26, 0x17	; 23
    385c:	30 97       	sbiw	r30, 0x00	; 0
    385e:	69 f5       	brne	.+90     	; 0x38ba <WIZCHIP_WRITE_BUF+0xba>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    3860:	52 96       	adiw	r26, 0x12	; 18
    3862:	ed 91       	ld	r30, X+
    3864:	fc 91       	ld	r31, X
    3866:	53 97       	sbiw	r26, 0x13	; 19
    3868:	8e 2d       	mov	r24, r14
    386a:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    386c:	d8 01       	movw	r26, r16
    386e:	52 96       	adiw	r26, 0x12	; 18
    3870:	ed 91       	ld	r30, X+
    3872:	fc 91       	ld	r31, X
    3874:	53 97       	sbiw	r26, 0x13	; 19
    3876:	8d 2d       	mov	r24, r13
    3878:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    387a:	d8 01       	movw	r26, r16
    387c:	52 96       	adiw	r26, 0x12	; 18
    387e:	ed 91       	ld	r30, X+
    3880:	fc 91       	ld	r31, X
    3882:	53 97       	sbiw	r26, 0x13	; 19
    3884:	84 2d       	mov	r24, r4
    3886:	19 95       	eicall
		for(i = 0; i < len; i++)
    3888:	a1 14       	cp	r10, r1
    388a:	b1 04       	cpc	r11, r1
    388c:	29 f1       	breq	.+74     	; 0x38d8 <WIZCHIP_WRITE_BUF+0xd8>
    388e:	84 01       	movw	r16, r8
    3890:	a8 0c       	add	r10, r8
    3892:	b9 1c       	adc	r11, r9
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    3894:	0f 2e       	mov	r0, r31
    3896:	f5 e4       	ldi	r31, 0x45	; 69
    3898:	ef 2e       	mov	r14, r31
    389a:	f2 e0       	ldi	r31, 0x02	; 2
    389c:	ff 2e       	mov	r15, r31
    389e:	f0 2d       	mov	r31, r0
    38a0:	d7 01       	movw	r26, r14
    38a2:	52 96       	adiw	r26, 0x12	; 18
    38a4:	ed 91       	ld	r30, X+
    38a6:	fc 91       	ld	r31, X
    38a8:	53 97       	sbiw	r26, 0x13	; 19
    38aa:	d8 01       	movw	r26, r16
    38ac:	8d 91       	ld	r24, X+
    38ae:	8d 01       	movw	r16, r26
    38b0:	19 95       	eicall
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    38b2:	0a 15       	cp	r16, r10
    38b4:	1b 05       	cpc	r17, r11
    38b6:	a1 f7       	brne	.-24     	; 0x38a0 <WIZCHIP_WRITE_BUF+0xa0>
    38b8:	0f c0       	rjmp	.+30     	; 0x38d8 <WIZCHIP_WRITE_BUF+0xd8>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    38ba:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    38bc:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    38be:	4b 82       	std	Y+3, r4	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    38c0:	63 e0       	ldi	r22, 0x03	; 3
    38c2:	70 e0       	ldi	r23, 0x00	; 0
    38c4:	ce 01       	movw	r24, r28
    38c6:	01 96       	adiw	r24, 0x01	; 1
    38c8:	19 95       	eicall
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    38ca:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <WIZCHIP+0x16>
    38ce:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <WIZCHIP+0x17>
    38d2:	b5 01       	movw	r22, r10
    38d4:	c4 01       	movw	r24, r8
    38d6:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    38d8:	05 e4       	ldi	r16, 0x45	; 69
    38da:	12 e0       	ldi	r17, 0x02	; 2
    38dc:	d8 01       	movw	r26, r16
    38de:	1e 96       	adiw	r26, 0x0e	; 14
    38e0:	ed 91       	ld	r30, X+
    38e2:	fc 91       	ld	r31, X
    38e4:	1f 97       	sbiw	r26, 0x0f	; 15
    38e6:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    38e8:	d8 01       	movw	r26, r16
    38ea:	1a 96       	adiw	r26, 0x0a	; 10
    38ec:	ed 91       	ld	r30, X+
    38ee:	fc 91       	ld	r31, X
    38f0:	1b 97       	sbiw	r26, 0x0b	; 11
    38f2:	19 95       	eicall
}
    38f4:	0f 90       	pop	r0
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	df 91       	pop	r29
    38fc:	cf 91       	pop	r28
    38fe:	1f 91       	pop	r17
    3900:	0f 91       	pop	r16
    3902:	ff 90       	pop	r15
    3904:	ef 90       	pop	r14
    3906:	df 90       	pop	r13
    3908:	cf 90       	pop	r12
    390a:	bf 90       	pop	r11
    390c:	af 90       	pop	r10
    390e:	9f 90       	pop	r9
    3910:	8f 90       	pop	r8
    3912:	7f 90       	pop	r7
    3914:	6f 90       	pop	r6
    3916:	5f 90       	pop	r5
    3918:	4f 90       	pop	r4
    391a:	08 95       	ret

0000391c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    391c:	8f 92       	push	r8
    391e:	9f 92       	push	r9
    3920:	af 92       	push	r10
    3922:	bf 92       	push	r11
    3924:	cf 92       	push	r12
    3926:	df 92       	push	r13
    3928:	ef 92       	push	r14
    392a:	ff 92       	push	r15
    392c:	0f 93       	push	r16
    392e:	1f 93       	push	r17
    3930:	cf 93       	push	r28
    3932:	df 93       	push	r29
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    3934:	24 e0       	ldi	r18, 0x04	; 4
    3936:	82 9f       	mul	r24, r18
    3938:	c0 01       	movw	r24, r0
    393a:	11 24       	eor	r1, r1
    393c:	6c 01       	movw	r12, r24
    393e:	2f ef       	ldi	r18, 0xFF	; 255
    3940:	c2 1a       	sub	r12, r18
    3942:	d2 0a       	sbc	r13, r18
    3944:	cc 0c       	add	r12, r12
    3946:	dd 1c       	adc	r13, r13
    3948:	cc 0c       	add	r12, r12
    394a:	dd 1c       	adc	r13, r13
    394c:	cc 0c       	add	r12, r12
    394e:	dd 1c       	adc	r13, r13
    3950:	46 01       	movw	r8, r12
    3952:	80 ee       	ldi	r24, 0xE0	; 224
    3954:	98 1a       	sub	r9, r24
    3956:	09 2c       	mov	r0, r9
    3958:	00 0c       	add	r0, r0
    395a:	aa 08       	sbc	r10, r10
    395c:	bb 08       	sbc	r11, r11
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    395e:	2f ed       	ldi	r18, 0xDF	; 223
    3960:	d2 1a       	sub	r13, r18
    3962:	0d 2c       	mov	r0, r13
    3964:	00 0c       	add	r0, r0
    3966:	ee 08       	sbc	r14, r14
    3968:	ff 08       	sbc	r15, r15
}


uint16_t getSn_TX_FSR(uint8_t sn)
{
   uint16_t val=0,val1=0;
    396a:	00 e0       	ldi	r16, 0x00	; 0
    396c:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    396e:	c5 01       	movw	r24, r10
    3970:	b4 01       	movw	r22, r8
    3972:	e5 dd       	rcall	.-1078   	; 0x353e <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    3974:	c8 2f       	mov	r28, r24
    3976:	d0 e0       	ldi	r29, 0x00	; 0
    3978:	dc 2f       	mov	r29, r28
    397a:	cc 27       	eor	r28, r28
    397c:	c7 01       	movw	r24, r14
    397e:	b6 01       	movw	r22, r12
    3980:	de dd       	rcall	.-1092   	; 0x353e <WIZCHIP_READ>
    3982:	c8 0f       	add	r28, r24
    3984:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    3986:	20 97       	sbiw	r28, 0x00	; 0
    3988:	61 f0       	breq	.+24     	; 0x39a2 <getSn_TX_FSR+0x86>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    398a:	c5 01       	movw	r24, r10
    398c:	b4 01       	movw	r22, r8
    398e:	d7 dd       	rcall	.-1106   	; 0x353e <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    3990:	08 2f       	mov	r16, r24
    3992:	10 e0       	ldi	r17, 0x00	; 0
    3994:	10 2f       	mov	r17, r16
    3996:	00 27       	eor	r16, r16
    3998:	c7 01       	movw	r24, r14
    399a:	b6 01       	movw	r22, r12
    399c:	d0 dd       	rcall	.-1120   	; 0x353e <WIZCHIP_READ>
    399e:	08 0f       	add	r16, r24
    39a0:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    39a2:	0c 17       	cp	r16, r28
    39a4:	1d 07       	cpc	r17, r29
    39a6:	19 f7       	brne	.-58     	; 0x396e <getSn_TX_FSR+0x52>
   return val;
}
    39a8:	ce 01       	movw	r24, r28
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	ff 90       	pop	r15
    39b4:	ef 90       	pop	r14
    39b6:	df 90       	pop	r13
    39b8:	cf 90       	pop	r12
    39ba:	bf 90       	pop	r11
    39bc:	af 90       	pop	r10
    39be:	9f 90       	pop	r9
    39c0:	8f 90       	pop	r8
    39c2:	08 95       	ret

000039c4 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    39c4:	8f 92       	push	r8
    39c6:	9f 92       	push	r9
    39c8:	af 92       	push	r10
    39ca:	bf 92       	push	r11
    39cc:	cf 92       	push	r12
    39ce:	df 92       	push	r13
    39d0:	ef 92       	push	r14
    39d2:	ff 92       	push	r15
    39d4:	0f 93       	push	r16
    39d6:	1f 93       	push	r17
    39d8:	cf 93       	push	r28
    39da:	df 93       	push	r29
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    39dc:	24 e0       	ldi	r18, 0x04	; 4
    39de:	82 9f       	mul	r24, r18
    39e0:	c0 01       	movw	r24, r0
    39e2:	11 24       	eor	r1, r1
    39e4:	6c 01       	movw	r12, r24
    39e6:	2f ef       	ldi	r18, 0xFF	; 255
    39e8:	c2 1a       	sub	r12, r18
    39ea:	d2 0a       	sbc	r13, r18
    39ec:	cc 0c       	add	r12, r12
    39ee:	dd 1c       	adc	r13, r13
    39f0:	cc 0c       	add	r12, r12
    39f2:	dd 1c       	adc	r13, r13
    39f4:	cc 0c       	add	r12, r12
    39f6:	dd 1c       	adc	r13, r13
    39f8:	46 01       	movw	r8, r12
    39fa:	8a ed       	ldi	r24, 0xDA	; 218
    39fc:	98 1a       	sub	r9, r24
    39fe:	09 2c       	mov	r0, r9
    3a00:	00 0c       	add	r0, r0
    3a02:	aa 08       	sbc	r10, r10
    3a04:	bb 08       	sbc	r11, r11
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    3a06:	29 ed       	ldi	r18, 0xD9	; 217
    3a08:	d2 1a       	sub	r13, r18
    3a0a:	0d 2c       	mov	r0, r13
    3a0c:	00 0c       	add	r0, r0
    3a0e:	ee 08       	sbc	r14, r14
    3a10:	ff 08       	sbc	r15, r15
}


uint16_t getSn_RX_RSR(uint8_t sn)
{
   uint16_t val=0,val1=0;
    3a12:	00 e0       	ldi	r16, 0x00	; 0
    3a14:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    3a16:	c5 01       	movw	r24, r10
    3a18:	b4 01       	movw	r22, r8
    3a1a:	91 dd       	rcall	.-1246   	; 0x353e <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    3a1c:	c8 2f       	mov	r28, r24
    3a1e:	d0 e0       	ldi	r29, 0x00	; 0
    3a20:	dc 2f       	mov	r29, r28
    3a22:	cc 27       	eor	r28, r28
    3a24:	c7 01       	movw	r24, r14
    3a26:	b6 01       	movw	r22, r12
    3a28:	8a dd       	rcall	.-1260   	; 0x353e <WIZCHIP_READ>
    3a2a:	c8 0f       	add	r28, r24
    3a2c:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    3a2e:	20 97       	sbiw	r28, 0x00	; 0
    3a30:	61 f0       	breq	.+24     	; 0x3a4a <getSn_RX_RSR+0x86>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    3a32:	c5 01       	movw	r24, r10
    3a34:	b4 01       	movw	r22, r8
    3a36:	83 dd       	rcall	.-1274   	; 0x353e <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    3a38:	08 2f       	mov	r16, r24
    3a3a:	10 e0       	ldi	r17, 0x00	; 0
    3a3c:	10 2f       	mov	r17, r16
    3a3e:	00 27       	eor	r16, r16
    3a40:	c7 01       	movw	r24, r14
    3a42:	b6 01       	movw	r22, r12
    3a44:	7c dd       	rcall	.-1288   	; 0x353e <WIZCHIP_READ>
    3a46:	08 0f       	add	r16, r24
    3a48:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    3a4a:	0c 17       	cp	r16, r28
    3a4c:	1d 07       	cpc	r17, r29
    3a4e:	19 f7       	brne	.-58     	; 0x3a16 <getSn_RX_RSR+0x52>
   return val;
}
    3a50:	ce 01       	movw	r24, r28
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	1f 91       	pop	r17
    3a58:	0f 91       	pop	r16
    3a5a:	ff 90       	pop	r15
    3a5c:	ef 90       	pop	r14
    3a5e:	df 90       	pop	r13
    3a60:	cf 90       	pop	r12
    3a62:	bf 90       	pop	r11
    3a64:	af 90       	pop	r10
    3a66:	9f 90       	pop	r9
    3a68:	8f 90       	pop	r8
    3a6a:	08 95       	ret

00003a6c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    3a6c:	2f 92       	push	r2
    3a6e:	3f 92       	push	r3
    3a70:	4f 92       	push	r4
    3a72:	5f 92       	push	r5
    3a74:	6f 92       	push	r6
    3a76:	7f 92       	push	r7
    3a78:	8f 92       	push	r8
    3a7a:	9f 92       	push	r9
    3a7c:	af 92       	push	r10
    3a7e:	bf 92       	push	r11
    3a80:	cf 92       	push	r12
    3a82:	df 92       	push	r13
    3a84:	ef 92       	push	r14
    3a86:	ff 92       	push	r15
    3a88:	0f 93       	push	r16
    3a8a:	1f 93       	push	r17
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	00 d0       	rcall	.+0      	; 0x3a92 <wiz_send_data+0x26>
    3a92:	1f 92       	push	r1
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    3a98:	41 15       	cp	r20, r1
    3a9a:	51 05       	cpc	r21, r1
    3a9c:	09 f4       	brne	.+2      	; 0x3aa0 <wiz_send_data+0x34>
    3a9e:	56 c0       	rjmp	.+172    	; 0x3b4c <wiz_send_data+0xe0>
    3aa0:	1a 01       	movw	r2, r20
    3aa2:	7a 83       	std	Y+2, r23	; 0x02
    3aa4:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_TX_WR(sn);
    3aa6:	88 2e       	mov	r8, r24
    3aa8:	91 2c       	mov	r9, r1
    3aaa:	88 0c       	add	r8, r8
    3aac:	99 1c       	adc	r9, r9
    3aae:	88 0c       	add	r8, r8
    3ab0:	99 1c       	adc	r9, r9
    3ab2:	64 01       	movw	r12, r8
    3ab4:	2f ef       	ldi	r18, 0xFF	; 255
    3ab6:	c2 1a       	sub	r12, r18
    3ab8:	d2 0a       	sbc	r13, r18
    3aba:	cc 0c       	add	r12, r12
    3abc:	dd 1c       	adc	r13, r13
    3abe:	cc 0c       	add	r12, r12
    3ac0:	dd 1c       	adc	r13, r13
    3ac2:	cc 0c       	add	r12, r12
    3ac4:	dd 1c       	adc	r13, r13
    3ac6:	26 01       	movw	r4, r12
    3ac8:	3c ed       	ldi	r19, 0xDC	; 220
    3aca:	53 1a       	sub	r5, r19
    3acc:	05 2c       	mov	r0, r5
    3ace:	00 0c       	add	r0, r0
    3ad0:	66 08       	sbc	r6, r6
    3ad2:	77 08       	sbc	r7, r7
    3ad4:	c3 01       	movw	r24, r6
    3ad6:	b2 01       	movw	r22, r4
    3ad8:	32 dd       	rcall	.-1436   	; 0x353e <WIZCHIP_READ>
    3ada:	08 2f       	mov	r16, r24
    3adc:	8b ed       	ldi	r24, 0xDB	; 219
    3ade:	d8 1a       	sub	r13, r24
    3ae0:	0d 2c       	mov	r0, r13
    3ae2:	00 0c       	add	r0, r0
    3ae4:	ee 08       	sbc	r14, r14
    3ae6:	ff 08       	sbc	r15, r15
    3ae8:	c7 01       	movw	r24, r14
    3aea:	b6 01       	movw	r22, r12
    3aec:	28 dd       	rcall	.-1456   	; 0x353e <WIZCHIP_READ>
    3aee:	10 e0       	ldi	r17, 0x00	; 0
    3af0:	10 2f       	mov	r17, r16
    3af2:	00 27       	eor	r16, r16
    3af4:	08 0f       	add	r16, r24
    3af6:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    3af8:	94 01       	movw	r18, r8
    3afa:	2e 5f       	subi	r18, 0xFE	; 254
    3afc:	3f 4f       	sbci	r19, 0xFF	; 255
    3afe:	22 0f       	add	r18, r18
    3b00:	33 1f       	adc	r19, r19
    3b02:	22 0f       	add	r18, r18
    3b04:	33 1f       	adc	r19, r19
    3b06:	22 0f       	add	r18, r18
    3b08:	33 1f       	adc	r19, r19
    3b0a:	c9 01       	movw	r24, r18
    3b0c:	33 0f       	add	r19, r19
    3b0e:	aa 0b       	sbc	r26, r26
    3b10:	bb 0b       	sbc	r27, r27
    3b12:	a8 01       	movw	r20, r16
    3b14:	60 e0       	ldi	r22, 0x00	; 0
    3b16:	70 e0       	ldi	r23, 0x00	; 0
    3b18:	76 2f       	mov	r23, r22
    3b1a:	65 2f       	mov	r22, r21
    3b1c:	54 2f       	mov	r21, r20
    3b1e:	44 27       	eor	r20, r20
    3b20:	4c 01       	movw	r8, r24
    3b22:	5d 01       	movw	r10, r26
    3b24:	84 0e       	add	r8, r20
    3b26:	95 1e       	adc	r9, r21
    3b28:	a6 1e       	adc	r10, r22
    3b2a:	b7 1e       	adc	r11, r23
    3b2c:	c5 01       	movw	r24, r10
    3b2e:	b4 01       	movw	r22, r8
    3b30:	91 01       	movw	r18, r2
    3b32:	49 81       	ldd	r20, Y+1	; 0x01
    3b34:	5a 81       	ldd	r21, Y+2	; 0x02
    3b36:	64 de       	rcall	.-824    	; 0x3800 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    3b38:	02 0d       	add	r16, r2
    3b3a:	13 1d       	adc	r17, r3
   setSn_TX_WR(sn,ptr);
    3b3c:	41 2f       	mov	r20, r17
    3b3e:	c3 01       	movw	r24, r6
    3b40:	b2 01       	movw	r22, r4
    3b42:	64 dd       	rcall	.-1336   	; 0x360c <WIZCHIP_WRITE>
    3b44:	40 2f       	mov	r20, r16
    3b46:	c7 01       	movw	r24, r14
    3b48:	b6 01       	movw	r22, r12
    3b4a:	60 dd       	rcall	.-1344   	; 0x360c <WIZCHIP_WRITE>
}
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	0f 90       	pop	r0
    3b54:	df 91       	pop	r29
    3b56:	cf 91       	pop	r28
    3b58:	1f 91       	pop	r17
    3b5a:	0f 91       	pop	r16
    3b5c:	ff 90       	pop	r15
    3b5e:	ef 90       	pop	r14
    3b60:	df 90       	pop	r13
    3b62:	cf 90       	pop	r12
    3b64:	bf 90       	pop	r11
    3b66:	af 90       	pop	r10
    3b68:	9f 90       	pop	r9
    3b6a:	8f 90       	pop	r8
    3b6c:	7f 90       	pop	r7
    3b6e:	6f 90       	pop	r6
    3b70:	5f 90       	pop	r5
    3b72:	4f 90       	pop	r4
    3b74:	3f 90       	pop	r3
    3b76:	2f 90       	pop	r2
    3b78:	08 95       	ret

00003b7a <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    3b7a:	2f 92       	push	r2
    3b7c:	3f 92       	push	r3
    3b7e:	4f 92       	push	r4
    3b80:	5f 92       	push	r5
    3b82:	6f 92       	push	r6
    3b84:	7f 92       	push	r7
    3b86:	8f 92       	push	r8
    3b88:	9f 92       	push	r9
    3b8a:	af 92       	push	r10
    3b8c:	bf 92       	push	r11
    3b8e:	cf 92       	push	r12
    3b90:	df 92       	push	r13
    3b92:	ef 92       	push	r14
    3b94:	ff 92       	push	r15
    3b96:	0f 93       	push	r16
    3b98:	1f 93       	push	r17
    3b9a:	cf 93       	push	r28
    3b9c:	df 93       	push	r29
    3b9e:	00 d0       	rcall	.+0      	; 0x3ba0 <wiz_recv_data+0x26>
    3ba0:	1f 92       	push	r1
    3ba2:	cd b7       	in	r28, 0x3d	; 61
    3ba4:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    3ba6:	41 15       	cp	r20, r1
    3ba8:	51 05       	cpc	r21, r1
    3baa:	09 f4       	brne	.+2      	; 0x3bae <wiz_recv_data+0x34>
    3bac:	56 c0       	rjmp	.+172    	; 0x3c5a <wiz_recv_data+0xe0>
    3bae:	1a 01       	movw	r2, r20
    3bb0:	7a 83       	std	Y+2, r23	; 0x02
    3bb2:	69 83       	std	Y+1, r22	; 0x01
   ptr = getSn_RX_RD(sn);
    3bb4:	88 2e       	mov	r8, r24
    3bb6:	91 2c       	mov	r9, r1
    3bb8:	88 0c       	add	r8, r8
    3bba:	99 1c       	adc	r9, r9
    3bbc:	88 0c       	add	r8, r8
    3bbe:	99 1c       	adc	r9, r9
    3bc0:	64 01       	movw	r12, r8
    3bc2:	2f ef       	ldi	r18, 0xFF	; 255
    3bc4:	c2 1a       	sub	r12, r18
    3bc6:	d2 0a       	sbc	r13, r18
    3bc8:	cc 0c       	add	r12, r12
    3bca:	dd 1c       	adc	r13, r13
    3bcc:	cc 0c       	add	r12, r12
    3bce:	dd 1c       	adc	r13, r13
    3bd0:	cc 0c       	add	r12, r12
    3bd2:	dd 1c       	adc	r13, r13
    3bd4:	26 01       	movw	r4, r12
    3bd6:	38 ed       	ldi	r19, 0xD8	; 216
    3bd8:	53 1a       	sub	r5, r19
    3bda:	05 2c       	mov	r0, r5
    3bdc:	00 0c       	add	r0, r0
    3bde:	66 08       	sbc	r6, r6
    3be0:	77 08       	sbc	r7, r7
    3be2:	c3 01       	movw	r24, r6
    3be4:	b2 01       	movw	r22, r4
    3be6:	ab dc       	rcall	.-1706   	; 0x353e <WIZCHIP_READ>
    3be8:	08 2f       	mov	r16, r24
    3bea:	87 ed       	ldi	r24, 0xD7	; 215
    3bec:	d8 1a       	sub	r13, r24
    3bee:	0d 2c       	mov	r0, r13
    3bf0:	00 0c       	add	r0, r0
    3bf2:	ee 08       	sbc	r14, r14
    3bf4:	ff 08       	sbc	r15, r15
    3bf6:	c7 01       	movw	r24, r14
    3bf8:	b6 01       	movw	r22, r12
    3bfa:	a1 dc       	rcall	.-1726   	; 0x353e <WIZCHIP_READ>
    3bfc:	10 e0       	ldi	r17, 0x00	; 0
    3bfe:	10 2f       	mov	r17, r16
    3c00:	00 27       	eor	r16, r16
    3c02:	08 0f       	add	r16, r24
    3c04:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    3c06:	94 01       	movw	r18, r8
    3c08:	2d 5f       	subi	r18, 0xFD	; 253
    3c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0c:	22 0f       	add	r18, r18
    3c0e:	33 1f       	adc	r19, r19
    3c10:	22 0f       	add	r18, r18
    3c12:	33 1f       	adc	r19, r19
    3c14:	22 0f       	add	r18, r18
    3c16:	33 1f       	adc	r19, r19
    3c18:	c9 01       	movw	r24, r18
    3c1a:	33 0f       	add	r19, r19
    3c1c:	aa 0b       	sbc	r26, r26
    3c1e:	bb 0b       	sbc	r27, r27
    3c20:	a8 01       	movw	r20, r16
    3c22:	60 e0       	ldi	r22, 0x00	; 0
    3c24:	70 e0       	ldi	r23, 0x00	; 0
    3c26:	76 2f       	mov	r23, r22
    3c28:	65 2f       	mov	r22, r21
    3c2a:	54 2f       	mov	r21, r20
    3c2c:	44 27       	eor	r20, r20
    3c2e:	4c 01       	movw	r8, r24
    3c30:	5d 01       	movw	r10, r26
    3c32:	84 0e       	add	r8, r20
    3c34:	95 1e       	adc	r9, r21
    3c36:	a6 1e       	adc	r10, r22
    3c38:	b7 1e       	adc	r11, r23
    3c3a:	c5 01       	movw	r24, r10
    3c3c:	b4 01       	movw	r22, r8
    3c3e:	91 01       	movw	r18, r2
    3c40:	49 81       	ldd	r20, Y+1	; 0x01
    3c42:	5a 81       	ldd	r21, Y+2	; 0x02
    3c44:	55 dd       	rcall	.-1366   	; 0x36f0 <WIZCHIP_READ_BUF>
   ptr += len;
    3c46:	02 0d       	add	r16, r2
    3c48:	13 1d       	adc	r17, r3
   
   setSn_RX_RD(sn,ptr);
    3c4a:	41 2f       	mov	r20, r17
    3c4c:	c3 01       	movw	r24, r6
    3c4e:	b2 01       	movw	r22, r4
    3c50:	dd dc       	rcall	.-1606   	; 0x360c <WIZCHIP_WRITE>
    3c52:	40 2f       	mov	r20, r16
    3c54:	c7 01       	movw	r24, r14
    3c56:	b6 01       	movw	r22, r12
    3c58:	d9 dc       	rcall	.-1614   	; 0x360c <WIZCHIP_WRITE>
}
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	df 91       	pop	r29
    3c64:	cf 91       	pop	r28
    3c66:	1f 91       	pop	r17
    3c68:	0f 91       	pop	r16
    3c6a:	ff 90       	pop	r15
    3c6c:	ef 90       	pop	r14
    3c6e:	df 90       	pop	r13
    3c70:	cf 90       	pop	r12
    3c72:	bf 90       	pop	r11
    3c74:	af 90       	pop	r10
    3c76:	9f 90       	pop	r9
    3c78:	8f 90       	pop	r8
    3c7a:	7f 90       	pop	r7
    3c7c:	6f 90       	pop	r6
    3c7e:	5f 90       	pop	r5
    3c80:	4f 90       	pop	r4
    3c82:	3f 90       	pop	r3
    3c84:	2f 90       	pop	r2
    3c86:	08 95       	ret

00003c88 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
    3c88:	8f 92       	push	r8
    3c8a:	9f 92       	push	r9
    3c8c:	af 92       	push	r10
    3c8e:	bf 92       	push	r11
    3c90:	cf 92       	push	r12
    3c92:	df 92       	push	r13
    3c94:	ef 92       	push	r14
    3c96:	ff 92       	push	r15
    3c98:	1f 93       	push	r17
    3c9a:	cf 93       	push	r28
    3c9c:	df 93       	push	r29
    3c9e:	eb 01       	movw	r28, r22
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    3ca0:	24 e0       	ldi	r18, 0x04	; 4
    3ca2:	82 9f       	mul	r24, r18
    3ca4:	c0 01       	movw	r24, r0
    3ca6:	11 24       	eor	r1, r1
    3ca8:	6c 01       	movw	r12, r24
    3caa:	2f ef       	ldi	r18, 0xFF	; 255
    3cac:	c2 1a       	sub	r12, r18
    3cae:	d2 0a       	sbc	r13, r18
    3cb0:	cc 0c       	add	r12, r12
    3cb2:	dd 1c       	adc	r13, r13
    3cb4:	cc 0c       	add	r12, r12
    3cb6:	dd 1c       	adc	r13, r13
    3cb8:	cc 0c       	add	r12, r12
    3cba:	dd 1c       	adc	r13, r13
    3cbc:	46 01       	movw	r8, r12
    3cbe:	88 ed       	ldi	r24, 0xD8	; 216
    3cc0:	98 1a       	sub	r9, r24
    3cc2:	09 2c       	mov	r0, r9
    3cc4:	00 0c       	add	r0, r0
    3cc6:	aa 08       	sbc	r10, r10
    3cc8:	bb 08       	sbc	r11, r11
    3cca:	c5 01       	movw	r24, r10
    3ccc:	b4 01       	movw	r22, r8
    3cce:	37 dc       	rcall	.-1938   	; 0x353e <WIZCHIP_READ>
    3cd0:	18 2f       	mov	r17, r24
    3cd2:	27 ed       	ldi	r18, 0xD7	; 215
    3cd4:	d2 1a       	sub	r13, r18
    3cd6:	0d 2c       	mov	r0, r13
    3cd8:	00 0c       	add	r0, r0
    3cda:	ee 08       	sbc	r14, r14
    3cdc:	ff 08       	sbc	r15, r15
    3cde:	c7 01       	movw	r24, r14
    3ce0:	b6 01       	movw	r22, r12
    3ce2:	2d dc       	rcall	.-1958   	; 0x353e <WIZCHIP_READ>
   ptr += len;
    3ce4:	21 2f       	mov	r18, r17
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	32 2f       	mov	r19, r18
    3cea:	22 27       	eor	r18, r18
    3cec:	c8 0f       	add	r28, r24
    3cee:	d1 1d       	adc	r29, r1
    3cf0:	c2 0f       	add	r28, r18
    3cf2:	d3 1f       	adc	r29, r19
   setSn_RX_RD(sn,ptr);
    3cf4:	4d 2f       	mov	r20, r29
    3cf6:	c5 01       	movw	r24, r10
    3cf8:	b4 01       	movw	r22, r8
    3cfa:	88 dc       	rcall	.-1776   	; 0x360c <WIZCHIP_WRITE>
    3cfc:	4c 2f       	mov	r20, r28
    3cfe:	c7 01       	movw	r24, r14
    3d00:	b6 01       	movw	r22, r12
    3d02:	84 dc       	rcall	.-1784   	; 0x360c <WIZCHIP_WRITE>
}
    3d04:	df 91       	pop	r29
    3d06:	cf 91       	pop	r28
    3d08:	1f 91       	pop	r17
    3d0a:	ff 90       	pop	r15
    3d0c:	ef 90       	pop	r14
    3d0e:	df 90       	pop	r13
    3d10:	cf 90       	pop	r12
    3d12:	bf 90       	pop	r11
    3d14:	af 90       	pop	r10
    3d16:	9f 90       	pop	r9
    3d18:	8f 90       	pop	r8
    3d1a:	08 95       	ret

00003d1c <wizchip_cris_enter>:
void wizphy_getphystat(wiz_PhyConf* phyconf)
{
   uint8_t tmp = getPHYCFGR();
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}
    3d1c:	08 95       	ret

00003d1e <wizchip_cris_exit>:
    3d1e:	08 95       	ret

00003d20 <wizchip_cs_select>:
    3d20:	08 95       	ret

00003d22 <wizchip_cs_deselect>:
    3d22:	08 95       	ret

00003d24 <wizchip_bus_readdata>:
    3d24:	fb 01       	movw	r30, r22
    3d26:	80 81       	ld	r24, Z
    3d28:	08 95       	ret

00003d2a <wizchip_bus_writedata>:
    3d2a:	fb 01       	movw	r30, r22
    3d2c:	40 83       	st	Z, r20
    3d2e:	08 95       	ret

00003d30 <wizchip_spi_readbyte>:
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	08 95       	ret

00003d34 <wizchip_spi_writebyte>:
    3d34:	08 95       	ret

00003d36 <wizchip_spi_readburst>:
    3d36:	08 95       	ret

00003d38 <wizchip_spi_writeburst>:
    3d38:	08 95       	ret

00003d3a <reg_wizchip_cs_cbfunc>:
    3d3a:	00 97       	sbiw	r24, 0x00	; 0
    3d3c:	19 f0       	breq	.+6      	; 0x3d44 <reg_wizchip_cs_cbfunc+0xa>
    3d3e:	61 15       	cp	r22, r1
    3d40:	71 05       	cpc	r23, r1
    3d42:	59 f4       	brne	.+22     	; 0x3d5a <reg_wizchip_cs_cbfunc+0x20>
    3d44:	e5 e4       	ldi	r30, 0x45	; 69
    3d46:	f2 e0       	ldi	r31, 0x02	; 2
    3d48:	80 e9       	ldi	r24, 0x90	; 144
    3d4a:	9e e1       	ldi	r25, 0x1E	; 30
    3d4c:	95 87       	std	Z+13, r25	; 0x0d
    3d4e:	84 87       	std	Z+12, r24	; 0x0c
    3d50:	81 e9       	ldi	r24, 0x91	; 145
    3d52:	9e e1       	ldi	r25, 0x1E	; 30
    3d54:	97 87       	std	Z+15, r25	; 0x0f
    3d56:	86 87       	std	Z+14, r24	; 0x0e
    3d58:	08 95       	ret
    3d5a:	e5 e4       	ldi	r30, 0x45	; 69
    3d5c:	f2 e0       	ldi	r31, 0x02	; 2
    3d5e:	95 87       	std	Z+13, r25	; 0x0d
    3d60:	84 87       	std	Z+12, r24	; 0x0c
    3d62:	77 87       	std	Z+15, r23	; 0x0f
    3d64:	66 87       	std	Z+14, r22	; 0x0e
    3d66:	08 95       	ret

00003d68 <reg_wizchip_spi_cbfunc>:
    3d68:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <WIZCHIP>
    3d6c:	30 91 46 02 	lds	r19, 0x0246	; 0x800246 <WIZCHIP+0x1>
    3d70:	22 27       	eor	r18, r18
    3d72:	32 70       	andi	r19, 0x02	; 2
    3d74:	21 15       	cp	r18, r1
    3d76:	31 05       	cpc	r19, r1
    3d78:	e9 f3       	breq	.-6      	; 0x3d74 <reg_wizchip_spi_cbfunc+0xc>
    3d7a:	00 97       	sbiw	r24, 0x00	; 0
    3d7c:	19 f0       	breq	.+6      	; 0x3d84 <reg_wizchip_spi_cbfunc+0x1c>
    3d7e:	61 15       	cp	r22, r1
    3d80:	71 05       	cpc	r23, r1
    3d82:	59 f4       	brne	.+22     	; 0x3d9a <reg_wizchip_spi_cbfunc+0x32>
    3d84:	e5 e4       	ldi	r30, 0x45	; 69
    3d86:	f2 e0       	ldi	r31, 0x02	; 2
    3d88:	88 e9       	ldi	r24, 0x98	; 152
    3d8a:	9e e1       	ldi	r25, 0x1E	; 30
    3d8c:	91 8b       	std	Z+17, r25	; 0x11
    3d8e:	80 8b       	std	Z+16, r24	; 0x10
    3d90:	8a e9       	ldi	r24, 0x9A	; 154
    3d92:	9e e1       	ldi	r25, 0x1E	; 30
    3d94:	93 8b       	std	Z+19, r25	; 0x13
    3d96:	82 8b       	std	Z+18, r24	; 0x12
    3d98:	08 95       	ret
    3d9a:	e5 e4       	ldi	r30, 0x45	; 69
    3d9c:	f2 e0       	ldi	r31, 0x02	; 2
    3d9e:	91 8b       	std	Z+17, r25	; 0x11
    3da0:	80 8b       	std	Z+16, r24	; 0x10
    3da2:	73 8b       	std	Z+19, r23	; 0x13
    3da4:	62 8b       	std	Z+18, r22	; 0x12
    3da6:	08 95       	ret

00003da8 <reg_wizchip_spiburst_cbfunc>:
    3da8:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <WIZCHIP>
    3dac:	30 91 46 02 	lds	r19, 0x0246	; 0x800246 <WIZCHIP+0x1>
    3db0:	22 27       	eor	r18, r18
    3db2:	32 70       	andi	r19, 0x02	; 2
    3db4:	21 15       	cp	r18, r1
    3db6:	31 05       	cpc	r19, r1
    3db8:	e9 f3       	breq	.-6      	; 0x3db4 <reg_wizchip_spiburst_cbfunc+0xc>
    3dba:	00 97       	sbiw	r24, 0x00	; 0
    3dbc:	19 f0       	breq	.+6      	; 0x3dc4 <reg_wizchip_spiburst_cbfunc+0x1c>
    3dbe:	61 15       	cp	r22, r1
    3dc0:	71 05       	cpc	r23, r1
    3dc2:	59 f4       	brne	.+22     	; 0x3dda <reg_wizchip_spiburst_cbfunc+0x32>
    3dc4:	e5 e4       	ldi	r30, 0x45	; 69
    3dc6:	f2 e0       	ldi	r31, 0x02	; 2
    3dc8:	8b e9       	ldi	r24, 0x9B	; 155
    3dca:	9e e1       	ldi	r25, 0x1E	; 30
    3dcc:	95 8b       	std	Z+21, r25	; 0x15
    3dce:	84 8b       	std	Z+20, r24	; 0x14
    3dd0:	8c e9       	ldi	r24, 0x9C	; 156
    3dd2:	9e e1       	ldi	r25, 0x1E	; 30
    3dd4:	97 8b       	std	Z+23, r25	; 0x17
    3dd6:	86 8b       	std	Z+22, r24	; 0x16
    3dd8:	08 95       	ret
    3dda:	e5 e4       	ldi	r30, 0x45	; 69
    3ddc:	f2 e0       	ldi	r31, 0x02	; 2
    3dde:	95 8b       	std	Z+21, r25	; 0x15
    3de0:	84 8b       	std	Z+20, r24	; 0x14
    3de2:	77 8b       	std	Z+23, r23	; 0x17
    3de4:	66 8b       	std	Z+22, r22	; 0x16
    3de6:	08 95       	ret

00003de8 <wizchip_sw_reset>:
    3de8:	cf 93       	push	r28
    3dea:	df 93       	push	r29
    3dec:	cd b7       	in	r28, 0x3d	; 61
    3dee:	de b7       	in	r29, 0x3e	; 62
    3df0:	62 97       	sbiw	r28, 0x12	; 18
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	f8 94       	cli
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	cd bf       	out	0x3d, r28	; 61
    3dfc:	26 e0       	ldi	r18, 0x06	; 6
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	ae 01       	movw	r20, r28
    3e02:	43 5f       	subi	r20, 0xF3	; 243
    3e04:	5f 4f       	sbci	r21, 0xFF	; 255
    3e06:	60 e0       	ldi	r22, 0x00	; 0
    3e08:	79 e0       	ldi	r23, 0x09	; 9
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	70 dc       	rcall	.-1824   	; 0x36f0 <WIZCHIP_READ_BUF>
    3e10:	24 e0       	ldi	r18, 0x04	; 4
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	ae 01       	movw	r20, r28
    3e16:	4f 5f       	subi	r20, 0xFF	; 255
    3e18:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1a:	60 e0       	ldi	r22, 0x00	; 0
    3e1c:	71 e0       	ldi	r23, 0x01	; 1
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	66 dc       	rcall	.-1844   	; 0x36f0 <WIZCHIP_READ_BUF>
    3e24:	24 e0       	ldi	r18, 0x04	; 4
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	ae 01       	movw	r20, r28
    3e2a:	4b 5f       	subi	r20, 0xFB	; 251
    3e2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e2e:	60 e0       	ldi	r22, 0x00	; 0
    3e30:	75 e0       	ldi	r23, 0x05	; 5
    3e32:	80 e0       	ldi	r24, 0x00	; 0
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	5c dc       	rcall	.-1864   	; 0x36f0 <WIZCHIP_READ_BUF>
    3e38:	24 e0       	ldi	r18, 0x04	; 4
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	ae 01       	movw	r20, r28
    3e3e:	47 5f       	subi	r20, 0xF7	; 247
    3e40:	5f 4f       	sbci	r21, 0xFF	; 255
    3e42:	60 e0       	ldi	r22, 0x00	; 0
    3e44:	7f e0       	ldi	r23, 0x0F	; 15
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	52 dc       	rcall	.-1884   	; 0x36f0 <WIZCHIP_READ_BUF>
    3e4c:	40 e8       	ldi	r20, 0x80	; 128
    3e4e:	60 e0       	ldi	r22, 0x00	; 0
    3e50:	70 e0       	ldi	r23, 0x00	; 0
    3e52:	cb 01       	movw	r24, r22
    3e54:	db db       	rcall	.-2122   	; 0x360c <WIZCHIP_WRITE>
    3e56:	60 e0       	ldi	r22, 0x00	; 0
    3e58:	70 e0       	ldi	r23, 0x00	; 0
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	70 db       	rcall	.-2336   	; 0x353e <WIZCHIP_READ>
    3e5e:	26 e0       	ldi	r18, 0x06	; 6
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	ae 01       	movw	r20, r28
    3e64:	43 5f       	subi	r20, 0xF3	; 243
    3e66:	5f 4f       	sbci	r21, 0xFF	; 255
    3e68:	60 e0       	ldi	r22, 0x00	; 0
    3e6a:	79 e0       	ldi	r23, 0x09	; 9
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	c7 dc       	rcall	.-1650   	; 0x3800 <WIZCHIP_WRITE_BUF>
    3e72:	24 e0       	ldi	r18, 0x04	; 4
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	ae 01       	movw	r20, r28
    3e78:	4f 5f       	subi	r20, 0xFF	; 255
    3e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e7c:	60 e0       	ldi	r22, 0x00	; 0
    3e7e:	71 e0       	ldi	r23, 0x01	; 1
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	bd dc       	rcall	.-1670   	; 0x3800 <WIZCHIP_WRITE_BUF>
    3e86:	24 e0       	ldi	r18, 0x04	; 4
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	ae 01       	movw	r20, r28
    3e8c:	4b 5f       	subi	r20, 0xFB	; 251
    3e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e90:	60 e0       	ldi	r22, 0x00	; 0
    3e92:	75 e0       	ldi	r23, 0x05	; 5
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	b3 dc       	rcall	.-1690   	; 0x3800 <WIZCHIP_WRITE_BUF>
    3e9a:	24 e0       	ldi	r18, 0x04	; 4
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	ae 01       	movw	r20, r28
    3ea0:	47 5f       	subi	r20, 0xF7	; 247
    3ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ea4:	60 e0       	ldi	r22, 0x00	; 0
    3ea6:	7f e0       	ldi	r23, 0x0F	; 15
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	a9 dc       	rcall	.-1710   	; 0x3800 <WIZCHIP_WRITE_BUF>
    3eae:	62 96       	adiw	r28, 0x12	; 18
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
    3eba:	df 91       	pop	r29
    3ebc:	cf 91       	pop	r28
    3ebe:	08 95       	ret

00003ec0 <wizchip_init>:
    3ec0:	ef 92       	push	r14
    3ec2:	ff 92       	push	r15
    3ec4:	0f 93       	push	r16
    3ec6:	1f 93       	push	r17
    3ec8:	cf 93       	push	r28
    3eca:	df 93       	push	r29
    3ecc:	ec 01       	movw	r28, r24
    3ece:	7b 01       	movw	r14, r22
    3ed0:	8b df       	rcall	.-234    	; 0x3de8 <wizchip_sw_reset>
    3ed2:	20 97       	sbiw	r28, 0x00	; 0
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <wizchip_init+0x18>
    3ed6:	58 c0       	rjmp	.+176    	; 0x3f88 <wizchip_init+0xc8>
    3ed8:	88 81       	ld	r24, Y
    3eda:	81 31       	cpi	r24, 0x11	; 17
    3edc:	0c f0       	brlt	.+2      	; 0x3ee0 <wizchip_init+0x20>
    3ede:	43 c0       	rjmp	.+134    	; 0x3f66 <wizchip_init+0xa6>
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	31 96       	adiw	r30, 0x01	; 1
    3ee4:	9e 01       	movw	r18, r28
    3ee6:	28 5f       	subi	r18, 0xF8	; 248
    3ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eea:	91 91       	ld	r25, Z+
    3eec:	89 0f       	add	r24, r25
    3eee:	81 31       	cpi	r24, 0x11	; 17
    3ef0:	e4 f5       	brge	.+120    	; 0x3f6a <wizchip_init+0xaa>
    3ef2:	e2 17       	cp	r30, r18
    3ef4:	f3 07       	cpc	r31, r19
    3ef6:	c9 f7       	brne	.-14     	; 0x3eea <wizchip_init+0x2a>
    3ef8:	8e 01       	movw	r16, r28
    3efa:	c1 e0       	ldi	r28, 0x01	; 1
    3efc:	d0 e0       	ldi	r29, 0x00	; 0
    3efe:	f8 01       	movw	r30, r16
    3f00:	41 91       	ld	r20, Z+
    3f02:	8f 01       	movw	r16, r30
    3f04:	be 01       	movw	r22, r28
    3f06:	66 0f       	add	r22, r22
    3f08:	77 1f       	adc	r23, r23
    3f0a:	66 0f       	add	r22, r22
    3f0c:	77 1f       	adc	r23, r23
    3f0e:	66 0f       	add	r22, r22
    3f10:	77 1f       	adc	r23, r23
    3f12:	71 5e       	subi	r23, 0xE1	; 225
    3f14:	07 2e       	mov	r0, r23
    3f16:	00 0c       	add	r0, r0
    3f18:	88 0b       	sbc	r24, r24
    3f1a:	99 0b       	sbc	r25, r25
    3f1c:	77 db       	rcall	.-2322   	; 0x360c <WIZCHIP_WRITE>
    3f1e:	24 96       	adiw	r28, 0x04	; 4
    3f20:	c1 32       	cpi	r28, 0x21	; 33
    3f22:	d1 05       	cpc	r29, r1
    3f24:	61 f7       	brne	.-40     	; 0x3efe <wizchip_init+0x3e>
    3f26:	30 c0       	rjmp	.+96     	; 0x3f88 <wizchip_init+0xc8>
    3f28:	91 91       	ld	r25, Z+
    3f2a:	89 0f       	add	r24, r25
    3f2c:	81 31       	cpi	r24, 0x11	; 17
    3f2e:	fc f4       	brge	.+62     	; 0x3f6e <wizchip_init+0xae>
    3f30:	e2 17       	cp	r30, r18
    3f32:	f3 07       	cpc	r31, r19
    3f34:	c9 f7       	brne	.-14     	; 0x3f28 <wizchip_init+0x68>
    3f36:	c1 e0       	ldi	r28, 0x01	; 1
    3f38:	d0 e0       	ldi	r29, 0x00	; 0
    3f3a:	f7 01       	movw	r30, r14
    3f3c:	41 91       	ld	r20, Z+
    3f3e:	7f 01       	movw	r14, r30
    3f40:	be 01       	movw	r22, r28
    3f42:	66 0f       	add	r22, r22
    3f44:	77 1f       	adc	r23, r23
    3f46:	66 0f       	add	r22, r22
    3f48:	77 1f       	adc	r23, r23
    3f4a:	66 0f       	add	r22, r22
    3f4c:	77 1f       	adc	r23, r23
    3f4e:	72 5e       	subi	r23, 0xE2	; 226
    3f50:	07 2e       	mov	r0, r23
    3f52:	00 0c       	add	r0, r0
    3f54:	88 0b       	sbc	r24, r24
    3f56:	99 0b       	sbc	r25, r25
    3f58:	59 db       	rcall	.-2382   	; 0x360c <WIZCHIP_WRITE>
    3f5a:	24 96       	adiw	r28, 0x04	; 4
    3f5c:	c1 32       	cpi	r28, 0x21	; 33
    3f5e:	d1 05       	cpc	r29, r1
    3f60:	61 f7       	brne	.-40     	; 0x3f3a <wizchip_init+0x7a>
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	15 c0       	rjmp	.+42     	; 0x3f90 <wizchip_init+0xd0>
    3f66:	8f ef       	ldi	r24, 0xFF	; 255
    3f68:	13 c0       	rjmp	.+38     	; 0x3f90 <wizchip_init+0xd0>
    3f6a:	8f ef       	ldi	r24, 0xFF	; 255
    3f6c:	11 c0       	rjmp	.+34     	; 0x3f90 <wizchip_init+0xd0>
    3f6e:	8f ef       	ldi	r24, 0xFF	; 255
    3f70:	0f c0       	rjmp	.+30     	; 0x3f90 <wizchip_init+0xd0>
    3f72:	8f ef       	ldi	r24, 0xFF	; 255
    3f74:	0d c0       	rjmp	.+26     	; 0x3f90 <wizchip_init+0xd0>
    3f76:	f7 01       	movw	r30, r14
    3f78:	80 81       	ld	r24, Z
    3f7a:	81 31       	cpi	r24, 0x11	; 17
    3f7c:	d4 f7       	brge	.-12     	; 0x3f72 <wizchip_init+0xb2>
    3f7e:	31 96       	adiw	r30, 0x01	; 1
    3f80:	97 01       	movw	r18, r14
    3f82:	28 5f       	subi	r18, 0xF8	; 248
    3f84:	3f 4f       	sbci	r19, 0xFF	; 255
    3f86:	d0 cf       	rjmp	.-96     	; 0x3f28 <wizchip_init+0x68>
    3f88:	e1 14       	cp	r14, r1
    3f8a:	f1 04       	cpc	r15, r1
    3f8c:	a1 f7       	brne	.-24     	; 0x3f76 <wizchip_init+0xb6>
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	df 91       	pop	r29
    3f92:	cf 91       	pop	r28
    3f94:	1f 91       	pop	r17
    3f96:	0f 91       	pop	r16
    3f98:	ff 90       	pop	r15
    3f9a:	ef 90       	pop	r14
    3f9c:	08 95       	ret

00003f9e <wizchip_clrinterrupt>:
    3f9e:	cf 93       	push	r28
    3fa0:	c9 2f       	mov	r28, r25
    3fa2:	48 2f       	mov	r20, r24
    3fa4:	40 7f       	andi	r20, 0xF0	; 240
    3fa6:	60 e0       	ldi	r22, 0x00	; 0
    3fa8:	75 e1       	ldi	r23, 0x15	; 21
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	2e db       	rcall	.-2468   	; 0x360c <WIZCHIP_WRITE>
    3fb0:	4c 2f       	mov	r20, r28
    3fb2:	60 e0       	ldi	r22, 0x00	; 0
    3fb4:	77 e1       	ldi	r23, 0x17	; 23
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	28 db       	rcall	.-2480   	; 0x360c <WIZCHIP_WRITE>
    3fbc:	cf 91       	pop	r28
    3fbe:	08 95       	ret

00003fc0 <wizchip_getinterrupt>:
    3fc0:	cf 93       	push	r28
    3fc2:	60 e0       	ldi	r22, 0x00	; 0
    3fc4:	75 e1       	ldi	r23, 0x15	; 21
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	b9 da       	rcall	.-2702   	; 0x353e <WIZCHIP_READ>
    3fcc:	c8 2f       	mov	r28, r24
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	77 e1       	ldi	r23, 0x17	; 23
    3fd2:	80 e0       	ldi	r24, 0x00	; 0
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	b3 da       	rcall	.-2714   	; 0x353e <WIZCHIP_READ>
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	98 2f       	mov	r25, r24
    3fdc:	88 27       	eor	r24, r24
    3fde:	c0 7f       	andi	r28, 0xF0	; 240
    3fe0:	8c 0f       	add	r24, r28
    3fe2:	91 1d       	adc	r25, r1
    3fe4:	cf 91       	pop	r28
    3fe6:	08 95       	ret

00003fe8 <wizchip_setinterruptmask>:
    3fe8:	cf 93       	push	r28
    3fea:	c9 2f       	mov	r28, r25
    3fec:	48 2f       	mov	r20, r24
    3fee:	60 e0       	ldi	r22, 0x00	; 0
    3ff0:	76 e1       	ldi	r23, 0x16	; 22
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0a db       	rcall	.-2540   	; 0x360c <WIZCHIP_WRITE>
    3ff8:	4c 2f       	mov	r20, r28
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	78 e1       	ldi	r23, 0x18	; 24
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	04 db       	rcall	.-2552   	; 0x360c <WIZCHIP_WRITE>
    4004:	cf 91       	pop	r28
    4006:	08 95       	ret

00004008 <wizchip_getinterruptmask>:
    4008:	cf 93       	push	r28
    400a:	60 e0       	ldi	r22, 0x00	; 0
    400c:	76 e1       	ldi	r23, 0x16	; 22
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	95 da       	rcall	.-2774   	; 0x353e <WIZCHIP_READ>
    4014:	c8 2f       	mov	r28, r24
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	78 e1       	ldi	r23, 0x18	; 24
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	8f da       	rcall	.-2786   	; 0x353e <WIZCHIP_READ>
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	98 2f       	mov	r25, r24
    4024:	88 27       	eor	r24, r24
    4026:	8c 0f       	add	r24, r28
    4028:	91 1d       	adc	r25, r1
    402a:	cf 91       	pop	r28
    402c:	08 95       	ret

0000402e <wizphy_getphylink>:
    402e:	60 e0       	ldi	r22, 0x00	; 0
    4030:	7e e2       	ldi	r23, 0x2E	; 46
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	83 da       	rcall	.-2810   	; 0x353e <WIZCHIP_READ>
    4038:	81 70       	andi	r24, 0x01	; 1
    403a:	08 95       	ret

0000403c <wizphy_getphypmode>:
    403c:	60 e0       	ldi	r22, 0x00	; 0
    403e:	7e e2       	ldi	r23, 0x2E	; 46
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	7c da       	rcall	.-2824   	; 0x353e <WIZCHIP_READ>
    4046:	98 2f       	mov	r25, r24
    4048:	98 73       	andi	r25, 0x38	; 56
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	90 33       	cpi	r25, 0x30	; 48
    404e:	09 f0       	breq	.+2      	; 0x4052 <wizphy_getphypmode+0x16>
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	08 95       	ret

00004054 <wizphy_reset>:
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	7e e2       	ldi	r23, 0x2E	; 46
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	70 da       	rcall	.-2848   	; 0x353e <WIZCHIP_READ>
    405e:	48 2f       	mov	r20, r24
    4060:	4f 77       	andi	r20, 0x7F	; 127
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	7e e2       	ldi	r23, 0x2E	; 46
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	d0 da       	rcall	.-2656   	; 0x360c <WIZCHIP_WRITE>
    406c:	60 e0       	ldi	r22, 0x00	; 0
    406e:	7e e2       	ldi	r23, 0x2E	; 46
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	64 da       	rcall	.-2872   	; 0x353e <WIZCHIP_READ>
    4076:	48 2f       	mov	r20, r24
    4078:	40 68       	ori	r20, 0x80	; 128
    407a:	60 e0       	ldi	r22, 0x00	; 0
    407c:	7e e2       	ldi	r23, 0x2E	; 46
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	c4 ca       	rjmp	.-2680   	; 0x360c <WIZCHIP_WRITE>
    4084:	08 95       	ret

00004086 <wizphy_setphyconf>:
    4086:	fc 01       	movw	r30, r24
    4088:	80 81       	ld	r24, Z
    408a:	81 30       	cpi	r24, 0x01	; 1
    408c:	11 f0       	breq	.+4      	; 0x4092 <wizphy_setphyconf+0xc>
    408e:	40 e0       	ldi	r20, 0x00	; 0
    4090:	01 c0       	rjmp	.+2      	; 0x4094 <wizphy_setphyconf+0xe>
    4092:	40 e4       	ldi	r20, 0x40	; 64
    4094:	81 81       	ldd	r24, Z+1	; 0x01
    4096:	81 30       	cpi	r24, 0x01	; 1
    4098:	11 f4       	brne	.+4      	; 0x409e <wizphy_setphyconf+0x18>
    409a:	48 63       	ori	r20, 0x38	; 56
    409c:	0e c0       	rjmp	.+28     	; 0x40ba <wizphy_setphyconf+0x34>
    409e:	83 81       	ldd	r24, Z+3	; 0x03
    40a0:	81 30       	cpi	r24, 0x01	; 1
    40a2:	39 f4       	brne	.+14     	; 0x40b2 <wizphy_setphyconf+0x2c>
    40a4:	82 81       	ldd	r24, Z+2	; 0x02
    40a6:	81 30       	cpi	r24, 0x01	; 1
    40a8:	11 f4       	brne	.+4      	; 0x40ae <wizphy_setphyconf+0x28>
    40aa:	48 61       	ori	r20, 0x18	; 24
    40ac:	06 c0       	rjmp	.+12     	; 0x40ba <wizphy_setphyconf+0x34>
    40ae:	48 60       	ori	r20, 0x08	; 8
    40b0:	04 c0       	rjmp	.+8      	; 0x40ba <wizphy_setphyconf+0x34>
    40b2:	82 81       	ldd	r24, Z+2	; 0x02
    40b4:	81 30       	cpi	r24, 0x01	; 1
    40b6:	09 f4       	brne	.+2      	; 0x40ba <wizphy_setphyconf+0x34>
    40b8:	40 61       	ori	r20, 0x10	; 16
    40ba:	60 e0       	ldi	r22, 0x00	; 0
    40bc:	7e e2       	ldi	r23, 0x2E	; 46
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	a4 da       	rcall	.-2744   	; 0x360c <WIZCHIP_WRITE>
    40c4:	c7 cf       	rjmp	.-114    	; 0x4054 <wizphy_reset>
    40c6:	08 95       	ret

000040c8 <wizphy_getphyconf>:
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	ec 01       	movw	r28, r24
    40ce:	60 e0       	ldi	r22, 0x00	; 0
    40d0:	7e e2       	ldi	r23, 0x2E	; 46
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	33 da       	rcall	.-2970   	; 0x353e <WIZCHIP_READ>
    40d8:	86 fb       	bst	r24, 6
    40da:	99 27       	eor	r25, r25
    40dc:	90 f9       	bld	r25, 0
    40de:	98 83       	st	Y, r25
    40e0:	88 73       	andi	r24, 0x38	; 56
    40e2:	80 32       	cpi	r24, 0x20	; 32
    40e4:	11 f0       	breq	.+4      	; 0x40ea <wizphy_getphyconf+0x22>
    40e6:	88 33       	cpi	r24, 0x38	; 56
    40e8:	19 f4       	brne	.+6      	; 0x40f0 <wizphy_getphyconf+0x28>
    40ea:	91 e0       	ldi	r25, 0x01	; 1
    40ec:	99 83       	std	Y+1, r25	; 0x01
    40ee:	01 c0       	rjmp	.+2      	; 0x40f2 <wizphy_getphyconf+0x2a>
    40f0:	19 82       	std	Y+1, r1	; 0x01
    40f2:	88 31       	cpi	r24, 0x18	; 24
    40f4:	21 f0       	breq	.+8      	; 0x40fe <wizphy_getphyconf+0x36>
    40f6:	80 32       	cpi	r24, 0x20	; 32
    40f8:	11 f0       	breq	.+4      	; 0x40fe <wizphy_getphyconf+0x36>
    40fa:	80 31       	cpi	r24, 0x10	; 16
    40fc:	19 f4       	brne	.+6      	; 0x4104 <wizphy_getphyconf+0x3c>
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	9a 83       	std	Y+2, r25	; 0x02
    4102:	01 c0       	rjmp	.+2      	; 0x4106 <wizphy_getphyconf+0x3e>
    4104:	1a 82       	std	Y+2, r1	; 0x02
    4106:	88 31       	cpi	r24, 0x18	; 24
    4108:	21 f0       	breq	.+8      	; 0x4112 <wizphy_getphyconf+0x4a>
    410a:	80 32       	cpi	r24, 0x20	; 32
    410c:	11 f0       	breq	.+4      	; 0x4112 <wizphy_getphyconf+0x4a>
    410e:	88 30       	cpi	r24, 0x08	; 8
    4110:	19 f4       	brne	.+6      	; 0x4118 <wizphy_getphyconf+0x50>
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	8b 83       	std	Y+3, r24	; 0x03
    4116:	01 c0       	rjmp	.+2      	; 0x411a <wizphy_getphyconf+0x52>
    4118:	1b 82       	std	Y+3, r1	; 0x03
    411a:	df 91       	pop	r29
    411c:	cf 91       	pop	r28
    411e:	08 95       	ret

00004120 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
    4120:	cf 93       	push	r28
    4122:	c8 2f       	mov	r28, r24
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    4124:	60 e0       	ldi	r22, 0x00	; 0
    4126:	7e e2       	ldi	r23, 0x2E	; 46
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	08 da       	rcall	.-3056   	; 0x353e <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    412e:	86 ff       	sbrs	r24, 6
    4130:	24 c0       	rjmp	.+72     	; 0x417a <wizphy_setphypmode+0x5a>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
    4132:	87 7c       	andi	r24, 0xC7	; 199
   if( pmode == PHY_POWER_DOWN)
    4134:	c1 30       	cpi	r28, 0x01	; 1
    4136:	81 f4       	brne	.+32     	; 0x4158 <wizphy_setphypmode+0x38>
      tmp |= PHYCFGR_OPMDC_PDOWN;
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
   setPHYCFGR(tmp);
    4138:	48 2f       	mov	r20, r24
    413a:	40 63       	ori	r20, 0x30	; 48
    413c:	60 e0       	ldi	r22, 0x00	; 0
    413e:	7e e2       	ldi	r23, 0x2E	; 46
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	90 e0       	ldi	r25, 0x00	; 0
   wizphy_reset();
    4144:	63 da       	rcall	.-2874   	; 0x360c <WIZCHIP_WRITE>
    4146:	86 df       	rcall	.-244    	; 0x4054 <wizphy_reset>
   tmp = getPHYCFGR();
    4148:	60 e0       	ldi	r22, 0x00	; 0
    414a:	7e e2       	ldi	r23, 0x2E	; 46
    414c:	80 e0       	ldi	r24, 0x00	; 0
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	f6 d9       	rcall	.-3092   	; 0x353e <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    4152:	80 73       	andi	r24, 0x30	; 48
    4154:	a1 f4       	brne	.+40     	; 0x417e <wizphy_setphypmode+0x5e>
    4156:	0f c0       	rjmp	.+30     	; 0x4176 <wizphy_setphypmode+0x56>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
   if( pmode == PHY_POWER_DOWN)
      tmp |= PHYCFGR_OPMDC_PDOWN;
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
   setPHYCFGR(tmp);
    4158:	48 2f       	mov	r20, r24
    415a:	48 63       	ori	r20, 0x38	; 56
    415c:	60 e0       	ldi	r22, 0x00	; 0
    415e:	7e e2       	ldi	r23, 0x2E	; 46
    4160:	80 e0       	ldi	r24, 0x00	; 0
    4162:	90 e0       	ldi	r25, 0x00	; 0
   wizphy_reset();
    4164:	53 da       	rcall	.-2906   	; 0x360c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
    4166:	76 df       	rcall	.-276    	; 0x4054 <wizphy_reset>
    4168:	60 e0       	ldi	r22, 0x00	; 0
    416a:	7e e2       	ldi	r23, 0x2E	; 46
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	e6 d9       	rcall	.-3124   	; 0x353e <WIZCHIP_READ>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    4172:	88 73       	andi	r24, 0x38	; 56
    4174:	31 f4       	brne	.+12     	; 0x4182 <wizphy_setphypmode+0x62>
   }
   return -1;
    4176:	8f ef       	ldi	r24, 0xFF	; 255
    4178:	05 c0       	rjmp	.+10     	; 0x4184 <wizphy_setphypmode+0x64>

int8_t wizphy_setphypmode(uint8_t pmode)
{
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    417a:	8f ef       	ldi	r24, 0xFF	; 255
    417c:	03 c0       	rjmp	.+6      	; 0x4184 <wizphy_setphypmode+0x64>
   setPHYCFGR(tmp);
   wizphy_reset();
   tmp = getPHYCFGR();
   if( pmode == PHY_POWER_DOWN)
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    417e:	80 e0       	ldi	r24, 0x00	; 0
    4180:	01 c0       	rjmp	.+2      	; 0x4184 <wizphy_setphypmode+0x64>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    4182:	80 e0       	ldi	r24, 0x00	; 0
   }
   return -1;
}
    4184:	cf 91       	pop	r28
    4186:	08 95       	ret

00004188 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
    4188:	1f 93       	push	r17
    418a:	cf 93       	push	r28
    418c:	df 93       	push	r29
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	80 31       	cpi	r24, 0x10	; 16
    4192:	91 05       	cpc	r25, r1
    4194:	08 f0       	brcs	.+2      	; 0x4198 <ctlwizchip+0x10>
    4196:	77 c0       	rjmp	.+238    	; 0x4286 <ctlwizchip+0xfe>
    4198:	eb 01       	movw	r28, r22
    419a:	fc 01       	movw	r30, r24
    419c:	88 27       	eor	r24, r24
    419e:	e6 56       	subi	r30, 0x66	; 102
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	8f 4f       	sbci	r24, 0xFF	; 255
    41a4:	0c 94 de 3e 	jmp	0x7dbc	; 0x7dbc <__tablejump2__>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	72 c0       	rjmp	.+228    	; 0x4290 <ctlwizchip+0x108>
#endif
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
    41ac:	1d de       	rcall	.-966    	; 0x3de8 <wizchip_sw_reset>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    41ae:	80 e0       	ldi	r24, 0x00	; 0
   uint8_t* ptmp[2] = {0,0};
   switch(cwtype)
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
         break;
    41b0:	6f c0       	rjmp	.+222    	; 0x4290 <ctlwizchip+0x108>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
    41b2:	20 97       	sbiw	r28, 0x00	; 0
    41b4:	19 f0       	breq	.+6      	; 0x41bc <ctlwizchip+0x34>
         {
            ptmp[0] = (uint8_t*)arg;
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
    41b6:	68 5f       	subi	r22, 0xF8	; 248
    41b8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ba:	02 c0       	rjmp	.+4      	; 0x41c0 <ctlwizchip+0x38>
int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
    41bc:	60 e0       	ldi	r22, 0x00	; 0
    41be:	70 e0       	ldi	r23, 0x00	; 0
         if(arg != 0) 
         {
            ptmp[0] = (uint8_t*)arg;
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
         }
         return wizchip_init(ptmp[0], ptmp[1]);
    41c0:	ce 01       	movw	r24, r28
    41c2:	7e de       	rcall	.-772    	; 0x3ec0 <wizchip_init>
    41c4:	65 c0       	rjmp	.+202    	; 0x4290 <ctlwizchip+0x108>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
    41c6:	88 81       	ld	r24, Y
    41c8:	99 81       	ldd	r25, Y+1	; 0x01
    41ca:	e9 de       	rcall	.-558    	; 0x3f9e <wizchip_clrinterrupt>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    41cc:	80 e0       	ldi	r24, 0x00	; 0
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
         }
         return wizchip_init(ptmp[0], ptmp[1]);
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
         break;
    41ce:	60 c0       	rjmp	.+192    	; 0x4290 <ctlwizchip+0x108>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
    41d0:	f7 de       	rcall	.-530    	; 0x3fc0 <wizchip_getinterrupt>
    41d2:	99 83       	std	Y+1, r25	; 0x01
    41d4:	88 83       	st	Y, r24
    41d6:	80 e0       	ldi	r24, 0x00	; 0
         break;
    41d8:	5b c0       	rjmp	.+182    	; 0x4290 <ctlwizchip+0x108>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
    41da:	88 81       	ld	r24, Y
    41dc:	99 81       	ldd	r25, Y+1	; 0x01
    41de:	04 df       	rcall	.-504    	; 0x3fe8 <wizchip_setinterruptmask>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    41e0:	80 e0       	ldi	r24, 0x00	; 0
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
         break;
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
         break;         
    41e2:	56 c0       	rjmp	.+172    	; 0x4290 <ctlwizchip+0x108>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
    41e4:	11 df       	rcall	.-478    	; 0x4008 <wizchip_getinterruptmask>
    41e6:	99 83       	std	Y+1, r25	; 0x01
    41e8:	88 83       	st	Y, r24
    41ea:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    41ec:	51 c0       	rjmp	.+162    	; 0x4290 <ctlwizchip+0x108>
         break;
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
    41ee:	49 81       	ldd	r20, Y+1	; 0x01
    41f0:	60 e0       	ldi	r22, 0x00	; 0
    41f2:	73 e1       	ldi	r23, 0x13	; 19
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	09 da       	rcall	.-3054   	; 0x360c <WIZCHIP_WRITE>
    41fa:	48 81       	ld	r20, Y
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	74 e1       	ldi	r23, 0x14	; 20
    4200:	80 e0       	ldi	r24, 0x00	; 0
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	03 da       	rcall	.-3066   	; 0x360c <WIZCHIP_WRITE>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    4206:	80 e0       	ldi	r24, 0x00	; 0
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
    4208:	43 c0       	rjmp	.+134    	; 0x4290 <ctlwizchip+0x108>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
    420a:	60 e0       	ldi	r22, 0x00	; 0
    420c:	73 e1       	ldi	r23, 0x13	; 19
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	95 d9       	rcall	.-3286   	; 0x353e <WIZCHIP_READ>
    4214:	18 2f       	mov	r17, r24
    4216:	60 e0       	ldi	r22, 0x00	; 0
    4218:	74 e1       	ldi	r23, 0x14	; 20
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	8f d9       	rcall	.-3298   	; 0x353e <WIZCHIP_READ>
    4220:	21 2f       	mov	r18, r17
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	32 2f       	mov	r19, r18
    4226:	22 27       	eor	r18, r18
    4228:	28 0f       	add	r18, r24
    422a:	31 1d       	adc	r19, r1
    422c:	39 83       	std	Y+1, r19	; 0x01
    422e:	28 83       	st	Y, r18
    4230:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    4232:	2e c0       	rjmp	.+92     	; 0x4290 <ctlwizchip+0x108>
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
         break;
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
    4234:	e5 e4       	ldi	r30, 0x45	; 69
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
    4236:	f2 e0       	ldi	r31, 0x02	; 2
    4238:	82 81       	ldd	r24, Z+2	; 0x02
    423a:	88 83       	st	Y, r24
    423c:	83 81       	ldd	r24, Z+3	; 0x03
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
    423e:	89 83       	std	Y+1, r24	; 0x01
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
    4240:	84 81       	ldd	r24, Z+4	; 0x04
    4242:	8a 83       	std	Y+2, r24	; 0x02
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
    4244:	85 81       	ldd	r24, Z+5	; 0x05
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
    4246:	8b 83       	std	Y+3, r24	; 0x03
    4248:	86 81       	ldd	r24, Z+6	; 0x06
         ((uint8_t*)arg)[5] = 0;
    424a:	8c 83       	std	Y+4, r24	; 0x04
         break;
    424c:	1d 82       	std	Y+5, r1	; 0x05
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
    424e:	80 e0       	ldi	r24, 0x00	; 0
    4250:	1f c0       	rjmp	.+62     	; 0x4290 <ctlwizchip+0x108>
         break;
    4252:	00 df       	rcall	.-512    	; 0x4054 <wizphy_reset>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
    4254:	80 e0       	ldi	r24, 0x00	; 0
    4256:	1c c0       	rjmp	.+56     	; 0x4290 <ctlwizchip+0x108>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    4258:	cb 01       	movw	r24, r22
      case CW_RESET_PHY:
         wizphy_reset();
         break;
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
    425a:	15 df       	rcall	.-470    	; 0x4086 <wizphy_setphyconf>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	18 c0       	rjmp	.+48     	; 0x4290 <ctlwizchip+0x108>
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    4260:	cb 01       	movw	r24, r22
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
         break;
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
         break;
    4262:	32 df       	rcall	.-412    	; 0x40c8 <wizphy_getphyconf>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	14 c0       	rjmp	.+40     	; 0x4290 <ctlwizchip+0x108>
    4268:	88 81       	ld	r24, Y
    426a:	5a df       	rcall	.-332    	; 0x4120 <wizphy_setphypmode>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
    426c:	11 c0       	rjmp	.+34     	; 0x4290 <ctlwizchip+0x108>
    426e:	e6 de       	rcall	.-564    	; 0x403c <wizphy_getphypmode>
         if((int8_t)tmp == -1) return -1;
    4270:	8f 3f       	cpi	r24, 0xFF	; 255
    4272:	59 f0       	breq	.+22     	; 0x428a <ctlwizchip+0x102>
         *(uint8_t*)arg = tmp;
    4274:	88 83       	st	Y, r24
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    4276:	80 e0       	ldi	r24, 0x00	; 0
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    4278:	0b c0       	rjmp	.+22     	; 0x4290 <ctlwizchip+0x108>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
    427a:	d9 de       	rcall	.-590    	; 0x402e <wizphy_getphylink>
    427c:	8f 3f       	cpi	r24, 0xFF	; 255
         if((int8_t)tmp == -1) return -1;
    427e:	39 f0       	breq	.+14     	; 0x428e <ctlwizchip+0x106>
    4280:	88 83       	st	Y, r24
         *(uint8_t*)arg = tmp;
    4282:	80 e0       	ldi	r24, 0x00	; 0
         break;
   #endif      
      default:
         return -1;
   }
   return 0;
    4284:	05 c0       	rjmp	.+10     	; 0x4290 <ctlwizchip+0x108>
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
    4286:	8f ef       	ldi	r24, 0xFF	; 255
   #endif      
      default:
         return -1;
    4288:	03 c0       	rjmp	.+6      	; 0x4290 <ctlwizchip+0x108>
    428a:	8f ef       	ldi	r24, 0xFF	; 255
         return wizphy_setphypmode(*(uint8_t*)arg);
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
         if((int8_t)tmp == -1) return -1;
    428c:	01 c0       	rjmp	.+2      	; 0x4290 <ctlwizchip+0x108>
    428e:	8f ef       	ldi	r24, 0xFF	; 255
         *(uint8_t*)arg = tmp;
         break;
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
         if((int8_t)tmp == -1) return -1;
    4290:	df 91       	pop	r29
   #endif      
      default:
         return -1;
   }
   return 0;
}
    4292:	cf 91       	pop	r28
    4294:	1f 91       	pop	r17
    4296:	08 95       	ret

00004298 <wizchip_setnetinfo>:
    4298:	cf 93       	push	r28
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    429a:	df 93       	push	r29
    429c:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    429e:	26 e0       	ldi	r18, 0x06	; 6
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	ac 01       	movw	r20, r24
    42a4:	60 e0       	ldi	r22, 0x00	; 0
    42a6:	79 e0       	ldi	r23, 0x09	; 9
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	a9 da       	rcall	.-2734   	; 0x3800 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    42ae:	ae 01       	movw	r20, r28
    42b0:	42 5f       	subi	r20, 0xF2	; 242
    42b2:	5f 4f       	sbci	r21, 0xFF	; 255
    42b4:	24 e0       	ldi	r18, 0x04	; 4
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	60 e0       	ldi	r22, 0x00	; 0
    42ba:	71 e0       	ldi	r23, 0x01	; 1
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	9f da       	rcall	.-2754   	; 0x3800 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    42c2:	ae 01       	movw	r20, r28
    42c4:	46 5f       	subi	r20, 0xF6	; 246
    42c6:	5f 4f       	sbci	r21, 0xFF	; 255
    42c8:	24 e0       	ldi	r18, 0x04	; 4
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	60 e0       	ldi	r22, 0x00	; 0
    42ce:	75 e0       	ldi	r23, 0x05	; 5
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	95 da       	rcall	.-2774   	; 0x3800 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    42d6:	ae 01       	movw	r20, r28
    42d8:	4a 5f       	subi	r20, 0xFA	; 250
    42da:	5f 4f       	sbci	r21, 0xFF	; 255
    42dc:	24 e0       	ldi	r18, 0x04	; 4
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	60 e0       	ldi	r22, 0x00	; 0
    42e2:	7f e0       	ldi	r23, 0x0F	; 15
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	8b da       	rcall	.-2794   	; 0x3800 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    42ea:	e2 ef       	ldi	r30, 0xF2	; 242
    42ec:	f4 e0       	ldi	r31, 0x04	; 4
    42ee:	8a 89       	ldd	r24, Y+18	; 0x12
    42f0:	80 83       	st	Z, r24
   _DNS_[1] = pnetinfo->dns[1];
    42f2:	8b 89       	ldd	r24, Y+19	; 0x13
    42f4:	81 83       	std	Z+1, r24	; 0x01
   _DNS_[2] = pnetinfo->dns[2];
    42f6:	8c 89       	ldd	r24, Y+20	; 0x14
    42f8:	82 83       	std	Z+2, r24	; 0x02
   _DNS_[3] = pnetinfo->dns[3];
    42fa:	8d 89       	ldd	r24, Y+21	; 0x15
    42fc:	83 83       	std	Z+3, r24	; 0x03
   _DHCP_   = pnetinfo->dhcp;
    42fe:	8e 89       	ldd	r24, Y+22	; 0x16
    4300:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <_DHCP_>
}
    4304:	df 91       	pop	r29
    4306:	cf 91       	pop	r28
    4308:	08 95       	ret

0000430a <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    430a:	cf 93       	push	r28
    430c:	df 93       	push	r29
    430e:	ec 01       	movw	r28, r24
   getSHAR(pnetinfo->mac);
    4310:	26 e0       	ldi	r18, 0x06	; 6
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	ac 01       	movw	r20, r24
    4316:	60 e0       	ldi	r22, 0x00	; 0
    4318:	79 e0       	ldi	r23, 0x09	; 9
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	e8 d9       	rcall	.-3120   	; 0x36f0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    4320:	ae 01       	movw	r20, r28
    4322:	42 5f       	subi	r20, 0xF2	; 242
    4324:	5f 4f       	sbci	r21, 0xFF	; 255
    4326:	24 e0       	ldi	r18, 0x04	; 4
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	60 e0       	ldi	r22, 0x00	; 0
    432c:	71 e0       	ldi	r23, 0x01	; 1
    432e:	80 e0       	ldi	r24, 0x00	; 0
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	de d9       	rcall	.-3140   	; 0x36f0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    4334:	ae 01       	movw	r20, r28
    4336:	46 5f       	subi	r20, 0xF6	; 246
    4338:	5f 4f       	sbci	r21, 0xFF	; 255
    433a:	24 e0       	ldi	r18, 0x04	; 4
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	60 e0       	ldi	r22, 0x00	; 0
    4340:	75 e0       	ldi	r23, 0x05	; 5
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	d4 d9       	rcall	.-3160   	; 0x36f0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    4348:	ae 01       	movw	r20, r28
    434a:	4a 5f       	subi	r20, 0xFA	; 250
    434c:	5f 4f       	sbci	r21, 0xFF	; 255
    434e:	24 e0       	ldi	r18, 0x04	; 4
    4350:	30 e0       	ldi	r19, 0x00	; 0
    4352:	60 e0       	ldi	r22, 0x00	; 0
    4354:	7f e0       	ldi	r23, 0x0F	; 15
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	ca d9       	rcall	.-3180   	; 0x36f0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    435c:	e2 ef       	ldi	r30, 0xF2	; 242
    435e:	f4 e0       	ldi	r31, 0x04	; 4
    4360:	80 81       	ld	r24, Z
    4362:	8a 8b       	std	Y+18, r24	; 0x12
   pnetinfo->dns[1]= _DNS_[1];
    4364:	81 81       	ldd	r24, Z+1	; 0x01
    4366:	8b 8b       	std	Y+19, r24	; 0x13
   pnetinfo->dns[2]= _DNS_[2];
    4368:	82 81       	ldd	r24, Z+2	; 0x02
    436a:	8c 8b       	std	Y+20, r24	; 0x14
   pnetinfo->dns[3]= _DNS_[3];
    436c:	83 81       	ldd	r24, Z+3	; 0x03
    436e:	8d 8b       	std	Y+21, r24	; 0x15
   pnetinfo->dhcp  = _DHCP_;
    4370:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <_DHCP_>
    4374:	8e 8b       	std	Y+22, r24	; 0x16
}
    4376:	df 91       	pop	r29
    4378:	cf 91       	pop	r28
    437a:	08 95       	ret

0000437c <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    437c:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	a8 95       	wdr
    4384:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4388:	88 61       	ori	r24, 0x18	; 24
    438a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    438e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    4392:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    4394:	e1 e6       	ldi	r30, 0x61	; 97
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	80 e8       	ldi	r24, 0x80	; 128
    439a:	80 83       	st	Z, r24
  CLKPR = 0;
    439c:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    439e:	78 94       	sei

  HAL_TimerInit();
    43a0:	01 c0       	rjmp	.+2      	; 0x43a4 <HAL_TimerInit>
    43a2:	08 95       	ret

000043a4 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    43a4:	10 92 55 24 	sts	0x2455, r1	; 0x802455 <halTimerIrqCount>
    43a8:	80 e1       	ldi	r24, 0x10	; 16
    43aa:	97 e2       	ldi	r25, 0x27	; 39
    43ac:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    43b0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    43b4:	e1 ea       	ldi	r30, 0xA1	; 161
    43b6:	f0 e0       	ldi	r31, 0x00	; 0
    43b8:	88 e0       	ldi	r24, 0x08	; 8
    43ba:	80 83       	st	Z, r24
    43bc:	80 81       	ld	r24, Z
    43be:	82 60       	ori	r24, 0x02	; 2
    43c0:	80 83       	st	Z, r24
    43c2:	e2 e7       	ldi	r30, 0x72	; 114
    43c4:	f0 e0       	ldi	r31, 0x00	; 0
    43c6:	80 81       	ld	r24, Z
    43c8:	82 60       	ori	r24, 0x02	; 2
    43ca:	80 83       	st	Z, r24
    43cc:	08 95       	ret

000043ce <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    43ce:	1f 92       	push	r1
    43d0:	0f 92       	push	r0
    43d2:	0f b6       	in	r0, 0x3f	; 63
    43d4:	0f 92       	push	r0
    43d6:	11 24       	eor	r1, r1
    43d8:	8f 93       	push	r24
  halTimerIrqCount++;
    43da:	80 91 55 24 	lds	r24, 0x2455	; 0x802455 <halTimerIrqCount>
    43de:	8f 5f       	subi	r24, 0xFF	; 255
    43e0:	80 93 55 24 	sts	0x2455, r24	; 0x802455 <halTimerIrqCount>
}
    43e4:	8f 91       	pop	r24
    43e6:	0f 90       	pop	r0
    43e8:	0f be       	out	0x3f, r0	; 63
    43ea:	0f 90       	pop	r0
    43ec:	1f 90       	pop	r1
    43ee:	18 95       	reti

000043f0 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    43f0:	1f 92       	push	r1
    43f2:	0f 92       	push	r0
    43f4:	0f b6       	in	r0, 0x3f	; 63
    43f6:	0f 92       	push	r0
    43f8:	11 24       	eor	r1, r1
    43fa:	8f 93       	push	r24
  halSleepTimerEvent = true;
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <halSleepTimerEvent>
}
    4402:	8f 91       	pop	r24
    4404:	0f 90       	pop	r0
    4406:	0f be       	out	0x3f, r0	; 63
    4408:	0f 90       	pop	r0
    440a:	1f 90       	pop	r1
    440c:	18 95       	reti

0000440e <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
    440e:	dc 01       	movw	r26, r24
    4410:	cb 01       	movw	r24, r22
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	aa 1f       	adc	r26, r26
    4418:	bb 1f       	adc	r27, r27
    441a:	88 0f       	add	r24, r24
    441c:	99 1f       	adc	r25, r25
    441e:	aa 1f       	adc	r26, r26
    4420:	bb 1f       	adc	r27, r27
    4422:	9c 01       	movw	r18, r24
    4424:	ad 01       	movw	r20, r26
    4426:	22 0f       	add	r18, r18
    4428:	33 1f       	adc	r19, r19
    442a:	44 1f       	adc	r20, r20
    442c:	55 1f       	adc	r21, r21
    442e:	22 0f       	add	r18, r18
    4430:	33 1f       	adc	r19, r19
    4432:	44 1f       	adc	r20, r20
    4434:	55 1f       	adc	r21, r21
    4436:	60 e0       	ldi	r22, 0x00	; 0
    4438:	74 e2       	ldi	r23, 0x24	; 36
    443a:	84 ef       	ldi	r24, 0xF4	; 244
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	0e 94 bc 3e 	call	0x7d78	; 0x7d78 <__udivmodsi4>
    4442:	ba 01       	movw	r22, r20
    4444:	a9 01       	movw	r20, r18
    4446:	41 50       	subi	r20, 0x01	; 1
    4448:	51 09       	sbc	r21, r1
    444a:	61 09       	sbc	r22, r1
    444c:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
    444e:	bb 27       	eor	r27, r27
    4450:	a7 2f       	mov	r26, r23
    4452:	96 2f       	mov	r25, r22
    4454:	85 2f       	mov	r24, r21
    4456:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
    445a:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
    445e:	82 e0       	ldi	r24, 0x02	; 2
    4460:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
    4464:	88 e9       	ldi	r24, 0x98	; 152
    4466:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
    446a:	86 e0       	ldi	r24, 0x06	; 6
    446c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
    4470:	e5 e2       	ldi	r30, 0x25	; 37
    4472:	f8 e0       	ldi	r31, 0x08	; 8
    4474:	84 e9       	ldi	r24, 0x94	; 148
    4476:	96 e0       	ldi	r25, 0x06	; 6
    4478:	91 87       	std	Z+9, r25	; 0x09
    447a:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
    447c:	80 e9       	ldi	r24, 0x90	; 144
    447e:	91 e0       	ldi	r25, 0x01	; 1
    4480:	95 83       	std	Z+5, r25	; 0x05
    4482:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
    4484:	17 82       	std	Z+7, r1	; 0x07
    4486:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
    4488:	11 82       	std	Z+1, r1	; 0x01
    448a:	10 82       	st	Z, r1
  txFifo.tail = 0;
    448c:	13 82       	std	Z+3, r1	; 0x03
    448e:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
    4490:	ea e8       	ldi	r30, 0x8A	; 138
    4492:	f6 e0       	ldi	r31, 0x06	; 6
    4494:	29 ef       	ldi	r18, 0xF9	; 249
    4496:	34 e0       	ldi	r19, 0x04	; 4
    4498:	31 87       	std	Z+9, r19	; 0x09
    449a:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
    449c:	95 83       	std	Z+5, r25	; 0x05
    449e:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
    44a0:	17 82       	std	Z+7, r1	; 0x07
    44a2:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
    44a4:	11 82       	std	Z+1, r1	; 0x01
    44a6:	10 82       	st	Z, r1
  rxFifo.tail = 0;
    44a8:	13 82       	std	Z+3, r1	; 0x03
    44aa:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <udrEmpty>
  newData = false;
    44b2:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <newData>
    44b6:	08 95       	ret

000044b8 <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
    44b8:	cf 93       	push	r28
    44ba:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
    44bc:	e5 e2       	ldi	r30, 0x25	; 37
    44be:	f8 e0       	ldi	r31, 0x08	; 8
    44c0:	26 81       	ldd	r18, Z+6	; 0x06
    44c2:	37 81       	ldd	r19, Z+7	; 0x07
    44c4:	64 81       	ldd	r22, Z+4	; 0x04
    44c6:	75 81       	ldd	r23, Z+5	; 0x05
    44c8:	26 17       	cp	r18, r22
    44ca:	37 07       	cpc	r19, r23
    44cc:	c9 f0       	breq	.+50     	; 0x4500 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
    44ce:	c0 85       	ldd	r28, Z+8	; 0x08
    44d0:	d1 85       	ldd	r29, Z+9	; 0x09
    44d2:	42 81       	ldd	r20, Z+2	; 0x02
    44d4:	53 81       	ldd	r21, Z+3	; 0x03
    44d6:	da 01       	movw	r26, r20
    44d8:	11 96       	adiw	r26, 0x01	; 1
    44da:	b3 83       	std	Z+3, r27	; 0x03
    44dc:	a2 83       	std	Z+2, r26	; 0x02
    44de:	fe 01       	movw	r30, r28
    44e0:	e4 0f       	add	r30, r20
    44e2:	f5 1f       	adc	r31, r21
    44e4:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
    44e6:	6a 17       	cp	r22, r26
    44e8:	7b 07       	cpc	r23, r27
    44ea:	21 f4       	brne	.+8      	; 0x44f4 <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
    44ec:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <txFifo+0x3>
    44f0:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <txFifo+0x2>
  txFifo.bytes++;
    44f4:	2f 5f       	subi	r18, 0xFF	; 255
    44f6:	3f 4f       	sbci	r19, 0xFF	; 255
    44f8:	30 93 2c 08 	sts	0x082C, r19	; 0x80082c <txFifo+0x7>
    44fc:	20 93 2b 08 	sts	0x082B, r18	; 0x80082b <txFifo+0x6>
}
    4500:	df 91       	pop	r29
    4502:	cf 91       	pop	r28
    4504:	08 95       	ret

00004506 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    4506:	4f b7       	in	r20, 0x3f	; 63
    4508:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    450a:	ea e8       	ldi	r30, 0x8A	; 138
    450c:	f6 e0       	ldi	r31, 0x06	; 6
    450e:	20 85       	ldd	r18, Z+8	; 0x08
    4510:	31 85       	ldd	r19, Z+9	; 0x09
    4512:	80 81       	ld	r24, Z
    4514:	91 81       	ldd	r25, Z+1	; 0x01
    4516:	bc 01       	movw	r22, r24
    4518:	6f 5f       	subi	r22, 0xFF	; 255
    451a:	7f 4f       	sbci	r23, 0xFF	; 255
    451c:	71 83       	std	Z+1, r23	; 0x01
    451e:	60 83       	st	Z, r22
    4520:	d9 01       	movw	r26, r18
    4522:	a8 0f       	add	r26, r24
    4524:	b9 1f       	adc	r27, r25
    4526:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    4528:	60 81       	ld	r22, Z
    452a:	71 81       	ldd	r23, Z+1	; 0x01
    452c:	24 81       	ldd	r18, Z+4	; 0x04
    452e:	35 81       	ldd	r19, Z+5	; 0x05
    4530:	62 17       	cp	r22, r18
    4532:	73 07       	cpc	r23, r19
    4534:	21 f4       	brne	.+8      	; 0x453e <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
    4536:	10 92 8b 06 	sts	0x068B, r1	; 0x80068b <rxFifo+0x1>
    453a:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <rxFifo>
    rxFifo.bytes--;
    453e:	ea e8       	ldi	r30, 0x8A	; 138
    4540:	f6 e0       	ldi	r31, 0x06	; 6
    4542:	26 81       	ldd	r18, Z+6	; 0x06
    4544:	37 81       	ldd	r19, Z+7	; 0x07
    4546:	21 50       	subi	r18, 0x01	; 1
    4548:	31 09       	sbc	r19, r1
    454a:	37 83       	std	Z+7, r19	; 0x07
    454c:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
    454e:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    4550:	08 95       	ret

00004552 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    4552:	1f 92       	push	r1
    4554:	0f 92       	push	r0
    4556:	0f b6       	in	r0, 0x3f	; 63
    4558:	0f 92       	push	r0
    455a:	11 24       	eor	r1, r1
    455c:	0b b6       	in	r0, 0x3b	; 59
    455e:	0f 92       	push	r0
    4560:	8f 93       	push	r24
    4562:	ef 93       	push	r30
    4564:	ff 93       	push	r31
  udrEmpty = true;
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    456c:	e9 ec       	ldi	r30, 0xC9	; 201
    456e:	f0 e0       	ldi	r31, 0x00	; 0
    4570:	80 81       	ld	r24, Z
    4572:	8f 7d       	andi	r24, 0xDF	; 223
    4574:	80 83       	st	Z, r24
}
    4576:	ff 91       	pop	r31
    4578:	ef 91       	pop	r30
    457a:	8f 91       	pop	r24
    457c:	0f 90       	pop	r0
    457e:	0b be       	out	0x3b, r0	; 59
    4580:	0f 90       	pop	r0
    4582:	0f be       	out	0x3f, r0	; 63
    4584:	0f 90       	pop	r0
    4586:	1f 90       	pop	r1
    4588:	18 95       	reti

0000458a <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    458a:	1f 92       	push	r1
    458c:	0f 92       	push	r0
    458e:	0f b6       	in	r0, 0x3f	; 63
    4590:	0f 92       	push	r0
    4592:	11 24       	eor	r1, r1
    4594:	0b b6       	in	r0, 0x3b	; 59
    4596:	0f 92       	push	r0
    4598:	2f 93       	push	r18
    459a:	3f 93       	push	r19
    459c:	4f 93       	push	r20
    459e:	5f 93       	push	r21
    45a0:	6f 93       	push	r22
    45a2:	7f 93       	push	r23
    45a4:	8f 93       	push	r24
    45a6:	9f 93       	push	r25
    45a8:	af 93       	push	r26
    45aa:	bf 93       	push	r27
    45ac:	ef 93       	push	r30
    45ae:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    45b0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
    45b4:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    45b8:	8c 71       	andi	r24, 0x1C	; 28
    45ba:	59 f5       	brne	.+86     	; 0x4612 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    45bc:	ea e8       	ldi	r30, 0x8A	; 138
    45be:	f6 e0       	ldi	r31, 0x06	; 6
    45c0:	46 81       	ldd	r20, Z+6	; 0x06
    45c2:	57 81       	ldd	r21, Z+7	; 0x07
    45c4:	84 81       	ldd	r24, Z+4	; 0x04
    45c6:	95 81       	ldd	r25, Z+5	; 0x05
    45c8:	48 17       	cp	r20, r24
    45ca:	59 07       	cpc	r21, r25
    45cc:	11 f1       	breq	.+68     	; 0x4612 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    45ce:	40 85       	ldd	r20, Z+8	; 0x08
    45d0:	51 85       	ldd	r21, Z+9	; 0x09
    45d2:	82 81       	ldd	r24, Z+2	; 0x02
    45d4:	93 81       	ldd	r25, Z+3	; 0x03
    45d6:	bc 01       	movw	r22, r24
    45d8:	6f 5f       	subi	r22, 0xFF	; 255
    45da:	7f 4f       	sbci	r23, 0xFF	; 255
    45dc:	73 83       	std	Z+3, r23	; 0x03
    45de:	62 83       	std	Z+2, r22	; 0x02
    45e0:	da 01       	movw	r26, r20
    45e2:	a8 0f       	add	r26, r24
    45e4:	b9 1f       	adc	r27, r25
    45e6:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    45e8:	22 81       	ldd	r18, Z+2	; 0x02
    45ea:	33 81       	ldd	r19, Z+3	; 0x03
    45ec:	84 81       	ldd	r24, Z+4	; 0x04
    45ee:	95 81       	ldd	r25, Z+5	; 0x05
    45f0:	28 17       	cp	r18, r24
    45f2:	39 07       	cpc	r19, r25
    45f4:	21 f4       	brne	.+8      	; 0x45fe <__vector_36+0x74>
      rxFifo.tail = 0;
    45f6:	10 92 8d 06 	sts	0x068D, r1	; 0x80068d <rxFifo+0x3>
    45fa:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <rxFifo+0x2>
    rxFifo.bytes++;
    45fe:	ea e8       	ldi	r30, 0x8A	; 138
    4600:	f6 e0       	ldi	r31, 0x06	; 6
    4602:	86 81       	ldd	r24, Z+6	; 0x06
    4604:	97 81       	ldd	r25, Z+7	; 0x07
    4606:	01 96       	adiw	r24, 0x01	; 1
    4608:	97 83       	std	Z+7, r25	; 0x07
    460a:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    460c:	81 e0       	ldi	r24, 0x01	; 1
    460e:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    4612:	ff 91       	pop	r31
    4614:	ef 91       	pop	r30
    4616:	bf 91       	pop	r27
    4618:	af 91       	pop	r26
    461a:	9f 91       	pop	r25
    461c:	8f 91       	pop	r24
    461e:	7f 91       	pop	r23
    4620:	6f 91       	pop	r22
    4622:	5f 91       	pop	r21
    4624:	4f 91       	pop	r20
    4626:	3f 91       	pop	r19
    4628:	2f 91       	pop	r18
    462a:	0f 90       	pop	r0
    462c:	0b be       	out	0x3b, r0	; 59
    462e:	0f 90       	pop	r0
    4630:	0f be       	out	0x3f, r0	; 63
    4632:	0f 90       	pop	r0
    4634:	1f 90       	pop	r1
    4636:	18 95       	reti

00004638 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    4638:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <txFifo+0x6>
    463c:	90 91 2c 08 	lds	r25, 0x082C	; 0x80082c <txFifo+0x7>
    4640:	00 97       	sbiw	r24, 0x00	; 0
    4642:	69 f1       	breq	.+90     	; 0x469e <HAL_UartTaskHandler+0x66>
    4644:	20 91 f8 04 	lds	r18, 0x04F8	; 0x8004f8 <udrEmpty>
    4648:	22 23       	and	r18, r18
    464a:	49 f1       	breq	.+82     	; 0x469e <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    464c:	e5 e2       	ldi	r30, 0x25	; 37
    464e:	f8 e0       	ldi	r31, 0x08	; 8
    4650:	60 85       	ldd	r22, Z+8	; 0x08
    4652:	71 85       	ldd	r23, Z+9	; 0x09
    4654:	20 81       	ld	r18, Z
    4656:	31 81       	ldd	r19, Z+1	; 0x01
    4658:	a9 01       	movw	r20, r18
    465a:	4f 5f       	subi	r20, 0xFF	; 255
    465c:	5f 4f       	sbci	r21, 0xFF	; 255
    465e:	51 83       	std	Z+1, r21	; 0x01
    4660:	40 83       	st	Z, r20
    4662:	db 01       	movw	r26, r22
    4664:	a2 0f       	add	r26, r18
    4666:	b3 1f       	adc	r27, r19
    4668:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
    466a:	64 81       	ldd	r22, Z+4	; 0x04
    466c:	75 81       	ldd	r23, Z+5	; 0x05
    466e:	46 17       	cp	r20, r22
    4670:	57 07       	cpc	r21, r23
    4672:	21 f4       	brne	.+8      	; 0x467c <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
    4674:	10 92 26 08 	sts	0x0826, r1	; 0x800826 <txFifo+0x1>
    4678:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <txFifo>
    txFifo.bytes--;
    467c:	01 97       	sbiw	r24, 0x01	; 1
    467e:	90 93 2c 08 	sts	0x082C, r25	; 0x80082c <txFifo+0x7>
    4682:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <txFifo+0x6>

    ATOMIC_SECTION_ENTER
    4686:	9f b7       	in	r25, 0x3f	; 63
    4688:	f8 94       	cli
      UDRx = byte;
    468a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
    468e:	e9 ec       	ldi	r30, 0xC9	; 201
    4690:	f0 e0       	ldi	r31, 0x00	; 0
    4692:	80 81       	ld	r24, Z
    4694:	80 62       	ori	r24, 0x20	; 32
    4696:	80 83       	st	Z, r24
      udrEmpty = false;
    4698:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <udrEmpty>
    ATOMIC_SECTION_LEAVE
    469c:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    469e:	2f b7       	in	r18, 0x3f	; 63
    46a0:	f8 94       	cli
      new = newData;
    46a2:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <newData>
      newData = false;
    46a6:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <newData>
      bytes = rxFifo.bytes;
    46aa:	40 91 90 06 	lds	r20, 0x0690	; 0x800690 <rxFifo+0x6>
    46ae:	50 91 91 06 	lds	r21, 0x0691	; 0x800691 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
    46b2:	2f bf       	out	0x3f, r18	; 63

    if (new)
    46b4:	99 23       	and	r25, r25
    46b6:	19 f0       	breq	.+6      	; 0x46be <HAL_UartTaskHandler+0x86>
      HAL_UartBytesReceived(bytes);
    46b8:	ca 01       	movw	r24, r20
    46ba:	0c 94 99 03 	jmp	0x732	; 0x732 <HAL_UartBytesReceived>
    46be:	08 95       	ret

000046c0 <HAL_UartPrintChar>:
  }
}


int HAL_UartPrintChar(char character ,FILE *stream){
	while ((UCSR1A & (1 << UDRE1)) == 0){};
    46c0:	e8 ec       	ldi	r30, 0xC8	; 200
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	90 81       	ld	r25, Z
    46c6:	95 ff       	sbrs	r25, 5
    46c8:	fd cf       	rjmp	.-6      	; 0x46c4 <HAL_UartPrintChar+0x4>
	UDR1 = character;
    46ca:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
	return 0 ;
}
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	08 95       	ret

000046d4 <spi_init>:

void
spi_init(void)
{
  // CS PIN for FLASH
  DDRD	|= _BV(WIZNET_CS); // CS to OUT && Disable
    46d4:	54 9a       	sbi	0x0a, 4	; 10
  SPI_WIZNET_DISABLE();
    46d6:	5c 9a       	sbi	0x0b, 4	; 11
  
  /* Initalize ports for communication with SPI units. */
  /* CSN=SS and must be output when master! */
  DDRB  |= _BV(MOSI) | _BV(SCK) | _BV(CSN);
    46d8:	84 b1       	in	r24, 0x04	; 4
    46da:	86 61       	ori	r24, 0x16	; 22
    46dc:	84 b9       	out	0x04, r24	; 4
  PORTB |= _BV(MOSI) | _BV(SCK);
    46de:	85 b1       	in	r24, 0x05	; 5
    46e0:	86 60       	ori	r24, 0x06	; 6
    46e2:	85 b9       	out	0x05, r24	; 5
 
  /* Enables SPI, selects "master", clock rate FCK / 4 - 4Mhz, and SPI mode 0 */
  SPCR = _BV(SPE) | _BV(MSTR);
    46e4:	80 e5       	ldi	r24, 0x50	; 80
    46e6:	8c bd       	out	0x2c, r24	; 44
#if defined(SPI_8_MHZ)
  SPSR = _BV(SPI2X); //FCK / 2 - 8Mhz
#elif defined (SPI_4_MHZ)
  SPSR = 0x0; //FCK / 4 - 4Mhz
    46e8:	1d bc       	out	0x2d, r1	; 45
    46ea:	08 95       	ret

000046ec <getNextPacketId>:
  else
    rc = FAILURE;
    
exit:
  return rc;
}
    46ec:	fc 01       	movw	r30, r24
    46ee:	80 81       	ld	r24, Z
    46f0:	91 81       	ldd	r25, Z+1	; 0x01
    46f2:	a2 81       	ldd	r26, Z+2	; 0x02
    46f4:	b3 81       	ldd	r27, Z+3	; 0x03
    46f6:	8f 3f       	cpi	r24, 0xFF	; 255
    46f8:	2f ef       	ldi	r18, 0xFF	; 255
    46fa:	92 07       	cpc	r25, r18
    46fc:	a1 05       	cpc	r26, r1
    46fe:	b1 05       	cpc	r27, r1
    4700:	39 f0       	breq	.+14     	; 0x4710 <getNextPacketId+0x24>
    4702:	bc 01       	movw	r22, r24
    4704:	cd 01       	movw	r24, r26
    4706:	6f 5f       	subi	r22, 0xFF	; 255
    4708:	7f 4f       	sbci	r23, 0xFF	; 255
    470a:	8f 4f       	sbci	r24, 0xFF	; 255
    470c:	9f 4f       	sbci	r25, 0xFF	; 255
    470e:	04 c0       	rjmp	.+8      	; 0x4718 <getNextPacketId+0x2c>
    4710:	61 e0       	ldi	r22, 0x01	; 1
    4712:	70 e0       	ldi	r23, 0x00	; 0
    4714:	80 e0       	ldi	r24, 0x00	; 0
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	60 83       	st	Z, r22
    471a:	71 83       	std	Z+1, r23	; 0x01
    471c:	82 83       	std	Z+2, r24	; 0x02
    471e:	93 83       	std	Z+3, r25	; 0x03
    4720:	08 95       	ret

00004722 <sendPacket>:
    4722:	2f 92       	push	r2
    4724:	3f 92       	push	r3
    4726:	4f 92       	push	r4
    4728:	5f 92       	push	r5
    472a:	6f 92       	push	r6
    472c:	7f 92       	push	r7
    472e:	8f 92       	push	r8
    4730:	9f 92       	push	r9
    4732:	af 92       	push	r10
    4734:	bf 92       	push	r11
    4736:	cf 92       	push	r12
    4738:	df 92       	push	r13
    473a:	ef 92       	push	r14
    473c:	ff 92       	push	r15
    473e:	0f 93       	push	r16
    4740:	1f 93       	push	r17
    4742:	cf 93       	push	r28
    4744:	df 93       	push	r29
    4746:	ec 01       	movw	r28, r24
    4748:	2a 01       	movw	r4, r20
    474a:	3b 01       	movw	r6, r22
    474c:	19 01       	movw	r2, r18
    474e:	14 16       	cp	r1, r20
    4750:	15 06       	cpc	r1, r21
    4752:	16 06       	cpc	r1, r22
    4754:	17 06       	cpc	r1, r23
    4756:	1c f1       	brlt	.+70     	; 0x479e <sendPacket+0x7c>
    4758:	81 2c       	mov	r8, r1
    475a:	91 2c       	mov	r9, r1
    475c:	54 01       	movw	r10, r8
    475e:	26 c0       	rjmp	.+76     	; 0x47ac <sendPacket+0x8a>
    4760:	ef a5       	ldd	r30, Y+47	; 0x2f
    4762:	f8 a9       	ldd	r31, Y+48	; 0x30
    4764:	c6 80       	ldd	r12, Z+6	; 0x06
    4766:	d7 80       	ldd	r13, Z+7	; 0x07
    4768:	c1 01       	movw	r24, r2
    476a:	ff d7       	rcall	.+4094   	; 0x576a <left_ms>
    476c:	7b 01       	movw	r14, r22
    476e:	8c 01       	movw	r16, r24
    4770:	8c 85       	ldd	r24, Y+12	; 0x0c
    4772:	9d 85       	ldd	r25, Y+13	; 0x0d
    4774:	bc 01       	movw	r22, r24
    4776:	68 0d       	add	r22, r8
    4778:	79 1d       	adc	r23, r9
    477a:	a3 01       	movw	r20, r6
    477c:	92 01       	movw	r18, r4
    477e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4780:	98 a9       	ldd	r25, Y+48	; 0x30
    4782:	f6 01       	movw	r30, r12
    4784:	19 95       	eicall
    4786:	99 23       	and	r25, r25
    4788:	8c f0       	brlt	.+34     	; 0x47ac <sendPacket+0x8a>
    478a:	86 0e       	add	r8, r22
    478c:	97 1e       	adc	r9, r23
    478e:	a8 1e       	adc	r10, r24
    4790:	b9 1e       	adc	r11, r25
    4792:	84 14       	cp	r8, r4
    4794:	95 04       	cpc	r9, r5
    4796:	a6 04       	cpc	r10, r6
    4798:	b7 04       	cpc	r11, r7
    479a:	24 f0       	brlt	.+8      	; 0x47a4 <sendPacket+0x82>
    479c:	07 c0       	rjmp	.+14     	; 0x47ac <sendPacket+0x8a>
    479e:	81 2c       	mov	r8, r1
    47a0:	91 2c       	mov	r9, r1
    47a2:	54 01       	movw	r10, r8
    47a4:	c1 01       	movw	r24, r2
    47a6:	7f d7       	rcall	.+3838   	; 0x56a6 <expired>
    47a8:	88 23       	and	r24, r24
    47aa:	d1 f2       	breq	.-76     	; 0x4760 <sendPacket+0x3e>
    47ac:	48 14       	cp	r4, r8
    47ae:	59 04       	cpc	r5, r9
    47b0:	6a 04       	cpc	r6, r10
    47b2:	7b 04       	cpc	r7, r11
    47b4:	59 f4       	brne	.+22     	; 0x47cc <sendPacket+0xaa>
    47b6:	48 89       	ldd	r20, Y+16	; 0x10
    47b8:	59 89       	ldd	r21, Y+17	; 0x11
    47ba:	6a 89       	ldd	r22, Y+18	; 0x12
    47bc:	7b 89       	ldd	r23, Y+19	; 0x13
    47be:	ce 01       	movw	r24, r28
    47c0:	c1 96       	adiw	r24, 0x31	; 49
    47c2:	a9 d7       	rcall	.+3922   	; 0x5716 <countdown>
    47c4:	60 e0       	ldi	r22, 0x00	; 0
    47c6:	70 e0       	ldi	r23, 0x00	; 0
    47c8:	cb 01       	movw	r24, r22
    47ca:	03 c0       	rjmp	.+6      	; 0x47d2 <sendPacket+0xb0>
    47cc:	6f ef       	ldi	r22, 0xFF	; 255
    47ce:	7f ef       	ldi	r23, 0xFF	; 255
    47d0:	cb 01       	movw	r24, r22
    47d2:	df 91       	pop	r29
    47d4:	cf 91       	pop	r28
    47d6:	1f 91       	pop	r17
    47d8:	0f 91       	pop	r16
    47da:	ff 90       	pop	r15
    47dc:	ef 90       	pop	r14
    47de:	df 90       	pop	r13
    47e0:	cf 90       	pop	r12
    47e2:	bf 90       	pop	r11
    47e4:	af 90       	pop	r10
    47e6:	9f 90       	pop	r9
    47e8:	8f 90       	pop	r8
    47ea:	7f 90       	pop	r7
    47ec:	6f 90       	pop	r6
    47ee:	5f 90       	pop	r5
    47f0:	4f 90       	pop	r4
    47f2:	3f 90       	pop	r3
    47f4:	2f 90       	pop	r2
    47f6:	08 95       	ret

000047f8 <MQTTClient>:
    47f8:	af 92       	push	r10
    47fa:	bf 92       	push	r11
    47fc:	cf 92       	push	r12
    47fe:	df 92       	push	r13
    4800:	ef 92       	push	r14
    4802:	ff 92       	push	r15
    4804:	0f 93       	push	r16
    4806:	1f 93       	push	r17
    4808:	fc 01       	movw	r30, r24
    480a:	70 ab       	std	Z+48, r23	; 0x30
    480c:	67 a7       	std	Z+47, r22	; 0x2f
    480e:	12 8e       	std	Z+26, r1	; 0x1a
    4810:	11 8e       	std	Z+25, r1	; 0x19
    4812:	16 8e       	std	Z+30, r1	; 0x1e
    4814:	15 8e       	std	Z+29, r1	; 0x1d
    4816:	12 a2       	std	Z+34, r1	; 0x22
    4818:	11 a2       	std	Z+33, r1	; 0x21
    481a:	16 a2       	std	Z+38, r1	; 0x26
    481c:	15 a2       	std	Z+37, r1	; 0x25
    481e:	12 a6       	std	Z+42, r1	; 0x2a
    4820:	11 a6       	std	Z+41, r1	; 0x29
    4822:	24 83       	std	Z+4, r18	; 0x04
    4824:	35 83       	std	Z+5, r19	; 0x05
    4826:	46 83       	std	Z+6, r20	; 0x06
    4828:	57 83       	std	Z+7, r21	; 0x07
    482a:	15 87       	std	Z+13, r17	; 0x0d
    482c:	04 87       	std	Z+12, r16	; 0x0c
    482e:	f1 86       	std	Z+9, r15	; 0x09
    4830:	e0 86       	std	Z+8, r14	; 0x08
    4832:	d7 86       	std	Z+15, r13	; 0x0f
    4834:	c6 86       	std	Z+14, r12	; 0x0e
    4836:	b3 86       	std	Z+11, r11	; 0x0b
    4838:	a2 86       	std	Z+10, r10	; 0x0a
    483a:	15 8a       	std	Z+21, r1	; 0x15
    483c:	16 8a       	std	Z+22, r1	; 0x16
    483e:	17 8a       	std	Z+23, r1	; 0x17
    4840:	10 8e       	std	Z+24, r1	; 0x18
    4842:	14 8a       	std	Z+20, r1	; 0x14
    4844:	16 a6       	std	Z+46, r1	; 0x2e
    4846:	15 a6       	std	Z+45, r1	; 0x2d
    4848:	c1 96       	adiw	r24, 0x31	; 49
    484a:	ab d7       	rcall	.+3926   	; 0x57a2 <InitTimer>
    484c:	1f 91       	pop	r17
    484e:	0f 91       	pop	r16
    4850:	ff 90       	pop	r15
    4852:	ef 90       	pop	r14
    4854:	df 90       	pop	r13
    4856:	cf 90       	pop	r12
    4858:	bf 90       	pop	r11
    485a:	af 90       	pop	r10
    485c:	08 95       	ret

0000485e <decodePacket>:
    485e:	2f 92       	push	r2
    4860:	3f 92       	push	r3
    4862:	4f 92       	push	r4
    4864:	5f 92       	push	r5
    4866:	6f 92       	push	r6
    4868:	7f 92       	push	r7
    486a:	8f 92       	push	r8
    486c:	9f 92       	push	r9
    486e:	af 92       	push	r10
    4870:	bf 92       	push	r11
    4872:	cf 92       	push	r12
    4874:	df 92       	push	r13
    4876:	ef 92       	push	r14
    4878:	ff 92       	push	r15
    487a:	0f 93       	push	r16
    487c:	1f 93       	push	r17
    487e:	cf 93       	push	r28
    4880:	df 93       	push	r29
    4882:	00 d0       	rcall	.+0      	; 0x4884 <decodePacket+0x26>
    4884:	1f 92       	push	r1
    4886:	1f 92       	push	r1
    4888:	cd b7       	in	r28, 0x3d	; 61
    488a:	de b7       	in	r29, 0x3e	; 62
    488c:	1c 01       	movw	r2, r24
    488e:	6b 01       	movw	r12, r22
    4890:	2a 83       	std	Y+2, r18	; 0x02
    4892:	3b 83       	std	Y+3, r19	; 0x03
    4894:	4c 83       	std	Y+4, r20	; 0x04
    4896:	5d 83       	std	Y+5, r21	; 0x05
    4898:	db 01       	movw	r26, r22
    489a:	1d 92       	st	X+, r1
    489c:	1d 92       	st	X+, r1
    489e:	1d 92       	st	X+, r1
    48a0:	1c 92       	st	X, r1
    48a2:	13 97       	sbiw	r26, 0x03	; 3
    48a4:	41 2c       	mov	r4, r1
    48a6:	51 2c       	mov	r5, r1
    48a8:	32 01       	movw	r6, r4
    48aa:	43 94       	inc	r4
    48ac:	81 2c       	mov	r8, r1
    48ae:	91 2c       	mov	r9, r1
    48b0:	54 01       	movw	r10, r8
    48b2:	83 94       	inc	r8
    48b4:	0c c0       	rjmp	.+24     	; 0x48ce <decodePacket+0x70>
    48b6:	bf ef       	ldi	r27, 0xFF	; 255
    48b8:	4b 1a       	sub	r4, r27
    48ba:	5b 0a       	sbc	r5, r27
    48bc:	6b 0a       	sbc	r6, r27
    48be:	7b 0a       	sbc	r7, r27
    48c0:	e5 e0       	ldi	r30, 0x05	; 5
    48c2:	4e 16       	cp	r4, r30
    48c4:	51 04       	cpc	r5, r1
    48c6:	61 04       	cpc	r6, r1
    48c8:	71 04       	cpc	r7, r1
    48ca:	09 f4       	brne	.+2      	; 0x48ce <decodePacket+0x70>
    48cc:	51 c0       	rjmp	.+162    	; 0x4970 <decodePacket+0x112>
    48ce:	d1 01       	movw	r26, r2
    48d0:	9f 96       	adiw	r26, 0x2f	; 47
    48d2:	8d 91       	ld	r24, X+
    48d4:	9c 91       	ld	r25, X
    48d6:	d0 97       	sbiw	r26, 0x30	; 48
    48d8:	dc 01       	movw	r26, r24
    48da:	14 96       	adiw	r26, 0x04	; 4
    48dc:	ed 91       	ld	r30, X+
    48de:	fc 91       	ld	r31, X
    48e0:	15 97       	sbiw	r26, 0x05	; 5
    48e2:	ea 80       	ldd	r14, Y+2	; 0x02
    48e4:	fb 80       	ldd	r15, Y+3	; 0x03
    48e6:	0c 81       	ldd	r16, Y+4	; 0x04
    48e8:	1d 81       	ldd	r17, Y+5	; 0x05
    48ea:	21 e0       	ldi	r18, 0x01	; 1
    48ec:	30 e0       	ldi	r19, 0x00	; 0
    48ee:	40 e0       	ldi	r20, 0x00	; 0
    48f0:	50 e0       	ldi	r21, 0x00	; 0
    48f2:	be 01       	movw	r22, r28
    48f4:	6f 5f       	subi	r22, 0xFF	; 255
    48f6:	7f 4f       	sbci	r23, 0xFF	; 255
    48f8:	19 95       	eicall
    48fa:	61 30       	cpi	r22, 0x01	; 1
    48fc:	71 05       	cpc	r23, r1
    48fe:	81 05       	cpc	r24, r1
    4900:	91 05       	cpc	r25, r1
    4902:	b1 f5       	brne	.+108    	; 0x4970 <decodePacket+0x112>
    4904:	f9 80       	ldd	r15, Y+1	; 0x01
    4906:	af 2d       	mov	r26, r15
    4908:	af 77       	andi	r26, 0x7F	; 127
    490a:	b0 e0       	ldi	r27, 0x00	; 0
    490c:	a5 01       	movw	r20, r10
    490e:	94 01       	movw	r18, r8
    4910:	0e 94 e6 3e 	call	0x7dcc	; 0x7dcc <__muluhisi3>
    4914:	f6 01       	movw	r30, r12
    4916:	00 81       	ld	r16, Z
    4918:	11 81       	ldd	r17, Z+1	; 0x01
    491a:	22 81       	ldd	r18, Z+2	; 0x02
    491c:	33 81       	ldd	r19, Z+3	; 0x03
    491e:	dc 01       	movw	r26, r24
    4920:	cb 01       	movw	r24, r22
    4922:	80 0f       	add	r24, r16
    4924:	91 1f       	adc	r25, r17
    4926:	a2 1f       	adc	r26, r18
    4928:	b3 1f       	adc	r27, r19
    492a:	80 83       	st	Z, r24
    492c:	91 83       	std	Z+1, r25	; 0x01
    492e:	a2 83       	std	Z+2, r26	; 0x02
    4930:	b3 83       	std	Z+3, r27	; 0x03
    4932:	88 0c       	add	r8, r8
    4934:	99 1c       	adc	r9, r9
    4936:	aa 1c       	adc	r10, r10
    4938:	bb 1c       	adc	r11, r11
    493a:	88 0c       	add	r8, r8
    493c:	99 1c       	adc	r9, r9
    493e:	aa 1c       	adc	r10, r10
    4940:	bb 1c       	adc	r11, r11
    4942:	88 0c       	add	r8, r8
    4944:	99 1c       	adc	r9, r9
    4946:	aa 1c       	adc	r10, r10
    4948:	bb 1c       	adc	r11, r11
    494a:	88 0c       	add	r8, r8
    494c:	99 1c       	adc	r9, r9
    494e:	aa 1c       	adc	r10, r10
    4950:	bb 1c       	adc	r11, r11
    4952:	88 0c       	add	r8, r8
    4954:	99 1c       	adc	r9, r9
    4956:	aa 1c       	adc	r10, r10
    4958:	bb 1c       	adc	r11, r11
    495a:	88 0c       	add	r8, r8
    495c:	99 1c       	adc	r9, r9
    495e:	aa 1c       	adc	r10, r10
    4960:	bb 1c       	adc	r11, r11
    4962:	88 0c       	add	r8, r8
    4964:	99 1c       	adc	r9, r9
    4966:	aa 1c       	adc	r10, r10
    4968:	bb 1c       	adc	r11, r11
    496a:	ff 20       	and	r15, r15
    496c:	0c f4       	brge	.+2      	; 0x4970 <decodePacket+0x112>
    496e:	a3 cf       	rjmp	.-186    	; 0x48b6 <decodePacket+0x58>
    4970:	c3 01       	movw	r24, r6
    4972:	b2 01       	movw	r22, r4
    4974:	0f 90       	pop	r0
    4976:	0f 90       	pop	r0
    4978:	0f 90       	pop	r0
    497a:	0f 90       	pop	r0
    497c:	0f 90       	pop	r0
    497e:	df 91       	pop	r29
    4980:	cf 91       	pop	r28
    4982:	1f 91       	pop	r17
    4984:	0f 91       	pop	r16
    4986:	ff 90       	pop	r15
    4988:	ef 90       	pop	r14
    498a:	df 90       	pop	r13
    498c:	cf 90       	pop	r12
    498e:	bf 90       	pop	r11
    4990:	af 90       	pop	r10
    4992:	9f 90       	pop	r9
    4994:	8f 90       	pop	r8
    4996:	7f 90       	pop	r7
    4998:	6f 90       	pop	r6
    499a:	5f 90       	pop	r5
    499c:	4f 90       	pop	r4
    499e:	3f 90       	pop	r3
    49a0:	2f 90       	pop	r2
    49a2:	08 95       	ret

000049a4 <readPacket>:
    49a4:	4f 92       	push	r4
    49a6:	5f 92       	push	r5
    49a8:	6f 92       	push	r6
    49aa:	7f 92       	push	r7
    49ac:	8f 92       	push	r8
    49ae:	9f 92       	push	r9
    49b0:	af 92       	push	r10
    49b2:	bf 92       	push	r11
    49b4:	cf 92       	push	r12
    49b6:	df 92       	push	r13
    49b8:	ef 92       	push	r14
    49ba:	ff 92       	push	r15
    49bc:	0f 93       	push	r16
    49be:	1f 93       	push	r17
    49c0:	cf 93       	push	r28
    49c2:	df 93       	push	r29
    49c4:	00 d0       	rcall	.+0      	; 0x49c6 <readPacket+0x22>
    49c6:	1f 92       	push	r1
    49c8:	cd b7       	in	r28, 0x3d	; 61
    49ca:	de b7       	in	r29, 0x3e	; 62
    49cc:	6c 01       	movw	r12, r24
    49ce:	5b 01       	movw	r10, r22
    49d0:	19 82       	std	Y+1, r1	; 0x01
    49d2:	1a 82       	std	Y+2, r1	; 0x02
    49d4:	1b 82       	std	Y+3, r1	; 0x03
    49d6:	1c 82       	std	Y+4, r1	; 0x04
    49d8:	dc 01       	movw	r26, r24
    49da:	9f 96       	adiw	r26, 0x2f	; 47
    49dc:	ed 91       	ld	r30, X+
    49de:	fc 91       	ld	r31, X
    49e0:	d0 97       	sbiw	r26, 0x30	; 48
    49e2:	84 80       	ldd	r8, Z+4	; 0x04
    49e4:	95 80       	ldd	r9, Z+5	; 0x05
    49e6:	cb 01       	movw	r24, r22
    49e8:	c0 d6       	rcall	.+3456   	; 0x576a <left_ms>
    49ea:	7b 01       	movw	r14, r22
    49ec:	8c 01       	movw	r16, r24
    49ee:	f6 01       	movw	r30, r12
    49f0:	66 85       	ldd	r22, Z+14	; 0x0e
    49f2:	77 85       	ldd	r23, Z+15	; 0x0f
    49f4:	21 e0       	ldi	r18, 0x01	; 1
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	40 e0       	ldi	r20, 0x00	; 0
    49fa:	50 e0       	ldi	r21, 0x00	; 0
    49fc:	87 a5       	ldd	r24, Z+47	; 0x2f
    49fe:	90 a9       	ldd	r25, Z+48	; 0x30
    4a00:	f4 01       	movw	r30, r8
    4a02:	19 95       	eicall
    4a04:	61 30       	cpi	r22, 0x01	; 1
    4a06:	71 05       	cpc	r23, r1
    4a08:	81 05       	cpc	r24, r1
    4a0a:	91 05       	cpc	r25, r1
    4a0c:	09 f0       	breq	.+2      	; 0x4a10 <readPacket+0x6c>
    4a0e:	52 c0       	rjmp	.+164    	; 0x4ab4 <readPacket+0x110>
    4a10:	c5 01       	movw	r24, r10
    4a12:	ab d6       	rcall	.+3414   	; 0x576a <left_ms>
    4a14:	9b 01       	movw	r18, r22
    4a16:	ac 01       	movw	r20, r24
    4a18:	be 01       	movw	r22, r28
    4a1a:	6f 5f       	subi	r22, 0xFF	; 255
    4a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a1e:	c6 01       	movw	r24, r12
    4a20:	1e df       	rcall	.-452    	; 0x485e <decodePacket>
    4a22:	49 81       	ldd	r20, Y+1	; 0x01
    4a24:	5a 81       	ldd	r21, Y+2	; 0x02
    4a26:	6b 81       	ldd	r22, Y+3	; 0x03
    4a28:	7c 81       	ldd	r23, Y+4	; 0x04
    4a2a:	d6 01       	movw	r26, r12
    4a2c:	1e 96       	adiw	r26, 0x0e	; 14
    4a2e:	8d 91       	ld	r24, X+
    4a30:	9c 91       	ld	r25, X
    4a32:	1f 97       	sbiw	r26, 0x0f	; 15
    4a34:	01 96       	adiw	r24, 0x01	; 1
    4a36:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <MQTTPacket_encode>
    4a3a:	2b 01       	movw	r4, r22
    4a3c:	3c 01       	movw	r6, r24
    4a3e:	89 81       	ldd	r24, Y+1	; 0x01
    4a40:	9a 81       	ldd	r25, Y+2	; 0x02
    4a42:	ab 81       	ldd	r26, Y+3	; 0x03
    4a44:	bc 81       	ldd	r27, Y+4	; 0x04
    4a46:	18 16       	cp	r1, r24
    4a48:	19 06       	cpc	r1, r25
    4a4a:	1a 06       	cpc	r1, r26
    4a4c:	1b 06       	cpc	r1, r27
    4a4e:	34 f5       	brge	.+76     	; 0x4a9c <readPacket+0xf8>
    4a50:	d6 01       	movw	r26, r12
    4a52:	9f 96       	adiw	r26, 0x2f	; 47
    4a54:	ed 91       	ld	r30, X+
    4a56:	fc 91       	ld	r31, X
    4a58:	d0 97       	sbiw	r26, 0x30	; 48
    4a5a:	84 80       	ldd	r8, Z+4	; 0x04
    4a5c:	95 80       	ldd	r9, Z+5	; 0x05
    4a5e:	c5 01       	movw	r24, r10
    4a60:	84 d6       	rcall	.+3336   	; 0x576a <left_ms>
    4a62:	7b 01       	movw	r14, r22
    4a64:	8c 01       	movw	r16, r24
    4a66:	29 81       	ldd	r18, Y+1	; 0x01
    4a68:	3a 81       	ldd	r19, Y+2	; 0x02
    4a6a:	4b 81       	ldd	r20, Y+3	; 0x03
    4a6c:	5c 81       	ldd	r21, Y+4	; 0x04
    4a6e:	bf ef       	ldi	r27, 0xFF	; 255
    4a70:	4b 1a       	sub	r4, r27
    4a72:	5b 0a       	sbc	r5, r27
    4a74:	6b 0a       	sbc	r6, r27
    4a76:	7b 0a       	sbc	r7, r27
    4a78:	f6 01       	movw	r30, r12
    4a7a:	66 85       	ldd	r22, Z+14	; 0x0e
    4a7c:	77 85       	ldd	r23, Z+15	; 0x0f
    4a7e:	64 0d       	add	r22, r4
    4a80:	75 1d       	adc	r23, r5
    4a82:	87 a5       	ldd	r24, Z+47	; 0x2f
    4a84:	90 a9       	ldd	r25, Z+48	; 0x30
    4a86:	f4 01       	movw	r30, r8
    4a88:	19 95       	eicall
    4a8a:	09 81       	ldd	r16, Y+1	; 0x01
    4a8c:	1a 81       	ldd	r17, Y+2	; 0x02
    4a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    4a90:	3c 81       	ldd	r19, Y+4	; 0x04
    4a92:	60 17       	cp	r22, r16
    4a94:	71 07       	cpc	r23, r17
    4a96:	82 07       	cpc	r24, r18
    4a98:	93 07       	cpc	r25, r19
    4a9a:	81 f4       	brne	.+32     	; 0x4abc <readPacket+0x118>
    4a9c:	d6 01       	movw	r26, r12
    4a9e:	1e 96       	adiw	r26, 0x0e	; 14
    4aa0:	ed 91       	ld	r30, X+
    4aa2:	fc 91       	ld	r31, X
    4aa4:	1f 97       	sbiw	r26, 0x0f	; 15
    4aa6:	60 81       	ld	r22, Z
    4aa8:	62 95       	swap	r22
    4aaa:	6f 70       	andi	r22, 0x0F	; 15
    4aac:	70 e0       	ldi	r23, 0x00	; 0
    4aae:	80 e0       	ldi	r24, 0x00	; 0
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	07 c0       	rjmp	.+14     	; 0x4ac2 <readPacket+0x11e>
    4ab4:	6f ef       	ldi	r22, 0xFF	; 255
    4ab6:	7f ef       	ldi	r23, 0xFF	; 255
    4ab8:	cb 01       	movw	r24, r22
    4aba:	03 c0       	rjmp	.+6      	; 0x4ac2 <readPacket+0x11e>
    4abc:	6f ef       	ldi	r22, 0xFF	; 255
    4abe:	7f ef       	ldi	r23, 0xFF	; 255
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	0f 90       	pop	r0
    4ac4:	0f 90       	pop	r0
    4ac6:	0f 90       	pop	r0
    4ac8:	0f 90       	pop	r0
    4aca:	df 91       	pop	r29
    4acc:	cf 91       	pop	r28
    4ace:	1f 91       	pop	r17
    4ad0:	0f 91       	pop	r16
    4ad2:	ff 90       	pop	r15
    4ad4:	ef 90       	pop	r14
    4ad6:	df 90       	pop	r13
    4ad8:	cf 90       	pop	r12
    4ada:	bf 90       	pop	r11
    4adc:	af 90       	pop	r10
    4ade:	9f 90       	pop	r9
    4ae0:	8f 90       	pop	r8
    4ae2:	7f 90       	pop	r7
    4ae4:	6f 90       	pop	r6
    4ae6:	5f 90       	pop	r5
    4ae8:	4f 90       	pop	r4
    4aea:	08 95       	ret

00004aec <isTopicMatched>:
    4aec:	cf 93       	push	r28
    4aee:	df 93       	push	r29
    4af0:	dc 01       	movw	r26, r24
    4af2:	eb 01       	movw	r28, r22
    4af4:	ee 81       	ldd	r30, Y+6	; 0x06
    4af6:	ff 81       	ldd	r31, Y+7	; 0x07
    4af8:	4a 81       	ldd	r20, Y+2	; 0x02
    4afa:	5b 81       	ldd	r21, Y+3	; 0x03
    4afc:	4e 0f       	add	r20, r30
    4afe:	5f 1f       	adc	r21, r31
    4b00:	9c 91       	ld	r25, X
    4b02:	99 23       	and	r25, r25
    4b04:	09 f4       	brne	.+2      	; 0x4b08 <isTopicMatched+0x1c>
    4b06:	46 c0       	rjmp	.+140    	; 0x4b94 <isTopicMatched+0xa8>
    4b08:	e4 17       	cp	r30, r20
    4b0a:	f5 07       	cpc	r31, r21
    4b0c:	c0 f5       	brcc	.+112    	; 0x4b7e <isTopicMatched+0x92>
    4b0e:	11 96       	adiw	r26, 0x01	; 1
    4b10:	9a 01       	movw	r18, r20
    4b12:	21 50       	subi	r18, 0x01	; 1
    4b14:	31 09       	sbc	r19, r1
    4b16:	01 c0       	rjmp	.+2      	; 0x4b1a <isTopicMatched+0x2e>
    4b18:	11 96       	adiw	r26, 0x01	; 1
    4b1a:	80 81       	ld	r24, Z
    4b1c:	8f 32       	cpi	r24, 0x2F	; 47
    4b1e:	19 f4       	brne	.+6      	; 0x4b26 <isTopicMatched+0x3a>
    4b20:	9f 32       	cpi	r25, 0x2F	; 47
    4b22:	e1 f0       	breq	.+56     	; 0x4b5c <isTopicMatched+0x70>
    4b24:	24 c0       	rjmp	.+72     	; 0x4b6e <isTopicMatched+0x82>
    4b26:	9b 32       	cpi	r25, 0x2B	; 43
    4b28:	29 f0       	breq	.+10     	; 0x4b34 <isTopicMatched+0x48>
    4b2a:	93 32       	cpi	r25, 0x23	; 35
    4b2c:	99 f0       	breq	.+38     	; 0x4b54 <isTopicMatched+0x68>
    4b2e:	89 17       	cp	r24, r25
    4b30:	a9 f0       	breq	.+42     	; 0x4b5c <isTopicMatched+0x70>
    4b32:	1d c0       	rjmp	.+58     	; 0x4b6e <isTopicMatched+0x82>
    4b34:	cf 01       	movw	r24, r30
    4b36:	01 96       	adiw	r24, 0x01	; 1
    4b38:	84 17       	cp	r24, r20
    4b3a:	95 07       	cpc	r25, r21
    4b3c:	88 f5       	brcc	.+98     	; 0x4ba0 <isTopicMatched+0xb4>
    4b3e:	81 81       	ldd	r24, Z+1	; 0x01
    4b40:	8f 32       	cpi	r24, 0x2F	; 47
    4b42:	19 f1       	breq	.+70     	; 0x4b8a <isTopicMatched+0x9e>
    4b44:	31 96       	adiw	r30, 0x01	; 1
    4b46:	e2 17       	cp	r30, r18
    4b48:	f3 07       	cpc	r31, r19
    4b4a:	39 f0       	breq	.+14     	; 0x4b5a <isTopicMatched+0x6e>
    4b4c:	91 81       	ldd	r25, Z+1	; 0x01
    4b4e:	9f 32       	cpi	r25, 0x2F	; 47
    4b50:	c9 f7       	brne	.-14     	; 0x4b44 <isTopicMatched+0x58>
    4b52:	1b c0       	rjmp	.+54     	; 0x4b8a <isTopicMatched+0x9e>
    4b54:	fa 01       	movw	r30, r20
    4b56:	31 97       	sbiw	r30, 0x01	; 1
    4b58:	01 c0       	rjmp	.+2      	; 0x4b5c <isTopicMatched+0x70>
    4b5a:	f9 01       	movw	r30, r18
    4b5c:	31 96       	adiw	r30, 0x01	; 1
    4b5e:	9c 91       	ld	r25, X
    4b60:	99 23       	and	r25, r25
    4b62:	c1 f0       	breq	.+48     	; 0x4b94 <isTopicMatched+0xa8>
    4b64:	e4 17       	cp	r30, r20
    4b66:	f5 07       	cpc	r31, r21
    4b68:	b8 f2       	brcs	.-82     	; 0x4b18 <isTopicMatched+0x2c>
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	1e c0       	rjmp	.+60     	; 0x4baa <isTopicMatched+0xbe>
    4b6e:	4e 17       	cp	r20, r30
    4b70:	5f 07       	cpc	r21, r31
    4b72:	39 f4       	brne	.+14     	; 0x4b82 <isTopicMatched+0x96>
    4b74:	81 e0       	ldi	r24, 0x01	; 1
    4b76:	99 23       	and	r25, r25
    4b78:	c1 f0       	breq	.+48     	; 0x4baa <isTopicMatched+0xbe>
    4b7a:	80 e0       	ldi	r24, 0x00	; 0
    4b7c:	16 c0       	rjmp	.+44     	; 0x4baa <isTopicMatched+0xbe>
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	14 c0       	rjmp	.+40     	; 0x4baa <isTopicMatched+0xbe>
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	12 c0       	rjmp	.+36     	; 0x4baa <isTopicMatched+0xbe>
    4b86:	80 e0       	ldi	r24, 0x00	; 0
    4b88:	10 c0       	rjmp	.+32     	; 0x4baa <isTopicMatched+0xbe>
    4b8a:	31 96       	adiw	r30, 0x01	; 1
    4b8c:	9c 91       	ld	r25, X
    4b8e:	91 11       	cpse	r25, r1
    4b90:	c3 cf       	rjmp	.-122    	; 0x4b18 <isTopicMatched+0x2c>
    4b92:	ed cf       	rjmp	.-38     	; 0x4b6e <isTopicMatched+0x82>
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	4e 17       	cp	r20, r30
    4b98:	5f 07       	cpc	r21, r31
    4b9a:	39 f0       	breq	.+14     	; 0x4baa <isTopicMatched+0xbe>
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	05 c0       	rjmp	.+10     	; 0x4baa <isTopicMatched+0xbe>
    4ba0:	31 96       	adiw	r30, 0x01	; 1
    4ba2:	8c 91       	ld	r24, X
    4ba4:	81 11       	cpse	r24, r1
    4ba6:	ef cf       	rjmp	.-34     	; 0x4b86 <isTopicMatched+0x9a>
    4ba8:	f5 cf       	rjmp	.-22     	; 0x4b94 <isTopicMatched+0xa8>
    4baa:	df 91       	pop	r29
    4bac:	cf 91       	pop	r28
    4bae:	08 95       	ret

00004bb0 <deliverMessage>:
    4bb0:	2f 92       	push	r2
    4bb2:	3f 92       	push	r3
    4bb4:	4f 92       	push	r4
    4bb6:	5f 92       	push	r5
    4bb8:	6f 92       	push	r6
    4bba:	7f 92       	push	r7
    4bbc:	8f 92       	push	r8
    4bbe:	9f 92       	push	r9
    4bc0:	af 92       	push	r10
    4bc2:	bf 92       	push	r11
    4bc4:	cf 92       	push	r12
    4bc6:	df 92       	push	r13
    4bc8:	ef 92       	push	r14
    4bca:	ff 92       	push	r15
    4bcc:	0f 93       	push	r16
    4bce:	1f 93       	push	r17
    4bd0:	cf 93       	push	r28
    4bd2:	df 93       	push	r29
    4bd4:	00 d0       	rcall	.+0      	; 0x4bd6 <deliverMessage+0x26>
    4bd6:	1f 92       	push	r1
    4bd8:	cd b7       	in	r28, 0x3d	; 61
    4bda:	de b7       	in	r29, 0x3e	; 62
    4bdc:	4c 01       	movw	r8, r24
    4bde:	6b 01       	movw	r12, r22
    4be0:	1a 01       	movw	r2, r20
    4be2:	8c 01       	movw	r16, r24
    4be4:	5c 01       	movw	r10, r24
    4be6:	84 e1       	ldi	r24, 0x14	; 20
    4be8:	a8 0e       	add	r10, r24
    4bea:	b1 1c       	adc	r11, r1
    4bec:	44 24       	eor	r4, r4
    4bee:	4a 94       	dec	r4
    4bf0:	54 2c       	mov	r5, r4
    4bf2:	32 01       	movw	r6, r4
    4bf4:	78 01       	movw	r14, r16
    4bf6:	d8 01       	movw	r26, r16
    4bf8:	59 96       	adiw	r26, 0x19	; 25
    4bfa:	6d 91       	ld	r22, X+
    4bfc:	7c 91       	ld	r23, X
    4bfe:	5a 97       	sbiw	r26, 0x1a	; 26
    4c00:	61 15       	cp	r22, r1
    4c02:	71 05       	cpc	r23, r1
    4c04:	01 f1       	breq	.+64     	; 0x4c46 <deliverMessage+0x96>
    4c06:	c6 01       	movw	r24, r12
    4c08:	0e 94 69 31 	call	0x62d2	; 0x62d2 <MQTTPacket_equals>
    4c0c:	67 2b       	or	r22, r23
    4c0e:	68 2b       	or	r22, r24
    4c10:	69 2b       	or	r22, r25
    4c12:	39 f4       	brne	.+14     	; 0x4c22 <deliverMessage+0x72>
    4c14:	b6 01       	movw	r22, r12
    4c16:	f8 01       	movw	r30, r16
    4c18:	81 8d       	ldd	r24, Z+25	; 0x19
    4c1a:	92 8d       	ldd	r25, Z+26	; 0x1a
    4c1c:	67 df       	rcall	.-306    	; 0x4aec <isTopicMatched>
    4c1e:	88 23       	and	r24, r24
    4c20:	91 f0       	breq	.+36     	; 0x4c46 <deliverMessage+0x96>
    4c22:	d7 01       	movw	r26, r14
    4c24:	5b 96       	adiw	r26, 0x1b	; 27
    4c26:	ed 91       	ld	r30, X+
    4c28:	fc 91       	ld	r31, X
    4c2a:	5c 97       	sbiw	r26, 0x1c	; 28
    4c2c:	30 97       	sbiw	r30, 0x00	; 0
    4c2e:	59 f0       	breq	.+22     	; 0x4c46 <deliverMessage+0x96>
    4c30:	dc 82       	std	Y+4, r13	; 0x04
    4c32:	cb 82       	std	Y+3, r12	; 0x03
    4c34:	3a 82       	std	Y+2, r3	; 0x02
    4c36:	29 82       	std	Y+1, r2	; 0x01
    4c38:	ce 01       	movw	r24, r28
    4c3a:	01 96       	adiw	r24, 0x01	; 1
    4c3c:	19 95       	eicall
    4c3e:	41 2c       	mov	r4, r1
    4c40:	51 2c       	mov	r5, r1
    4c42:	61 2c       	mov	r6, r1
    4c44:	71 2c       	mov	r7, r1
    4c46:	0c 5f       	subi	r16, 0xFC	; 252
    4c48:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4a:	0a 15       	cp	r16, r10
    4c4c:	1b 05       	cpc	r17, r11
    4c4e:	91 f6       	brne	.-92     	; 0x4bf4 <deliverMessage+0x44>
    4c50:	bf ef       	ldi	r27, 0xFF	; 255
    4c52:	4b 16       	cp	r4, r27
    4c54:	5b 06       	cpc	r5, r27
    4c56:	6b 06       	cpc	r6, r27
    4c58:	7b 06       	cpc	r7, r27
    4c5a:	89 f4       	brne	.+34     	; 0x4c7e <deliverMessage+0xce>
    4c5c:	d4 01       	movw	r26, r8
    4c5e:	9d 96       	adiw	r26, 0x2d	; 45
    4c60:	ed 91       	ld	r30, X+
    4c62:	fc 91       	ld	r31, X
    4c64:	9e 97       	sbiw	r26, 0x2e	; 46
    4c66:	30 97       	sbiw	r30, 0x00	; 0
    4c68:	51 f0       	breq	.+20     	; 0x4c7e <deliverMessage+0xce>
    4c6a:	dc 82       	std	Y+4, r13	; 0x04
    4c6c:	cb 82       	std	Y+3, r12	; 0x03
    4c6e:	3a 82       	std	Y+2, r3	; 0x02
    4c70:	29 82       	std	Y+1, r2	; 0x01
    4c72:	ce 01       	movw	r24, r28
    4c74:	01 96       	adiw	r24, 0x01	; 1
    4c76:	19 95       	eicall
    4c78:	41 2c       	mov	r4, r1
    4c7a:	51 2c       	mov	r5, r1
    4c7c:	32 01       	movw	r6, r4
    4c7e:	c3 01       	movw	r24, r6
    4c80:	b2 01       	movw	r22, r4
    4c82:	0f 90       	pop	r0
    4c84:	0f 90       	pop	r0
    4c86:	0f 90       	pop	r0
    4c88:	0f 90       	pop	r0
    4c8a:	df 91       	pop	r29
    4c8c:	cf 91       	pop	r28
    4c8e:	1f 91       	pop	r17
    4c90:	0f 91       	pop	r16
    4c92:	ff 90       	pop	r15
    4c94:	ef 90       	pop	r14
    4c96:	df 90       	pop	r13
    4c98:	cf 90       	pop	r12
    4c9a:	bf 90       	pop	r11
    4c9c:	af 90       	pop	r10
    4c9e:	9f 90       	pop	r9
    4ca0:	8f 90       	pop	r8
    4ca2:	7f 90       	pop	r7
    4ca4:	6f 90       	pop	r6
    4ca6:	5f 90       	pop	r5
    4ca8:	4f 90       	pop	r4
    4caa:	3f 90       	pop	r3
    4cac:	2f 90       	pop	r2
    4cae:	08 95       	ret

00004cb0 <keepalive>:
    4cb0:	0f 93       	push	r16
    4cb2:	1f 93       	push	r17
    4cb4:	cf 93       	push	r28
    4cb6:	df 93       	push	r29
    4cb8:	cd b7       	in	r28, 0x3d	; 61
    4cba:	de b7       	in	r29, 0x3e	; 62
    4cbc:	28 97       	sbiw	r28, 0x08	; 8
    4cbe:	0f b6       	in	r0, 0x3f	; 63
    4cc0:	f8 94       	cli
    4cc2:	de bf       	out	0x3e, r29	; 62
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	cd bf       	out	0x3d, r28	; 61
    4cc8:	fc 01       	movw	r30, r24
    4cca:	40 89       	ldd	r20, Z+16	; 0x10
    4ccc:	51 89       	ldd	r21, Z+17	; 0x11
    4cce:	62 89       	ldd	r22, Z+18	; 0x12
    4cd0:	73 89       	ldd	r23, Z+19	; 0x13
    4cd2:	45 2b       	or	r20, r21
    4cd4:	46 2b       	or	r20, r22
    4cd6:	47 2b       	or	r20, r23
    4cd8:	a1 f1       	breq	.+104    	; 0x4d42 <keepalive+0x92>
    4cda:	8c 01       	movw	r16, r24
    4cdc:	c1 96       	adiw	r24, 0x31	; 49
    4cde:	e3 d4       	rcall	.+2502   	; 0x56a6 <expired>
    4ce0:	88 23       	and	r24, r24
    4ce2:	99 f1       	breq	.+102    	; 0x4d4a <keepalive+0x9a>
    4ce4:	f8 01       	movw	r30, r16
    4ce6:	84 89       	ldd	r24, Z+20	; 0x14
    4ce8:	81 11       	cpse	r24, r1
    4cea:	33 c0       	rjmp	.+102    	; 0x4d52 <keepalive+0xa2>
    4cec:	ce 01       	movw	r24, r28
    4cee:	01 96       	adiw	r24, 0x01	; 1
    4cf0:	58 d5       	rcall	.+2736   	; 0x57a2 <InitTimer>
    4cf2:	48 ee       	ldi	r20, 0xE8	; 232
    4cf4:	53 e0       	ldi	r21, 0x03	; 3
    4cf6:	60 e0       	ldi	r22, 0x00	; 0
    4cf8:	70 e0       	ldi	r23, 0x00	; 0
    4cfa:	ce 01       	movw	r24, r28
    4cfc:	01 96       	adiw	r24, 0x01	; 1
    4cfe:	f1 d4       	rcall	.+2530   	; 0x56e2 <countdown_ms>
    4d00:	f8 01       	movw	r30, r16
    4d02:	40 85       	ldd	r20, Z+8	; 0x08
    4d04:	51 85       	ldd	r21, Z+9	; 0x09
    4d06:	60 e0       	ldi	r22, 0x00	; 0
    4d08:	70 e0       	ldi	r23, 0x00	; 0
    4d0a:	84 85       	ldd	r24, Z+12	; 0x0c
    4d0c:	95 85       	ldd	r25, Z+13	; 0x0d
    4d0e:	7d d7       	rcall	.+3834   	; 0x5c0a <MQTTSerialize_pingreq>
    4d10:	16 16       	cp	r1, r22
    4d12:	17 06       	cpc	r1, r23
    4d14:	18 06       	cpc	r1, r24
    4d16:	19 06       	cpc	r1, r25
    4d18:	84 f4       	brge	.+32     	; 0x4d3a <keepalive+0x8a>
    4d1a:	9e 01       	movw	r18, r28
    4d1c:	2f 5f       	subi	r18, 0xFF	; 255
    4d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d20:	ab 01       	movw	r20, r22
    4d22:	bc 01       	movw	r22, r24
    4d24:	c8 01       	movw	r24, r16
    4d26:	fd dc       	rcall	.-1542   	; 0x4722 <sendPacket>
    4d28:	61 15       	cp	r22, r1
    4d2a:	71 05       	cpc	r23, r1
    4d2c:	81 05       	cpc	r24, r1
    4d2e:	91 05       	cpc	r25, r1
    4d30:	99 f4       	brne	.+38     	; 0x4d58 <keepalive+0xa8>
    4d32:	21 e0       	ldi	r18, 0x01	; 1
    4d34:	f8 01       	movw	r30, r16
    4d36:	24 8b       	std	Z+20, r18	; 0x14
    4d38:	0f c0       	rjmp	.+30     	; 0x4d58 <keepalive+0xa8>
    4d3a:	6f ef       	ldi	r22, 0xFF	; 255
    4d3c:	7f ef       	ldi	r23, 0xFF	; 255
    4d3e:	cb 01       	movw	r24, r22
    4d40:	0b c0       	rjmp	.+22     	; 0x4d58 <keepalive+0xa8>
    4d42:	60 e0       	ldi	r22, 0x00	; 0
    4d44:	70 e0       	ldi	r23, 0x00	; 0
    4d46:	cb 01       	movw	r24, r22
    4d48:	07 c0       	rjmp	.+14     	; 0x4d58 <keepalive+0xa8>
    4d4a:	6f ef       	ldi	r22, 0xFF	; 255
    4d4c:	7f ef       	ldi	r23, 0xFF	; 255
    4d4e:	cb 01       	movw	r24, r22
    4d50:	03 c0       	rjmp	.+6      	; 0x4d58 <keepalive+0xa8>
    4d52:	6f ef       	ldi	r22, 0xFF	; 255
    4d54:	7f ef       	ldi	r23, 0xFF	; 255
    4d56:	cb 01       	movw	r24, r22
    4d58:	28 96       	adiw	r28, 0x08	; 8
    4d5a:	0f b6       	in	r0, 0x3f	; 63
    4d5c:	f8 94       	cli
    4d5e:	de bf       	out	0x3e, r29	; 62
    4d60:	0f be       	out	0x3f, r0	; 63
    4d62:	cd bf       	out	0x3d, r28	; 61
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	1f 91       	pop	r17
    4d6a:	0f 91       	pop	r16
    4d6c:	08 95       	ret

00004d6e <cycle>:
    4d6e:	2f 92       	push	r2
    4d70:	3f 92       	push	r3
    4d72:	4f 92       	push	r4
    4d74:	5f 92       	push	r5
    4d76:	6f 92       	push	r6
    4d78:	7f 92       	push	r7
    4d7a:	8f 92       	push	r8
    4d7c:	9f 92       	push	r9
    4d7e:	af 92       	push	r10
    4d80:	bf 92       	push	r11
    4d82:	cf 92       	push	r12
    4d84:	df 92       	push	r13
    4d86:	ef 92       	push	r14
    4d88:	ff 92       	push	r15
    4d8a:	0f 93       	push	r16
    4d8c:	1f 93       	push	r17
    4d8e:	cf 93       	push	r28
    4d90:	df 93       	push	r29
    4d92:	cd b7       	in	r28, 0x3d	; 61
    4d94:	de b7       	in	r29, 0x3e	; 62
    4d96:	62 97       	sbiw	r28, 0x12	; 18
    4d98:	0f b6       	in	r0, 0x3f	; 63
    4d9a:	f8 94       	cli
    4d9c:	de bf       	out	0x3e, r29	; 62
    4d9e:	0f be       	out	0x3f, r0	; 63
    4da0:	cd bf       	out	0x3d, r28	; 61
    4da2:	4c 01       	movw	r8, r24
    4da4:	1b 01       	movw	r2, r22
    4da6:	fe dd       	rcall	.-1028   	; 0x49a4 <readPacket>
    4da8:	2b 01       	movw	r4, r22
    4daa:	3c 01       	movw	r6, r24
    4dac:	85 e0       	ldi	r24, 0x05	; 5
    4dae:	48 16       	cp	r4, r24
    4db0:	51 04       	cpc	r5, r1
    4db2:	09 f4       	brne	.+2      	; 0x4db6 <cycle+0x48>
    4db4:	81 c0       	rjmp	.+258    	; 0x4eb8 <cycle+0x14a>
    4db6:	9d e0       	ldi	r25, 0x0D	; 13
    4db8:	49 16       	cp	r4, r25
    4dba:	51 04       	cpc	r5, r1
    4dbc:	09 f4       	brne	.+2      	; 0x4dc0 <cycle+0x52>
    4dbe:	af c0       	rjmp	.+350    	; 0x4f1e <cycle+0x1b0>
    4dc0:	e3 e0       	ldi	r30, 0x03	; 3
    4dc2:	4e 16       	cp	r4, r30
    4dc4:	51 04       	cpc	r5, r1
    4dc6:	09 f0       	breq	.+2      	; 0x4dca <cycle+0x5c>
    4dc8:	b0 c0       	rjmp	.+352    	; 0x4f2a <cycle+0x1bc>
    4dca:	f4 01       	movw	r30, r8
    4dcc:	a6 84       	ldd	r10, Z+14	; 0x0e
    4dce:	b7 84       	ldd	r11, Z+15	; 0x0f
    4dd0:	82 85       	ldd	r24, Z+10	; 0x0a
    4dd2:	93 85       	ldd	r25, Z+11	; 0x0b
    4dd4:	1f 92       	push	r1
    4dd6:	1f 92       	push	r1
    4dd8:	9f 93       	push	r25
    4dda:	8f 93       	push	r24
    4ddc:	ce 01       	movw	r24, r28
    4dde:	08 96       	adiw	r24, 0x08	; 8
    4de0:	6c 01       	movw	r12, r24
    4de2:	fe 01       	movw	r30, r28
    4de4:	36 96       	adiw	r30, 0x06	; 6
    4de6:	7f 01       	movw	r14, r30
    4de8:	8e 01       	movw	r16, r28
    4dea:	06 5f       	subi	r16, 0xF6	; 246
    4dec:	1f 4f       	sbci	r17, 0xFF	; 255
    4dee:	9e 01       	movw	r18, r28
    4df0:	2c 5f       	subi	r18, 0xFC	; 252
    4df2:	3f 4f       	sbci	r19, 0xFF	; 255
    4df4:	ae 01       	movw	r20, r28
    4df6:	4e 5f       	subi	r20, 0xFE	; 254
    4df8:	5f 4f       	sbci	r21, 0xFF	; 255
    4dfa:	be 01       	movw	r22, r28
    4dfc:	6f 5f       	subi	r22, 0xFF	; 255
    4dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    4e00:	05 97       	sbiw	r24, 0x05	; 5
    4e02:	06 d7       	rcall	.+3596   	; 0x5c10 <MQTTDeserialize_publish>
    4e04:	0f 90       	pop	r0
    4e06:	0f 90       	pop	r0
    4e08:	0f 90       	pop	r0
    4e0a:	0f 90       	pop	r0
    4e0c:	61 30       	cpi	r22, 0x01	; 1
    4e0e:	71 05       	cpc	r23, r1
    4e10:	81 05       	cpc	r24, r1
    4e12:	91 05       	cpc	r25, r1
    4e14:	09 f0       	breq	.+2      	; 0x4e18 <cycle+0xaa>
    4e16:	3e c0       	rjmp	.+124    	; 0x4e94 <cycle+0x126>
    4e18:	ae 01       	movw	r20, r28
    4e1a:	4f 5f       	subi	r20, 0xFF	; 255
    4e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4e1e:	b8 01       	movw	r22, r16
    4e20:	c4 01       	movw	r24, r8
    4e22:	c6 de       	rcall	.-628    	; 0x4bb0 <deliverMessage>
    4e24:	89 81       	ldd	r24, Y+1	; 0x01
    4e26:	88 23       	and	r24, r24
    4e28:	09 f4       	brne	.+2      	; 0x4e2c <cycle+0xbe>
    4e2a:	42 c0       	rjmp	.+132    	; 0x4eb0 <cycle+0x142>
    4e2c:	81 30       	cpi	r24, 0x01	; 1
    4e2e:	81 f4       	brne	.+32     	; 0x4e50 <cycle+0xe2>
    4e30:	ec 80       	ldd	r14, Y+4	; 0x04
    4e32:	fd 80       	ldd	r15, Y+5	; 0x05
    4e34:	f4 01       	movw	r30, r8
    4e36:	40 85       	ldd	r20, Z+8	; 0x08
    4e38:	51 85       	ldd	r21, Z+9	; 0x09
    4e3a:	60 e0       	ldi	r22, 0x00	; 0
    4e3c:	70 e0       	ldi	r23, 0x00	; 0
    4e3e:	00 e0       	ldi	r16, 0x00	; 0
    4e40:	24 e0       	ldi	r18, 0x04	; 4
    4e42:	84 85       	ldd	r24, Z+12	; 0x0c
    4e44:	95 85       	ldd	r25, Z+13	; 0x0d
    4e46:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MQTTSerialize_ack>
    4e4a:	ab 01       	movw	r20, r22
    4e4c:	bc 01       	movw	r22, r24
    4e4e:	11 c0       	rjmp	.+34     	; 0x4e72 <cycle+0x104>
    4e50:	82 30       	cpi	r24, 0x02	; 2
    4e52:	21 f5       	brne	.+72     	; 0x4e9c <cycle+0x12e>
    4e54:	ec 80       	ldd	r14, Y+4	; 0x04
    4e56:	fd 80       	ldd	r15, Y+5	; 0x05
    4e58:	f4 01       	movw	r30, r8
    4e5a:	40 85       	ldd	r20, Z+8	; 0x08
    4e5c:	51 85       	ldd	r21, Z+9	; 0x09
    4e5e:	60 e0       	ldi	r22, 0x00	; 0
    4e60:	70 e0       	ldi	r23, 0x00	; 0
    4e62:	00 e0       	ldi	r16, 0x00	; 0
    4e64:	25 e0       	ldi	r18, 0x05	; 5
    4e66:	84 85       	ldd	r24, Z+12	; 0x0c
    4e68:	95 85       	ldd	r25, Z+13	; 0x0d
    4e6a:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MQTTSerialize_ack>
    4e6e:	ab 01       	movw	r20, r22
    4e70:	bc 01       	movw	r22, r24
    4e72:	14 16       	cp	r1, r20
    4e74:	15 06       	cpc	r1, r21
    4e76:	16 06       	cpc	r1, r22
    4e78:	17 06       	cpc	r1, r23
    4e7a:	ac f4       	brge	.+42     	; 0x4ea6 <cycle+0x138>
    4e7c:	91 01       	movw	r18, r2
    4e7e:	c4 01       	movw	r24, r8
    4e80:	50 dc       	rcall	.-1888   	; 0x4722 <sendPacket>
    4e82:	6b 01       	movw	r12, r22
    4e84:	7c 01       	movw	r14, r24
    4e86:	6f 3f       	cpi	r22, 0xFF	; 255
    4e88:	7f 4f       	sbci	r23, 0xFF	; 255
    4e8a:	8f 4f       	sbci	r24, 0xFF	; 255
    4e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e8e:	09 f0       	breq	.+2      	; 0x4e92 <cycle+0x124>
    4e90:	4f c0       	rjmp	.+158    	; 0x4f30 <cycle+0x1c2>
    4e92:	50 c0       	rjmp	.+160    	; 0x4f34 <cycle+0x1c6>
    4e94:	c1 2c       	mov	r12, r1
    4e96:	d1 2c       	mov	r13, r1
    4e98:	76 01       	movw	r14, r12
    4e9a:	4c c0       	rjmp	.+152    	; 0x4f34 <cycle+0x1c6>
    4e9c:	cc 24       	eor	r12, r12
    4e9e:	ca 94       	dec	r12
    4ea0:	dc 2c       	mov	r13, r12
    4ea2:	76 01       	movw	r14, r12
    4ea4:	47 c0       	rjmp	.+142    	; 0x4f34 <cycle+0x1c6>
    4ea6:	cc 24       	eor	r12, r12
    4ea8:	ca 94       	dec	r12
    4eaa:	dc 2c       	mov	r13, r12
    4eac:	76 01       	movw	r14, r12
    4eae:	42 c0       	rjmp	.+132    	; 0x4f34 <cycle+0x1c6>
    4eb0:	c1 2c       	mov	r12, r1
    4eb2:	d1 2c       	mov	r13, r1
    4eb4:	76 01       	movw	r14, r12
    4eb6:	3c c0       	rjmp	.+120    	; 0x4f30 <cycle+0x1c2>
    4eb8:	f4 01       	movw	r30, r8
    4eba:	e2 84       	ldd	r14, Z+10	; 0x0a
    4ebc:	f3 84       	ldd	r15, Z+11	; 0x0b
    4ebe:	00 e0       	ldi	r16, 0x00	; 0
    4ec0:	10 e0       	ldi	r17, 0x00	; 0
    4ec2:	26 85       	ldd	r18, Z+14	; 0x0e
    4ec4:	37 85       	ldd	r19, Z+15	; 0x0f
    4ec6:	ae 01       	movw	r20, r28
    4ec8:	4f 5f       	subi	r20, 0xFF	; 255
    4eca:	5f 4f       	sbci	r21, 0xFF	; 255
    4ecc:	be 01       	movw	r22, r28
    4ece:	6e 5e       	subi	r22, 0xEE	; 238
    4ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ed2:	ce 01       	movw	r24, r28
    4ed4:	0a 96       	adiw	r24, 0x0a	; 10
    4ed6:	39 d7       	rcall	.+3698   	; 0x5d4a <MQTTDeserialize_ack>
    4ed8:	61 30       	cpi	r22, 0x01	; 1
    4eda:	71 05       	cpc	r23, r1
    4edc:	81 05       	cpc	r24, r1
    4ede:	91 05       	cpc	r25, r1
    4ee0:	99 f5       	brne	.+102    	; 0x4f48 <cycle+0x1da>
    4ee2:	e9 80       	ldd	r14, Y+1	; 0x01
    4ee4:	fa 80       	ldd	r15, Y+2	; 0x02
    4ee6:	f4 01       	movw	r30, r8
    4ee8:	40 85       	ldd	r20, Z+8	; 0x08
    4eea:	51 85       	ldd	r21, Z+9	; 0x09
    4eec:	60 e0       	ldi	r22, 0x00	; 0
    4eee:	70 e0       	ldi	r23, 0x00	; 0
    4ef0:	00 e0       	ldi	r16, 0x00	; 0
    4ef2:	26 e0       	ldi	r18, 0x06	; 6
    4ef4:	84 85       	ldd	r24, Z+12	; 0x0c
    4ef6:	95 85       	ldd	r25, Z+13	; 0x0d
    4ef8:	0e 94 7d 32 	call	0x64fa	; 0x64fa <MQTTSerialize_ack>
    4efc:	16 16       	cp	r1, r22
    4efe:	17 06       	cpc	r1, r23
    4f00:	18 06       	cpc	r1, r24
    4f02:	19 06       	cpc	r1, r25
    4f04:	0c f5       	brge	.+66     	; 0x4f48 <cycle+0x1da>
    4f06:	91 01       	movw	r18, r2
    4f08:	ab 01       	movw	r20, r22
    4f0a:	bc 01       	movw	r22, r24
    4f0c:	c4 01       	movw	r24, r8
    4f0e:	09 dc       	rcall	.-2030   	; 0x4722 <sendPacket>
    4f10:	6b 01       	movw	r12, r22
    4f12:	7c 01       	movw	r14, r24
    4f14:	67 2b       	or	r22, r23
    4f16:	68 2b       	or	r22, r24
    4f18:	69 2b       	or	r22, r25
    4f1a:	b1 f4       	brne	.+44     	; 0x4f48 <cycle+0x1da>
    4f1c:	09 c0       	rjmp	.+18     	; 0x4f30 <cycle+0x1c2>
    4f1e:	f4 01       	movw	r30, r8
    4f20:	14 8a       	std	Z+20, r1	; 0x14
    4f22:	c1 2c       	mov	r12, r1
    4f24:	d1 2c       	mov	r13, r1
    4f26:	76 01       	movw	r14, r12
    4f28:	03 c0       	rjmp	.+6      	; 0x4f30 <cycle+0x1c2>
    4f2a:	c1 2c       	mov	r12, r1
    4f2c:	d1 2c       	mov	r13, r1
    4f2e:	76 01       	movw	r14, r12
    4f30:	c4 01       	movw	r24, r8
    4f32:	be de       	rcall	.-644    	; 0x4cb0 <keepalive>
    4f34:	c1 14       	cp	r12, r1
    4f36:	d1 04       	cpc	r13, r1
    4f38:	e1 04       	cpc	r14, r1
    4f3a:	f1 04       	cpc	r15, r1
    4f3c:	49 f4       	brne	.+18     	; 0x4f50 <cycle+0x1e2>
    4f3e:	73 01       	movw	r14, r6
    4f40:	62 01       	movw	r12, r4
    4f42:	ee 24       	eor	r14, r14
    4f44:	ff 24       	eor	r15, r15
    4f46:	04 c0       	rjmp	.+8      	; 0x4f50 <cycle+0x1e2>
    4f48:	cc 24       	eor	r12, r12
    4f4a:	ca 94       	dec	r12
    4f4c:	dc 2c       	mov	r13, r12
    4f4e:	76 01       	movw	r14, r12
    4f50:	c7 01       	movw	r24, r14
    4f52:	b6 01       	movw	r22, r12
    4f54:	62 96       	adiw	r28, 0x12	; 18
    4f56:	0f b6       	in	r0, 0x3f	; 63
    4f58:	f8 94       	cli
    4f5a:	de bf       	out	0x3e, r29	; 62
    4f5c:	0f be       	out	0x3f, r0	; 63
    4f5e:	cd bf       	out	0x3d, r28	; 61
    4f60:	df 91       	pop	r29
    4f62:	cf 91       	pop	r28
    4f64:	1f 91       	pop	r17
    4f66:	0f 91       	pop	r16
    4f68:	ff 90       	pop	r15
    4f6a:	ef 90       	pop	r14
    4f6c:	df 90       	pop	r13
    4f6e:	cf 90       	pop	r12
    4f70:	bf 90       	pop	r11
    4f72:	af 90       	pop	r10
    4f74:	9f 90       	pop	r9
    4f76:	8f 90       	pop	r8
    4f78:	7f 90       	pop	r7
    4f7a:	6f 90       	pop	r6
    4f7c:	5f 90       	pop	r5
    4f7e:	4f 90       	pop	r4
    4f80:	3f 90       	pop	r3
    4f82:	2f 90       	pop	r2
    4f84:	08 95       	ret

00004f86 <waitfor>:
    4f86:	8f 92       	push	r8
    4f88:	9f 92       	push	r9
    4f8a:	af 92       	push	r10
    4f8c:	bf 92       	push	r11
    4f8e:	cf 92       	push	r12
    4f90:	df 92       	push	r13
    4f92:	ef 92       	push	r14
    4f94:	ff 92       	push	r15
    4f96:	0f 93       	push	r16
    4f98:	1f 93       	push	r17
    4f9a:	cf 93       	push	r28
    4f9c:	df 93       	push	r29
    4f9e:	8c 01       	movw	r16, r24
    4fa0:	4a 01       	movw	r8, r20
    4fa2:	5b 01       	movw	r10, r22
    4fa4:	e9 01       	movw	r28, r18
    4fa6:	cc 24       	eor	r12, r12
    4fa8:	ca 94       	dec	r12
    4faa:	dc 2c       	mov	r13, r12
    4fac:	76 01       	movw	r14, r12
    4fae:	ce 01       	movw	r24, r28
    4fb0:	7a d3       	rcall	.+1780   	; 0x56a6 <expired>
    4fb2:	81 11       	cpse	r24, r1
    4fb4:	0c c0       	rjmp	.+24     	; 0x4fce <waitfor+0x48>
    4fb6:	be 01       	movw	r22, r28
    4fb8:	c8 01       	movw	r24, r16
    4fba:	d9 de       	rcall	.-590    	; 0x4d6e <cycle>
    4fbc:	6b 01       	movw	r12, r22
    4fbe:	7c 01       	movw	r14, r24
    4fc0:	68 15       	cp	r22, r8
    4fc2:	79 05       	cpc	r23, r9
    4fc4:	8a 05       	cpc	r24, r10
    4fc6:	9b 05       	cpc	r25, r11
    4fc8:	91 f7       	brne	.-28     	; 0x4fae <waitfor+0x28>
    4fca:	75 01       	movw	r14, r10
    4fcc:	64 01       	movw	r12, r8
    4fce:	c7 01       	movw	r24, r14
    4fd0:	b6 01       	movw	r22, r12
    4fd2:	df 91       	pop	r29
    4fd4:	cf 91       	pop	r28
    4fd6:	1f 91       	pop	r17
    4fd8:	0f 91       	pop	r16
    4fda:	ff 90       	pop	r15
    4fdc:	ef 90       	pop	r14
    4fde:	df 90       	pop	r13
    4fe0:	cf 90       	pop	r12
    4fe2:	bf 90       	pop	r11
    4fe4:	af 90       	pop	r10
    4fe6:	9f 90       	pop	r9
    4fe8:	8f 90       	pop	r8
    4fea:	08 95       	ret

00004fec <MQTTConnect>:
    4fec:	ef 92       	push	r14
    4fee:	ff 92       	push	r15
    4ff0:	0f 93       	push	r16
    4ff2:	1f 93       	push	r17
    4ff4:	cf 93       	push	r28
    4ff6:	df 93       	push	r29
    4ff8:	cd b7       	in	r28, 0x3d	; 61
    4ffa:	de b7       	in	r29, 0x3e	; 62
    4ffc:	c5 54       	subi	r28, 0x45	; 69
    4ffe:	d1 09       	sbc	r29, r1
    5000:	0f b6       	in	r0, 0x3f	; 63
    5002:	f8 94       	cli
    5004:	de bf       	out	0x3e, r29	; 62
    5006:	0f be       	out	0x3f, r0	; 63
    5008:	cd bf       	out	0x3d, r28	; 61
    500a:	7c 01       	movw	r14, r24
    500c:	8b 01       	movw	r16, r22
    500e:	8b e3       	ldi	r24, 0x3B	; 59
    5010:	e2 ee       	ldi	r30, 0xE2	; 226
    5012:	f2 e0       	ldi	r31, 0x02	; 2
    5014:	de 01       	movw	r26, r28
    5016:	19 96       	adiw	r26, 0x09	; 9
    5018:	01 90       	ld	r0, Z+
    501a:	0d 92       	st	X+, r0
    501c:	8a 95       	dec	r24
    501e:	e1 f7       	brne	.-8      	; 0x5018 <MQTTConnect+0x2c>
    5020:	ce 01       	movw	r24, r28
    5022:	01 96       	adiw	r24, 0x01	; 1
    5024:	be d3       	rcall	.+1916   	; 0x57a2 <InitTimer>
    5026:	f7 01       	movw	r30, r14
    5028:	44 81       	ldd	r20, Z+4	; 0x04
    502a:	55 81       	ldd	r21, Z+5	; 0x05
    502c:	66 81       	ldd	r22, Z+6	; 0x06
    502e:	77 81       	ldd	r23, Z+7	; 0x07
    5030:	ce 01       	movw	r24, r28
    5032:	01 96       	adiw	r24, 0x01	; 1
    5034:	56 d3       	rcall	.+1708   	; 0x56e2 <countdown_ms>
    5036:	f7 01       	movw	r30, r14
    5038:	85 89       	ldd	r24, Z+21	; 0x15
    503a:	96 89       	ldd	r25, Z+22	; 0x16
    503c:	a7 89       	ldd	r26, Z+23	; 0x17
    503e:	b0 8d       	ldd	r27, Z+24	; 0x18
    5040:	89 2b       	or	r24, r25
    5042:	8a 2b       	or	r24, r26
    5044:	8b 2b       	or	r24, r27
    5046:	09 f0       	breq	.+2      	; 0x504a <MQTTConnect+0x5e>
    5048:	6c c0       	rjmp	.+216    	; 0x5122 <MQTTConnect+0x136>
    504a:	01 15       	cp	r16, r1
    504c:	11 05       	cpc	r17, r1
    504e:	19 f4       	brne	.+6      	; 0x5056 <MQTTConnect+0x6a>
    5050:	8e 01       	movw	r16, r28
    5052:	07 5f       	subi	r16, 0xF7	; 247
    5054:	1f 4f       	sbci	r17, 0xFF	; 255
    5056:	f8 01       	movw	r30, r16
    5058:	47 85       	ldd	r20, Z+15	; 0x0f
    505a:	50 89       	ldd	r21, Z+16	; 0x10
    505c:	60 e0       	ldi	r22, 0x00	; 0
    505e:	70 e0       	ldi	r23, 0x00	; 0
    5060:	f7 01       	movw	r30, r14
    5062:	40 8b       	std	Z+16, r20	; 0x10
    5064:	51 8b       	std	Z+17, r21	; 0x11
    5066:	62 8b       	std	Z+18, r22	; 0x12
    5068:	73 8b       	std	Z+19, r23	; 0x13
    506a:	c7 01       	movw	r24, r14
    506c:	c1 96       	adiw	r24, 0x31	; 49
    506e:	53 d3       	rcall	.+1702   	; 0x5716 <countdown>
    5070:	f7 01       	movw	r30, r14
    5072:	40 85       	ldd	r20, Z+8	; 0x08
    5074:	51 85       	ldd	r21, Z+9	; 0x09
    5076:	60 e0       	ldi	r22, 0x00	; 0
    5078:	70 e0       	ldi	r23, 0x00	; 0
    507a:	98 01       	movw	r18, r16
    507c:	84 85       	ldd	r24, Z+12	; 0x0c
    507e:	95 85       	ldd	r25, Z+13	; 0x0d
    5080:	5d d4       	rcall	.+2234   	; 0x593c <MQTTSerialize_connect>
    5082:	ab 01       	movw	r20, r22
    5084:	bc 01       	movw	r22, r24
    5086:	14 16       	cp	r1, r20
    5088:	15 06       	cpc	r1, r21
    508a:	16 06       	cpc	r1, r22
    508c:	17 06       	cpc	r1, r23
    508e:	0c f0       	brlt	.+2      	; 0x5092 <MQTTConnect+0xa6>
    5090:	4c c0       	rjmp	.+152    	; 0x512a <MQTTConnect+0x13e>
    5092:	9e 01       	movw	r18, r28
    5094:	2f 5f       	subi	r18, 0xFF	; 255
    5096:	3f 4f       	sbci	r19, 0xFF	; 255
    5098:	c7 01       	movw	r24, r14
    509a:	43 db       	rcall	.-2426   	; 0x4722 <sendPacket>
    509c:	61 15       	cp	r22, r1
    509e:	71 05       	cpc	r23, r1
    50a0:	81 05       	cpc	r24, r1
    50a2:	91 05       	cpc	r25, r1
    50a4:	09 f0       	breq	.+2      	; 0x50a8 <MQTTConnect+0xbc>
    50a6:	4c c0       	rjmp	.+152    	; 0x5140 <MQTTConnect+0x154>
    50a8:	9e 01       	movw	r18, r28
    50aa:	2f 5f       	subi	r18, 0xFF	; 255
    50ac:	3f 4f       	sbci	r19, 0xFF	; 255
    50ae:	42 e0       	ldi	r20, 0x02	; 2
    50b0:	50 e0       	ldi	r21, 0x00	; 0
    50b2:	60 e0       	ldi	r22, 0x00	; 0
    50b4:	70 e0       	ldi	r23, 0x00	; 0
    50b6:	c7 01       	movw	r24, r14
    50b8:	66 df       	rcall	.-308    	; 0x4f86 <waitfor>
    50ba:	62 30       	cpi	r22, 0x02	; 2
    50bc:	71 05       	cpc	r23, r1
    50be:	81 05       	cpc	r24, r1
    50c0:	91 05       	cpc	r25, r1
    50c2:	b9 f5       	brne	.+110    	; 0x5132 <MQTTConnect+0x146>
    50c4:	8f ef       	ldi	r24, 0xFF	; 255
    50c6:	26 96       	adiw	r28, 0x06	; 6
    50c8:	8f af       	std	Y+63, r24	; 0x3f
    50ca:	26 97       	sbiw	r28, 0x06	; 6
    50cc:	25 96       	adiw	r28, 0x05	; 5
    50ce:	1f ae       	std	Y+63, r1	; 0x3f
    50d0:	25 97       	sbiw	r28, 0x05	; 5
    50d2:	f7 01       	movw	r30, r14
    50d4:	02 85       	ldd	r16, Z+10	; 0x0a
    50d6:	13 85       	ldd	r17, Z+11	; 0x0b
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	46 85       	ldd	r20, Z+14	; 0x0e
    50de:	57 85       	ldd	r21, Z+15	; 0x0f
    50e0:	be 01       	movw	r22, r28
    50e2:	6b 5b       	subi	r22, 0xBB	; 187
    50e4:	7f 4f       	sbci	r23, 0xFF	; 255
    50e6:	ce 01       	movw	r24, r28
    50e8:	8c 5b       	subi	r24, 0xBC	; 188
    50ea:	9f 4f       	sbci	r25, 0xFF	; 255
    50ec:	15 d5       	rcall	.+2602   	; 0x5b18 <MQTTDeserialize_connack>
    50ee:	61 30       	cpi	r22, 0x01	; 1
    50f0:	71 05       	cpc	r23, r1
    50f2:	81 05       	cpc	r24, r1
    50f4:	91 05       	cpc	r25, r1
    50f6:	09 f5       	brne	.+66     	; 0x513a <MQTTConnect+0x14e>
    50f8:	26 96       	adiw	r28, 0x06	; 6
    50fa:	6f ad       	ldd	r22, Y+63	; 0x3f
    50fc:	26 97       	sbiw	r28, 0x06	; 6
    50fe:	70 e0       	ldi	r23, 0x00	; 0
    5100:	80 e0       	ldi	r24, 0x00	; 0
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	61 15       	cp	r22, r1
    5106:	71 05       	cpc	r23, r1
    5108:	81 05       	cpc	r24, r1
    510a:	91 05       	cpc	r25, r1
    510c:	c9 f4       	brne	.+50     	; 0x5140 <MQTTConnect+0x154>
    510e:	01 e0       	ldi	r16, 0x01	; 1
    5110:	10 e0       	ldi	r17, 0x00	; 0
    5112:	20 e0       	ldi	r18, 0x00	; 0
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	f7 01       	movw	r30, r14
    5118:	05 8b       	std	Z+21, r16	; 0x15
    511a:	16 8b       	std	Z+22, r17	; 0x16
    511c:	27 8b       	std	Z+23, r18	; 0x17
    511e:	30 8f       	std	Z+24, r19	; 0x18
    5120:	0f c0       	rjmp	.+30     	; 0x5140 <MQTTConnect+0x154>
    5122:	6f ef       	ldi	r22, 0xFF	; 255
    5124:	7f ef       	ldi	r23, 0xFF	; 255
    5126:	cb 01       	movw	r24, r22
    5128:	0b c0       	rjmp	.+22     	; 0x5140 <MQTTConnect+0x154>
    512a:	6f ef       	ldi	r22, 0xFF	; 255
    512c:	7f ef       	ldi	r23, 0xFF	; 255
    512e:	cb 01       	movw	r24, r22
    5130:	07 c0       	rjmp	.+14     	; 0x5140 <MQTTConnect+0x154>
    5132:	6f ef       	ldi	r22, 0xFF	; 255
    5134:	7f ef       	ldi	r23, 0xFF	; 255
    5136:	cb 01       	movw	r24, r22
    5138:	03 c0       	rjmp	.+6      	; 0x5140 <MQTTConnect+0x154>
    513a:	6f ef       	ldi	r22, 0xFF	; 255
    513c:	7f ef       	ldi	r23, 0xFF	; 255
    513e:	cb 01       	movw	r24, r22
    5140:	cb 5b       	subi	r28, 0xBB	; 187
    5142:	df 4f       	sbci	r29, 0xFF	; 255
    5144:	0f b6       	in	r0, 0x3f	; 63
    5146:	f8 94       	cli
    5148:	de bf       	out	0x3e, r29	; 62
    514a:	0f be       	out	0x3f, r0	; 63
    514c:	cd bf       	out	0x3d, r28	; 61
    514e:	df 91       	pop	r29
    5150:	cf 91       	pop	r28
    5152:	1f 91       	pop	r17
    5154:	0f 91       	pop	r16
    5156:	ff 90       	pop	r15
    5158:	ef 90       	pop	r14
    515a:	08 95       	ret

0000515c <MQTTSubscribe>:
    515c:	2f 92       	push	r2
    515e:	3f 92       	push	r3
    5160:	4f 92       	push	r4
    5162:	5f 92       	push	r5
    5164:	6f 92       	push	r6
    5166:	7f 92       	push	r7
    5168:	8f 92       	push	r8
    516a:	9f 92       	push	r9
    516c:	af 92       	push	r10
    516e:	bf 92       	push	r11
    5170:	cf 92       	push	r12
    5172:	df 92       	push	r13
    5174:	ef 92       	push	r14
    5176:	ff 92       	push	r15
    5178:	0f 93       	push	r16
    517a:	1f 93       	push	r17
    517c:	cf 93       	push	r28
    517e:	df 93       	push	r29
    5180:	cd b7       	in	r28, 0x3d	; 61
    5182:	de b7       	in	r29, 0x3e	; 62
    5184:	6f 97       	sbiw	r28, 0x1f	; 31
    5186:	0f b6       	in	r0, 0x3f	; 63
    5188:	f8 94       	cli
    518a:	de bf       	out	0x3e, r29	; 62
    518c:	0f be       	out	0x3f, r0	; 63
    518e:	cd bf       	out	0x3d, r28	; 61
    5190:	3c 01       	movw	r6, r24
    5192:	7d 8f       	std	Y+29, r23	; 0x1d
    5194:	6c 8f       	std	Y+28, r22	; 0x1c
    5196:	4b 8f       	std	Y+27, r20	; 0x1b
    5198:	3f 8f       	std	Y+31, r19	; 0x1f
    519a:	2e 8f       	std	Y+30, r18	; 0x1e
    519c:	1b 86       	std	Y+11, r1	; 0x0b
    519e:	1c 86       	std	Y+12, r1	; 0x0c
    51a0:	1d 86       	std	Y+13, r1	; 0x0d
    51a2:	1e 86       	std	Y+14, r1	; 0x0e
    51a4:	18 8a       	std	Y+16, r1	; 0x10
    51a6:	1f 86       	std	Y+15, r1	; 0x0f
    51a8:	7a 87       	std	Y+10, r23	; 0x0a
    51aa:	69 87       	std	Y+9, r22	; 0x09
    51ac:	ce 01       	movw	r24, r28
    51ae:	01 96       	adiw	r24, 0x01	; 1
    51b0:	f8 d2       	rcall	.+1520   	; 0x57a2 <InitTimer>
    51b2:	f3 01       	movw	r30, r6
    51b4:	44 81       	ldd	r20, Z+4	; 0x04
    51b6:	55 81       	ldd	r21, Z+5	; 0x05
    51b8:	66 81       	ldd	r22, Z+6	; 0x06
    51ba:	77 81       	ldd	r23, Z+7	; 0x07
    51bc:	ce 01       	movw	r24, r28
    51be:	01 96       	adiw	r24, 0x01	; 1
    51c0:	90 d2       	rcall	.+1312   	; 0x56e2 <countdown_ms>
    51c2:	f3 01       	movw	r30, r6
    51c4:	85 89       	ldd	r24, Z+21	; 0x15
    51c6:	96 89       	ldd	r25, Z+22	; 0x16
    51c8:	a7 89       	ldd	r26, Z+23	; 0x17
    51ca:	b0 8d       	ldd	r27, Z+24	; 0x18
    51cc:	89 2b       	or	r24, r25
    51ce:	8a 2b       	or	r24, r26
    51d0:	8b 2b       	or	r24, r27
    51d2:	09 f4       	brne	.+2      	; 0x51d6 <MQTTSubscribe+0x7a>
    51d4:	9d c0       	rjmp	.+314    	; 0x5310 <MQTTSubscribe+0x1b4>
    51d6:	c3 01       	movw	r24, r6
    51d8:	89 da       	rcall	.-2798   	; 0x46ec <getNextPacketId>
    51da:	8b 01       	movw	r16, r22
    51dc:	9c 01       	movw	r18, r24
    51de:	f3 01       	movw	r30, r6
    51e0:	40 85       	ldd	r20, Z+8	; 0x08
    51e2:	51 85       	ldd	r21, Z+9	; 0x09
    51e4:	60 e0       	ldi	r22, 0x00	; 0
    51e6:	70 e0       	ldi	r23, 0x00	; 0
    51e8:	ce 01       	movw	r24, r28
    51ea:	4b 96       	adiw	r24, 0x1b	; 27
    51ec:	4c 01       	movw	r8, r24
    51ee:	fe 01       	movw	r30, r28
    51f0:	39 96       	adiw	r30, 0x09	; 9
    51f2:	5f 01       	movw	r10, r30
    51f4:	c1 2c       	mov	r12, r1
    51f6:	d1 2c       	mov	r13, r1
    51f8:	76 01       	movw	r14, r12
    51fa:	c3 94       	inc	r12
    51fc:	20 e0       	ldi	r18, 0x00	; 0
    51fe:	f3 01       	movw	r30, r6
    5200:	84 85       	ldd	r24, Z+12	; 0x0c
    5202:	95 85       	ldd	r25, Z+13	; 0x0d
    5204:	0e 94 1c 33 	call	0x6638	; 0x6638 <MQTTSerialize_subscribe>
    5208:	ab 01       	movw	r20, r22
    520a:	bc 01       	movw	r22, r24
    520c:	14 16       	cp	r1, r20
    520e:	15 06       	cpc	r1, r21
    5210:	16 06       	cpc	r1, r22
    5212:	17 06       	cpc	r1, r23
    5214:	0c f0       	brlt	.+2      	; 0x5218 <MQTTSubscribe+0xbc>
    5216:	81 c0       	rjmp	.+258    	; 0x531a <MQTTSubscribe+0x1be>
    5218:	9e 01       	movw	r18, r28
    521a:	2f 5f       	subi	r18, 0xFF	; 255
    521c:	3f 4f       	sbci	r19, 0xFF	; 255
    521e:	c3 01       	movw	r24, r6
    5220:	80 da       	rcall	.-2816   	; 0x4722 <sendPacket>
    5222:	1b 01       	movw	r2, r22
    5224:	2c 01       	movw	r4, r24
    5226:	67 2b       	or	r22, r23
    5228:	68 2b       	or	r22, r24
    522a:	69 2b       	or	r22, r25
    522c:	09 f0       	breq	.+2      	; 0x5230 <MQTTSubscribe+0xd4>
    522e:	7e c0       	rjmp	.+252    	; 0x532c <MQTTSubscribe+0x1d0>
    5230:	9e 01       	movw	r18, r28
    5232:	2f 5f       	subi	r18, 0xFF	; 255
    5234:	3f 4f       	sbci	r19, 0xFF	; 255
    5236:	49 e0       	ldi	r20, 0x09	; 9
    5238:	50 e0       	ldi	r21, 0x00	; 0
    523a:	60 e0       	ldi	r22, 0x00	; 0
    523c:	70 e0       	ldi	r23, 0x00	; 0
    523e:	c3 01       	movw	r24, r6
    5240:	a2 de       	rcall	.-700    	; 0x4f86 <waitfor>
    5242:	69 30       	cpi	r22, 0x09	; 9
    5244:	71 05       	cpc	r23, r1
    5246:	81 05       	cpc	r24, r1
    5248:	91 05       	cpc	r25, r1
    524a:	09 f0       	breq	.+2      	; 0x524e <MQTTSubscribe+0xf2>
    524c:	6b c0       	rjmp	.+214    	; 0x5324 <MQTTSubscribe+0x1c8>
    524e:	1d 8a       	std	Y+21, r1	; 0x15
    5250:	1e 8a       	std	Y+22, r1	; 0x16
    5252:	1f 8a       	std	Y+23, r1	; 0x17
    5254:	18 8e       	std	Y+24, r1	; 0x18
    5256:	8f ef       	ldi	r24, 0xFF	; 255
    5258:	9f ef       	ldi	r25, 0xFF	; 255
    525a:	dc 01       	movw	r26, r24
    525c:	89 8b       	std	Y+17, r24	; 0x11
    525e:	9a 8b       	std	Y+18, r25	; 0x12
    5260:	ab 8b       	std	Y+19, r26	; 0x13
    5262:	bc 8b       	std	Y+20, r27	; 0x14
    5264:	f3 01       	movw	r30, r6
    5266:	a2 84       	ldd	r10, Z+10	; 0x0a
    5268:	b3 84       	ldd	r11, Z+11	; 0x0b
    526a:	c1 2c       	mov	r12, r1
    526c:	d1 2c       	mov	r13, r1
    526e:	e6 84       	ldd	r14, Z+14	; 0x0e
    5270:	f7 84       	ldd	r15, Z+15	; 0x0f
    5272:	8e 01       	movw	r16, r28
    5274:	0f 5e       	subi	r16, 0xEF	; 239
    5276:	1f 4f       	sbci	r17, 0xFF	; 255
    5278:	9e 01       	movw	r18, r28
    527a:	2b 5e       	subi	r18, 0xEB	; 235
    527c:	3f 4f       	sbci	r19, 0xFF	; 255
    527e:	41 e0       	ldi	r20, 0x01	; 1
    5280:	50 e0       	ldi	r21, 0x00	; 0
    5282:	60 e0       	ldi	r22, 0x00	; 0
    5284:	70 e0       	ldi	r23, 0x00	; 0
    5286:	ce 01       	movw	r24, r28
    5288:	49 96       	adiw	r24, 0x19	; 25
    528a:	0e 94 c1 33 	call	0x6782	; 0x6782 <MQTTDeserialize_suback>
    528e:	61 30       	cpi	r22, 0x01	; 1
    5290:	71 05       	cpc	r23, r1
    5292:	81 05       	cpc	r24, r1
    5294:	91 05       	cpc	r25, r1
    5296:	51 f4       	brne	.+20     	; 0x52ac <MQTTSubscribe+0x150>
    5298:	49 89       	ldd	r20, Y+17	; 0x11
    529a:	5a 89       	ldd	r21, Y+18	; 0x12
    529c:	6b 89       	ldd	r22, Y+19	; 0x13
    529e:	7c 89       	ldd	r23, Y+20	; 0x14
    52a0:	40 38       	cpi	r20, 0x80	; 128
    52a2:	51 05       	cpc	r21, r1
    52a4:	61 05       	cpc	r22, r1
    52a6:	71 05       	cpc	r23, r1
    52a8:	81 f1       	breq	.+96     	; 0x530a <MQTTSubscribe+0x1ae>
    52aa:	02 c0       	rjmp	.+4      	; 0x52b0 <MQTTSubscribe+0x154>
    52ac:	b2 01       	movw	r22, r4
    52ae:	a1 01       	movw	r20, r2
    52b0:	f3 01       	movw	r30, r6
    52b2:	81 8d       	ldd	r24, Z+25	; 0x19
    52b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    52b6:	89 2b       	or	r24, r25
    52b8:	49 f0       	breq	.+18     	; 0x52cc <MQTTSubscribe+0x170>
    52ba:	81 e0       	ldi	r24, 0x01	; 1
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	a0 e0       	ldi	r26, 0x00	; 0
    52c0:	b0 e0       	ldi	r27, 0x00	; 0
    52c2:	25 8d       	ldd	r18, Z+29	; 0x1d
    52c4:	36 8d       	ldd	r19, Z+30	; 0x1e
    52c6:	23 2b       	or	r18, r19
    52c8:	a1 f4       	brne	.+40     	; 0x52f2 <MQTTSubscribe+0x196>
    52ca:	03 c0       	rjmp	.+6      	; 0x52d2 <MQTTSubscribe+0x176>
    52cc:	80 e0       	ldi	r24, 0x00	; 0
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	dc 01       	movw	r26, r24
    52d2:	88 0f       	add	r24, r24
    52d4:	99 1f       	adc	r25, r25
    52d6:	88 0f       	add	r24, r24
    52d8:	99 1f       	adc	r25, r25
    52da:	f3 01       	movw	r30, r6
    52dc:	e8 0f       	add	r30, r24
    52de:	f9 1f       	adc	r31, r25
    52e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    52e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    52e4:	92 8f       	std	Z+26, r25	; 0x1a
    52e6:	81 8f       	std	Z+25, r24	; 0x19
    52e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    52ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    52ec:	94 8f       	std	Z+28, r25	; 0x1c
    52ee:	83 8f       	std	Z+27, r24	; 0x1b
    52f0:	1d c0       	rjmp	.+58     	; 0x532c <MQTTSubscribe+0x1d0>
    52f2:	01 96       	adiw	r24, 0x01	; 1
    52f4:	a1 1d       	adc	r26, r1
    52f6:	b1 1d       	adc	r27, r1
    52f8:	34 96       	adiw	r30, 0x04	; 4
    52fa:	85 30       	cpi	r24, 0x05	; 5
    52fc:	91 05       	cpc	r25, r1
    52fe:	a1 05       	cpc	r26, r1
    5300:	b1 05       	cpc	r27, r1
    5302:	f9 f6       	brne	.-66     	; 0x52c2 <MQTTSubscribe+0x166>
    5304:	1a 01       	movw	r2, r20
    5306:	2b 01       	movw	r4, r22
    5308:	11 c0       	rjmp	.+34     	; 0x532c <MQTTSubscribe+0x1d0>
    530a:	1a 01       	movw	r2, r20
    530c:	2b 01       	movw	r4, r22
    530e:	0e c0       	rjmp	.+28     	; 0x532c <MQTTSubscribe+0x1d0>
    5310:	22 24       	eor	r2, r2
    5312:	2a 94       	dec	r2
    5314:	32 2c       	mov	r3, r2
    5316:	21 01       	movw	r4, r2
    5318:	09 c0       	rjmp	.+18     	; 0x532c <MQTTSubscribe+0x1d0>
    531a:	22 24       	eor	r2, r2
    531c:	2a 94       	dec	r2
    531e:	32 2c       	mov	r3, r2
    5320:	21 01       	movw	r4, r2
    5322:	04 c0       	rjmp	.+8      	; 0x532c <MQTTSubscribe+0x1d0>
    5324:	22 24       	eor	r2, r2
    5326:	2a 94       	dec	r2
    5328:	32 2c       	mov	r3, r2
    532a:	21 01       	movw	r4, r2
    532c:	c2 01       	movw	r24, r4
    532e:	b1 01       	movw	r22, r2
    5330:	6f 96       	adiw	r28, 0x1f	; 31
    5332:	0f b6       	in	r0, 0x3f	; 63
    5334:	f8 94       	cli
    5336:	de bf       	out	0x3e, r29	; 62
    5338:	0f be       	out	0x3f, r0	; 63
    533a:	cd bf       	out	0x3d, r28	; 61
    533c:	df 91       	pop	r29
    533e:	cf 91       	pop	r28
    5340:	1f 91       	pop	r17
    5342:	0f 91       	pop	r16
    5344:	ff 90       	pop	r15
    5346:	ef 90       	pop	r14
    5348:	df 90       	pop	r13
    534a:	cf 90       	pop	r12
    534c:	bf 90       	pop	r11
    534e:	af 90       	pop	r10
    5350:	9f 90       	pop	r9
    5352:	8f 90       	pop	r8
    5354:	7f 90       	pop	r7
    5356:	6f 90       	pop	r6
    5358:	5f 90       	pop	r5
    535a:	4f 90       	pop	r4
    535c:	3f 90       	pop	r3
    535e:	2f 90       	pop	r2
    5360:	08 95       	ret

00005362 <MQTTPublish>:

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
    5362:	8f 92       	push	r8
    5364:	9f 92       	push	r9
    5366:	af 92       	push	r10
    5368:	bf 92       	push	r11
    536a:	cf 92       	push	r12
    536c:	df 92       	push	r13
    536e:	ef 92       	push	r14
    5370:	ff 92       	push	r15
    5372:	0f 93       	push	r16
    5374:	1f 93       	push	r17
    5376:	cf 93       	push	r28
    5378:	df 93       	push	r29
    537a:	cd b7       	in	r28, 0x3d	; 61
    537c:	de b7       	in	r29, 0x3e	; 62
    537e:	64 97       	sbiw	r28, 0x14	; 20
    5380:	0f b6       	in	r0, 0x3f	; 63
    5382:	f8 94       	cli
    5384:	de bf       	out	0x3e, r29	; 62
    5386:	0f be       	out	0x3f, r0	; 63
    5388:	cd bf       	out	0x3d, r28	; 61
    538a:	4c 01       	movw	r8, r24
    538c:	5a 01       	movw	r10, r20
  int32_t rc = FAILURE;
  Timer timer;   
  MQTTString topic = MQTTString_initializer;
    538e:	1b 86       	std	Y+11, r1	; 0x0b
    5390:	1c 86       	std	Y+12, r1	; 0x0c
    5392:	1d 86       	std	Y+13, r1	; 0x0d
    5394:	1e 86       	std	Y+14, r1	; 0x0e
    5396:	18 8a       	std	Y+16, r1	; 0x10
    5398:	1f 86       	std	Y+15, r1	; 0x0f
  topic.cstring = (char *)topicName;
    539a:	7a 87       	std	Y+10, r23	; 0x0a
    539c:	69 87       	std	Y+9, r22	; 0x09
  int32_t len = 0;

  InitTimer(&timer);
    539e:	ce 01       	movw	r24, r28
    53a0:	01 96       	adiw	r24, 0x01	; 1
    53a2:	ff d1       	rcall	.+1022   	; 0x57a2 <InitTimer>
  countdown_ms(&timer, c->command_timeout_ms);
    53a4:	f4 01       	movw	r30, r8
    53a6:	44 81       	ldd	r20, Z+4	; 0x04
    53a8:	55 81       	ldd	r21, Z+5	; 0x05
    53aa:	66 81       	ldd	r22, Z+6	; 0x06
    53ac:	77 81       	ldd	r23, Z+7	; 0x07
    53ae:	ce 01       	movw	r24, r28
    53b0:	01 96       	adiw	r24, 0x01	; 1
    53b2:	97 d1       	rcall	.+814    	; 0x56e2 <countdown_ms>
    
  if (!c->isconnected)
    53b4:	f4 01       	movw	r30, r8
    53b6:	85 89       	ldd	r24, Z+21	; 0x15
    53b8:	96 89       	ldd	r25, Z+22	; 0x16
    53ba:	a7 89       	ldd	r26, Z+23	; 0x17
    53bc:	b0 8d       	ldd	r27, Z+24	; 0x18
    53be:	89 2b       	or	r24, r25
    53c0:	8a 2b       	or	r24, r26
    53c2:	8b 2b       	or	r24, r27
    53c4:	09 f4       	brne	.+2      	; 0x53c8 <MQTTPublish+0x66>
    53c6:	bb c0       	rjmp	.+374    	; 0x553e <MQTTPublish+0x1dc>
    goto exit;

  if (message->qos == QOS1 || message->qos == QOS2)
    53c8:	f5 01       	movw	r30, r10
    53ca:	80 81       	ld	r24, Z
    53cc:	81 50       	subi	r24, 0x01	; 1
    53ce:	82 30       	cpi	r24, 0x02	; 2
    message->id = getNextPacketId(c);
    53d0:	28 f4       	brcc	.+10     	; 0x53dc <MQTTPublish+0x7a>
    53d2:	c4 01       	movw	r24, r8
    53d4:	8b d9       	rcall	.-3306   	; 0x46ec <getNextPacketId>
    53d6:	f5 01       	movw	r30, r10
    53d8:	74 83       	std	Z+4, r23	; 0x04
    53da:	63 83       	std	Z+3, r22	; 0x03
    
  len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
    53dc:	f5 01       	movw	r30, r10
    53de:	c3 80       	ldd	r12, Z+3	; 0x03
    53e0:	d4 80       	ldd	r13, Z+4	; 0x04
    53e2:	f4 01       	movw	r30, r8
    53e4:	40 85       	ldd	r20, Z+8	; 0x08
    53e6:	51 85       	ldd	r21, Z+9	; 0x09
    53e8:	60 e0       	ldi	r22, 0x00	; 0
    53ea:	70 e0       	ldi	r23, 0x00	; 0
    53ec:	84 85       	ldd	r24, Z+12	; 0x0c
    53ee:	95 85       	ldd	r25, Z+13	; 0x0d
    53f0:	f5 01       	movw	r30, r10
    53f2:	07 81       	ldd	r16, Z+7	; 0x07
    53f4:	10 85       	ldd	r17, Z+8	; 0x08
    53f6:	1f 92       	push	r1
    53f8:	1f 92       	push	r1
    53fa:	1f 93       	push	r17
    53fc:	0f 93       	push	r16
    53fe:	26 81       	ldd	r18, Z+6	; 0x06
    5400:	2f 93       	push	r18
    5402:	25 81       	ldd	r18, Z+5	; 0x05
    5404:	2f 93       	push	r18
    5406:	2d b7       	in	r18, 0x3d	; 61
    5408:	3e b7       	in	r19, 0x3e	; 62
    540a:	28 50       	subi	r18, 0x08	; 8
    540c:	31 09       	sbc	r19, r1
    540e:	0f b6       	in	r0, 0x3f	; 63
    5410:	f8 94       	cli
    5412:	3e bf       	out	0x3e, r19	; 62
    5414:	0f be       	out	0x3f, r0	; 63
    5416:	2d bf       	out	0x3d, r18	; 61
    5418:	ad b7       	in	r26, 0x3d	; 61
    541a:	be b7       	in	r27, 0x3e	; 62
    541c:	11 96       	adiw	r26, 0x01	; 1
    541e:	28 e0       	ldi	r18, 0x08	; 8
    5420:	fe 01       	movw	r30, r28
    5422:	39 96       	adiw	r30, 0x09	; 9
    5424:	01 90       	ld	r0, Z+
    5426:	0d 92       	st	X+, r0
    5428:	2a 95       	dec	r18
    542a:	e1 f7       	brne	.-8      	; 0x5424 <MQTTPublish+0xc2>
    542c:	f5 01       	movw	r30, r10
    542e:	e1 80       	ldd	r14, Z+1	; 0x01
    5430:	00 81       	ld	r16, Z
    5432:	20 e0       	ldi	r18, 0x00	; 0
    5434:	d0 d7       	rcall	.+4000   	; 0x63d6 <MQTTSerialize_publish>
    5436:	ab 01       	movw	r20, r22
    5438:	bc 01       	movw	r22, r24
        topic, (uint8_t*)message->payload, message->payloadlen);
    
  if (len <= 0)
    543a:	0f b6       	in	r0, 0x3f	; 63
    543c:	f8 94       	cli
    543e:	de bf       	out	0x3e, r29	; 62
    5440:	0f be       	out	0x3f, r0	; 63
    5442:	cd bf       	out	0x3d, r28	; 61
    5444:	14 16       	cp	r1, r20
    5446:	15 06       	cpc	r1, r21
    5448:	16 06       	cpc	r1, r22
    544a:	17 06       	cpc	r1, r23
    544c:	0c f0       	brlt	.+2      	; 0x5450 <MQTTPublish+0xee>
    544e:	7b c0       	rjmp	.+246    	; 0x5546 <MQTTPublish+0x1e4>
    goto exit;
  
  if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
    5450:	9e 01       	movw	r18, r28
    5452:	2f 5f       	subi	r18, 0xFF	; 255
    5454:	3f 4f       	sbci	r19, 0xFF	; 255
    5456:	c4 01       	movw	r24, r8
    5458:	64 d9       	rcall	.-3384   	; 0x4722 <sendPacket>
    545a:	61 15       	cp	r22, r1
    545c:	71 05       	cpc	r23, r1
    545e:	81 05       	cpc	r24, r1
    5460:	91 05       	cpc	r25, r1
    5462:	09 f0       	breq	.+2      	; 0x5466 <MQTTPublish+0x104>
    5464:	7b c0       	rjmp	.+246    	; 0x555c <MQTTPublish+0x1fa>
    goto exit; // there was a problem
    
  if (message->qos == QOS1)
    5466:	f5 01       	movw	r30, r10
    5468:	20 81       	ld	r18, Z
    546a:	21 30       	cpi	r18, 0x01	; 1
    546c:	99 f5       	brne	.+102    	; 0x54d4 <MQTTPublish+0x172>
  {
    if (waitfor(c, PUBACK, &timer) == PUBACK)
    546e:	9e 01       	movw	r18, r28
    5470:	2f 5f       	subi	r18, 0xFF	; 255
    5472:	3f 4f       	sbci	r19, 0xFF	; 255
    5474:	44 e0       	ldi	r20, 0x04	; 4
    5476:	50 e0       	ldi	r21, 0x00	; 0
    5478:	60 e0       	ldi	r22, 0x00	; 0
    547a:	70 e0       	ldi	r23, 0x00	; 0
    547c:	c4 01       	movw	r24, r8
    547e:	83 dd       	rcall	.-1274   	; 0x4f86 <waitfor>
    5480:	64 30       	cpi	r22, 0x04	; 4
    5482:	71 05       	cpc	r23, r1
    5484:	81 05       	cpc	r24, r1
    5486:	91 05       	cpc	r25, r1
    5488:	09 f0       	breq	.+2      	; 0x548c <MQTTPublish+0x12a>
    548a:	61 c0       	rjmp	.+194    	; 0x554e <MQTTPublish+0x1ec>
    {
      uint16_t mypacketid;
      uint8_t dup, type;

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    548c:	f4 01       	movw	r30, r8
    548e:	e2 84       	ldd	r14, Z+10	; 0x0a
    5490:	f3 84       	ldd	r15, Z+11	; 0x0b
    5492:	00 e0       	ldi	r16, 0x00	; 0
    5494:	10 e0       	ldi	r17, 0x00	; 0
    5496:	26 85       	ldd	r18, Z+14	; 0x0e
    5498:	37 85       	ldd	r19, Z+15	; 0x0f
    549a:	ae 01       	movw	r20, r28
    549c:	4f 5e       	subi	r20, 0xEF	; 239
    549e:	5f 4f       	sbci	r21, 0xFF	; 255
    54a0:	be 01       	movw	r22, r28
    54a2:	6c 5e       	subi	r22, 0xEC	; 236
    54a4:	7f 4f       	sbci	r23, 0xFF	; 255
    54a6:	ce 01       	movw	r24, r28
    54a8:	43 96       	adiw	r24, 0x13	; 19
    54aa:	4f d4       	rcall	.+2206   	; 0x5d4a <MQTTDeserialize_ack>
    54ac:	01 e0       	ldi	r16, 0x01	; 1
    54ae:	10 e0       	ldi	r17, 0x00	; 0
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	61 30       	cpi	r22, 0x01	; 1
    54b6:	71 05       	cpc	r23, r1
    54b8:	81 05       	cpc	r24, r1
    54ba:	91 05       	cpc	r25, r1
    54bc:	19 f4       	brne	.+6      	; 0x54c4 <MQTTPublish+0x162>
    54be:	00 e0       	ldi	r16, 0x00	; 0
    54c0:	10 e0       	ldi	r17, 0x00	; 0
    54c2:	98 01       	movw	r18, r16
    54c4:	66 27       	eor	r22, r22
    54c6:	77 27       	eor	r23, r23
    54c8:	cb 01       	movw	r24, r22
    54ca:	60 1b       	sub	r22, r16
    54cc:	71 0b       	sbc	r23, r17
    54ce:	82 0b       	sbc	r24, r18
    54d0:	93 0b       	sbc	r25, r19
    54d2:	44 c0       	rjmp	.+136    	; 0x555c <MQTTPublish+0x1fa>
        rc = FAILURE;
    }
    else
      rc = FAILURE;
  }
  else if (message->qos == QOS2)
    54d4:	22 30       	cpi	r18, 0x02	; 2
    54d6:	09 f0       	breq	.+2      	; 0x54da <MQTTPublish+0x178>
    54d8:	41 c0       	rjmp	.+130    	; 0x555c <MQTTPublish+0x1fa>
  {
    if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
    54da:	9e 01       	movw	r18, r28
    54dc:	2f 5f       	subi	r18, 0xFF	; 255
    54de:	3f 4f       	sbci	r19, 0xFF	; 255
    54e0:	47 e0       	ldi	r20, 0x07	; 7
    54e2:	50 e0       	ldi	r21, 0x00	; 0
    54e4:	60 e0       	ldi	r22, 0x00	; 0
    54e6:	70 e0       	ldi	r23, 0x00	; 0
    54e8:	c4 01       	movw	r24, r8
    54ea:	4d dd       	rcall	.-1382   	; 0x4f86 <waitfor>
    54ec:	67 30       	cpi	r22, 0x07	; 7
    54ee:	71 05       	cpc	r23, r1
    54f0:	81 05       	cpc	r24, r1
    54f2:	91 05       	cpc	r25, r1
    54f4:	81 f5       	brne	.+96     	; 0x5556 <MQTTPublish+0x1f4>
    {
      uint16_t mypacketid;
      uint8_t dup, type;
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    54f6:	f4 01       	movw	r30, r8
    54f8:	e2 84       	ldd	r14, Z+10	; 0x0a
    54fa:	f3 84       	ldd	r15, Z+11	; 0x0b
    54fc:	00 e0       	ldi	r16, 0x00	; 0
    54fe:	10 e0       	ldi	r17, 0x00	; 0
    5500:	26 85       	ldd	r18, Z+14	; 0x0e
    5502:	37 85       	ldd	r19, Z+15	; 0x0f
    5504:	ae 01       	movw	r20, r28
    5506:	4f 5e       	subi	r20, 0xEF	; 239
    5508:	5f 4f       	sbci	r21, 0xFF	; 255
    550a:	be 01       	movw	r22, r28
    550c:	6c 5e       	subi	r22, 0xEC	; 236
    550e:	7f 4f       	sbci	r23, 0xFF	; 255
    5510:	ce 01       	movw	r24, r28
    5512:	43 96       	adiw	r24, 0x13	; 19
    5514:	1a d4       	rcall	.+2100   	; 0x5d4a <MQTTDeserialize_ack>
    5516:	01 e0       	ldi	r16, 0x01	; 1
    5518:	10 e0       	ldi	r17, 0x00	; 0
    551a:	20 e0       	ldi	r18, 0x00	; 0
    551c:	30 e0       	ldi	r19, 0x00	; 0
    551e:	61 30       	cpi	r22, 0x01	; 1
    5520:	71 05       	cpc	r23, r1
    5522:	81 05       	cpc	r24, r1
    5524:	91 05       	cpc	r25, r1
    5526:	19 f4       	brne	.+6      	; 0x552e <MQTTPublish+0x1cc>
    5528:	00 e0       	ldi	r16, 0x00	; 0
    552a:	10 e0       	ldi	r17, 0x00	; 0
    552c:	98 01       	movw	r18, r16
    552e:	66 27       	eor	r22, r22
    5530:	77 27       	eor	r23, r23
    5532:	cb 01       	movw	r24, r22
    5534:	60 1b       	sub	r22, r16
    5536:	71 0b       	sbc	r23, r17
    5538:	82 0b       	sbc	r24, r18
    553a:	93 0b       	sbc	r25, r19
    553c:	0f c0       	rjmp	.+30     	; 0x555c <MQTTPublish+0x1fa>
  return rc;
}

int32_t MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)
{
  int32_t rc = FAILURE;
    553e:	6f ef       	ldi	r22, 0xFF	; 255
    5540:	7f ef       	ldi	r23, 0xFF	; 255
    5542:	cb 01       	movw	r24, r22
    5544:	0b c0       	rjmp	.+22     	; 0x555c <MQTTPublish+0x1fa>
    5546:	6f ef       	ldi	r22, 0xFF	; 255
    5548:	7f ef       	ldi	r23, 0xFF	; 255
    554a:	cb 01       	movw	r24, r22
    554c:	07 c0       	rjmp	.+14     	; 0x555c <MQTTPublish+0x1fa>

      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
        rc = FAILURE;
    }
    else
      rc = FAILURE;
    554e:	6f ef       	ldi	r22, 0xFF	; 255
    5550:	7f ef       	ldi	r23, 0xFF	; 255
    5552:	cb 01       	movw	r24, r22
    5554:	03 c0       	rjmp	.+6      	; 0x555c <MQTTPublish+0x1fa>
    
      if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
        rc = FAILURE;
    }
    else
      rc = FAILURE;
    5556:	6f ef       	ldi	r22, 0xFF	; 255
    5558:	7f ef       	ldi	r23, 0xFF	; 255
    555a:	cb 01       	movw	r24, r22
  }
    
exit:
  return rc;
}
    555c:	64 96       	adiw	r28, 0x14	; 20
    555e:	0f b6       	in	r0, 0x3f	; 63
    5560:	f8 94       	cli
    5562:	de bf       	out	0x3e, r29	; 62
    5564:	0f be       	out	0x3f, r0	; 63
    5566:	cd bf       	out	0x3d, r28	; 61
    5568:	df 91       	pop	r29
    556a:	cf 91       	pop	r28
    556c:	1f 91       	pop	r17
    556e:	0f 91       	pop	r16
    5570:	ff 90       	pop	r15
    5572:	ef 90       	pop	r14
    5574:	df 90       	pop	r13
    5576:	cf 90       	pop	r12
    5578:	bf 90       	pop	r11
    557a:	af 90       	pop	r10
    557c:	9f 90       	pop	r9
    557e:	8f 90       	pop	r8
    5580:	08 95       	ret

00005582 <w5500_read>:
  n->mqttwrite = w5500_write;
  n->disconnect = w5500_disconnect;
}

int32_t w5500_read(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    5582:	cf 92       	push	r12
    5584:	df 92       	push	r13
    5586:	ef 92       	push	r14
    5588:	ff 92       	push	r15
    558a:	0f 93       	push	r16
    558c:	1f 93       	push	r17
    558e:	cf 93       	push	r28
    5590:	df 93       	push	r29
    5592:	ec 01       	movw	r28, r24
    5594:	8b 01       	movw	r16, r22
    5596:	69 01       	movw	r12, r18
    5598:	7a 01       	movw	r14, r20
  if ((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
    559a:	88 81       	ld	r24, Y
    559c:	99 81       	ldd	r25, Y+1	; 0x01
    559e:	aa 81       	ldd	r26, Y+2	; 0x02
    55a0:	bb 81       	ldd	r27, Y+3	; 0x03
    55a2:	88 0f       	add	r24, r24
    55a4:	99 1f       	adc	r25, r25
    55a6:	aa 1f       	adc	r26, r26
    55a8:	bb 1f       	adc	r27, r27
    55aa:	88 0f       	add	r24, r24
    55ac:	99 1f       	adc	r25, r25
    55ae:	aa 1f       	adc	r26, r26
    55b0:	bb 1f       	adc	r27, r27
    55b2:	01 96       	adiw	r24, 0x01	; 1
    55b4:	a1 1d       	adc	r26, r1
    55b6:	b1 1d       	adc	r27, r1
    55b8:	88 0f       	add	r24, r24
    55ba:	99 1f       	adc	r25, r25
    55bc:	aa 1f       	adc	r26, r26
    55be:	bb 1f       	adc	r27, r27
    55c0:	88 0f       	add	r24, r24
    55c2:	99 1f       	adc	r25, r25
    55c4:	aa 1f       	adc	r26, r26
    55c6:	bb 1f       	adc	r27, r27
    55c8:	88 0f       	add	r24, r24
    55ca:	99 1f       	adc	r25, r25
    55cc:	aa 1f       	adc	r26, r26
    55ce:	bb 1f       	adc	r27, r27
    55d0:	bc 01       	movw	r22, r24
    55d2:	cd 01       	movw	r24, r26
    55d4:	7d 5f       	subi	r23, 0xFD	; 253
    55d6:	8f 4f       	sbci	r24, 0xFF	; 255
    55d8:	9f 4f       	sbci	r25, 0xFF	; 255
    55da:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
    55de:	87 31       	cpi	r24, 0x17	; 23
    55e0:	59 f4       	brne	.+22     	; 0x55f8 <w5500_read+0x76>
    55e2:	88 81       	ld	r24, Y
    55e4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <getSn_RX_RSR>
    55e8:	89 2b       	or	r24, r25
    55ea:	51 f0       	breq	.+20     	; 0x5600 <w5500_read+0x7e>
    return recv(n->my_socket, buffer, len);
    55ec:	a6 01       	movw	r20, r12
    55ee:	b8 01       	movw	r22, r16
    55f0:	88 81       	ld	r24, Y
    55f2:	0e 94 90 16 	call	0x2d20	; 0x2d20 <recv>
    55f6:	07 c0       	rjmp	.+14     	; 0x5606 <w5500_read+0x84>
  
  return 0;
    55f8:	60 e0       	ldi	r22, 0x00	; 0
    55fa:	70 e0       	ldi	r23, 0x00	; 0
    55fc:	cb 01       	movw	r24, r22
    55fe:	03 c0       	rjmp	.+6      	; 0x5606 <w5500_read+0x84>
    5600:	60 e0       	ldi	r22, 0x00	; 0
    5602:	70 e0       	ldi	r23, 0x00	; 0
    5604:	cb 01       	movw	r24, r22
}
    5606:	df 91       	pop	r29
    5608:	cf 91       	pop	r28
    560a:	1f 91       	pop	r17
    560c:	0f 91       	pop	r16
    560e:	ff 90       	pop	r15
    5610:	ef 90       	pop	r14
    5612:	df 90       	pop	r13
    5614:	cf 90       	pop	r12
    5616:	08 95       	ret

00005618 <w5500_write>:

int32_t w5500_write(Network* n, uint8_t* buffer, int32_t len, int32_t timeout_ms)
{
    5618:	cf 92       	push	r12
    561a:	df 92       	push	r13
    561c:	ef 92       	push	r14
    561e:	ff 92       	push	r15
    5620:	0f 93       	push	r16
    5622:	1f 93       	push	r17
    5624:	cf 93       	push	r28
    5626:	df 93       	push	r29
    5628:	ec 01       	movw	r28, r24
    562a:	8b 01       	movw	r16, r22
    562c:	69 01       	movw	r12, r18
    562e:	7a 01       	movw	r14, r20
  if (getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
    5630:	88 81       	ld	r24, Y
    5632:	99 81       	ldd	r25, Y+1	; 0x01
    5634:	aa 81       	ldd	r26, Y+2	; 0x02
    5636:	bb 81       	ldd	r27, Y+3	; 0x03
    5638:	88 0f       	add	r24, r24
    563a:	99 1f       	adc	r25, r25
    563c:	aa 1f       	adc	r26, r26
    563e:	bb 1f       	adc	r27, r27
    5640:	88 0f       	add	r24, r24
    5642:	99 1f       	adc	r25, r25
    5644:	aa 1f       	adc	r26, r26
    5646:	bb 1f       	adc	r27, r27
    5648:	01 96       	adiw	r24, 0x01	; 1
    564a:	a1 1d       	adc	r26, r1
    564c:	b1 1d       	adc	r27, r1
    564e:	88 0f       	add	r24, r24
    5650:	99 1f       	adc	r25, r25
    5652:	aa 1f       	adc	r26, r26
    5654:	bb 1f       	adc	r27, r27
    5656:	88 0f       	add	r24, r24
    5658:	99 1f       	adc	r25, r25
    565a:	aa 1f       	adc	r26, r26
    565c:	bb 1f       	adc	r27, r27
    565e:	88 0f       	add	r24, r24
    5660:	99 1f       	adc	r25, r25
    5662:	aa 1f       	adc	r26, r26
    5664:	bb 1f       	adc	r27, r27
    5666:	bc 01       	movw	r22, r24
    5668:	cd 01       	movw	r24, r26
    566a:	7d 5f       	subi	r23, 0xFD	; 253
    566c:	8f 4f       	sbci	r24, 0xFF	; 255
    566e:	9f 4f       	sbci	r25, 0xFF	; 255
    5670:	0e 94 9f 1a 	call	0x353e	; 0x353e <WIZCHIP_READ>
    5674:	87 31       	cpi	r24, 0x17	; 23
    5676:	31 f4       	brne	.+12     	; 0x5684 <w5500_write+0x6c>
    return send(n->my_socket, buffer, len);
    5678:	a6 01       	movw	r20, r12
    567a:	b8 01       	movw	r22, r16
    567c:	88 81       	ld	r24, Y
    567e:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <send>
    5682:	03 c0       	rjmp	.+6      	; 0x568a <w5500_write+0x72>
  
  return 0;
    5684:	60 e0       	ldi	r22, 0x00	; 0
    5686:	70 e0       	ldi	r23, 0x00	; 0
    5688:	cb 01       	movw	r24, r22
}
    568a:	df 91       	pop	r29
    568c:	cf 91       	pop	r28
    568e:	1f 91       	pop	r17
    5690:	0f 91       	pop	r16
    5692:	ff 90       	pop	r15
    5694:	ef 90       	pop	r14
    5696:	df 90       	pop	r13
    5698:	cf 90       	pop	r12
    569a:	08 95       	ret

0000569c <w5500_disconnect>:

void w5500_disconnect(Network* n)
{
  disconnect(n->my_socket);
    569c:	fc 01       	movw	r30, r24
    569e:	80 81       	ld	r24, Z
    56a0:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <disconnect>
    56a4:	08 95       	ret

000056a6 <expired>:
  MilliTimer++;
}
*/

int8_t expired(Timer* timer)
{
    56a6:	cf 92       	push	r12
    56a8:	df 92       	push	r13
    56aa:	ef 92       	push	r14
    56ac:	ff 92       	push	r15
  int32_t left = (timer->end_time) - millis();
    56ae:	fc 01       	movw	r30, r24
    56b0:	c4 80       	ldd	r12, Z+4	; 0x04
    56b2:	d5 80       	ldd	r13, Z+5	; 0x05
    56b4:	e6 80       	ldd	r14, Z+6	; 0x06
    56b6:	f7 80       	ldd	r15, Z+7	; 0x07
    56b8:	0e 94 93 04 	call	0x926	; 0x926 <millis>
  return (left < 0);
    56bc:	a7 01       	movw	r20, r14
    56be:	96 01       	movw	r18, r12
    56c0:	26 1b       	sub	r18, r22
    56c2:	37 0b       	sbc	r19, r23
    56c4:	48 0b       	sbc	r20, r24
    56c6:	59 0b       	sbc	r21, r25
    56c8:	da 01       	movw	r26, r20
    56ca:	c9 01       	movw	r24, r18
    56cc:	88 27       	eor	r24, r24
    56ce:	b7 fd       	sbrc	r27, 7
    56d0:	83 95       	inc	r24
    56d2:	99 27       	eor	r25, r25
    56d4:	aa 27       	eor	r26, r26
    56d6:	bb 27       	eor	r27, r27
}
    56d8:	ff 90       	pop	r15
    56da:	ef 90       	pop	r14
    56dc:	df 90       	pop	r13
    56de:	cf 90       	pop	r12
    56e0:	08 95       	ret

000056e2 <countdown_ms>:

void countdown_ms(Timer* timer, uint32_t timeout)
{
    56e2:	cf 92       	push	r12
    56e4:	df 92       	push	r13
    56e6:	ef 92       	push	r14
    56e8:	ff 92       	push	r15
    56ea:	cf 93       	push	r28
    56ec:	df 93       	push	r29
    56ee:	ec 01       	movw	r28, r24
    56f0:	6a 01       	movw	r12, r20
    56f2:	7b 01       	movw	r14, r22
	timer->end_time = millis() + timeout;
    56f4:	0e 94 93 04 	call	0x926	; 0x926 <millis>
    56f8:	c6 0e       	add	r12, r22
    56fa:	d7 1e       	adc	r13, r23
    56fc:	e8 1e       	adc	r14, r24
    56fe:	f9 1e       	adc	r15, r25
    5700:	cc 82       	std	Y+4, r12	; 0x04
    5702:	dd 82       	std	Y+5, r13	; 0x05
    5704:	ee 82       	std	Y+6, r14	; 0x06
    5706:	ff 82       	std	Y+7, r15	; 0x07
}
    5708:	df 91       	pop	r29
    570a:	cf 91       	pop	r28
    570c:	ff 90       	pop	r15
    570e:	ef 90       	pop	r14
    5710:	df 90       	pop	r13
    5712:	cf 90       	pop	r12
    5714:	08 95       	ret

00005716 <countdown>:

void countdown(Timer* timer, uint32_t timeout)
{
    5716:	8f 92       	push	r8
    5718:	9f 92       	push	r9
    571a:	af 92       	push	r10
    571c:	bf 92       	push	r11
    571e:	cf 92       	push	r12
    5720:	df 92       	push	r13
    5722:	ef 92       	push	r14
    5724:	ff 92       	push	r15
    5726:	cf 93       	push	r28
    5728:	df 93       	push	r29
    572a:	ec 01       	movw	r28, r24
    572c:	4a 01       	movw	r8, r20
    572e:	5b 01       	movw	r10, r22
  timer->end_time = millis() + (timeout * 1000UL);
    5730:	0e 94 93 04 	call	0x926	; 0x926 <millis>
    5734:	6b 01       	movw	r12, r22
    5736:	7c 01       	movw	r14, r24
    5738:	a8 ee       	ldi	r26, 0xE8	; 232
    573a:	b3 e0       	ldi	r27, 0x03	; 3
    573c:	a5 01       	movw	r20, r10
    573e:	94 01       	movw	r18, r8
    5740:	0e 94 e6 3e 	call	0x7dcc	; 0x7dcc <__muluhisi3>
    5744:	c6 0e       	add	r12, r22
    5746:	d7 1e       	adc	r13, r23
    5748:	e8 1e       	adc	r14, r24
    574a:	f9 1e       	adc	r15, r25
    574c:	cc 82       	std	Y+4, r12	; 0x04
    574e:	dd 82       	std	Y+5, r13	; 0x05
    5750:	ee 82       	std	Y+6, r14	; 0x06
    5752:	ff 82       	std	Y+7, r15	; 0x07
}
    5754:	df 91       	pop	r29
    5756:	cf 91       	pop	r28
    5758:	ff 90       	pop	r15
    575a:	ef 90       	pop	r14
    575c:	df 90       	pop	r13
    575e:	cf 90       	pop	r12
    5760:	bf 90       	pop	r11
    5762:	af 90       	pop	r10
    5764:	9f 90       	pop	r9
    5766:	8f 90       	pop	r8
    5768:	08 95       	ret

0000576a <left_ms>:

int32_t left_ms(Timer* timer)
{
    576a:	cf 92       	push	r12
    576c:	df 92       	push	r13
    576e:	ef 92       	push	r14
    5770:	ff 92       	push	r15
  int32_t left = timer->end_time - millis();
    5772:	fc 01       	movw	r30, r24
    5774:	c4 80       	ldd	r12, Z+4	; 0x04
    5776:	d5 80       	ldd	r13, Z+5	; 0x05
    5778:	e6 80       	ldd	r14, Z+6	; 0x06
    577a:	f7 80       	ldd	r15, Z+7	; 0x07
    577c:	0e 94 93 04 	call	0x926	; 0x926 <millis>
  return (left < 0) ? 0 : left;
    5780:	a7 01       	movw	r20, r14
    5782:	96 01       	movw	r18, r12
    5784:	26 1b       	sub	r18, r22
    5786:	37 0b       	sbc	r19, r23
    5788:	48 0b       	sbc	r20, r24
    578a:	59 0b       	sbc	r21, r25
    578c:	ca 01       	movw	r24, r20
    578e:	b9 01       	movw	r22, r18
    5790:	1a f4       	brpl	.+6      	; 0x5798 <left_ms+0x2e>
    5792:	60 e0       	ldi	r22, 0x00	; 0
    5794:	70 e0       	ldi	r23, 0x00	; 0
    5796:	cb 01       	movw	r24, r22
}
    5798:	ff 90       	pop	r15
    579a:	ef 90       	pop	r14
    579c:	df 90       	pop	r13
    579e:	cf 90       	pop	r12
    57a0:	08 95       	ret

000057a2 <InitTimer>:

void InitTimer(Timer* timer)
{
  timer->end_time = 0;
    57a2:	fc 01       	movw	r30, r24
    57a4:	14 82       	std	Z+4, r1	; 0x04
    57a6:	15 82       	std	Z+5, r1	; 0x05
    57a8:	16 82       	std	Z+6, r1	; 0x06
    57aa:	17 82       	std	Z+7, r1	; 0x07
    57ac:	08 95       	ret

000057ae <NewNetwork>:
}


void NewNetwork(Network* n)
{
    57ae:	fc 01       	movw	r30, r24
  //n->my_socket = 0; //initialized outside actually..
  n->mqttread = w5500_read;
    57b0:	81 ec       	ldi	r24, 0xC1	; 193
    57b2:	9a e2       	ldi	r25, 0x2A	; 42
    57b4:	95 83       	std	Z+5, r25	; 0x05
    57b6:	84 83       	std	Z+4, r24	; 0x04
  n->mqttwrite = w5500_write;
    57b8:	8c e0       	ldi	r24, 0x0C	; 12
    57ba:	9b e2       	ldi	r25, 0x2B	; 43
    57bc:	97 83       	std	Z+7, r25	; 0x07
    57be:	86 83       	std	Z+6, r24	; 0x06
  n->disconnect = w5500_disconnect;
    57c0:	8e e4       	ldi	r24, 0x4E	; 78
    57c2:	9b e2       	ldi	r25, 0x2B	; 43
    57c4:	91 87       	std	Z+9, r25	; 0x09
    57c6:	80 87       	std	Z+8, r24	; 0x08
    57c8:	08 95       	ret

000057ca <ConnectNetwork>:
{
  disconnect(n->my_socket);
}

int32_t ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
    57ca:	ef 92       	push	r14
    57cc:	ff 92       	push	r15
    57ce:	0f 93       	push	r16
    57d0:	1f 93       	push	r17
    57d2:	cf 93       	push	r28
    57d4:	df 93       	push	r29
    57d6:	ec 01       	movw	r28, r24
    57d8:	8b 01       	movw	r16, r22
    57da:	7a 01       	movw	r14, r20
  socket(n->my_socket, Sn_MR_TCP, 12345, 0);
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	49 e3       	ldi	r20, 0x39	; 57
    57e0:	50 e3       	ldi	r21, 0x30	; 48
    57e2:	61 e0       	ldi	r22, 0x01	; 1
    57e4:	88 81       	ld	r24, Y
    57e6:	0e 94 c7 12 	call	0x258e	; 0x258e <socket>
  connect(n->my_socket, ip, port);
    57ea:	a7 01       	movw	r20, r14
    57ec:	b8 01       	movw	r22, r16
    57ee:	88 81       	ld	r24, Y
    57f0:	0e 94 24 14 	call	0x2848	; 0x2848 <connect>

  return 0;
}
    57f4:	60 e0       	ldi	r22, 0x00	; 0
    57f6:	70 e0       	ldi	r23, 0x00	; 0
    57f8:	cb 01       	movw	r24, r22
    57fa:	df 91       	pop	r29
    57fc:	cf 91       	pop	r28
    57fe:	1f 91       	pop	r17
    5800:	0f 91       	pop	r16
    5802:	ff 90       	pop	r15
    5804:	ef 90       	pop	r14
    5806:	08 95       	ret

00005808 <MQTTSerialize_connectLength>:
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_disconnect(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, DISCONNECT);
}
    5808:	8f 92       	push	r8
    580a:	9f 92       	push	r9
    580c:	af 92       	push	r10
    580e:	bf 92       	push	r11
    5810:	cf 92       	push	r12
    5812:	df 92       	push	r13
    5814:	ef 92       	push	r14
    5816:	ff 92       	push	r15
    5818:	cf 93       	push	r28
    581a:	df 93       	push	r29
    581c:	ec 01       	movw	r28, r24
    581e:	8e 81       	ldd	r24, Y+6	; 0x06
    5820:	83 30       	cpi	r24, 0x03	; 3
    5822:	51 f0       	breq	.+20     	; 0x5838 <MQTTSerialize_connectLength+0x30>
    5824:	84 30       	cpi	r24, 0x04	; 4
    5826:	81 f4       	brne	.+32     	; 0x5848 <MQTTSerialize_connectLength+0x40>
    5828:	0f 2e       	mov	r0, r31
    582a:	fa e0       	ldi	r31, 0x0A	; 10
    582c:	cf 2e       	mov	r12, r31
    582e:	d1 2c       	mov	r13, r1
    5830:	e1 2c       	mov	r14, r1
    5832:	f1 2c       	mov	r15, r1
    5834:	f0 2d       	mov	r31, r0
    5836:	0b c0       	rjmp	.+22     	; 0x584e <MQTTSerialize_connectLength+0x46>
    5838:	0f 2e       	mov	r0, r31
    583a:	fc e0       	ldi	r31, 0x0C	; 12
    583c:	cf 2e       	mov	r12, r31
    583e:	d1 2c       	mov	r13, r1
    5840:	e1 2c       	mov	r14, r1
    5842:	f1 2c       	mov	r15, r1
    5844:	f0 2d       	mov	r31, r0
    5846:	03 c0       	rjmp	.+6      	; 0x584e <MQTTSerialize_connectLength+0x46>
    5848:	c1 2c       	mov	r12, r1
    584a:	d1 2c       	mov	r13, r1
    584c:	76 01       	movw	r14, r12
    584e:	2f 81       	ldd	r18, Y+7	; 0x07
    5850:	38 85       	ldd	r19, Y+8	; 0x08
    5852:	49 85       	ldd	r20, Y+9	; 0x09
    5854:	5a 85       	ldd	r21, Y+10	; 0x0a
    5856:	6b 85       	ldd	r22, Y+11	; 0x0b
    5858:	7c 85       	ldd	r23, Y+12	; 0x0c
    585a:	8d 85       	ldd	r24, Y+13	; 0x0d
    585c:	9e 85       	ldd	r25, Y+14	; 0x0e
    585e:	0b d5       	rcall	.+2582   	; 0x6276 <MQTTstrlen>
    5860:	dc 01       	movw	r26, r24
    5862:	cb 01       	movw	r24, r22
    5864:	02 96       	adiw	r24, 0x02	; 2
    5866:	a1 1d       	adc	r26, r1
    5868:	b1 1d       	adc	r27, r1
    586a:	c8 0e       	add	r12, r24
    586c:	d9 1e       	adc	r13, r25
    586e:	ea 1e       	adc	r14, r26
    5870:	fb 1e       	adc	r15, r27
    5872:	8a 89       	ldd	r24, Y+18	; 0x12
    5874:	88 23       	and	r24, r24
    5876:	09 f1       	breq	.+66     	; 0x58ba <MQTTSerialize_connectLength+0xb2>
    5878:	29 8d       	ldd	r18, Y+25	; 0x19
    587a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    587c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    587e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5880:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5882:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5884:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5886:	98 a1       	ldd	r25, Y+32	; 0x20
    5888:	f6 d4       	rcall	.+2540   	; 0x6276 <MQTTstrlen>
    588a:	4b 01       	movw	r8, r22
    588c:	5c 01       	movw	r10, r24
    588e:	29 a1       	ldd	r18, Y+33	; 0x21
    5890:	3a a1       	ldd	r19, Y+34	; 0x22
    5892:	4b a1       	ldd	r20, Y+35	; 0x23
    5894:	5c a1       	ldd	r21, Y+36	; 0x24
    5896:	6d a1       	ldd	r22, Y+37	; 0x25
    5898:	7e a1       	ldd	r23, Y+38	; 0x26
    589a:	8f a1       	ldd	r24, Y+39	; 0x27
    589c:	98 a5       	ldd	r25, Y+40	; 0x28
    589e:	eb d4       	rcall	.+2518   	; 0x6276 <MQTTstrlen>
    58a0:	dc 01       	movw	r26, r24
    58a2:	cb 01       	movw	r24, r22
    58a4:	88 0d       	add	r24, r8
    58a6:	99 1d       	adc	r25, r9
    58a8:	aa 1d       	adc	r26, r10
    58aa:	bb 1d       	adc	r27, r11
    58ac:	04 96       	adiw	r24, 0x04	; 4
    58ae:	a1 1d       	adc	r26, r1
    58b0:	b1 1d       	adc	r27, r1
    58b2:	c8 0e       	add	r12, r24
    58b4:	d9 1e       	adc	r13, r25
    58b6:	ea 1e       	adc	r14, r26
    58b8:	fb 1e       	adc	r15, r27
    58ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    58bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    58be:	89 2b       	or	r24, r25
    58c0:	21 f4       	brne	.+8      	; 0x58ca <MQTTSerialize_connectLength+0xc2>
    58c2:	89 a9       	ldd	r24, Y+49	; 0x31
    58c4:	9a a9       	ldd	r25, Y+50	; 0x32
    58c6:	89 2b       	or	r24, r25
    58c8:	91 f0       	breq	.+36     	; 0x58ee <MQTTSerialize_connectLength+0xe6>
    58ca:	2b a5       	ldd	r18, Y+43	; 0x2b
    58cc:	3c a5       	ldd	r19, Y+44	; 0x2c
    58ce:	4d a5       	ldd	r20, Y+45	; 0x2d
    58d0:	5e a5       	ldd	r21, Y+46	; 0x2e
    58d2:	6f a5       	ldd	r22, Y+47	; 0x2f
    58d4:	78 a9       	ldd	r23, Y+48	; 0x30
    58d6:	89 a9       	ldd	r24, Y+49	; 0x31
    58d8:	9a a9       	ldd	r25, Y+50	; 0x32
    58da:	cd d4       	rcall	.+2458   	; 0x6276 <MQTTstrlen>
    58dc:	dc 01       	movw	r26, r24
    58de:	cb 01       	movw	r24, r22
    58e0:	02 96       	adiw	r24, 0x02	; 2
    58e2:	a1 1d       	adc	r26, r1
    58e4:	b1 1d       	adc	r27, r1
    58e6:	c8 0e       	add	r12, r24
    58e8:	d9 1e       	adc	r13, r25
    58ea:	ea 1e       	adc	r14, r26
    58ec:	fb 1e       	adc	r15, r27
    58ee:	8b a9       	ldd	r24, Y+51	; 0x33
    58f0:	9c a9       	ldd	r25, Y+52	; 0x34
    58f2:	89 2b       	or	r24, r25
    58f4:	21 f4       	brne	.+8      	; 0x58fe <MQTTSerialize_connectLength+0xf6>
    58f6:	89 ad       	ldd	r24, Y+57	; 0x39
    58f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    58fa:	89 2b       	or	r24, r25
    58fc:	91 f0       	breq	.+36     	; 0x5922 <MQTTSerialize_connectLength+0x11a>
    58fe:	2b a9       	ldd	r18, Y+51	; 0x33
    5900:	3c a9       	ldd	r19, Y+52	; 0x34
    5902:	4d a9       	ldd	r20, Y+53	; 0x35
    5904:	5e a9       	ldd	r21, Y+54	; 0x36
    5906:	6f a9       	ldd	r22, Y+55	; 0x37
    5908:	78 ad       	ldd	r23, Y+56	; 0x38
    590a:	89 ad       	ldd	r24, Y+57	; 0x39
    590c:	9a ad       	ldd	r25, Y+58	; 0x3a
    590e:	b3 d4       	rcall	.+2406   	; 0x6276 <MQTTstrlen>
    5910:	dc 01       	movw	r26, r24
    5912:	cb 01       	movw	r24, r22
    5914:	02 96       	adiw	r24, 0x02	; 2
    5916:	a1 1d       	adc	r26, r1
    5918:	b1 1d       	adc	r27, r1
    591a:	c8 0e       	add	r12, r24
    591c:	d9 1e       	adc	r13, r25
    591e:	ea 1e       	adc	r14, r26
    5920:	fb 1e       	adc	r15, r27
    5922:	c7 01       	movw	r24, r14
    5924:	b6 01       	movw	r22, r12
    5926:	df 91       	pop	r29
    5928:	cf 91       	pop	r28
    592a:	ff 90       	pop	r15
    592c:	ef 90       	pop	r14
    592e:	df 90       	pop	r13
    5930:	cf 90       	pop	r12
    5932:	bf 90       	pop	r11
    5934:	af 90       	pop	r10
    5936:	9f 90       	pop	r9
    5938:	8f 90       	pop	r8
    593a:	08 95       	ret

0000593c <MQTTSerialize_connect>:
    593c:	4f 92       	push	r4
    593e:	5f 92       	push	r5
    5940:	6f 92       	push	r6
    5942:	7f 92       	push	r7
    5944:	af 92       	push	r10
    5946:	bf 92       	push	r11
    5948:	df 92       	push	r13
    594a:	ef 92       	push	r14
    594c:	ff 92       	push	r15
    594e:	0f 93       	push	r16
    5950:	1f 93       	push	r17
    5952:	cf 93       	push	r28
    5954:	df 93       	push	r29
    5956:	00 d0       	rcall	.+0      	; 0x5958 <MQTTSerialize_connect+0x1c>
    5958:	00 d0       	rcall	.+0      	; 0x595a <MQTTSerialize_connect+0x1e>
    595a:	cd b7       	in	r28, 0x3d	; 61
    595c:	de b7       	in	r29, 0x3e	; 62
    595e:	5c 01       	movw	r10, r24
    5960:	2a 01       	movw	r4, r20
    5962:	3b 01       	movw	r6, r22
    5964:	79 01       	movw	r14, r18
    5966:	9a 83       	std	Y+2, r25	; 0x02
    5968:	89 83       	std	Y+1, r24	; 0x01
    596a:	c9 01       	movw	r24, r18
    596c:	4d df       	rcall	.-358    	; 0x5808 <MQTTSerialize_connectLength>
    596e:	6b 83       	std	Y+3, r22	; 0x03
    5970:	7c 83       	std	Y+4, r23	; 0x04
    5972:	8d 83       	std	Y+5, r24	; 0x05
    5974:	9e 83       	std	Y+6, r25	; 0x06
    5976:	3d d3       	rcall	.+1658   	; 0x5ff2 <MQTTPacket_len>
    5978:	46 16       	cp	r4, r22
    597a:	57 06       	cpc	r5, r23
    597c:	68 06       	cpc	r6, r24
    597e:	79 06       	cpc	r7, r25
    5980:	0c f4       	brge	.+2      	; 0x5984 <MQTTSerialize_connect+0x48>
    5982:	b2 c0       	rjmp	.+356    	; 0x5ae8 <MQTTSerialize_connect+0x1ac>
    5984:	60 e1       	ldi	r22, 0x10	; 16
    5986:	ce 01       	movw	r24, r28
    5988:	01 96       	adiw	r24, 0x01	; 1
    598a:	84 d3       	rcall	.+1800   	; 0x6094 <writeChar>
    598c:	4b 81       	ldd	r20, Y+3	; 0x03
    598e:	5c 81       	ldd	r21, Y+4	; 0x04
    5990:	6d 81       	ldd	r22, Y+5	; 0x05
    5992:	7e 81       	ldd	r23, Y+6	; 0x06
    5994:	89 81       	ldd	r24, Y+1	; 0x01
    5996:	9a 81       	ldd	r25, Y+2	; 0x02
    5998:	4f d2       	rcall	.+1182   	; 0x5e38 <MQTTPacket_encode>
    599a:	29 81       	ldd	r18, Y+1	; 0x01
    599c:	3a 81       	ldd	r19, Y+2	; 0x02
    599e:	62 0f       	add	r22, r18
    59a0:	73 1f       	adc	r23, r19
    59a2:	7a 83       	std	Y+2, r23	; 0x02
    59a4:	69 83       	std	Y+1, r22	; 0x01
    59a6:	f7 01       	movw	r30, r14
    59a8:	86 81       	ldd	r24, Z+6	; 0x06
    59aa:	84 30       	cpi	r24, 0x04	; 4
    59ac:	51 f4       	brne	.+20     	; 0x59c2 <MQTTSerialize_connect+0x86>
    59ae:	6e ea       	ldi	r22, 0xAE	; 174
    59b0:	73 e0       	ldi	r23, 0x03	; 3
    59b2:	ce 01       	movw	r24, r28
    59b4:	01 96       	adiw	r24, 0x01	; 1
    59b6:	a6 d3       	rcall	.+1868   	; 0x6104 <writeCString>
    59b8:	64 e0       	ldi	r22, 0x04	; 4
    59ba:	ce 01       	movw	r24, r28
    59bc:	01 96       	adiw	r24, 0x01	; 1
    59be:	6a d3       	rcall	.+1748   	; 0x6094 <writeChar>
    59c0:	09 c0       	rjmp	.+18     	; 0x59d4 <MQTTSerialize_connect+0x98>
    59c2:	63 eb       	ldi	r22, 0xB3	; 179
    59c4:	73 e0       	ldi	r23, 0x03	; 3
    59c6:	ce 01       	movw	r24, r28
    59c8:	01 96       	adiw	r24, 0x01	; 1
    59ca:	9c d3       	rcall	.+1848   	; 0x6104 <writeCString>
    59cc:	63 e0       	ldi	r22, 0x03	; 3
    59ce:	ce 01       	movw	r24, r28
    59d0:	01 96       	adiw	r24, 0x01	; 1
    59d2:	60 d3       	rcall	.+1728   	; 0x6094 <writeChar>
    59d4:	d1 2c       	mov	r13, r1
    59d6:	f7 01       	movw	r30, r14
    59d8:	81 89       	ldd	r24, Z+17	; 0x11
    59da:	80 fb       	bst	r24, 0
    59dc:	d1 f8       	bld	r13, 1
    59de:	81 e0       	ldi	r24, 0x01	; 1
    59e0:	92 89       	ldd	r25, Z+18	; 0x12
    59e2:	91 11       	cpse	r25, r1
    59e4:	01 c0       	rjmp	.+2      	; 0x59e8 <MQTTSerialize_connect+0xac>
    59e6:	80 e0       	ldi	r24, 0x00	; 0
    59e8:	80 fb       	bst	r24, 0
    59ea:	d2 f8       	bld	r13, 2
    59ec:	d2 fe       	sbrs	r13, 2
    59ee:	0d c0       	rjmp	.+26     	; 0x5a0a <MQTTSerialize_connect+0xce>
    59f0:	f7 01       	movw	r30, r14
    59f2:	82 a5       	ldd	r24, Z+42	; 0x2a
    59f4:	83 70       	andi	r24, 0x03	; 3
    59f6:	88 0f       	add	r24, r24
    59f8:	88 0f       	add	r24, r24
    59fa:	88 0f       	add	r24, r24
    59fc:	9d 2d       	mov	r25, r13
    59fe:	97 7e       	andi	r25, 0xE7	; 231
    5a00:	d9 2e       	mov	r13, r25
    5a02:	d8 2a       	or	r13, r24
    5a04:	81 a5       	ldd	r24, Z+41	; 0x29
    5a06:	80 fb       	bst	r24, 0
    5a08:	d5 f8       	bld	r13, 5
    5a0a:	f7 01       	movw	r30, r14
    5a0c:	83 a5       	ldd	r24, Z+43	; 0x2b
    5a0e:	94 a5       	ldd	r25, Z+44	; 0x2c
    5a10:	89 2b       	or	r24, r25
    5a12:	21 f4       	brne	.+8      	; 0x5a1c <MQTTSerialize_connect+0xe0>
    5a14:	81 a9       	ldd	r24, Z+49	; 0x31
    5a16:	92 a9       	ldd	r25, Z+50	; 0x32
    5a18:	89 2b       	or	r24, r25
    5a1a:	11 f0       	breq	.+4      	; 0x5a20 <MQTTSerialize_connect+0xe4>
    5a1c:	68 94       	set
    5a1e:	d7 f8       	bld	r13, 7
    5a20:	f7 01       	movw	r30, r14
    5a22:	83 a9       	ldd	r24, Z+51	; 0x33
    5a24:	94 a9       	ldd	r25, Z+52	; 0x34
    5a26:	89 2b       	or	r24, r25
    5a28:	21 f4       	brne	.+8      	; 0x5a32 <MQTTSerialize_connect+0xf6>
    5a2a:	81 ad       	ldd	r24, Z+57	; 0x39
    5a2c:	92 ad       	ldd	r25, Z+58	; 0x3a
    5a2e:	89 2b       	or	r24, r25
    5a30:	11 f0       	breq	.+4      	; 0x5a36 <MQTTSerialize_connect+0xfa>
    5a32:	68 94       	set
    5a34:	d6 f8       	bld	r13, 6
    5a36:	6d 2d       	mov	r22, r13
    5a38:	ce 01       	movw	r24, r28
    5a3a:	01 96       	adiw	r24, 0x01	; 1
    5a3c:	2b d3       	rcall	.+1622   	; 0x6094 <writeChar>
    5a3e:	f7 01       	movw	r30, r14
    5a40:	47 85       	ldd	r20, Z+15	; 0x0f
    5a42:	50 89       	ldd	r21, Z+16	; 0x10
    5a44:	60 e0       	ldi	r22, 0x00	; 0
    5a46:	70 e0       	ldi	r23, 0x00	; 0
    5a48:	ce 01       	movw	r24, r28
    5a4a:	01 96       	adiw	r24, 0x01	; 1
    5a4c:	2d d3       	rcall	.+1626   	; 0x60a8 <writeInt>
    5a4e:	f7 01       	movw	r30, r14
    5a50:	07 81       	ldd	r16, Z+7	; 0x07
    5a52:	10 85       	ldd	r17, Z+8	; 0x08
    5a54:	21 85       	ldd	r18, Z+9	; 0x09
    5a56:	32 85       	ldd	r19, Z+10	; 0x0a
    5a58:	43 85       	ldd	r20, Z+11	; 0x0b
    5a5a:	54 85       	ldd	r21, Z+12	; 0x0c
    5a5c:	65 85       	ldd	r22, Z+13	; 0x0d
    5a5e:	76 85       	ldd	r23, Z+14	; 0x0e
    5a60:	ce 01       	movw	r24, r28
    5a62:	01 96       	adiw	r24, 0x01	; 1
    5a64:	77 d3       	rcall	.+1774   	; 0x6154 <writeMQTTString>
    5a66:	f7 01       	movw	r30, r14
    5a68:	82 89       	ldd	r24, Z+18	; 0x12
    5a6a:	88 23       	and	r24, r24
    5a6c:	b9 f0       	breq	.+46     	; 0x5a9c <MQTTSerialize_connect+0x160>
    5a6e:	01 8d       	ldd	r16, Z+25	; 0x19
    5a70:	12 8d       	ldd	r17, Z+26	; 0x1a
    5a72:	23 8d       	ldd	r18, Z+27	; 0x1b
    5a74:	34 8d       	ldd	r19, Z+28	; 0x1c
    5a76:	45 8d       	ldd	r20, Z+29	; 0x1d
    5a78:	56 8d       	ldd	r21, Z+30	; 0x1e
    5a7a:	67 8d       	ldd	r22, Z+31	; 0x1f
    5a7c:	70 a1       	ldd	r23, Z+32	; 0x20
    5a7e:	ce 01       	movw	r24, r28
    5a80:	01 96       	adiw	r24, 0x01	; 1
    5a82:	68 d3       	rcall	.+1744   	; 0x6154 <writeMQTTString>
    5a84:	f7 01       	movw	r30, r14
    5a86:	01 a1       	ldd	r16, Z+33	; 0x21
    5a88:	12 a1       	ldd	r17, Z+34	; 0x22
    5a8a:	23 a1       	ldd	r18, Z+35	; 0x23
    5a8c:	34 a1       	ldd	r19, Z+36	; 0x24
    5a8e:	45 a1       	ldd	r20, Z+37	; 0x25
    5a90:	56 a1       	ldd	r21, Z+38	; 0x26
    5a92:	67 a1       	ldd	r22, Z+39	; 0x27
    5a94:	70 a5       	ldd	r23, Z+40	; 0x28
    5a96:	ce 01       	movw	r24, r28
    5a98:	01 96       	adiw	r24, 0x01	; 1
    5a9a:	5c d3       	rcall	.+1720   	; 0x6154 <writeMQTTString>
    5a9c:	7d 2c       	mov	r7, r13
    5a9e:	dd 20       	and	r13, r13
    5aa0:	64 f4       	brge	.+24     	; 0x5aba <MQTTSerialize_connect+0x17e>
    5aa2:	f7 01       	movw	r30, r14
    5aa4:	03 a5       	ldd	r16, Z+43	; 0x2b
    5aa6:	14 a5       	ldd	r17, Z+44	; 0x2c
    5aa8:	25 a5       	ldd	r18, Z+45	; 0x2d
    5aaa:	36 a5       	ldd	r19, Z+46	; 0x2e
    5aac:	47 a5       	ldd	r20, Z+47	; 0x2f
    5aae:	50 a9       	ldd	r21, Z+48	; 0x30
    5ab0:	61 a9       	ldd	r22, Z+49	; 0x31
    5ab2:	72 a9       	ldd	r23, Z+50	; 0x32
    5ab4:	ce 01       	movw	r24, r28
    5ab6:	01 96       	adiw	r24, 0x01	; 1
    5ab8:	4d d3       	rcall	.+1690   	; 0x6154 <writeMQTTString>
    5aba:	76 fe       	sbrs	r7, 6
    5abc:	0c c0       	rjmp	.+24     	; 0x5ad6 <MQTTSerialize_connect+0x19a>
    5abe:	f7 01       	movw	r30, r14
    5ac0:	03 a9       	ldd	r16, Z+51	; 0x33
    5ac2:	14 a9       	ldd	r17, Z+52	; 0x34
    5ac4:	25 a9       	ldd	r18, Z+53	; 0x35
    5ac6:	36 a9       	ldd	r19, Z+54	; 0x36
    5ac8:	47 a9       	ldd	r20, Z+55	; 0x37
    5aca:	50 ad       	ldd	r21, Z+56	; 0x38
    5acc:	61 ad       	ldd	r22, Z+57	; 0x39
    5ace:	72 ad       	ldd	r23, Z+58	; 0x3a
    5ad0:	ce 01       	movw	r24, r28
    5ad2:	01 96       	adiw	r24, 0x01	; 1
    5ad4:	3f d3       	rcall	.+1662   	; 0x6154 <writeMQTTString>
    5ad6:	69 81       	ldd	r22, Y+1	; 0x01
    5ad8:	7a 81       	ldd	r23, Y+2	; 0x02
    5ada:	6a 19       	sub	r22, r10
    5adc:	7b 09       	sbc	r23, r11
    5ade:	07 2e       	mov	r0, r23
    5ae0:	00 0c       	add	r0, r0
    5ae2:	88 0b       	sbc	r24, r24
    5ae4:	99 0b       	sbc	r25, r25
    5ae6:	04 c0       	rjmp	.+8      	; 0x5af0 <MQTTSerialize_connect+0x1b4>
    5ae8:	6e ef       	ldi	r22, 0xFE	; 254
    5aea:	7f ef       	ldi	r23, 0xFF	; 255
    5aec:	8f ef       	ldi	r24, 0xFF	; 255
    5aee:	9f ef       	ldi	r25, 0xFF	; 255
    5af0:	26 96       	adiw	r28, 0x06	; 6
    5af2:	0f b6       	in	r0, 0x3f	; 63
    5af4:	f8 94       	cli
    5af6:	de bf       	out	0x3e, r29	; 62
    5af8:	0f be       	out	0x3f, r0	; 63
    5afa:	cd bf       	out	0x3d, r28	; 61
    5afc:	df 91       	pop	r29
    5afe:	cf 91       	pop	r28
    5b00:	1f 91       	pop	r17
    5b02:	0f 91       	pop	r16
    5b04:	ff 90       	pop	r15
    5b06:	ef 90       	pop	r14
    5b08:	df 90       	pop	r13
    5b0a:	bf 90       	pop	r11
    5b0c:	af 90       	pop	r10
    5b0e:	7f 90       	pop	r7
    5b10:	6f 90       	pop	r6
    5b12:	5f 90       	pop	r5
    5b14:	4f 90       	pop	r4
    5b16:	08 95       	ret

00005b18 <MQTTDeserialize_connack>:
    5b18:	ef 92       	push	r14
    5b1a:	ff 92       	push	r15
    5b1c:	0f 93       	push	r16
    5b1e:	1f 93       	push	r17
    5b20:	cf 93       	push	r28
    5b22:	df 93       	push	r29
    5b24:	00 d0       	rcall	.+0      	; 0x5b26 <MQTTDeserialize_connack+0xe>
    5b26:	00 d0       	rcall	.+0      	; 0x5b28 <MQTTDeserialize_connack+0x10>
    5b28:	cd b7       	in	r28, 0x3d	; 61
    5b2a:	de b7       	in	r29, 0x3e	; 62
    5b2c:	7c 01       	movw	r14, r24
    5b2e:	8b 01       	movw	r16, r22
    5b30:	5a 83       	std	Y+2, r21	; 0x02
    5b32:	49 83       	std	Y+1, r20	; 0x01
    5b34:	ce 01       	movw	r24, r28
    5b36:	01 96       	adiw	r24, 0x01	; 1
    5b38:	a5 d2       	rcall	.+1354   	; 0x6084 <readChar>
    5b3a:	80 7f       	andi	r24, 0xF0	; 240
    5b3c:	80 32       	cpi	r24, 0x20	; 32
    5b3e:	19 f5       	brne	.+70     	; 0x5b86 <MQTTDeserialize_connack+0x6e>
    5b40:	be 01       	movw	r22, r28
    5b42:	6d 5f       	subi	r22, 0xFD	; 253
    5b44:	7f 4f       	sbci	r23, 0xFF	; 255
    5b46:	89 81       	ldd	r24, Y+1	; 0x01
    5b48:	9a 81       	ldd	r25, Y+2	; 0x02
    5b4a:	81 d2       	rcall	.+1282   	; 0x604e <MQTTPacket_decodeBuf>
    5b4c:	29 81       	ldd	r18, Y+1	; 0x01
    5b4e:	3a 81       	ldd	r19, Y+2	; 0x02
    5b50:	26 0f       	add	r18, r22
    5b52:	37 1f       	adc	r19, r23
    5b54:	3a 83       	std	Y+2, r19	; 0x02
    5b56:	29 83       	std	Y+1, r18	; 0x01
    5b58:	2b 81       	ldd	r18, Y+3	; 0x03
    5b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    5b5c:	22 30       	cpi	r18, 0x02	; 2
    5b5e:	31 05       	cpc	r19, r1
    5b60:	ac f0       	brlt	.+42     	; 0x5b8c <MQTTDeserialize_connack+0x74>
    5b62:	ce 01       	movw	r24, r28
    5b64:	01 96       	adiw	r24, 0x01	; 1
    5b66:	8e d2       	rcall	.+1308   	; 0x6084 <readChar>
    5b68:	87 fb       	bst	r24, 7
    5b6a:	88 27       	eor	r24, r24
    5b6c:	80 f9       	bld	r24, 0
    5b6e:	f7 01       	movw	r30, r14
    5b70:	80 83       	st	Z, r24
    5b72:	ce 01       	movw	r24, r28
    5b74:	01 96       	adiw	r24, 0x01	; 1
    5b76:	86 d2       	rcall	.+1292   	; 0x6084 <readChar>
    5b78:	f8 01       	movw	r30, r16
    5b7a:	80 83       	st	Z, r24
    5b7c:	61 e0       	ldi	r22, 0x01	; 1
    5b7e:	70 e0       	ldi	r23, 0x00	; 0
    5b80:	80 e0       	ldi	r24, 0x00	; 0
    5b82:	90 e0       	ldi	r25, 0x00	; 0
    5b84:	03 c0       	rjmp	.+6      	; 0x5b8c <MQTTDeserialize_connack+0x74>
    5b86:	60 e0       	ldi	r22, 0x00	; 0
    5b88:	70 e0       	ldi	r23, 0x00	; 0
    5b8a:	cb 01       	movw	r24, r22
    5b8c:	26 96       	adiw	r28, 0x06	; 6
    5b8e:	0f b6       	in	r0, 0x3f	; 63
    5b90:	f8 94       	cli
    5b92:	de bf       	out	0x3e, r29	; 62
    5b94:	0f be       	out	0x3f, r0	; 63
    5b96:	cd bf       	out	0x3d, r28	; 61
    5b98:	df 91       	pop	r29
    5b9a:	cf 91       	pop	r28
    5b9c:	1f 91       	pop	r17
    5b9e:	0f 91       	pop	r16
    5ba0:	ff 90       	pop	r15
    5ba2:	ef 90       	pop	r14
    5ba4:	08 95       	ret

00005ba6 <MQTTSerialize_zero>:
    5ba6:	0f 93       	push	r16
    5ba8:	1f 93       	push	r17
    5baa:	cf 93       	push	r28
    5bac:	df 93       	push	r29
    5bae:	1f 92       	push	r1
    5bb0:	1f 92       	push	r1
    5bb2:	cd b7       	in	r28, 0x3d	; 61
    5bb4:	de b7       	in	r29, 0x3e	; 62
    5bb6:	9a 83       	std	Y+2, r25	; 0x02
    5bb8:	89 83       	std	Y+1, r24	; 0x01
    5bba:	42 30       	cpi	r20, 0x02	; 2
    5bbc:	51 05       	cpc	r21, r1
    5bbe:	61 05       	cpc	r22, r1
    5bc0:	71 05       	cpc	r23, r1
    5bc2:	c4 f0       	brlt	.+48     	; 0x5bf4 <MQTTSerialize_zero+0x4e>
    5bc4:	8c 01       	movw	r16, r24
    5bc6:	62 2f       	mov	r22, r18
    5bc8:	62 95       	swap	r22
    5bca:	60 7f       	andi	r22, 0xF0	; 240
    5bcc:	ce 01       	movw	r24, r28
    5bce:	01 96       	adiw	r24, 0x01	; 1
    5bd0:	61 d2       	rcall	.+1218   	; 0x6094 <writeChar>
    5bd2:	40 e0       	ldi	r20, 0x00	; 0
    5bd4:	50 e0       	ldi	r21, 0x00	; 0
    5bd6:	ba 01       	movw	r22, r20
    5bd8:	89 81       	ldd	r24, Y+1	; 0x01
    5bda:	9a 81       	ldd	r25, Y+2	; 0x02
    5bdc:	2d d1       	rcall	.+602    	; 0x5e38 <MQTTPacket_encode>
    5bde:	29 81       	ldd	r18, Y+1	; 0x01
    5be0:	3a 81       	ldd	r19, Y+2	; 0x02
    5be2:	62 0f       	add	r22, r18
    5be4:	73 1f       	adc	r23, r19
    5be6:	60 1b       	sub	r22, r16
    5be8:	71 0b       	sbc	r23, r17
    5bea:	07 2e       	mov	r0, r23
    5bec:	00 0c       	add	r0, r0
    5bee:	88 0b       	sbc	r24, r24
    5bf0:	99 0b       	sbc	r25, r25
    5bf2:	04 c0       	rjmp	.+8      	; 0x5bfc <MQTTSerialize_zero+0x56>
    5bf4:	6e ef       	ldi	r22, 0xFE	; 254
    5bf6:	7f ef       	ldi	r23, 0xFF	; 255
    5bf8:	8f ef       	ldi	r24, 0xFF	; 255
    5bfa:	9f ef       	ldi	r25, 0xFF	; 255
    5bfc:	0f 90       	pop	r0
    5bfe:	0f 90       	pop	r0
    5c00:	df 91       	pop	r29
    5c02:	cf 91       	pop	r28
    5c04:	1f 91       	pop	r17
    5c06:	0f 91       	pop	r16
    5c08:	08 95       	ret

00005c0a <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_pingreq(uint8_t* buf, int32_t buflen)
{
  return MQTTSerialize_zero(buf, buflen, PINGREQ);
    5c0a:	2c e0       	ldi	r18, 0x0C	; 12
    5c0c:	cc cf       	rjmp	.-104    	; 0x5ba6 <MQTTSerialize_zero>
}
    5c0e:	08 95       	ret

00005c10 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int32_t MQTTDeserialize_publish(uint8_t* dup, uint8_t* qos, uint8_t* retained, uint16_t* packetid, MQTTString* topicName,
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
    5c10:	2f 92       	push	r2
    5c12:	3f 92       	push	r3
    5c14:	4f 92       	push	r4
    5c16:	5f 92       	push	r5
    5c18:	6f 92       	push	r6
    5c1a:	7f 92       	push	r7
    5c1c:	8f 92       	push	r8
    5c1e:	9f 92       	push	r9
    5c20:	af 92       	push	r10
    5c22:	bf 92       	push	r11
    5c24:	cf 92       	push	r12
    5c26:	df 92       	push	r13
    5c28:	ef 92       	push	r14
    5c2a:	ff 92       	push	r15
    5c2c:	0f 93       	push	r16
    5c2e:	1f 93       	push	r17
    5c30:	cf 93       	push	r28
    5c32:	df 93       	push	r29
    5c34:	cd b7       	in	r28, 0x3d	; 61
    5c36:	de b7       	in	r29, 0x3e	; 62
    5c38:	28 97       	sbiw	r28, 0x08	; 8
    5c3a:	0f b6       	in	r0, 0x3f	; 63
    5c3c:	f8 94       	cli
    5c3e:	de bf       	out	0x3e, r29	; 62
    5c40:	0f be       	out	0x3f, r0	; 63
    5c42:	cd bf       	out	0x3d, r28	; 61
    5c44:	3c 01       	movw	r6, r24
    5c46:	1b 01       	movw	r2, r22
    5c48:	2a 01       	movw	r4, r20
    5c4a:	38 87       	std	Y+8, r19	; 0x08
    5c4c:	2f 83       	std	Y+7, r18	; 0x07
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    5c4e:	ba 82       	std	Y+2, r11	; 0x02
    5c50:	a9 82       	std	Y+1, r10	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen = 0;
    5c52:	1b 82       	std	Y+3, r1	; 0x03
    5c54:	1c 82       	std	Y+4, r1	; 0x04
    5c56:	1d 82       	std	Y+5, r1	; 0x05
    5c58:	1e 82       	std	Y+6, r1	; 0x06

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    5c5a:	ce 01       	movw	r24, r28
    5c5c:	01 96       	adiw	r24, 0x01	; 1
    5c5e:	12 d2       	rcall	.+1060   	; 0x6084 <readChar>

  if (header.bits.type != PUBLISH)
    5c60:	98 2f       	mov	r25, r24
    5c62:	90 7f       	andi	r25, 0xF0	; 240
    5c64:	90 33       	cpi	r25, 0x30	; 48
    5c66:	09 f0       	breq	.+2      	; 0x5c6a <MQTTDeserialize_publish+0x5a>
    5c68:	52 c0       	rjmp	.+164    	; 0x5d0e <MQTTDeserialize_publish+0xfe>
    goto exit;
	
  *dup = header.bits.dup;
    5c6a:	83 fb       	bst	r24, 3
    5c6c:	99 27       	eor	r25, r25
    5c6e:	90 f9       	bld	r25, 0
    5c70:	f3 01       	movw	r30, r6
    5c72:	90 83       	st	Z, r25
  *qos = header.bits.qos;
    5c74:	98 2f       	mov	r25, r24
    5c76:	96 95       	lsr	r25
    5c78:	93 70       	andi	r25, 0x03	; 3
    5c7a:	f1 01       	movw	r30, r2
    5c7c:	90 83       	st	Z, r25
  *retained = header.bits.retain;
    5c7e:	81 70       	andi	r24, 0x01	; 1
    5c80:	f2 01       	movw	r30, r4
    5c82:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    5c84:	be 01       	movw	r22, r28
    5c86:	6d 5f       	subi	r22, 0xFD	; 253
    5c88:	7f 4f       	sbci	r23, 0xFF	; 255
    5c8a:	89 81       	ldd	r24, Y+1	; 0x01
    5c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c8e:	df d1       	rcall	.+958    	; 0x604e <MQTTPacket_decodeBuf>
    5c90:	4b 01       	movw	r8, r22
    5c92:	5c 01       	movw	r10, r24
    5c94:	69 80       	ldd	r6, Y+1	; 0x01
    5c96:	7a 80       	ldd	r7, Y+2	; 0x02
    5c98:	66 0e       	add	r6, r22
    5c9a:	77 1e       	adc	r7, r23
    5c9c:	7a 82       	std	Y+2, r7	; 0x02
    5c9e:	69 82       	std	Y+1, r6	; 0x01
  enddata = curdata + mylen;
    5ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    5ca4:	68 0e       	add	r6, r24
    5ca6:	79 1e       	adc	r7, r25

  /* do we have enough data to read the protocol version byte? */
  if (!readMQTTLenString(topicName, &curdata, enddata) || enddata - curdata < 0)
    5ca8:	a3 01       	movw	r20, r6
    5caa:	be 01       	movw	r22, r28
    5cac:	6f 5f       	subi	r22, 0xFF	; 255
    5cae:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb0:	c8 01       	movw	r24, r16
    5cb2:	a3 d2       	rcall	.+1350   	; 0x61fa <readMQTTLenString>
    5cb4:	67 2b       	or	r22, r23
    5cb6:	68 2b       	or	r22, r24
    5cb8:	69 2b       	or	r22, r25
    5cba:	61 f1       	breq	.+88     	; 0x5d14 <MQTTDeserialize_publish+0x104>
    5cbc:	89 81       	ldd	r24, Y+1	; 0x01
    5cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    5cc0:	93 01       	movw	r18, r6
    5cc2:	28 1b       	sub	r18, r24
    5cc4:	39 0b       	sbc	r19, r25
    5cc6:	c9 01       	movw	r24, r18
    5cc8:	99 23       	and	r25, r25
    5cca:	24 f1       	brlt	.+72     	; 0x5d14 <MQTTDeserialize_publish+0x104>
    goto exit;

  if (*qos > 0)
    5ccc:	f1 01       	movw	r30, r2
    5cce:	80 81       	ld	r24, Z
    5cd0:	88 23       	and	r24, r24
    *packetid = readInt(&curdata);
    5cd2:	39 f0       	breq	.+14     	; 0x5ce2 <MQTTDeserialize_publish+0xd2>
    5cd4:	ce 01       	movw	r24, r28
    5cd6:	01 96       	adiw	r24, 0x01	; 1
    5cd8:	c2 d1       	rcall	.+900    	; 0x605e <readInt>
    5cda:	ef 81       	ldd	r30, Y+7	; 0x07
    5cdc:	f8 85       	ldd	r31, Y+8	; 0x08
    5cde:	71 83       	std	Z+1, r23	; 0x01
    5ce0:	60 83       	st	Z, r22

  *payloadlen = enddata - curdata;
    5ce2:	29 81       	ldd	r18, Y+1	; 0x01
    5ce4:	3a 81       	ldd	r19, Y+2	; 0x02
    5ce6:	c3 01       	movw	r24, r6
    5ce8:	82 1b       	sub	r24, r18
    5cea:	93 0b       	sbc	r25, r19
    5cec:	09 2e       	mov	r0, r25
    5cee:	00 0c       	add	r0, r0
    5cf0:	aa 0b       	sbc	r26, r26
    5cf2:	bb 0b       	sbc	r27, r27
    5cf4:	f6 01       	movw	r30, r12
    5cf6:	80 83       	st	Z, r24
    5cf8:	91 83       	std	Z+1, r25	; 0x01
    5cfa:	a2 83       	std	Z+2, r26	; 0x02
    5cfc:	b3 83       	std	Z+3, r27	; 0x03
  *payload = curdata;
    5cfe:	f7 01       	movw	r30, r14
    5d00:	31 83       	std	Z+1, r19	; 0x01
    5d02:	20 83       	st	Z, r18
  rc = 1;
    5d04:	81 2c       	mov	r8, r1
    5d06:	91 2c       	mov	r9, r1
    5d08:	54 01       	movw	r10, r8
    5d0a:	83 94       	inc	r8
    5d0c:	03 c0       	rjmp	.+6      	; 0x5d14 <MQTTDeserialize_publish+0x104>
		uint8_t** payload, int32_t* payloadlen, uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    5d0e:	81 2c       	mov	r8, r1
    5d10:	91 2c       	mov	r9, r1
    5d12:	54 01       	movw	r10, r8
  *payload = curdata;
  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    5d14:	c5 01       	movw	r24, r10
    5d16:	b4 01       	movw	r22, r8
    5d18:	28 96       	adiw	r28, 0x08	; 8
    5d1a:	0f b6       	in	r0, 0x3f	; 63
    5d1c:	f8 94       	cli
    5d1e:	de bf       	out	0x3e, r29	; 62
    5d20:	0f be       	out	0x3f, r0	; 63
    5d22:	cd bf       	out	0x3d, r28	; 61
    5d24:	df 91       	pop	r29
    5d26:	cf 91       	pop	r28
    5d28:	1f 91       	pop	r17
    5d2a:	0f 91       	pop	r16
    5d2c:	ff 90       	pop	r15
    5d2e:	ef 90       	pop	r14
    5d30:	df 90       	pop	r13
    5d32:	cf 90       	pop	r12
    5d34:	bf 90       	pop	r11
    5d36:	af 90       	pop	r10
    5d38:	9f 90       	pop	r9
    5d3a:	8f 90       	pop	r8
    5d3c:	7f 90       	pop	r7
    5d3e:	6f 90       	pop	r6
    5d40:	5f 90       	pop	r5
    5d42:	4f 90       	pop	r4
    5d44:	3f 90       	pop	r3
    5d46:	2f 90       	pop	r2
    5d48:	08 95       	ret

00005d4a <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_ack(uint8_t* packettype, uint8_t* dup, uint16_t* packetid, uint8_t* buf, int32_t buflen)
{
    5d4a:	cf 92       	push	r12
    5d4c:	df 92       	push	r13
    5d4e:	ef 92       	push	r14
    5d50:	ff 92       	push	r15
    5d52:	0f 93       	push	r16
    5d54:	1f 93       	push	r17
    5d56:	cf 93       	push	r28
    5d58:	df 93       	push	r29
    5d5a:	00 d0       	rcall	.+0      	; 0x5d5c <MQTTDeserialize_ack+0x12>
    5d5c:	00 d0       	rcall	.+0      	; 0x5d5e <MQTTDeserialize_ack+0x14>
    5d5e:	cd b7       	in	r28, 0x3d	; 61
    5d60:	de b7       	in	r29, 0x3e	; 62
    5d62:	7c 01       	movw	r14, r24
    5d64:	6b 01       	movw	r12, r22
    5d66:	8a 01       	movw	r16, r20
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    5d68:	3a 83       	std	Y+2, r19	; 0x02
    5d6a:	29 83       	std	Y+1, r18	; 0x01
  uint8_t* enddata = NULL;
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;
  header.byte = readChar(&curdata);
    5d6c:	ce 01       	movw	r24, r28
    5d6e:	01 96       	adiw	r24, 0x01	; 1
    5d70:	89 d1       	rcall	.+786    	; 0x6084 <readChar>
  *dup = header.bits.dup;
    5d72:	83 fb       	bst	r24, 3
    5d74:	99 27       	eor	r25, r25
    5d76:	90 f9       	bld	r25, 0
    5d78:	f6 01       	movw	r30, r12
    5d7a:	90 83       	st	Z, r25
  *packettype = header.bits.type;
    5d7c:	82 95       	swap	r24
    5d7e:	8f 70       	andi	r24, 0x0F	; 15
    5d80:	f7 01       	movw	r30, r14
    5d82:	80 83       	st	Z, r24

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    5d84:	be 01       	movw	r22, r28
    5d86:	6d 5f       	subi	r22, 0xFD	; 253
    5d88:	7f 4f       	sbci	r23, 0xFF	; 255
    5d8a:	89 81       	ldd	r24, Y+1	; 0x01
    5d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d8e:	5f d1       	rcall	.+702    	; 0x604e <MQTTPacket_decodeBuf>
    5d90:	29 81       	ldd	r18, Y+1	; 0x01
    5d92:	3a 81       	ldd	r19, Y+2	; 0x02
    5d94:	26 0f       	add	r18, r22
    5d96:	37 1f       	adc	r19, r23
    5d98:	3a 83       	std	Y+2, r19	; 0x02
    5d9a:	29 83       	std	Y+1, r18	; 0x01
  enddata = curdata + mylen;

  if (enddata - curdata < 2)
    5d9c:	2b 81       	ldd	r18, Y+3	; 0x03
    5d9e:	3c 81       	ldd	r19, Y+4	; 0x04
    5da0:	22 30       	cpi	r18, 0x02	; 2
    5da2:	31 05       	cpc	r19, r1
    5da4:	54 f0       	brlt	.+20     	; 0x5dba <MQTTDeserialize_ack+0x70>
    goto exit;
	
  *packetid = readInt(&curdata);
    5da6:	ce 01       	movw	r24, r28
    5da8:	01 96       	adiw	r24, 0x01	; 1
    5daa:	59 d1       	rcall	.+690    	; 0x605e <readInt>
    5dac:	f8 01       	movw	r30, r16
    5dae:	71 83       	std	Z+1, r23	; 0x01
    5db0:	60 83       	st	Z, r22

  rc = 1;
    5db2:	61 e0       	ldi	r22, 0x01	; 1
    5db4:	70 e0       	ldi	r23, 0x00	; 0
    5db6:	80 e0       	ldi	r24, 0x00	; 0
    5db8:	90 e0       	ldi	r25, 0x00	; 0
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    5dba:	26 96       	adiw	r28, 0x06	; 6
    5dbc:	0f b6       	in	r0, 0x3f	; 63
    5dbe:	f8 94       	cli
    5dc0:	de bf       	out	0x3e, r29	; 62
    5dc2:	0f be       	out	0x3f, r0	; 63
    5dc4:	cd bf       	out	0x3d, r28	; 61
    5dc6:	df 91       	pop	r29
    5dc8:	cf 91       	pop	r28
    5dca:	1f 91       	pop	r17
    5dcc:	0f 91       	pop	r16
    5dce:	ff 90       	pop	r15
    5dd0:	ef 90       	pop	r14
    5dd2:	df 90       	pop	r13
    5dd4:	cf 90       	pop	r12
    5dd6:	08 95       	ret

00005dd8 <bufchar>:

int32_t getLenStringLen(char* ptr)
{
  int32_t len = 256*((uint8_t)(*ptr)) + (uint8_t)(*(ptr+1));
  return len;
}
    5dd8:	0f 93       	push	r16
    5dda:	1f 93       	push	r17
    5ddc:	cf 93       	push	r28
    5dde:	df 93       	push	r29
    5de0:	dc 01       	movw	r26, r24
    5de2:	14 16       	cp	r1, r20
    5de4:	15 06       	cpc	r1, r21
    5de6:	16 06       	cpc	r1, r22
    5de8:	17 06       	cpc	r1, r23
    5dea:	fc f4       	brge	.+62     	; 0x5e2a <bufchar+0x52>
    5dec:	c0 91 2f 08 	lds	r28, 0x082F	; 0x80082f <bufptr>
    5df0:	d0 91 30 08 	lds	r29, 0x0830	; 0x800830 <bufptr+0x1>
    5df4:	fe 01       	movw	r30, r28
    5df6:	00 e0       	ldi	r16, 0x00	; 0
    5df8:	10 e0       	ldi	r17, 0x00	; 0
    5dfa:	98 01       	movw	r18, r16
    5dfc:	91 91       	ld	r25, Z+
    5dfe:	9c 93       	st	X, r25
    5e00:	0f 5f       	subi	r16, 0xFF	; 255
    5e02:	1f 4f       	sbci	r17, 0xFF	; 255
    5e04:	2f 4f       	sbci	r18, 0xFF	; 255
    5e06:	3f 4f       	sbci	r19, 0xFF	; 255
    5e08:	40 17       	cp	r20, r16
    5e0a:	51 07       	cpc	r21, r17
    5e0c:	62 07       	cpc	r22, r18
    5e0e:	73 07       	cpc	r23, r19
    5e10:	a9 f7       	brne	.-22     	; 0x5dfc <bufchar+0x24>
    5e12:	db 01       	movw	r26, r22
    5e14:	ca 01       	movw	r24, r20
    5e16:	01 97       	sbiw	r24, 0x01	; 1
    5e18:	a1 09       	sbc	r26, r1
    5e1a:	b1 09       	sbc	r27, r1
    5e1c:	01 96       	adiw	r24, 0x01	; 1
    5e1e:	c8 0f       	add	r28, r24
    5e20:	d9 1f       	adc	r29, r25
    5e22:	d0 93 30 08 	sts	0x0830, r29	; 0x800830 <bufptr+0x1>
    5e26:	c0 93 2f 08 	sts	0x082F, r28	; 0x80082f <bufptr>
    5e2a:	cb 01       	movw	r24, r22
    5e2c:	ba 01       	movw	r22, r20
    5e2e:	df 91       	pop	r29
    5e30:	cf 91       	pop	r28
    5e32:	1f 91       	pop	r17
    5e34:	0f 91       	pop	r16
    5e36:	08 95       	ret

00005e38 <MQTTPacket_encode>:
    5e38:	8f 92       	push	r8
    5e3a:	9f 92       	push	r9
    5e3c:	af 92       	push	r10
    5e3e:	bf 92       	push	r11
    5e40:	cf 92       	push	r12
    5e42:	df 92       	push	r13
    5e44:	ef 92       	push	r14
    5e46:	ff 92       	push	r15
    5e48:	0f 93       	push	r16
    5e4a:	1f 93       	push	r17
    5e4c:	fc 01       	movw	r30, r24
    5e4e:	81 2c       	mov	r8, r1
    5e50:	91 2c       	mov	r9, r1
    5e52:	54 01       	movw	r10, r8
    5e54:	8a 01       	movw	r16, r20
    5e56:	9b 01       	movw	r18, r22
    5e58:	0f 77       	andi	r16, 0x7F	; 127
    5e5a:	11 27       	eor	r17, r17
    5e5c:	22 27       	eor	r18, r18
    5e5e:	30 78       	andi	r19, 0x80	; 128
    5e60:	33 23       	and	r19, r19
    5e62:	64 f4       	brge	.+24     	; 0x5e7c <MQTTPacket_encode+0x44>
    5e64:	01 50       	subi	r16, 0x01	; 1
    5e66:	11 09       	sbc	r17, r1
    5e68:	21 09       	sbc	r18, r1
    5e6a:	31 09       	sbc	r19, r1
    5e6c:	00 68       	ori	r16, 0x80	; 128
    5e6e:	1f 6f       	ori	r17, 0xFF	; 255
    5e70:	2f 6f       	ori	r18, 0xFF	; 255
    5e72:	3f 6f       	ori	r19, 0xFF	; 255
    5e74:	0f 5f       	subi	r16, 0xFF	; 255
    5e76:	1f 4f       	sbci	r17, 0xFF	; 255
    5e78:	2f 4f       	sbci	r18, 0xFF	; 255
    5e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e7c:	6a 01       	movw	r12, r20
    5e7e:	7b 01       	movw	r14, r22
    5e80:	77 23       	and	r23, r23
    5e82:	2c f4       	brge	.+10     	; 0x5e8e <MQTTPacket_encode+0x56>
    5e84:	2f e7       	ldi	r18, 0x7F	; 127
    5e86:	c2 0e       	add	r12, r18
    5e88:	d1 1c       	adc	r13, r1
    5e8a:	e1 1c       	adc	r14, r1
    5e8c:	f1 1c       	adc	r15, r1
    5e8e:	b7 01       	movw	r22, r14
    5e90:	a6 01       	movw	r20, r12
    5e92:	68 94       	set
    5e94:	16 f8       	bld	r1, 6
    5e96:	75 95       	asr	r23
    5e98:	67 95       	ror	r22
    5e9a:	57 95       	ror	r21
    5e9c:	47 95       	ror	r20
    5e9e:	16 94       	lsr	r1
    5ea0:	d1 f7       	brne	.-12     	; 0x5e96 <MQTTPacket_encode+0x5e>
    5ea2:	14 16       	cp	r1, r20
    5ea4:	15 06       	cpc	r1, r21
    5ea6:	16 06       	cpc	r1, r22
    5ea8:	17 06       	cpc	r1, r23
    5eaa:	44 f4       	brge	.+16     	; 0x5ebc <MQTTPacket_encode+0x84>
    5eac:	2f ef       	ldi	r18, 0xFF	; 255
    5eae:	82 1a       	sub	r8, r18
    5eb0:	92 0a       	sbc	r9, r18
    5eb2:	a2 0a       	sbc	r10, r18
    5eb4:	b2 0a       	sbc	r11, r18
    5eb6:	00 68       	ori	r16, 0x80	; 128
    5eb8:	01 93       	st	Z+, r16
    5eba:	cc cf       	rjmp	.-104    	; 0x5e54 <MQTTPacket_encode+0x1c>
    5ebc:	fc 01       	movw	r30, r24
    5ebe:	e8 0d       	add	r30, r8
    5ec0:	f9 1d       	adc	r31, r9
    5ec2:	00 83       	st	Z, r16
    5ec4:	c5 01       	movw	r24, r10
    5ec6:	b4 01       	movw	r22, r8
    5ec8:	6f 5f       	subi	r22, 0xFF	; 255
    5eca:	7f 4f       	sbci	r23, 0xFF	; 255
    5ecc:	8f 4f       	sbci	r24, 0xFF	; 255
    5ece:	9f 4f       	sbci	r25, 0xFF	; 255
    5ed0:	1f 91       	pop	r17
    5ed2:	0f 91       	pop	r16
    5ed4:	ff 90       	pop	r15
    5ed6:	ef 90       	pop	r14
    5ed8:	df 90       	pop	r13
    5eda:	cf 90       	pop	r12
    5edc:	bf 90       	pop	r11
    5ede:	af 90       	pop	r10
    5ee0:	9f 90       	pop	r9
    5ee2:	8f 90       	pop	r8
    5ee4:	08 95       	ret

00005ee6 <MQTTPacket_decode>:
    5ee6:	4f 92       	push	r4
    5ee8:	5f 92       	push	r5
    5eea:	6f 92       	push	r6
    5eec:	7f 92       	push	r7
    5eee:	9f 92       	push	r9
    5ef0:	af 92       	push	r10
    5ef2:	bf 92       	push	r11
    5ef4:	cf 92       	push	r12
    5ef6:	df 92       	push	r13
    5ef8:	ef 92       	push	r14
    5efa:	ff 92       	push	r15
    5efc:	0f 93       	push	r16
    5efe:	1f 93       	push	r17
    5f00:	cf 93       	push	r28
    5f02:	df 93       	push	r29
    5f04:	1f 92       	push	r1
    5f06:	cd b7       	in	r28, 0x3d	; 61
    5f08:	de b7       	in	r29, 0x3e	; 62
    5f0a:	5c 01       	movw	r10, r24
    5f0c:	8b 01       	movw	r16, r22
    5f0e:	db 01       	movw	r26, r22
    5f10:	1d 92       	st	X+, r1
    5f12:	1d 92       	st	X+, r1
    5f14:	1d 92       	st	X+, r1
    5f16:	1c 92       	st	X, r1
    5f18:	13 97       	sbiw	r26, 0x03	; 3
    5f1a:	41 2c       	mov	r4, r1
    5f1c:	51 2c       	mov	r5, r1
    5f1e:	32 01       	movw	r6, r4
    5f20:	43 94       	inc	r4
    5f22:	c1 2c       	mov	r12, r1
    5f24:	d1 2c       	mov	r13, r1
    5f26:	76 01       	movw	r14, r12
    5f28:	c3 94       	inc	r12
    5f2a:	0c c0       	rjmp	.+24     	; 0x5f44 <MQTTPacket_decode+0x5e>
    5f2c:	bf ef       	ldi	r27, 0xFF	; 255
    5f2e:	4b 1a       	sub	r4, r27
    5f30:	5b 0a       	sbc	r5, r27
    5f32:	6b 0a       	sbc	r6, r27
    5f34:	7b 0a       	sbc	r7, r27
    5f36:	e5 e0       	ldi	r30, 0x05	; 5
    5f38:	4e 16       	cp	r4, r30
    5f3a:	51 04       	cpc	r5, r1
    5f3c:	61 04       	cpc	r6, r1
    5f3e:	71 04       	cpc	r7, r1
    5f40:	09 f4       	brne	.+2      	; 0x5f44 <MQTTPacket_decode+0x5e>
    5f42:	44 c0       	rjmp	.+136    	; 0x5fcc <MQTTPacket_decode+0xe6>
    5f44:	41 e0       	ldi	r20, 0x01	; 1
    5f46:	50 e0       	ldi	r21, 0x00	; 0
    5f48:	60 e0       	ldi	r22, 0x00	; 0
    5f4a:	70 e0       	ldi	r23, 0x00	; 0
    5f4c:	ce 01       	movw	r24, r28
    5f4e:	01 96       	adiw	r24, 0x01	; 1
    5f50:	f5 01       	movw	r30, r10
    5f52:	19 95       	eicall
    5f54:	61 30       	cpi	r22, 0x01	; 1
    5f56:	71 05       	cpc	r23, r1
    5f58:	81 05       	cpc	r24, r1
    5f5a:	91 05       	cpc	r25, r1
    5f5c:	b9 f5       	brne	.+110    	; 0x5fcc <MQTTPacket_decode+0xe6>
    5f5e:	99 80       	ldd	r9, Y+1	; 0x01
    5f60:	a9 2d       	mov	r26, r9
    5f62:	af 77       	andi	r26, 0x7F	; 127
    5f64:	b0 e0       	ldi	r27, 0x00	; 0
    5f66:	a7 01       	movw	r20, r14
    5f68:	96 01       	movw	r18, r12
    5f6a:	0e 94 e6 3e 	call	0x7dcc	; 0x7dcc <__muluhisi3>
    5f6e:	d8 01       	movw	r26, r16
    5f70:	2d 91       	ld	r18, X+
    5f72:	3d 91       	ld	r19, X+
    5f74:	4d 91       	ld	r20, X+
    5f76:	5c 91       	ld	r21, X
    5f78:	dc 01       	movw	r26, r24
    5f7a:	cb 01       	movw	r24, r22
    5f7c:	82 0f       	add	r24, r18
    5f7e:	93 1f       	adc	r25, r19
    5f80:	a4 1f       	adc	r26, r20
    5f82:	b5 1f       	adc	r27, r21
    5f84:	f8 01       	movw	r30, r16
    5f86:	80 83       	st	Z, r24
    5f88:	91 83       	std	Z+1, r25	; 0x01
    5f8a:	a2 83       	std	Z+2, r26	; 0x02
    5f8c:	b3 83       	std	Z+3, r27	; 0x03
    5f8e:	cc 0c       	add	r12, r12
    5f90:	dd 1c       	adc	r13, r13
    5f92:	ee 1c       	adc	r14, r14
    5f94:	ff 1c       	adc	r15, r15
    5f96:	cc 0c       	add	r12, r12
    5f98:	dd 1c       	adc	r13, r13
    5f9a:	ee 1c       	adc	r14, r14
    5f9c:	ff 1c       	adc	r15, r15
    5f9e:	cc 0c       	add	r12, r12
    5fa0:	dd 1c       	adc	r13, r13
    5fa2:	ee 1c       	adc	r14, r14
    5fa4:	ff 1c       	adc	r15, r15
    5fa6:	cc 0c       	add	r12, r12
    5fa8:	dd 1c       	adc	r13, r13
    5faa:	ee 1c       	adc	r14, r14
    5fac:	ff 1c       	adc	r15, r15
    5fae:	cc 0c       	add	r12, r12
    5fb0:	dd 1c       	adc	r13, r13
    5fb2:	ee 1c       	adc	r14, r14
    5fb4:	ff 1c       	adc	r15, r15
    5fb6:	cc 0c       	add	r12, r12
    5fb8:	dd 1c       	adc	r13, r13
    5fba:	ee 1c       	adc	r14, r14
    5fbc:	ff 1c       	adc	r15, r15
    5fbe:	cc 0c       	add	r12, r12
    5fc0:	dd 1c       	adc	r13, r13
    5fc2:	ee 1c       	adc	r14, r14
    5fc4:	ff 1c       	adc	r15, r15
    5fc6:	99 20       	and	r9, r9
    5fc8:	0c f4       	brge	.+2      	; 0x5fcc <MQTTPacket_decode+0xe6>
    5fca:	b0 cf       	rjmp	.-160    	; 0x5f2c <MQTTPacket_decode+0x46>
    5fcc:	c3 01       	movw	r24, r6
    5fce:	b2 01       	movw	r22, r4
    5fd0:	0f 90       	pop	r0
    5fd2:	df 91       	pop	r29
    5fd4:	cf 91       	pop	r28
    5fd6:	1f 91       	pop	r17
    5fd8:	0f 91       	pop	r16
    5fda:	ff 90       	pop	r15
    5fdc:	ef 90       	pop	r14
    5fde:	df 90       	pop	r13
    5fe0:	cf 90       	pop	r12
    5fe2:	bf 90       	pop	r11
    5fe4:	af 90       	pop	r10
    5fe6:	9f 90       	pop	r9
    5fe8:	7f 90       	pop	r7
    5fea:	6f 90       	pop	r6
    5fec:	5f 90       	pop	r5
    5fee:	4f 90       	pop	r4
    5ff0:	08 95       	ret

00005ff2 <MQTTPacket_len>:
    5ff2:	0f 93       	push	r16
    5ff4:	1f 93       	push	r17
    5ff6:	8b 01       	movw	r16, r22
    5ff8:	9c 01       	movw	r18, r24
    5ffa:	0f 5f       	subi	r16, 0xFF	; 255
    5ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ffe:	2f 4f       	sbci	r18, 0xFF	; 255
    6000:	3f 4f       	sbci	r19, 0xFF	; 255
    6002:	00 38       	cpi	r16, 0x80	; 128
    6004:	11 05       	cpc	r17, r1
    6006:	21 05       	cpc	r18, r1
    6008:	31 05       	cpc	r19, r1
    600a:	2c f4       	brge	.+10     	; 0x6016 <MQTTPacket_len+0x24>
    600c:	6e 5f       	subi	r22, 0xFE	; 254
    600e:	7f 4f       	sbci	r23, 0xFF	; 255
    6010:	8f 4f       	sbci	r24, 0xFF	; 255
    6012:	9f 4f       	sbci	r25, 0xFF	; 255
    6014:	19 c0       	rjmp	.+50     	; 0x6048 <MQTTPacket_len+0x56>
    6016:	01 15       	cp	r16, r1
    6018:	40 e4       	ldi	r20, 0x40	; 64
    601a:	14 07       	cpc	r17, r20
    601c:	21 05       	cpc	r18, r1
    601e:	31 05       	cpc	r19, r1
    6020:	2c f4       	brge	.+10     	; 0x602c <MQTTPacket_len+0x3a>
    6022:	6d 5f       	subi	r22, 0xFD	; 253
    6024:	7f 4f       	sbci	r23, 0xFF	; 255
    6026:	8f 4f       	sbci	r24, 0xFF	; 255
    6028:	9f 4f       	sbci	r25, 0xFF	; 255
    602a:	0e c0       	rjmp	.+28     	; 0x6048 <MQTTPacket_len+0x56>
    602c:	0f 3f       	cpi	r16, 0xFF	; 255
    602e:	1f 4f       	sbci	r17, 0xFF	; 255
    6030:	2f 41       	sbci	r18, 0x1F	; 31
    6032:	31 05       	cpc	r19, r1
    6034:	2c f4       	brge	.+10     	; 0x6040 <MQTTPacket_len+0x4e>
    6036:	6c 5f       	subi	r22, 0xFC	; 252
    6038:	7f 4f       	sbci	r23, 0xFF	; 255
    603a:	8f 4f       	sbci	r24, 0xFF	; 255
    603c:	9f 4f       	sbci	r25, 0xFF	; 255
    603e:	04 c0       	rjmp	.+8      	; 0x6048 <MQTTPacket_len+0x56>
    6040:	6b 5f       	subi	r22, 0xFB	; 251
    6042:	7f 4f       	sbci	r23, 0xFF	; 255
    6044:	8f 4f       	sbci	r24, 0xFF	; 255
    6046:	9f 4f       	sbci	r25, 0xFF	; 255
    6048:	1f 91       	pop	r17
    604a:	0f 91       	pop	r16
    604c:	08 95       	ret

0000604e <MQTTPacket_decodeBuf>:
    604e:	90 93 30 08 	sts	0x0830, r25	; 0x800830 <bufptr+0x1>
    6052:	80 93 2f 08 	sts	0x082F, r24	; 0x80082f <bufptr>
    6056:	8c ee       	ldi	r24, 0xEC	; 236
    6058:	9e e2       	ldi	r25, 0x2E	; 46
    605a:	45 cf       	rjmp	.-374    	; 0x5ee6 <MQTTPacket_decode>
    605c:	08 95       	ret

0000605e <readInt>:
    605e:	dc 01       	movw	r26, r24
    6060:	ed 91       	ld	r30, X+
    6062:	fc 91       	ld	r31, X
    6064:	11 97       	sbiw	r26, 0x01	; 1
    6066:	60 81       	ld	r22, Z
    6068:	70 e0       	ldi	r23, 0x00	; 0
    606a:	76 2f       	mov	r23, r22
    606c:	66 27       	eor	r22, r22
    606e:	81 81       	ldd	r24, Z+1	; 0x01
    6070:	68 0f       	add	r22, r24
    6072:	71 1d       	adc	r23, r1
    6074:	07 2e       	mov	r0, r23
    6076:	00 0c       	add	r0, r0
    6078:	88 0b       	sbc	r24, r24
    607a:	99 0b       	sbc	r25, r25
    607c:	32 96       	adiw	r30, 0x02	; 2
    607e:	ed 93       	st	X+, r30
    6080:	fc 93       	st	X, r31
    6082:	08 95       	ret

00006084 <readChar>:
    6084:	dc 01       	movw	r26, r24
    6086:	ed 91       	ld	r30, X+
    6088:	fc 91       	ld	r31, X
    608a:	11 97       	sbiw	r26, 0x01	; 1
    608c:	81 91       	ld	r24, Z+
    608e:	ed 93       	st	X+, r30
    6090:	fc 93       	st	X, r31
    6092:	08 95       	ret

00006094 <writeChar>:
    6094:	fc 01       	movw	r30, r24
    6096:	a0 81       	ld	r26, Z
    6098:	b1 81       	ldd	r27, Z+1	; 0x01
    609a:	6c 93       	st	X, r22
    609c:	80 81       	ld	r24, Z
    609e:	91 81       	ldd	r25, Z+1	; 0x01
    60a0:	01 96       	adiw	r24, 0x01	; 1
    60a2:	91 83       	std	Z+1, r25	; 0x01
    60a4:	80 83       	st	Z, r24
    60a6:	08 95       	ret

000060a8 <writeInt>:
    60a8:	cf 93       	push	r28
    60aa:	df 93       	push	r29
    60ac:	fc 01       	movw	r30, r24
    60ae:	c0 81       	ld	r28, Z
    60b0:	d1 81       	ldd	r29, Z+1	; 0x01
    60b2:	db 01       	movw	r26, r22
    60b4:	ca 01       	movw	r24, r20
    60b6:	77 23       	and	r23, r23
    60b8:	24 f4       	brge	.+8      	; 0x60c2 <writeInt+0x1a>
    60ba:	81 50       	subi	r24, 0x01	; 1
    60bc:	9f 4f       	sbci	r25, 0xFF	; 255
    60be:	af 4f       	sbci	r26, 0xFF	; 255
    60c0:	bf 4f       	sbci	r27, 0xFF	; 255
    60c2:	98 83       	st	Y, r25
    60c4:	a0 81       	ld	r26, Z
    60c6:	b1 81       	ldd	r27, Z+1	; 0x01
    60c8:	cd 01       	movw	r24, r26
    60ca:	01 96       	adiw	r24, 0x01	; 1
    60cc:	91 83       	std	Z+1, r25	; 0x01
    60ce:	80 83       	st	Z, r24
    60d0:	55 27       	eor	r21, r21
    60d2:	66 27       	eor	r22, r22
    60d4:	70 78       	andi	r23, 0x80	; 128
    60d6:	77 23       	and	r23, r23
    60d8:	5c f4       	brge	.+22     	; 0x60f0 <writeInt+0x48>
    60da:	41 50       	subi	r20, 0x01	; 1
    60dc:	51 09       	sbc	r21, r1
    60de:	61 09       	sbc	r22, r1
    60e0:	71 09       	sbc	r23, r1
    60e2:	5f 6f       	ori	r21, 0xFF	; 255
    60e4:	6f 6f       	ori	r22, 0xFF	; 255
    60e6:	7f 6f       	ori	r23, 0xFF	; 255
    60e8:	4f 5f       	subi	r20, 0xFF	; 255
    60ea:	5f 4f       	sbci	r21, 0xFF	; 255
    60ec:	6f 4f       	sbci	r22, 0xFF	; 255
    60ee:	7f 4f       	sbci	r23, 0xFF	; 255
    60f0:	11 96       	adiw	r26, 0x01	; 1
    60f2:	4c 93       	st	X, r20
    60f4:	80 81       	ld	r24, Z
    60f6:	91 81       	ldd	r25, Z+1	; 0x01
    60f8:	01 96       	adiw	r24, 0x01	; 1
    60fa:	91 83       	std	Z+1, r25	; 0x01
    60fc:	80 83       	st	Z, r24
    60fe:	df 91       	pop	r29
    6100:	cf 91       	pop	r28
    6102:	08 95       	ret

00006104 <writeCString>:
    6104:	ef 92       	push	r14
    6106:	ff 92       	push	r15
    6108:	0f 93       	push	r16
    610a:	1f 93       	push	r17
    610c:	cf 93       	push	r28
    610e:	df 93       	push	r29
    6110:	8c 01       	movw	r16, r24
    6112:	7b 01       	movw	r14, r22
    6114:	eb 01       	movw	r28, r22
    6116:	09 90       	ld	r0, Y+
    6118:	00 20       	and	r0, r0
    611a:	e9 f7       	brne	.-6      	; 0x6116 <writeCString+0x12>
    611c:	21 97       	sbiw	r28, 0x01	; 1
    611e:	c6 1b       	sub	r28, r22
    6120:	d7 0b       	sbc	r29, r23
    6122:	ae 01       	movw	r20, r28
    6124:	60 e0       	ldi	r22, 0x00	; 0
    6126:	70 e0       	ldi	r23, 0x00	; 0
    6128:	bf df       	rcall	.-130    	; 0x60a8 <writeInt>
    612a:	ae 01       	movw	r20, r28
    612c:	b7 01       	movw	r22, r14
    612e:	f8 01       	movw	r30, r16
    6130:	80 81       	ld	r24, Z
    6132:	91 81       	ldd	r25, Z+1	; 0x01
    6134:	0e 94 54 3f 	call	0x7ea8	; 0x7ea8 <memcpy>
    6138:	f8 01       	movw	r30, r16
    613a:	80 81       	ld	r24, Z
    613c:	91 81       	ldd	r25, Z+1	; 0x01
    613e:	c8 0f       	add	r28, r24
    6140:	d9 1f       	adc	r29, r25
    6142:	d1 83       	std	Z+1, r29	; 0x01
    6144:	c0 83       	st	Z, r28
    6146:	df 91       	pop	r29
    6148:	cf 91       	pop	r28
    614a:	1f 91       	pop	r17
    614c:	0f 91       	pop	r16
    614e:	ff 90       	pop	r15
    6150:	ef 90       	pop	r14
    6152:	08 95       	ret

00006154 <writeMQTTString>:


void writeMQTTString(uint8_t** pptr, MQTTString mqttstring)
{
    6154:	af 92       	push	r10
    6156:	bf 92       	push	r11
    6158:	cf 92       	push	r12
    615a:	df 92       	push	r13
    615c:	ef 92       	push	r14
    615e:	ff 92       	push	r15
    6160:	0f 93       	push	r16
    6162:	1f 93       	push	r17
    6164:	cf 93       	push	r28
    6166:	df 93       	push	r29
    6168:	cd b7       	in	r28, 0x3d	; 61
    616a:	de b7       	in	r29, 0x3e	; 62
    616c:	28 97       	sbiw	r28, 0x08	; 8
    616e:	0f b6       	in	r0, 0x3f	; 63
    6170:	f8 94       	cli
    6172:	de bf       	out	0x3e, r29	; 62
    6174:	0f be       	out	0x3f, r0	; 63
    6176:	cd bf       	out	0x3d, r28	; 61
    6178:	5c 01       	movw	r10, r24
    617a:	09 83       	std	Y+1, r16	; 0x01
    617c:	1a 83       	std	Y+2, r17	; 0x02
    617e:	2b 83       	std	Y+3, r18	; 0x03
    6180:	3c 83       	std	Y+4, r19	; 0x04
    6182:	4d 83       	std	Y+5, r20	; 0x05
    6184:	5e 83       	std	Y+6, r21	; 0x06
    6186:	6f 83       	std	Y+7, r22	; 0x07
    6188:	78 87       	std	Y+8, r23	; 0x08
    618a:	cb 80       	ldd	r12, Y+3	; 0x03
    618c:	dc 80       	ldd	r13, Y+4	; 0x04
    618e:	ed 80       	ldd	r14, Y+5	; 0x05
    6190:	fe 80       	ldd	r15, Y+6	; 0x06
  if (mqttstring.lenstring.len > 0)
    6192:	1c 14       	cp	r1, r12
    6194:	1d 04       	cpc	r1, r13
    6196:	1e 04       	cpc	r1, r14
    6198:	1f 04       	cpc	r1, r15
    619a:	9c f4       	brge	.+38     	; 0x61c2 <writeMQTTString+0x6e>
  {
    writeInt(pptr, mqttstring.lenstring.len);
    619c:	b7 01       	movw	r22, r14
    619e:	a6 01       	movw	r20, r12
    61a0:	83 df       	rcall	.-250    	; 0x60a8 <writeInt>
    memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    61a2:	6f 81       	ldd	r22, Y+7	; 0x07
    61a4:	78 85       	ldd	r23, Y+8	; 0x08
    61a6:	a6 01       	movw	r20, r12
    61a8:	f5 01       	movw	r30, r10
    61aa:	80 81       	ld	r24, Z
    61ac:	91 81       	ldd	r25, Z+1	; 0x01
    61ae:	0e 94 54 3f 	call	0x7ea8	; 0x7ea8 <memcpy>
    *pptr += mqttstring.lenstring.len;
    61b2:	f5 01       	movw	r30, r10
    61b4:	80 81       	ld	r24, Z
    61b6:	91 81       	ldd	r25, Z+1	; 0x01
    61b8:	c8 0e       	add	r12, r24
    61ba:	d9 1e       	adc	r13, r25
    61bc:	d1 82       	std	Z+1, r13	; 0x01
    61be:	c0 82       	st	Z, r12
    61c0:	0b c0       	rjmp	.+22     	; 0x61d8 <writeMQTTString+0x84>
    61c2:	69 81       	ldd	r22, Y+1	; 0x01
    61c4:	7a 81       	ldd	r23, Y+2	; 0x02
  }
  else if (mqttstring.cstring)
    61c6:	61 15       	cp	r22, r1
    61c8:	71 05       	cpc	r23, r1
    writeCString(pptr, mqttstring.cstring);
    61ca:	11 f0       	breq	.+4      	; 0x61d0 <writeMQTTString+0x7c>
    61cc:	9b df       	rcall	.-202    	; 0x6104 <writeCString>
    61ce:	04 c0       	rjmp	.+8      	; 0x61d8 <writeMQTTString+0x84>
  else
    writeInt(pptr, 0);
    61d0:	40 e0       	ldi	r20, 0x00	; 0
    61d2:	50 e0       	ldi	r21, 0x00	; 0
    61d4:	ba 01       	movw	r22, r20
    61d6:	68 df       	rcall	.-304    	; 0x60a8 <writeInt>
}
    61d8:	28 96       	adiw	r28, 0x08	; 8
    61da:	0f b6       	in	r0, 0x3f	; 63
    61dc:	f8 94       	cli
    61de:	de bf       	out	0x3e, r29	; 62
    61e0:	0f be       	out	0x3f, r0	; 63
    61e2:	cd bf       	out	0x3d, r28	; 61
    61e4:	df 91       	pop	r29
    61e6:	cf 91       	pop	r28
    61e8:	1f 91       	pop	r17
    61ea:	0f 91       	pop	r16
    61ec:	ff 90       	pop	r15
    61ee:	ef 90       	pop	r14
    61f0:	df 90       	pop	r13
    61f2:	cf 90       	pop	r12
    61f4:	bf 90       	pop	r11
    61f6:	af 90       	pop	r10
    61f8:	08 95       	ret

000061fa <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
    61fa:	ef 92       	push	r14
    61fc:	ff 92       	push	r15
    61fe:	0f 93       	push	r16
    6200:	1f 93       	push	r17
    6202:	cf 93       	push	r28
    6204:	df 93       	push	r29
    6206:	8c 01       	movw	r16, r24
    6208:	eb 01       	movw	r28, r22
    620a:	7a 01       	movw	r14, r20
  int32_t rc = 0;

  FUNC_ENTRY;

  /* the first two bytes are the length of the string */
  if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    620c:	88 81       	ld	r24, Y
    620e:	99 81       	ldd	r25, Y+1	; 0x01
    6210:	9a 01       	movw	r18, r20
    6212:	28 1b       	sub	r18, r24
    6214:	39 0b       	sbc	r19, r25
    6216:	22 30       	cpi	r18, 0x02	; 2
    6218:	31 05       	cpc	r19, r1
    621a:	e4 f0       	brlt	.+56     	; 0x6254 <readMQTTLenString+0x5a>
  {
    mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    621c:	cb 01       	movw	r24, r22
    621e:	1f df       	rcall	.-450    	; 0x605e <readInt>
    6220:	f8 01       	movw	r30, r16
    6222:	62 83       	std	Z+2, r22	; 0x02
    6224:	73 83       	std	Z+3, r23	; 0x03
    6226:	84 83       	std	Z+4, r24	; 0x04
    6228:	95 83       	std	Z+5, r25	; 0x05
	
    if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    622a:	28 81       	ld	r18, Y
    622c:	39 81       	ldd	r19, Y+1	; 0x01
    622e:	a9 01       	movw	r20, r18
    6230:	46 0f       	add	r20, r22
    6232:	57 1f       	adc	r21, r23
    6234:	e4 16       	cp	r14, r20
    6236:	f5 06       	cpc	r15, r21
    6238:	88 f0       	brcs	.+34     	; 0x625c <readMQTTLenString+0x62>
    {
      mqttstring->lenstring.data = (char*)*pptr;
    623a:	37 83       	std	Z+7, r19	; 0x07
    623c:	26 83       	std	Z+6, r18	; 0x06
      *pptr += mqttstring->lenstring.len;
    623e:	28 81       	ld	r18, Y
    6240:	39 81       	ldd	r19, Y+1	; 0x01
    6242:	62 0f       	add	r22, r18
    6244:	73 1f       	adc	r23, r19
    6246:	79 83       	std	Y+1, r23	; 0x01
    6248:	68 83       	st	Y, r22
      rc = 1;
    624a:	61 e0       	ldi	r22, 0x01	; 1
    624c:	70 e0       	ldi	r23, 0x00	; 0
    624e:	80 e0       	ldi	r24, 0x00	; 0
    6250:	90 e0       	ldi	r25, 0x00	; 0
    6252:	07 c0       	rjmp	.+14     	; 0x6262 <readMQTTLenString+0x68>
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int32_t readMQTTLenString(MQTTString* mqttstring, uint8_t** pptr, uint8_t* enddata)
{
  int32_t rc = 0;
    6254:	60 e0       	ldi	r22, 0x00	; 0
    6256:	70 e0       	ldi	r23, 0x00	; 0
    6258:	cb 01       	movw	r24, r22
    625a:	03 c0       	rjmp	.+6      	; 0x6262 <readMQTTLenString+0x68>
    625c:	60 e0       	ldi	r22, 0x00	; 0
    625e:	70 e0       	ldi	r23, 0x00	; 0
    6260:	cb 01       	movw	r24, r22
      *pptr += mqttstring->lenstring.len;
      rc = 1;
    }
  }

  mqttstring->cstring = NULL;
    6262:	f8 01       	movw	r30, r16
    6264:	11 82       	std	Z+1, r1	; 0x01
    6266:	10 82       	st	Z, r1
  FUNC_EXIT_RC(rc);
  return rc;
}
    6268:	df 91       	pop	r29
    626a:	cf 91       	pop	r28
    626c:	1f 91       	pop	r17
    626e:	0f 91       	pop	r16
    6270:	ff 90       	pop	r15
    6272:	ef 90       	pop	r14
    6274:	08 95       	ret

00006276 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int32_t MQTTstrlen(MQTTString mqttstring)
{
    6276:	cf 93       	push	r28
    6278:	df 93       	push	r29
    627a:	cd b7       	in	r28, 0x3d	; 61
    627c:	de b7       	in	r29, 0x3e	; 62
    627e:	28 97       	sbiw	r28, 0x08	; 8
    6280:	0f b6       	in	r0, 0x3f	; 63
    6282:	f8 94       	cli
    6284:	de bf       	out	0x3e, r29	; 62
    6286:	0f be       	out	0x3f, r0	; 63
    6288:	cd bf       	out	0x3d, r28	; 61
    628a:	29 83       	std	Y+1, r18	; 0x01
    628c:	3a 83       	std	Y+2, r19	; 0x02
    628e:	4b 83       	std	Y+3, r20	; 0x03
    6290:	5c 83       	std	Y+4, r21	; 0x04
    6292:	6d 83       	std	Y+5, r22	; 0x05
    6294:	7e 83       	std	Y+6, r23	; 0x06
    6296:	8f 83       	std	Y+7, r24	; 0x07
    6298:	98 87       	std	Y+8, r25	; 0x08
    629a:	e9 81       	ldd	r30, Y+1	; 0x01
    629c:	fa 81       	ldd	r31, Y+2	; 0x02
  int rc = 0;

  if (mqttstring.cstring)
    629e:	30 97       	sbiw	r30, 0x00	; 0
    62a0:	49 f0       	breq	.+18     	; 0x62b4 <MQTTstrlen+0x3e>
    rc = strlen(mqttstring.cstring);
    62a2:	df 01       	movw	r26, r30
    62a4:	0d 90       	ld	r0, X+
    62a6:	00 20       	and	r0, r0
    62a8:	e9 f7       	brne	.-6      	; 0x62a4 <MQTTstrlen+0x2e>
    62aa:	11 97       	sbiw	r26, 0x01	; 1
    62ac:	bd 01       	movw	r22, r26
    62ae:	6e 1b       	sub	r22, r30
    62b0:	7f 0b       	sbc	r23, r31
    62b2:	02 c0       	rjmp	.+4      	; 0x62b8 <MQTTstrlen+0x42>
  else
    rc = mqttstring.lenstring.len;
    62b4:	6b 81       	ldd	r22, Y+3	; 0x03
    62b6:	7c 81       	ldd	r23, Y+4	; 0x04
	
  return rc;
    62b8:	07 2e       	mov	r0, r23
    62ba:	00 0c       	add	r0, r0
    62bc:	88 0b       	sbc	r24, r24
    62be:	99 0b       	sbc	r25, r25
}
    62c0:	28 96       	adiw	r28, 0x08	; 8
    62c2:	0f b6       	in	r0, 0x3f	; 63
    62c4:	f8 94       	cli
    62c6:	de bf       	out	0x3e, r29	; 62
    62c8:	0f be       	out	0x3f, r0	; 63
    62ca:	cd bf       	out	0x3d, r28	; 61
    62cc:	df 91       	pop	r29
    62ce:	cf 91       	pop	r28
    62d0:	08 95       	ret

000062d2 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int32_t MQTTPacket_equals(MQTTString* a, char* bptr)
{
    62d2:	0f 93       	push	r16
    62d4:	1f 93       	push	r17
    62d6:	cf 93       	push	r28
    62d8:	df 93       	push	r29
    62da:	eb 01       	movw	r28, r22
  int32_t alen = 0, blen = 0;
  char *aptr;
	
  if (a->cstring)
    62dc:	fc 01       	movw	r30, r24
    62de:	a0 81       	ld	r26, Z
    62e0:	b1 81       	ldd	r27, Z+1	; 0x01
    62e2:	10 97       	sbiw	r26, 0x00	; 0
    62e4:	59 f0       	breq	.+22     	; 0x62fc <MQTTPacket_equals+0x2a>
  {
    aptr = a->cstring;
    alen = strlen(a->cstring);
    62e6:	fd 01       	movw	r30, r26
    62e8:	01 90       	ld	r0, Z+
    62ea:	00 20       	and	r0, r0
    62ec:	e9 f7       	brne	.-6      	; 0x62e8 <MQTTPacket_equals+0x16>
    62ee:	31 97       	sbiw	r30, 0x01	; 1
    62f0:	af 01       	movw	r20, r30
    62f2:	4a 1b       	sub	r20, r26
    62f4:	5b 0b       	sbc	r21, r27
    62f6:	60 e0       	ldi	r22, 0x00	; 0
    62f8:	70 e0       	ldi	r23, 0x00	; 0
    62fa:	07 c0       	rjmp	.+14     	; 0x630a <MQTTPacket_equals+0x38>
  }
  else
  {
    aptr = a->lenstring.data;
    62fc:	fc 01       	movw	r30, r24
    62fe:	a6 81       	ldd	r26, Z+6	; 0x06
    6300:	b7 81       	ldd	r27, Z+7	; 0x07
    alen = a->lenstring.len;
    6302:	42 81       	ldd	r20, Z+2	; 0x02
    6304:	53 81       	ldd	r21, Z+3	; 0x03
    6306:	64 81       	ldd	r22, Z+4	; 0x04
    6308:	75 81       	ldd	r23, Z+5	; 0x05
  }

  blen = strlen(bptr);
    630a:	fe 01       	movw	r30, r28
    630c:	01 90       	ld	r0, Z+
    630e:	00 20       	and	r0, r0
    6310:	e9 f7       	brne	.-6      	; 0x630c <MQTTPacket_equals+0x3a>
    6312:	31 97       	sbiw	r30, 0x01	; 1
    6314:	8f 01       	movw	r16, r30
    6316:	0c 1b       	sub	r16, r28
    6318:	1d 0b       	sbc	r17, r29
	
  return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    631a:	20 e0       	ldi	r18, 0x00	; 0
    631c:	30 e0       	ldi	r19, 0x00	; 0
    631e:	40 17       	cp	r20, r16
    6320:	51 07       	cpc	r21, r17
    6322:	62 07       	cpc	r22, r18
    6324:	73 07       	cpc	r23, r19
    6326:	61 f4       	brne	.+24     	; 0x6340 <MQTTPacket_equals+0x6e>
    6328:	be 01       	movw	r22, r28
    632a:	cd 01       	movw	r24, r26
    632c:	0e 94 5d 3f 	call	0x7eba	; 0x7eba <strncmp>
    6330:	31 e0       	ldi	r19, 0x01	; 1
    6332:	20 e0       	ldi	r18, 0x00	; 0
    6334:	89 2b       	or	r24, r25
    6336:	09 f0       	breq	.+2      	; 0x633a <MQTTPacket_equals+0x68>
    6338:	30 e0       	ldi	r19, 0x00	; 0
    633a:	63 2f       	mov	r22, r19
    633c:	72 2f       	mov	r23, r18
    633e:	02 c0       	rjmp	.+4      	; 0x6344 <MQTTPacket_equals+0x72>
    6340:	60 e0       	ldi	r22, 0x00	; 0
    6342:	70 e0       	ldi	r23, 0x00	; 0
    6344:	07 2e       	mov	r0, r23
    6346:	00 0c       	add	r0, r0
    6348:	88 0b       	sbc	r24, r24
    634a:	99 0b       	sbc	r25, r25
}
    634c:	df 91       	pop	r29
    634e:	cf 91       	pop	r28
    6350:	1f 91       	pop	r17
    6352:	0f 91       	pop	r16
    6354:	08 95       	ret

00006356 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_publishLength(uint8_t qos, MQTTString topicName, int32_t payloadlen)
{
    6356:	bf 92       	push	r11
    6358:	cf 92       	push	r12
    635a:	df 92       	push	r13
    635c:	ef 92       	push	r14
    635e:	ff 92       	push	r15
    6360:	0f 93       	push	r16
    6362:	1f 93       	push	r17
    6364:	cf 93       	push	r28
    6366:	df 93       	push	r29
    6368:	cd b7       	in	r28, 0x3d	; 61
    636a:	de b7       	in	r29, 0x3e	; 62
    636c:	28 97       	sbiw	r28, 0x08	; 8
    636e:	0f b6       	in	r0, 0x3f	; 63
    6370:	f8 94       	cli
    6372:	de bf       	out	0x3e, r29	; 62
    6374:	0f be       	out	0x3f, r0	; 63
    6376:	cd bf       	out	0x3d, r28	; 61
    6378:	b8 2e       	mov	r11, r24
    637a:	b2 2f       	mov	r27, r18
    637c:	a3 2f       	mov	r26, r19
    637e:	f4 2f       	mov	r31, r20
    6380:	e5 2f       	mov	r30, r21
    6382:	86 2f       	mov	r24, r22
    6384:	97 2f       	mov	r25, r23
  int32_t len = 2 + MQTTstrlen(topicName) + payloadlen;
    6386:	20 2f       	mov	r18, r16
    6388:	31 2f       	mov	r19, r17
    638a:	4b 2f       	mov	r20, r27
    638c:	5a 2f       	mov	r21, r26
    638e:	6f 2f       	mov	r22, r31
    6390:	7e 2f       	mov	r23, r30
    6392:	71 df       	rcall	.-286    	; 0x6276 <MQTTstrlen>
    6394:	dc 01       	movw	r26, r24
    6396:	cb 01       	movw	r24, r22
    6398:	02 96       	adiw	r24, 0x02	; 2
    639a:	a1 1d       	adc	r26, r1
    639c:	b1 1d       	adc	r27, r1
    639e:	bc 01       	movw	r22, r24
    63a0:	cd 01       	movw	r24, r26
    63a2:	6c 0d       	add	r22, r12
    63a4:	7d 1d       	adc	r23, r13
    63a6:	8e 1d       	adc	r24, r14
    63a8:	9f 1d       	adc	r25, r15
  
  if (qos > 0)
    63aa:	bb 20       	and	r11, r11
    63ac:	21 f0       	breq	.+8      	; 0x63b6 <MQTTSerialize_publishLength+0x60>
    len += 2; /* packetid */
    63ae:	6e 5f       	subi	r22, 0xFE	; 254
    63b0:	7f 4f       	sbci	r23, 0xFF	; 255
    63b2:	8f 4f       	sbci	r24, 0xFF	; 255
    63b4:	9f 4f       	sbci	r25, 0xFF	; 255
	
  return len;
}
    63b6:	28 96       	adiw	r28, 0x08	; 8
    63b8:	0f b6       	in	r0, 0x3f	; 63
    63ba:	f8 94       	cli
    63bc:	de bf       	out	0x3e, r29	; 62
    63be:	0f be       	out	0x3f, r0	; 63
    63c0:	cd bf       	out	0x3d, r28	; 61
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	1f 91       	pop	r17
    63c8:	0f 91       	pop	r16
    63ca:	ff 90       	pop	r15
    63cc:	ef 90       	pop	r14
    63ce:	df 90       	pop	r13
    63d0:	cf 90       	pop	r12
    63d2:	bf 90       	pop	r11
    63d4:	08 95       	ret

000063d6 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_publish(uint8_t* buf, int32_t buflen, uint8_t dup, uint8_t qos, uint8_t retained, uint16_t packetid,
		MQTTString topicName, uint8_t* payload, int32_t payloadlen)
{
    63d6:	3f 92       	push	r3
    63d8:	4f 92       	push	r4
    63da:	5f 92       	push	r5
    63dc:	6f 92       	push	r6
    63de:	7f 92       	push	r7
    63e0:	8f 92       	push	r8
    63e2:	9f 92       	push	r9
    63e4:	af 92       	push	r10
    63e6:	bf 92       	push	r11
    63e8:	cf 92       	push	r12
    63ea:	df 92       	push	r13
    63ec:	ef 92       	push	r14
    63ee:	ff 92       	push	r15
    63f0:	0f 93       	push	r16
    63f2:	1f 93       	push	r17
    63f4:	cf 93       	push	r28
    63f6:	df 93       	push	r29
    63f8:	00 d0       	rcall	.+0      	; 0x63fa <MQTTSerialize_publish+0x24>
    63fa:	1f 92       	push	r1
    63fc:	cd b7       	in	r28, 0x3d	; 61
    63fe:	de b7       	in	r29, 0x3e	; 62
    6400:	4c 01       	movw	r8, r24
    6402:	2a 01       	movw	r4, r20
    6404:	3b 01       	movw	r6, r22
    6406:	32 2e       	mov	r3, r18
    6408:	b0 2e       	mov	r11, r16
    640a:	ae 2c       	mov	r10, r14
    640c:	dc 82       	std	Y+4, r13	; 0x04
    640e:	cb 82       	std	Y+3, r12	; 0x03
  uint8_t *ptr = buf;
    6410:	9a 83       	std	Y+2, r25	; 0x02
    6412:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    6414:	cb a0       	ldd	r12, Y+35	; 0x23
    6416:	dc a0       	ldd	r13, Y+36	; 0x24
    6418:	ed a0       	ldd	r14, Y+37	; 0x25
    641a:	fe a0       	ldd	r15, Y+38	; 0x26
    641c:	09 8d       	ldd	r16, Y+25	; 0x19
    641e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    6420:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6422:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6424:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6426:	5e 8d       	ldd	r21, Y+30	; 0x1e
    6428:	6f 8d       	ldd	r22, Y+31	; 0x1f
    642a:	78 a1       	ldd	r23, Y+32	; 0x20
    642c:	8b 2d       	mov	r24, r11
    642e:	93 df       	rcall	.-218    	; 0x6356 <MQTTSerialize_publishLength>
    6430:	6b 01       	movw	r12, r22
    6432:	7c 01       	movw	r14, r24
    6434:	de dd       	rcall	.-1092   	; 0x5ff2 <MQTTPacket_len>
    6436:	46 16       	cp	r4, r22
    6438:	57 06       	cpc	r5, r23
    643a:	68 06       	cpc	r6, r24
    643c:	79 06       	cpc	r7, r25
    643e:	0c f4       	brge	.+2      	; 0x6442 <MQTTSerialize_publish+0x6c>
    6440:	42 c0       	rjmp	.+132    	; 0x64c6 <MQTTSerialize_publish+0xf0>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = PUBLISH;
    6442:	60 e3       	ldi	r22, 0x30	; 48
  header.bits.dup = dup;
    6444:	30 fa       	bst	r3, 0
    6446:	63 f9       	bld	r22, 3
  header.bits.qos = qos;
    6448:	8b 2d       	mov	r24, r11
    644a:	83 70       	andi	r24, 0x03	; 3
    644c:	88 0f       	add	r24, r24
    644e:	69 7f       	andi	r22, 0xF9	; 249
    6450:	68 2b       	or	r22, r24
  header.bits.retain = retained;
    6452:	a0 fa       	bst	r10, 0
    6454:	60 f9       	bld	r22, 0
  writeChar(&ptr, header.byte); /* write header */
    6456:	ce 01       	movw	r24, r28
    6458:	01 96       	adiw	r24, 0x01	; 1
    645a:	1c de       	rcall	.-968    	; 0x6094 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    645c:	b7 01       	movw	r22, r14
    645e:	a6 01       	movw	r20, r12
    6460:	89 81       	ldd	r24, Y+1	; 0x01
    6462:	9a 81       	ldd	r25, Y+2	; 0x02
    6464:	e9 dc       	rcall	.-1582   	; 0x5e38 <MQTTPacket_encode>
    6466:	29 81       	ldd	r18, Y+1	; 0x01
    6468:	3a 81       	ldd	r19, Y+2	; 0x02
    646a:	62 0f       	add	r22, r18
    646c:	73 1f       	adc	r23, r19
    646e:	7a 83       	std	Y+2, r23	; 0x02
    6470:	69 83       	std	Y+1, r22	; 0x01

  writeMQTTString(&ptr, topicName);
    6472:	09 8d       	ldd	r16, Y+25	; 0x19
    6474:	1a 8d       	ldd	r17, Y+26	; 0x1a
    6476:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6478:	3c 8d       	ldd	r19, Y+28	; 0x1c
    647a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    647c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    647e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6480:	78 a1       	ldd	r23, Y+32	; 0x20
    6482:	ce 01       	movw	r24, r28
    6484:	01 96       	adiw	r24, 0x01	; 1
    6486:	66 de       	rcall	.-820    	; 0x6154 <writeMQTTString>

  if (qos > 0)
    6488:	bb 20       	and	r11, r11
    648a:	41 f0       	breq	.+16     	; 0x649c <MQTTSerialize_publish+0xc6>
    writeInt(&ptr, packetid);
    648c:	8b 81       	ldd	r24, Y+3	; 0x03
    648e:	9c 81       	ldd	r25, Y+4	; 0x04
    6490:	ac 01       	movw	r20, r24
    6492:	60 e0       	ldi	r22, 0x00	; 0
    6494:	70 e0       	ldi	r23, 0x00	; 0
    6496:	ce 01       	movw	r24, r28
    6498:	01 96       	adiw	r24, 0x01	; 1
    649a:	06 de       	rcall	.-1012   	; 0x60a8 <writeInt>

  memcpy(ptr, payload, payloadlen);
    649c:	4b a1       	ldd	r20, Y+35	; 0x23
    649e:	5c a1       	ldd	r21, Y+36	; 0x24
    64a0:	69 a1       	ldd	r22, Y+33	; 0x21
    64a2:	7a a1       	ldd	r23, Y+34	; 0x22
    64a4:	89 81       	ldd	r24, Y+1	; 0x01
    64a6:	9a 81       	ldd	r25, Y+2	; 0x02
    64a8:	0e 94 54 3f 	call	0x7ea8	; 0x7ea8 <memcpy>
  ptr += payloadlen;

  rc = ptr - buf;
    64ac:	69 81       	ldd	r22, Y+1	; 0x01
    64ae:	7a 81       	ldd	r23, Y+2	; 0x02
    64b0:	8b a1       	ldd	r24, Y+35	; 0x23
    64b2:	9c a1       	ldd	r25, Y+36	; 0x24
    64b4:	68 0f       	add	r22, r24
    64b6:	79 1f       	adc	r23, r25
    64b8:	68 19       	sub	r22, r8
    64ba:	79 09       	sbc	r23, r9
    64bc:	07 2e       	mov	r0, r23
    64be:	00 0c       	add	r0, r0
    64c0:	88 0b       	sbc	r24, r24
    64c2:	99 0b       	sbc	r25, r25
    64c4:	04 c0       	rjmp	.+8      	; 0x64ce <MQTTSerialize_publish+0xf8>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    64c6:	6e ef       	ldi	r22, 0xFE	; 254
    64c8:	7f ef       	ldi	r23, 0xFF	; 255
    64ca:	8f ef       	ldi	r24, 0xFF	; 255
    64cc:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    64ce:	0f 90       	pop	r0
    64d0:	0f 90       	pop	r0
    64d2:	0f 90       	pop	r0
    64d4:	0f 90       	pop	r0
    64d6:	df 91       	pop	r29
    64d8:	cf 91       	pop	r28
    64da:	1f 91       	pop	r17
    64dc:	0f 91       	pop	r16
    64de:	ff 90       	pop	r15
    64e0:	ef 90       	pop	r14
    64e2:	df 90       	pop	r13
    64e4:	cf 90       	pop	r12
    64e6:	bf 90       	pop	r11
    64e8:	af 90       	pop	r10
    64ea:	9f 90       	pop	r9
    64ec:	8f 90       	pop	r8
    64ee:	7f 90       	pop	r7
    64f0:	6f 90       	pop	r6
    64f2:	5f 90       	pop	r5
    64f4:	4f 90       	pop	r4
    64f6:	3f 90       	pop	r3
    64f8:	08 95       	ret

000064fa <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int32_t MQTTSerialize_ack(uint8_t* buf, int32_t buflen, uint8_t packettype, uint8_t dup, uint16_t packetid)
{
    64fa:	ef 92       	push	r14
    64fc:	ff 92       	push	r15
    64fe:	0f 93       	push	r16
    6500:	1f 93       	push	r17
    6502:	cf 93       	push	r28
    6504:	df 93       	push	r29
    6506:	1f 92       	push	r1
    6508:	1f 92       	push	r1
    650a:	cd b7       	in	r28, 0x3d	; 61
    650c:	de b7       	in	r29, 0x3e	; 62
    650e:	fc 01       	movw	r30, r24
  MQTTHeader header = {0};
  int32_t rc = 0;
  uint8_t *ptr = buf;
    6510:	9a 83       	std	Y+2, r25	; 0x02
    6512:	89 83       	std	Y+1, r24	; 0x01

  FUNC_ENTRY;

  if (buflen < 4)
    6514:	44 30       	cpi	r20, 0x04	; 4
    6516:	51 05       	cpc	r21, r1
    6518:	61 05       	cpc	r22, r1
    651a:	71 05       	cpc	r23, r1
    651c:	6c f1       	brlt	.+90     	; 0x6578 <MQTTSerialize_ack+0x7e>
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.bits.type = packettype;
    651e:	62 2f       	mov	r22, r18
    6520:	62 95       	swap	r22
    6522:	60 7f       	andi	r22, 0xF0	; 240
  header.bits.dup = dup;
    6524:	00 fb       	bst	r16, 0
    6526:	63 f9       	bld	r22, 3
  header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    6528:	91 e0       	ldi	r25, 0x01	; 1
    652a:	26 30       	cpi	r18, 0x06	; 6
    652c:	09 f0       	breq	.+2      	; 0x6530 <MQTTSerialize_ack+0x36>
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	8f 01       	movw	r16, r30
    6532:	93 70       	andi	r25, 0x03	; 3
    6534:	99 0f       	add	r25, r25
    6536:	69 7f       	andi	r22, 0xF9	; 249
    6538:	69 2b       	or	r22, r25
  writeChar(&ptr, header.byte); /* write header */
    653a:	ce 01       	movw	r24, r28
    653c:	01 96       	adiw	r24, 0x01	; 1
    653e:	aa dd       	rcall	.-1196   	; 0x6094 <writeChar>

  ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    6540:	42 e0       	ldi	r20, 0x02	; 2
    6542:	50 e0       	ldi	r21, 0x00	; 0
    6544:	60 e0       	ldi	r22, 0x00	; 0
    6546:	70 e0       	ldi	r23, 0x00	; 0
    6548:	89 81       	ldd	r24, Y+1	; 0x01
    654a:	9a 81       	ldd	r25, Y+2	; 0x02
    654c:	75 dc       	rcall	.-1814   	; 0x5e38 <MQTTPacket_encode>
    654e:	29 81       	ldd	r18, Y+1	; 0x01
    6550:	3a 81       	ldd	r19, Y+2	; 0x02
    6552:	62 0f       	add	r22, r18
    6554:	73 1f       	adc	r23, r19
    6556:	7a 83       	std	Y+2, r23	; 0x02
    6558:	69 83       	std	Y+1, r22	; 0x01
  writeInt(&ptr, packetid);
    655a:	a7 01       	movw	r20, r14
    655c:	60 e0       	ldi	r22, 0x00	; 0
    655e:	70 e0       	ldi	r23, 0x00	; 0
    6560:	ce 01       	movw	r24, r28
    6562:	01 96       	adiw	r24, 0x01	; 1
    6564:	a1 dd       	rcall	.-1214   	; 0x60a8 <writeInt>
  rc = ptr - buf;
    6566:	69 81       	ldd	r22, Y+1	; 0x01
    6568:	7a 81       	ldd	r23, Y+2	; 0x02
    656a:	60 1b       	sub	r22, r16
    656c:	71 0b       	sbc	r23, r17
    656e:	07 2e       	mov	r0, r23
    6570:	00 0c       	add	r0, r0
    6572:	88 0b       	sbc	r24, r24
    6574:	99 0b       	sbc	r25, r25
    6576:	04 c0       	rjmp	.+8      	; 0x6580 <MQTTSerialize_ack+0x86>

  FUNC_ENTRY;

  if (buflen < 4)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    6578:	6e ef       	ldi	r22, 0xFE	; 254
    657a:	7f ef       	ldi	r23, 0xFF	; 255
    657c:	8f ef       	ldi	r24, 0xFF	; 255
    657e:	9f ef       	ldi	r25, 0xFF	; 255
  writeInt(&ptr, packetid);
  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    6580:	0f 90       	pop	r0
    6582:	0f 90       	pop	r0
    6584:	df 91       	pop	r29
    6586:	cf 91       	pop	r28
    6588:	1f 91       	pop	r17
    658a:	0f 91       	pop	r16
    658c:	ff 90       	pop	r15
    658e:	ef 90       	pop	r14
    6590:	08 95       	ret

00006592 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
    6592:	4f 92       	push	r4
    6594:	5f 92       	push	r5
    6596:	6f 92       	push	r6
    6598:	7f 92       	push	r7
    659a:	8f 92       	push	r8
    659c:	9f 92       	push	r9
    659e:	af 92       	push	r10
    65a0:	bf 92       	push	r11
    65a2:	cf 92       	push	r12
    65a4:	df 92       	push	r13
    65a6:	ef 92       	push	r14
    65a8:	ff 92       	push	r15
    65aa:	cf 93       	push	r28
    65ac:	df 93       	push	r29
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    65ae:	16 16       	cp	r1, r22
    65b0:	17 06       	cpc	r1, r23
    65b2:	18 06       	cpc	r1, r24
    65b4:	19 06       	cpc	r1, r25
    65b6:	54 f5       	brge	.+84     	; 0x660c <MQTTSerialize_subscribeLength+0x7a>
    65b8:	2b 01       	movw	r4, r22
    65ba:	3c 01       	movw	r6, r24
    65bc:	c4 2f       	mov	r28, r20
    65be:	d5 2f       	mov	r29, r21
    65c0:	c1 2c       	mov	r12, r1
    65c2:	d1 2c       	mov	r13, r1
    65c4:	76 01       	movw	r14, r12
    65c6:	81 2c       	mov	r8, r1
    65c8:	91 2c       	mov	r9, r1
    65ca:	54 01       	movw	r10, r8
    65cc:	68 94       	set
    65ce:	81 f8       	bld	r8, 1
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    65d0:	28 81       	ld	r18, Y
    65d2:	39 81       	ldd	r19, Y+1	; 0x01
    65d4:	4a 81       	ldd	r20, Y+2	; 0x02
    65d6:	5b 81       	ldd	r21, Y+3	; 0x03
    65d8:	6c 81       	ldd	r22, Y+4	; 0x04
    65da:	7d 81       	ldd	r23, Y+5	; 0x05
    65dc:	8e 81       	ldd	r24, Y+6	; 0x06
    65de:	9f 81       	ldd	r25, Y+7	; 0x07
    65e0:	4a de       	rcall	.-876    	; 0x6276 <MQTTstrlen>
    65e2:	dc 01       	movw	r26, r24
    65e4:	cb 01       	movw	r24, r22
    65e6:	03 96       	adiw	r24, 0x03	; 3
    65e8:	a1 1d       	adc	r26, r1
    65ea:	b1 1d       	adc	r27, r1
    65ec:	88 0e       	add	r8, r24
    65ee:	99 1e       	adc	r9, r25
    65f0:	aa 1e       	adc	r10, r26
    65f2:	bb 1e       	adc	r11, r27
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */

  for (int32_t i = 0; i < count; ++i)
    65f4:	8f ef       	ldi	r24, 0xFF	; 255
    65f6:	c8 1a       	sub	r12, r24
    65f8:	d8 0a       	sbc	r13, r24
    65fa:	e8 0a       	sbc	r14, r24
    65fc:	f8 0a       	sbc	r15, r24
    65fe:	28 96       	adiw	r28, 0x08	; 8
    6600:	4c 14       	cp	r4, r12
    6602:	5d 04       	cpc	r5, r13
    6604:	6e 04       	cpc	r6, r14
    6606:	7f 04       	cpc	r7, r15
    6608:	19 f7       	brne	.-58     	; 0x65d0 <MQTTSerialize_subscribeLength+0x3e>
    660a:	05 c0       	rjmp	.+10     	; 0x6616 <MQTTSerialize_subscribeLength+0x84>
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int32_t MQTTSerialize_subscribeLength(int32_t count, MQTTString topicFilters[])
{
  int32_t len = 2; /* packetid */
    660c:	81 2c       	mov	r8, r1
    660e:	91 2c       	mov	r9, r1
    6610:	54 01       	movw	r10, r8
    6612:	68 94       	set
    6614:	81 f8       	bld	r8, 1

  for (int32_t i = 0; i < count; ++i)
    len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
	
  return len;
}
    6616:	c5 01       	movw	r24, r10
    6618:	b4 01       	movw	r22, r8
    661a:	df 91       	pop	r29
    661c:	cf 91       	pop	r28
    661e:	ff 90       	pop	r15
    6620:	ef 90       	pop	r14
    6622:	df 90       	pop	r13
    6624:	cf 90       	pop	r12
    6626:	bf 90       	pop	r11
    6628:	af 90       	pop	r10
    662a:	9f 90       	pop	r9
    662c:	8f 90       	pop	r8
    662e:	7f 90       	pop	r7
    6630:	6f 90       	pop	r6
    6632:	5f 90       	pop	r5
    6634:	4f 90       	pop	r4
    6636:	08 95       	ret

00006638 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int32_t MQTTSerialize_subscribe(uint8_t* buf, int32_t buflen, uint8_t dup, uint16_t packetid, int32_t count,
		MQTTString topicFilters[], int32_t requestedQoSs[])
{
    6638:	2f 92       	push	r2
    663a:	3f 92       	push	r3
    663c:	4f 92       	push	r4
    663e:	5f 92       	push	r5
    6640:	6f 92       	push	r6
    6642:	7f 92       	push	r7
    6644:	8f 92       	push	r8
    6646:	9f 92       	push	r9
    6648:	af 92       	push	r10
    664a:	bf 92       	push	r11
    664c:	cf 92       	push	r12
    664e:	df 92       	push	r13
    6650:	ef 92       	push	r14
    6652:	ff 92       	push	r15
    6654:	0f 93       	push	r16
    6656:	1f 93       	push	r17
    6658:	cf 93       	push	r28
    665a:	df 93       	push	r29
    665c:	cd b7       	in	r28, 0x3d	; 61
    665e:	de b7       	in	r29, 0x3e	; 62
    6660:	28 97       	sbiw	r28, 0x08	; 8
    6662:	0f b6       	in	r0, 0x3f	; 63
    6664:	f8 94       	cli
    6666:	de bf       	out	0x3e, r29	; 62
    6668:	0f be       	out	0x3f, r0	; 63
    666a:	cd bf       	out	0x3d, r28	; 61
    666c:	9c 83       	std	Y+4, r25	; 0x04
    666e:	8b 83       	std	Y+3, r24	; 0x03
    6670:	4d 83       	std	Y+5, r20	; 0x05
    6672:	5e 83       	std	Y+6, r21	; 0x06
    6674:	6f 83       	std	Y+7, r22	; 0x07
    6676:	78 87       	std	Y+8, r23	; 0x08
    6678:	72 2e       	mov	r7, r18
    667a:	16 01       	movw	r2, r12
    667c:	27 01       	movw	r4, r14
  uint8_t *ptr = buf;
    667e:	9a 83       	std	Y+2, r25	; 0x02
    6680:	89 83       	std	Y+1, r24	; 0x01
  int32_t rem_len = 0;
  int32_t rc = 0;

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
    6682:	4a 2d       	mov	r20, r10
    6684:	5b 2d       	mov	r21, r11
    6686:	c7 01       	movw	r24, r14
    6688:	b6 01       	movw	r22, r12
    668a:	83 df       	rcall	.-250    	; 0x6592 <MQTTSerialize_subscribeLength>
    668c:	6b 01       	movw	r12, r22
    668e:	7c 01       	movw	r14, r24
    6690:	b0 dc       	rcall	.-1696   	; 0x5ff2 <MQTTPacket_len>
    6692:	2d 81       	ldd	r18, Y+5	; 0x05
    6694:	3e 81       	ldd	r19, Y+6	; 0x06
    6696:	4f 81       	ldd	r20, Y+7	; 0x07
    6698:	58 85       	ldd	r21, Y+8	; 0x08
    669a:	26 17       	cp	r18, r22
    669c:	37 07       	cpc	r19, r23
    669e:	48 07       	cpc	r20, r24
    66a0:	59 07       	cpc	r21, r25
    66a2:	0c f4       	brge	.+2      	; 0x66a6 <MQTTSerialize_subscribe+0x6e>
    66a4:	51 c0       	rjmp	.+162    	; 0x6748 <MQTTSerialize_subscribe+0x110>
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    goto exit;
  }

  header.byte = 0;
  header.bits.type = SUBSCRIBE;
    66a6:	60 e8       	ldi	r22, 0x80	; 128
  header.bits.dup = dup;
    66a8:	70 fa       	bst	r7, 0
    66aa:	63 f9       	bld	r22, 3
  header.bits.qos = 1;
    66ac:	69 7f       	andi	r22, 0xF9	; 249
    66ae:	62 60       	ori	r22, 0x02	; 2
  writeChar(&ptr, header.byte); /* write header */
    66b0:	ce 01       	movw	r24, r28
    66b2:	01 96       	adiw	r24, 0x01	; 1
    66b4:	ef dc       	rcall	.-1570   	; 0x6094 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    66b6:	b7 01       	movw	r22, r14
    66b8:	a6 01       	movw	r20, r12
    66ba:	89 81       	ldd	r24, Y+1	; 0x01
    66bc:	9a 81       	ldd	r25, Y+2	; 0x02
    66be:	bc db       	rcall	.-2184   	; 0x5e38 <MQTTPacket_encode>
    66c0:	29 81       	ldd	r18, Y+1	; 0x01
    66c2:	3a 81       	ldd	r19, Y+2	; 0x02
    66c4:	62 0f       	add	r22, r18
    66c6:	73 1f       	adc	r23, r19
    66c8:	7a 83       	std	Y+2, r23	; 0x02
    66ca:	69 83       	std	Y+1, r22	; 0x01

  writeInt(&ptr, packetid);
    66cc:	a8 01       	movw	r20, r16
    66ce:	60 e0       	ldi	r22, 0x00	; 0
    66d0:	70 e0       	ldi	r23, 0x00	; 0
    66d2:	ce 01       	movw	r24, r28
    66d4:	01 96       	adiw	r24, 0x01	; 1
    66d6:	e8 dc       	rcall	.-1584   	; 0x60a8 <writeInt>

  for (int32_t i = 0; i < count; ++i)
    66d8:	12 14       	cp	r1, r2
    66da:	13 04       	cpc	r1, r3
    66dc:	14 04       	cpc	r1, r4
    66de:	15 04       	cpc	r1, r5
    66e0:	44 f5       	brge	.+80     	; 0x6732 <MQTTSerialize_subscribe+0xfa>
    66e2:	ea 2c       	mov	r14, r10
    66e4:	fb 2c       	mov	r15, r11
    66e6:	68 2c       	mov	r6, r8
    66e8:	79 2c       	mov	r7, r9
    66ea:	81 2c       	mov	r8, r1
    66ec:	91 2c       	mov	r9, r1
    66ee:	54 01       	movw	r10, r8
  {
    writeMQTTString(&ptr, topicFilters[i]);
    66f0:	f7 01       	movw	r30, r14
    66f2:	00 81       	ld	r16, Z
    66f4:	11 81       	ldd	r17, Z+1	; 0x01
    66f6:	22 81       	ldd	r18, Z+2	; 0x02
    66f8:	33 81       	ldd	r19, Z+3	; 0x03
    66fa:	44 81       	ldd	r20, Z+4	; 0x04
    66fc:	55 81       	ldd	r21, Z+5	; 0x05
    66fe:	66 81       	ldd	r22, Z+6	; 0x06
    6700:	77 81       	ldd	r23, Z+7	; 0x07
    6702:	ce 01       	movw	r24, r28
    6704:	01 96       	adiw	r24, 0x01	; 1
    6706:	26 dd       	rcall	.-1460   	; 0x6154 <writeMQTTString>
    writeChar(&ptr, requestedQoSs[i]);
    6708:	f3 01       	movw	r30, r6
    670a:	60 81       	ld	r22, Z
    670c:	f4 e0       	ldi	r31, 0x04	; 4
    670e:	6f 0e       	add	r6, r31
    6710:	71 1c       	adc	r7, r1
    6712:	ce 01       	movw	r24, r28
    6714:	01 96       	adiw	r24, 0x01	; 1
    6716:	be dc       	rcall	.-1668   	; 0x6094 <writeChar>

  ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;

  writeInt(&ptr, packetid);

  for (int32_t i = 0; i < count; ++i)
    6718:	2f ef       	ldi	r18, 0xFF	; 255
    671a:	82 1a       	sub	r8, r18
    671c:	92 0a       	sbc	r9, r18
    671e:	a2 0a       	sbc	r10, r18
    6720:	b2 0a       	sbc	r11, r18
    6722:	38 e0       	ldi	r19, 0x08	; 8
    6724:	e3 0e       	add	r14, r19
    6726:	f1 1c       	adc	r15, r1
    6728:	28 14       	cp	r2, r8
    672a:	39 04       	cpc	r3, r9
    672c:	4a 04       	cpc	r4, r10
    672e:	5b 04       	cpc	r5, r11
    6730:	f9 f6       	brne	.-66     	; 0x66f0 <MQTTSerialize_subscribe+0xb8>
  {
    writeMQTTString(&ptr, topicFilters[i]);
    writeChar(&ptr, requestedQoSs[i]);
  }

  rc = ptr - buf;
    6732:	69 81       	ldd	r22, Y+1	; 0x01
    6734:	7a 81       	ldd	r23, Y+2	; 0x02
    6736:	4b 81       	ldd	r20, Y+3	; 0x03
    6738:	5c 81       	ldd	r21, Y+4	; 0x04
    673a:	64 1b       	sub	r22, r20
    673c:	75 0b       	sbc	r23, r21
    673e:	07 2e       	mov	r0, r23
    6740:	00 0c       	add	r0, r0
    6742:	88 0b       	sbc	r24, r24
    6744:	99 0b       	sbc	r25, r25
    6746:	04 c0       	rjmp	.+8      	; 0x6750 <MQTTSerialize_subscribe+0x118>

  FUNC_ENTRY;

  if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
  {
    rc = MQTTPACKET_BUFFER_TOO_SHORT;
    6748:	6e ef       	ldi	r22, 0xFE	; 254
    674a:	7f ef       	ldi	r23, 0xFF	; 255
    674c:	8f ef       	ldi	r24, 0xFF	; 255
    674e:	9f ef       	ldi	r25, 0xFF	; 255

  rc = ptr - buf;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    6750:	28 96       	adiw	r28, 0x08	; 8
    6752:	0f b6       	in	r0, 0x3f	; 63
    6754:	f8 94       	cli
    6756:	de bf       	out	0x3e, r29	; 62
    6758:	0f be       	out	0x3f, r0	; 63
    675a:	cd bf       	out	0x3d, r28	; 61
    675c:	df 91       	pop	r29
    675e:	cf 91       	pop	r28
    6760:	1f 91       	pop	r17
    6762:	0f 91       	pop	r16
    6764:	ff 90       	pop	r15
    6766:	ef 90       	pop	r14
    6768:	df 90       	pop	r13
    676a:	cf 90       	pop	r12
    676c:	bf 90       	pop	r11
    676e:	af 90       	pop	r10
    6770:	9f 90       	pop	r9
    6772:	8f 90       	pop	r8
    6774:	7f 90       	pop	r7
    6776:	6f 90       	pop	r6
    6778:	5f 90       	pop	r5
    677a:	4f 90       	pop	r4
    677c:	3f 90       	pop	r3
    677e:	2f 90       	pop	r2
    6780:	08 95       	ret

00006782 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
    6782:	4f 92       	push	r4
    6784:	5f 92       	push	r5
    6786:	6f 92       	push	r6
    6788:	7f 92       	push	r7
    678a:	8f 92       	push	r8
    678c:	9f 92       	push	r9
    678e:	af 92       	push	r10
    6790:	bf 92       	push	r11
    6792:	cf 92       	push	r12
    6794:	df 92       	push	r13
    6796:	ef 92       	push	r14
    6798:	ff 92       	push	r15
    679a:	0f 93       	push	r16
    679c:	1f 93       	push	r17
    679e:	cf 93       	push	r28
    67a0:	df 93       	push	r29
    67a2:	00 d0       	rcall	.+0      	; 0x67a4 <MQTTDeserialize_suback+0x22>
    67a4:	00 d0       	rcall	.+0      	; 0x67a6 <MQTTDeserialize_suback+0x24>
    67a6:	cd b7       	in	r28, 0x3d	; 61
    67a8:	de b7       	in	r29, 0x3e	; 62
    67aa:	4c 01       	movw	r8, r24
    67ac:	2a 01       	movw	r4, r20
    67ae:	3b 01       	movw	r6, r22
    67b0:	69 01       	movw	r12, r18
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
    67b2:	fa 82       	std	Y+2, r15	; 0x02
    67b4:	e9 82       	std	Y+1, r14	; 0x01
  int32_t rc = 0;
  int32_t mylen;

  FUNC_ENTRY;

  header.byte = readChar(&curdata);
    67b6:	ce 01       	movw	r24, r28
    67b8:	01 96       	adiw	r24, 0x01	; 1
    67ba:	64 dc       	rcall	.-1848   	; 0x6084 <readChar>
  if (header.bits.type != SUBACK)
    67bc:	80 7f       	andi	r24, 0xF0	; 240
    67be:	80 39       	cpi	r24, 0x90	; 144
    67c0:	09 f0       	breq	.+2      	; 0x67c4 <MQTTDeserialize_suback+0x42>
    67c2:	5e c0       	rjmp	.+188    	; 0x6880 <MQTTDeserialize_suback+0xfe>
    goto exit;

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    67c4:	be 01       	movw	r22, r28
    67c6:	6d 5f       	subi	r22, 0xFD	; 253
    67c8:	7f 4f       	sbci	r23, 0xFF	; 255
    67ca:	89 81       	ldd	r24, Y+1	; 0x01
    67cc:	9a 81       	ldd	r25, Y+2	; 0x02
    67ce:	3f dc       	rcall	.-1922   	; 0x604e <MQTTPacket_decodeBuf>
    67d0:	a9 80       	ldd	r10, Y+1	; 0x01
    67d2:	ba 80       	ldd	r11, Y+2	; 0x02
    67d4:	a6 0e       	add	r10, r22
    67d6:	b7 1e       	adc	r11, r23
    67d8:	ba 82       	std	Y+2, r11	; 0x02
    67da:	a9 82       	std	Y+1, r10	; 0x01
  enddata = curdata + mylen;
    67dc:	2b 81       	ldd	r18, Y+3	; 0x03
    67de:	3c 81       	ldd	r19, Y+4	; 0x04
    67e0:	4d 81       	ldd	r20, Y+5	; 0x05
    67e2:	5e 81       	ldd	r21, Y+6	; 0x06

  if (enddata - curdata < 2)
    67e4:	22 30       	cpi	r18, 0x02	; 2
    67e6:	31 05       	cpc	r19, r1
    67e8:	0c f4       	brge	.+2      	; 0x67ec <MQTTDeserialize_suback+0x6a>
    67ea:	5a c0       	rjmp	.+180    	; 0x68a0 <MQTTDeserialize_suback+0x11e>
  header.byte = readChar(&curdata);
  if (header.bits.type != SUBACK)
    goto exit;

  curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
  enddata = curdata + mylen;
    67ec:	a2 0e       	add	r10, r18
    67ee:	b3 1e       	adc	r11, r19

  if (enddata - curdata < 2)
    goto exit;

  *packetid = readInt(&curdata);
    67f0:	ce 01       	movw	r24, r28
    67f2:	01 96       	adiw	r24, 0x01	; 1
    67f4:	34 dc       	rcall	.-1944   	; 0x605e <readInt>
    67f6:	f4 01       	movw	r30, r8
    67f8:	71 83       	std	Z+1, r23	; 0x01
    67fa:	60 83       	st	Z, r22

  *count = 0;
    67fc:	f6 01       	movw	r30, r12
    67fe:	10 82       	st	Z, r1
    6800:	11 82       	std	Z+1, r1	; 0x01
    6802:	12 82       	std	Z+2, r1	; 0x02
    6804:	13 82       	std	Z+3, r1	; 0x03

  while (curdata < enddata)
    6806:	89 81       	ldd	r24, Y+1	; 0x01
    6808:	9a 81       	ldd	r25, Y+2	; 0x02
    680a:	8a 15       	cp	r24, r10
    680c:	9b 05       	cpc	r25, r11
    680e:	e0 f5       	brcc	.+120    	; 0x6888 <MQTTDeserialize_suback+0x106>
  {
    if (*count > maxcount)
    6810:	77 20       	and	r7, r7
    6812:	0c f4       	brge	.+2      	; 0x6816 <MQTTDeserialize_suback+0x94>
    6814:	3e c0       	rjmp	.+124    	; 0x6892 <MQTTDeserialize_suback+0x110>
    6816:	80 e0       	ldi	r24, 0x00	; 0
    6818:	90 e0       	ldi	r25, 0x00	; 0
    681a:	dc 01       	movw	r26, r24
    681c:	0a c0       	rjmp	.+20     	; 0x6832 <MQTTDeserialize_suback+0xb0>
    681e:	f6 01       	movw	r30, r12
    6820:	80 81       	ld	r24, Z
    6822:	91 81       	ldd	r25, Z+1	; 0x01
    6824:	a2 81       	ldd	r26, Z+2	; 0x02
    6826:	b3 81       	ldd	r27, Z+3	; 0x03
    6828:	48 16       	cp	r4, r24
    682a:	59 06       	cpc	r5, r25
    682c:	6a 06       	cpc	r6, r26
    682e:	7b 06       	cpc	r7, r27
    6830:	a4 f1       	brlt	.+104    	; 0x689a <MQTTDeserialize_suback+0x118>
    {
      rc = -1;
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
    6832:	ac 01       	movw	r20, r24
    6834:	bd 01       	movw	r22, r26
    6836:	4f 5f       	subi	r20, 0xFF	; 255
    6838:	5f 4f       	sbci	r21, 0xFF	; 255
    683a:	6f 4f       	sbci	r22, 0xFF	; 255
    683c:	7f 4f       	sbci	r23, 0xFF	; 255
    683e:	f6 01       	movw	r30, r12
    6840:	40 83       	st	Z, r20
    6842:	51 83       	std	Z+1, r21	; 0x01
    6844:	62 83       	std	Z+2, r22	; 0x02
    6846:	73 83       	std	Z+3, r23	; 0x03
    6848:	88 0f       	add	r24, r24
    684a:	99 1f       	adc	r25, r25
    684c:	88 0f       	add	r24, r24
    684e:	99 1f       	adc	r25, r25
    6850:	78 01       	movw	r14, r16
    6852:	e8 0e       	add	r14, r24
    6854:	f9 1e       	adc	r15, r25
    6856:	ce 01       	movw	r24, r28
    6858:	01 96       	adiw	r24, 0x01	; 1
    685a:	14 dc       	rcall	.-2008   	; 0x6084 <readChar>
    685c:	90 e0       	ldi	r25, 0x00	; 0
    685e:	a0 e0       	ldi	r26, 0x00	; 0
    6860:	b0 e0       	ldi	r27, 0x00	; 0
    6862:	f7 01       	movw	r30, r14
    6864:	80 83       	st	Z, r24
    6866:	91 83       	std	Z+1, r25	; 0x01
    6868:	a2 83       	std	Z+2, r26	; 0x02
    686a:	b3 83       	std	Z+3, r27	; 0x03

  *packetid = readInt(&curdata);

  *count = 0;

  while (curdata < enddata)
    686c:	89 81       	ldd	r24, Y+1	; 0x01
    686e:	9a 81       	ldd	r25, Y+2	; 0x02
    6870:	8a 15       	cp	r24, r10
    6872:	9b 05       	cpc	r25, r11
    6874:	a0 f2       	brcs	.-88     	; 0x681e <MQTTDeserialize_suback+0x9c>
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
  }

  rc = 1;
    6876:	61 e0       	ldi	r22, 0x01	; 1
    6878:	70 e0       	ldi	r23, 0x00	; 0
    687a:	80 e0       	ldi	r24, 0x00	; 0
    687c:	90 e0       	ldi	r25, 0x00	; 0
    687e:	10 c0       	rjmp	.+32     	; 0x68a0 <MQTTDeserialize_suback+0x11e>
int32_t MQTTDeserialize_suback(uint16_t* packetid, int32_t maxcount, int32_t* count, int32_t grantedQoSs[], uint8_t* buf, int32_t buflen)
{
  MQTTHeader header = {0};
  uint8_t* curdata = buf;
  uint8_t* enddata = NULL;
  int32_t rc = 0;
    6880:	60 e0       	ldi	r22, 0x00	; 0
    6882:	70 e0       	ldi	r23, 0x00	; 0
    6884:	cb 01       	movw	r24, r22
    6886:	0c c0       	rjmp	.+24     	; 0x68a0 <MQTTDeserialize_suback+0x11e>
      goto exit;
    }
    grantedQoSs[(*count)++] = readChar(&curdata);
  }

  rc = 1;
    6888:	61 e0       	ldi	r22, 0x01	; 1
    688a:	70 e0       	ldi	r23, 0x00	; 0
    688c:	80 e0       	ldi	r24, 0x00	; 0
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	07 c0       	rjmp	.+14     	; 0x68a0 <MQTTDeserialize_suback+0x11e>

  while (curdata < enddata)
  {
    if (*count > maxcount)
    {
      rc = -1;
    6892:	6f ef       	ldi	r22, 0xFF	; 255
    6894:	7f ef       	ldi	r23, 0xFF	; 255
    6896:	cb 01       	movw	r24, r22
    6898:	03 c0       	rjmp	.+6      	; 0x68a0 <MQTTDeserialize_suback+0x11e>
    689a:	6f ef       	ldi	r22, 0xFF	; 255
    689c:	7f ef       	ldi	r23, 0xFF	; 255
    689e:	cb 01       	movw	r24, r22

  rc = 1;
exit:
  FUNC_EXIT_RC(rc);
  return rc;
}
    68a0:	26 96       	adiw	r28, 0x06	; 6
    68a2:	0f b6       	in	r0, 0x3f	; 63
    68a4:	f8 94       	cli
    68a6:	de bf       	out	0x3e, r29	; 62
    68a8:	0f be       	out	0x3f, r0	; 63
    68aa:	cd bf       	out	0x3d, r28	; 61
    68ac:	df 91       	pop	r29
    68ae:	cf 91       	pop	r28
    68b0:	1f 91       	pop	r17
    68b2:	0f 91       	pop	r16
    68b4:	ff 90       	pop	r15
    68b6:	ef 90       	pop	r14
    68b8:	df 90       	pop	r13
    68ba:	cf 90       	pop	r12
    68bc:	bf 90       	pop	r11
    68be:	af 90       	pop	r10
    68c0:	9f 90       	pop	r9
    68c2:	8f 90       	pop	r8
    68c4:	7f 90       	pop	r7
    68c6:	6f 90       	pop	r6
    68c8:	5f 90       	pop	r5
    68ca:	4f 90       	pop	r4
    68cc:	08 95       	ret

000068ce <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    68ce:	e6 e5       	ldi	r30, 0x56	; 86
    68d0:	f4 e2       	ldi	r31, 0x24	; 36
    68d2:	14 82       	std	Z+4, r1	; 0x04
    68d4:	15 82       	std	Z+5, r1	; 0x05
    68d6:	11 82       	std	Z+1, r1	; 0x01
    68d8:	10 82       	st	Z, r1
    68da:	17 a2       	std	Z+39, r1	; 0x27
    68dc:	16 a2       	std	Z+38, r1	; 0x26
    68de:	ec e5       	ldi	r30, 0x5C	; 92
    68e0:	f4 e2       	ldi	r31, 0x24	; 36
    68e2:	8c e7       	ldi	r24, 0x7C	; 124
    68e4:	94 e2       	ldi	r25, 0x24	; 36
    68e6:	11 92       	st	Z+, r1
    68e8:	11 92       	st	Z+, r1
    68ea:	e8 17       	cp	r30, r24
    68ec:	f9 07       	cpc	r31, r25
    68ee:	d9 f7       	brne	.-10     	; 0x68e6 <NWK_Init+0x18>
    68f0:	42 d6       	rcall	.+3204   	; 0x7576 <nwkTxInit>
    68f2:	60 d3       	rcall	.+1728   	; 0x6fb4 <nwkRxInit>
    68f4:	0d d1       	rcall	.+538    	; 0x6b10 <nwkFrameInit>
    68f6:	40 d0       	rcall	.+128    	; 0x6978 <nwkDataReqInit>
    68f8:	92 c1       	rjmp	.+804    	; 0x6c1e <nwkRouteInit>
    68fa:	08 95       	ret

000068fc <NWK_SetAddr>:
    68fc:	90 93 57 24 	sts	0x2457, r25	; 0x802457 <nwkIb+0x1>
    6900:	80 93 56 24 	sts	0x2456, r24	; 0x802456 <nwkIb>
    6904:	0c 94 bf 3c 	jmp	0x797e	; 0x797e <PHY_SetShortAddr>
    6908:	08 95       	ret

0000690a <NWK_SetPanId>:
    690a:	90 93 59 24 	sts	0x2459, r25	; 0x802459 <nwkIb+0x3>
    690e:	80 93 58 24 	sts	0x2458, r24	; 0x802458 <nwkIb+0x2>
    6912:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <PHY_SetPanId>
    6916:	08 95       	ret

00006918 <NWK_OpenEndpoint>:
    6918:	e8 2f       	mov	r30, r24
    691a:	f0 e0       	ldi	r31, 0x00	; 0
    691c:	ee 0f       	add	r30, r30
    691e:	ff 1f       	adc	r31, r31
    6920:	e4 5a       	subi	r30, 0xA4	; 164
    6922:	fb 4d       	sbci	r31, 0xDB	; 219
    6924:	71 83       	std	Z+1, r23	; 0x01
    6926:	60 83       	st	Z, r22
    6928:	08 95       	ret

0000692a <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    692a:	8b d3       	rcall	.+1814   	; 0x7042 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    692c:	20 d7       	rcall	.+3648   	; 0x776e <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    692e:	4d c0       	rjmp	.+154    	; 0x69ca <nwkDataReqTaskHandler>
    6930:	08 95       	ret

00006932 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    6932:	e0 91 31 08 	lds	r30, 0x0831	; 0x800831 <nwkDataReqQueue>
    6936:	f0 91 32 08 	lds	r31, 0x0832	; 0x800832 <nwkDataReqQueue+0x1>
    693a:	30 97       	sbiw	r30, 0x00	; 0
    693c:	d9 f0       	breq	.+54     	; 0x6974 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
    693e:	22 81       	ldd	r18, Z+2	; 0x02
    6940:	33 81       	ldd	r19, Z+3	; 0x03
    6942:	82 17       	cp	r24, r18
    6944:	93 07       	cpc	r25, r19
    6946:	89 f4       	brne	.+34     	; 0x696a <nwkDataReqTxConf+0x38>
    6948:	05 c0       	rjmp	.+10     	; 0x6954 <nwkDataReqTxConf+0x22>
    694a:	22 81       	ldd	r18, Z+2	; 0x02
    694c:	33 81       	ldd	r19, Z+3	; 0x03
    694e:	28 17       	cp	r18, r24
    6950:	39 07       	cpc	r19, r25
    6952:	59 f4       	brne	.+22     	; 0x696a <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
    6954:	dc 01       	movw	r26, r24
    6956:	ad 57       	subi	r26, 0x7D	; 125
    6958:	bf 4f       	sbci	r27, 0xFF	; 255
    695a:	2c 91       	ld	r18, X
    695c:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    695e:	13 96       	adiw	r26, 0x03	; 3
    6960:	2c 91       	ld	r18, X
    6962:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    6964:	22 e0       	ldi	r18, 0x02	; 2
    6966:	24 83       	std	Z+4, r18	; 0x04
      break;
    6968:	05 c0       	rjmp	.+10     	; 0x6974 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    696a:	01 90       	ld	r0, Z+
    696c:	f0 81       	ld	r31, Z
    696e:	e0 2d       	mov	r30, r0
    6970:	30 97       	sbiw	r30, 0x00	; 0
    6972:	59 f7       	brne	.-42     	; 0x694a <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    6974:	11 c1       	rjmp	.+546    	; 0x6b98 <nwkFrameFree>
    6976:	08 95       	ret

00006978 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    6978:	10 92 32 08 	sts	0x0832, r1	; 0x800832 <nwkDataReqQueue+0x1>
    697c:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <nwkDataReqQueue>
    6980:	08 95       	ret

00006982 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    6982:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    6984:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    6986:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    6988:	13 82       	std	Z+3, r1	; 0x03
    698a:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    698c:	a6 e5       	ldi	r26, 0x56	; 86
    698e:	b4 e2       	ldi	r27, 0x24	; 36
    6990:	96 96       	adiw	r26, 0x26	; 38
    6992:	8d 91       	ld	r24, X+
    6994:	9c 91       	ld	r25, X
    6996:	97 97       	sbiw	r26, 0x27	; 39
    6998:	01 96       	adiw	r24, 0x01	; 1
    699a:	97 96       	adiw	r26, 0x27	; 39
    699c:	9c 93       	st	X, r25
    699e:	8e 93       	st	-X, r24
    69a0:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    69a2:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <nwkDataReqQueue>
    69a6:	90 91 32 08 	lds	r25, 0x0832	; 0x800832 <nwkDataReqQueue+0x1>
    69aa:	00 97       	sbiw	r24, 0x00	; 0
    69ac:	39 f4       	brne	.+14     	; 0x69bc <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    69ae:	11 82       	std	Z+1, r1	; 0x01
    69b0:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    69b2:	f0 93 32 08 	sts	0x0832, r31	; 0x800832 <nwkDataReqQueue+0x1>
    69b6:	e0 93 31 08 	sts	0x0831, r30	; 0x800831 <nwkDataReqQueue>
    69ba:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    69bc:	91 83       	std	Z+1, r25	; 0x01
    69be:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    69c0:	f0 93 32 08 	sts	0x0832, r31	; 0x800832 <nwkDataReqQueue+0x1>
    69c4:	e0 93 31 08 	sts	0x0831, r30	; 0x800831 <nwkDataReqQueue>
    69c8:	08 95       	ret

000069ca <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    69ca:	0f 93       	push	r16
    69cc:	1f 93       	push	r17
    69ce:	cf 93       	push	r28
    69d0:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    69d2:	e0 91 31 08 	lds	r30, 0x0831	; 0x800831 <nwkDataReqQueue>
    69d6:	f0 91 32 08 	lds	r31, 0x0832	; 0x800832 <nwkDataReqQueue+0x1>
    69da:	30 97       	sbiw	r30, 0x00	; 0
    69dc:	09 f4       	brne	.+2      	; 0x69e0 <nwkDataReqTaskHandler+0x16>
    69de:	93 c0       	rjmp	.+294    	; 0x6b06 <nwkDataReqTaskHandler+0x13c>
    69e0:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    69e2:	8c 81       	ldd	r24, Y+4	; 0x04
    69e4:	88 23       	and	r24, r24
    69e6:	21 f0       	breq	.+8      	; 0x69f0 <nwkDataReqTaskHandler+0x26>
    69e8:	82 30       	cpi	r24, 0x02	; 2
    69ea:	09 f4       	brne	.+2      	; 0x69ee <nwkDataReqTaskHandler+0x24>
    69ec:	66 c0       	rjmp	.+204    	; 0x6aba <nwkDataReqTaskHandler+0xf0>
    69ee:	85 c0       	rjmp	.+266    	; 0x6afa <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    69f0:	9a d0       	rcall	.+308    	; 0x6b26 <nwkFrameAlloc>
    69f2:	8c 01       	movw	r16, r24
    69f4:	00 97       	sbiw	r24, 0x00	; 0
    69f6:	21 f4       	brne	.+8      	; 0x6a00 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    69f8:	82 e0       	ldi	r24, 0x02	; 2
    69fa:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    69fc:	8f 87       	std	Y+15, r24	; 0x0f
    69fe:	83 c0       	rjmp	.+262    	; 0x6b06 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
    6a00:	9b 83       	std	Y+3, r25	; 0x03
    6a02:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    6a04:	81 e0       	ldi	r24, 0x01	; 1
    6a06:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    6a08:	f8 01       	movw	r30, r16
    6a0a:	e9 57       	subi	r30, 0x79	; 121
    6a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    6a0e:	89 e9       	ldi	r24, 0x99	; 153
    6a10:	94 e3       	ldi	r25, 0x34	; 52
    6a12:	91 83       	std	Z+1, r25	; 0x01
    6a14:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    6a16:	31 97       	sbiw	r30, 0x01	; 1
    6a18:	89 85       	ldd	r24, Y+9	; 0x09
    6a1a:	82 fb       	bst	r24, 2
    6a1c:	88 27       	eor	r24, r24
    6a1e:	80 f9       	bld	r24, 0
    6a20:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    6a22:	99 85       	ldd	r25, Y+9	; 0x09
    6a24:	d8 01       	movw	r26, r16
    6a26:	1b 96       	adiw	r26, 0x0b	; 11
    6a28:	8c 91       	ld	r24, X
    6a2a:	1b 97       	sbiw	r26, 0x0b	; 11
    6a2c:	90 fb       	bst	r25, 0
    6a2e:	80 f9       	bld	r24, 0
    6a30:	1b 96       	adiw	r26, 0x0b	; 11
    6a32:	8c 93       	st	X, r24
    6a34:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    6a36:	99 85       	ldd	r25, Y+9	; 0x09
    6a38:	93 fb       	bst	r25, 3
    6a3a:	99 27       	eor	r25, r25
    6a3c:	90 f9       	bld	r25, 0
    6a3e:	90 fb       	bst	r25, 0
    6a40:	82 f9       	bld	r24, 2
    6a42:	1b 96       	adiw	r26, 0x0b	; 11
    6a44:	8c 93       	st	X, r24
    6a46:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    6a48:	e6 e5       	ldi	r30, 0x56	; 86
    6a4a:	f4 e2       	ldi	r31, 0x24	; 36
    6a4c:	84 81       	ldd	r24, Z+4	; 0x04
    6a4e:	8f 5f       	subi	r24, 0xFF	; 255
    6a50:	84 83       	std	Z+4, r24	; 0x04
    6a52:	1c 96       	adiw	r26, 0x0c	; 12
    6a54:	8c 93       	st	X, r24
    6a56:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    6a58:	80 81       	ld	r24, Z
    6a5a:	91 81       	ldd	r25, Z+1	; 0x01
    6a5c:	1e 96       	adiw	r26, 0x0e	; 14
    6a5e:	9c 93       	st	X, r25
    6a60:	8e 93       	st	-X, r24
    6a62:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    6a64:	8d 81       	ldd	r24, Y+5	; 0x05
    6a66:	9e 81       	ldd	r25, Y+6	; 0x06
    6a68:	50 96       	adiw	r26, 0x10	; 16
    6a6a:	9c 93       	st	X, r25
    6a6c:	8e 93       	st	-X, r24
    6a6e:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    6a70:	88 85       	ldd	r24, Y+8	; 0x08
    6a72:	98 2f       	mov	r25, r24
    6a74:	9f 70       	andi	r25, 0x0F	; 15
    6a76:	51 96       	adiw	r26, 0x11	; 17
    6a78:	8c 91       	ld	r24, X
    6a7a:	51 97       	sbiw	r26, 0x11	; 17
    6a7c:	80 7f       	andi	r24, 0xF0	; 240
    6a7e:	89 2b       	or	r24, r25
    6a80:	51 96       	adiw	r26, 0x11	; 17
    6a82:	8c 93       	st	X, r24
    6a84:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    6a86:	9f 81       	ldd	r25, Y+7	; 0x07
    6a88:	92 95       	swap	r25
    6a8a:	90 7f       	andi	r25, 0xF0	; 240
    6a8c:	8f 70       	andi	r24, 0x0F	; 15
    6a8e:	89 2b       	or	r24, r25
    6a90:	51 96       	adiw	r26, 0x11	; 17
    6a92:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    6a94:	f8 01       	movw	r30, r16
    6a96:	ef 57       	subi	r30, 0x7F	; 127
    6a98:	ff 4f       	sbci	r31, 0xFF	; 255
    6a9a:	4c 85       	ldd	r20, Y+12	; 0x0c
    6a9c:	50 e0       	ldi	r21, 0x00	; 0
    6a9e:	6a 85       	ldd	r22, Y+10	; 0x0a
    6aa0:	7b 85       	ldd	r23, Y+11	; 0x0b
    6aa2:	80 81       	ld	r24, Z
    6aa4:	91 81       	ldd	r25, Z+1	; 0x01
    6aa6:	0e 94 54 3f 	call	0x7ea8	; 0x7ea8 <memcpy>
  frame->size += req->size;
    6aaa:	f8 01       	movw	r30, r16
    6aac:	91 81       	ldd	r25, Z+1	; 0x01
    6aae:	8c 85       	ldd	r24, Y+12	; 0x0c
    6ab0:	89 0f       	add	r24, r25
    6ab2:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    6ab4:	c8 01       	movw	r24, r16
    6ab6:	82 d5       	rcall	.+2820   	; 0x75bc <nwkTxFrame>
    6ab8:	26 c0       	rjmp	.+76     	; 0x6b06 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    6aba:	ec 17       	cp	r30, r28
    6abc:	fd 07       	cpc	r31, r29
    6abe:	41 f4       	brne	.+16     	; 0x6ad0 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    6ac0:	80 81       	ld	r24, Z
    6ac2:	91 81       	ldd	r25, Z+1	; 0x01
    6ac4:	90 93 32 08 	sts	0x0832, r25	; 0x800832 <nwkDataReqQueue+0x1>
    6ac8:	80 93 31 08 	sts	0x0831, r24	; 0x800831 <nwkDataReqQueue>
    6acc:	0a c0       	rjmp	.+20     	; 0x6ae2 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    6ace:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    6ad0:	80 81       	ld	r24, Z
    6ad2:	91 81       	ldd	r25, Z+1	; 0x01
    6ad4:	8c 17       	cp	r24, r28
    6ad6:	9d 07       	cpc	r25, r29
    6ad8:	d1 f7       	brne	.-12     	; 0x6ace <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    6ada:	88 81       	ld	r24, Y
    6adc:	99 81       	ldd	r25, Y+1	; 0x01
    6ade:	91 83       	std	Z+1, r25	; 0x01
    6ae0:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    6ae2:	e6 e5       	ldi	r30, 0x56	; 86
    6ae4:	f4 e2       	ldi	r31, 0x24	; 36
    6ae6:	86 a1       	ldd	r24, Z+38	; 0x26
    6ae8:	97 a1       	ldd	r25, Z+39	; 0x27
    6aea:	01 97       	sbiw	r24, 0x01	; 1
    6aec:	97 a3       	std	Z+39, r25	; 0x27
    6aee:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
    6af0:	ed 85       	ldd	r30, Y+13	; 0x0d
    6af2:	fe 85       	ldd	r31, Y+14	; 0x0e
    6af4:	ce 01       	movw	r24, r28
    6af6:	19 95       	eicall
    6af8:	06 c0       	rjmp	.+12     	; 0x6b06 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    6afa:	09 90       	ld	r0, Y+
    6afc:	d8 81       	ld	r29, Y
    6afe:	c0 2d       	mov	r28, r0
    6b00:	20 97       	sbiw	r28, 0x00	; 0
    6b02:	09 f0       	breq	.+2      	; 0x6b06 <nwkDataReqTaskHandler+0x13c>
    6b04:	6e cf       	rjmp	.-292    	; 0x69e2 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    6b06:	df 91       	pop	r29
    6b08:	cf 91       	pop	r28
    6b0a:	1f 91       	pop	r17
    6b0c:	0f 91       	pop	r16
    6b0e:	08 95       	ret

00006b10 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    6b10:	e3 e3       	ldi	r30, 0x33	; 51
    6b12:	f8 e0       	ldi	r31, 0x08	; 8
    6b14:	81 e4       	ldi	r24, 0x41	; 65
    6b16:	98 e1       	ldi	r25, 0x18	; 24
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    6b18:	10 82       	st	Z, r1
    6b1a:	e7 57       	subi	r30, 0x77	; 119
    6b1c:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    6b1e:	e8 17       	cp	r30, r24
    6b20:	f9 07       	cpc	r31, r25
    6b22:	d1 f7       	brne	.-12     	; 0x6b18 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    6b24:	08 95       	ret

00006b26 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    6b26:	80 91 33 08 	lds	r24, 0x0833	; 0x800833 <nwkFrameFrames>
    6b2a:	88 23       	and	r24, r24
    6b2c:	59 f0       	breq	.+22     	; 0x6b44 <nwkFrameAlloc+0x1e>
    6b2e:	ec eb       	ldi	r30, 0xBC	; 188
    6b30:	f8 e0       	ldi	r31, 0x08	; 8
    6b32:	61 e4       	ldi	r22, 0x41	; 65
    6b34:	78 e1       	ldi	r23, 0x18	; 24
    6b36:	81 e0       	ldi	r24, 0x01	; 1
    6b38:	90 e0       	ldi	r25, 0x00	; 0
    6b3a:	ac 01       	movw	r20, r24
    6b3c:	20 81       	ld	r18, Z
    6b3e:	21 11       	cpse	r18, r1
    6b40:	22 c0       	rjmp	.+68     	; 0x6b86 <nwkFrameAlloc+0x60>
    6b42:	02 c0       	rjmp	.+4      	; 0x6b48 <nwkFrameAlloc+0x22>
    6b44:	40 e0       	ldi	r20, 0x00	; 0
    6b46:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    6b48:	69 e8       	ldi	r22, 0x89	; 137
    6b4a:	64 9f       	mul	r22, r20
    6b4c:	90 01       	movw	r18, r0
    6b4e:	65 9f       	mul	r22, r21
    6b50:	30 0d       	add	r19, r0
    6b52:	11 24       	eor	r1, r1
    6b54:	c9 01       	movw	r24, r18
    6b56:	8d 5c       	subi	r24, 0xCD	; 205
    6b58:	97 4f       	sbci	r25, 0xF7	; 247
    6b5a:	fc 01       	movw	r30, r24
    6b5c:	11 92       	st	Z+, r1
    6b5e:	6a 95       	dec	r22
    6b60:	e9 f7       	brne	.-6      	; 0x6b5c <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    6b62:	40 e1       	ldi	r20, 0x10	; 16
    6b64:	fc 01       	movw	r30, r24
    6b66:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    6b68:	ef 57       	subi	r30, 0x7F	; 127
    6b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b6c:	2b 5b       	subi	r18, 0xBB	; 187
    6b6e:	37 4f       	sbci	r19, 0xF7	; 247
    6b70:	31 83       	std	Z+1, r19	; 0x01
    6b72:	20 83       	st	Z, r18
      nwkIb.lock++;
    6b74:	e6 e5       	ldi	r30, 0x56	; 86
    6b76:	f4 e2       	ldi	r31, 0x24	; 36
    6b78:	26 a1       	ldd	r18, Z+38	; 0x26
    6b7a:	37 a1       	ldd	r19, Z+39	; 0x27
    6b7c:	2f 5f       	subi	r18, 0xFF	; 255
    6b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    6b80:	37 a3       	std	Z+39, r19	; 0x27
    6b82:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    6b84:	08 95       	ret
    6b86:	01 96       	adiw	r24, 0x01	; 1
    6b88:	e7 57       	subi	r30, 0x77	; 119
    6b8a:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    6b8c:	e6 17       	cp	r30, r22
    6b8e:	f7 07       	cpc	r31, r23
    6b90:	a1 f6       	brne	.-88     	; 0x6b3a <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    6b92:	80 e0       	ldi	r24, 0x00	; 0
    6b94:	90 e0       	ldi	r25, 0x00	; 0
}
    6b96:	08 95       	ret

00006b98 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    6b98:	fc 01       	movw	r30, r24
    6b9a:	10 82       	st	Z, r1
  nwkIb.lock--;
    6b9c:	e6 e5       	ldi	r30, 0x56	; 86
    6b9e:	f4 e2       	ldi	r31, 0x24	; 36
    6ba0:	86 a1       	ldd	r24, Z+38	; 0x26
    6ba2:	97 a1       	ldd	r25, Z+39	; 0x27
    6ba4:	01 97       	sbiw	r24, 0x01	; 1
    6ba6:	97 a3       	std	Z+39, r25	; 0x27
    6ba8:	86 a3       	std	Z+38, r24	; 0x26
    6baa:	08 95       	ret

00006bac <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    6bac:	00 97       	sbiw	r24, 0x00	; 0
    6bae:	41 f0       	breq	.+16     	; 0x6bc0 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    6bb0:	fc 01       	movw	r30, r24
    6bb2:	e7 57       	subi	r30, 0x77	; 119
    6bb4:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    6bb6:	88 e1       	ldi	r24, 0x18	; 24
    6bb8:	e1 34       	cpi	r30, 0x41	; 65
    6bba:	f8 07       	cpc	r31, r24
    6bbc:	18 f0       	brcs	.+6      	; 0x6bc4 <nwkFrameNext+0x18>
    6bbe:	12 c0       	rjmp	.+36     	; 0x6be4 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    6bc0:	e3 e3       	ldi	r30, 0x33	; 51
    6bc2:	f8 e0       	ldi	r31, 0x08	; 8
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    6bc4:	80 81       	ld	r24, Z
    6bc6:	88 23       	and	r24, r24
    6bc8:	21 f0       	breq	.+8      	; 0x6bd2 <nwkFrameNext+0x26>
    6bca:	0f c0       	rjmp	.+30     	; 0x6bea <nwkFrameNext+0x3e>
    6bcc:	80 81       	ld	r24, Z
    6bce:	81 11       	cpse	r24, r1
    6bd0:	0f c0       	rjmp	.+30     	; 0x6bf0 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    6bd2:	e7 57       	subi	r30, 0x77	; 119
    6bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    6bd6:	88 e1       	ldi	r24, 0x18	; 24
    6bd8:	e1 34       	cpi	r30, 0x41	; 65
    6bda:	f8 07       	cpc	r31, r24
    6bdc:	b8 f3       	brcs	.-18     	; 0x6bcc <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    6bde:	80 e0       	ldi	r24, 0x00	; 0
    6be0:	90 e0       	ldi	r25, 0x00	; 0
    6be2:	08 95       	ret
    6be4:	80 e0       	ldi	r24, 0x00	; 0
    6be6:	90 e0       	ldi	r25, 0x00	; 0
    6be8:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    6bea:	8e 2f       	mov	r24, r30
    6bec:	9f 2f       	mov	r25, r31
    6bee:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    6bf0:	8e 2f       	mov	r24, r30
    6bf2:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
    6bf4:	08 95       	ret

00006bf6 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    6bf6:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    6bf8:	dc 01       	movw	r26, r24
    6bfa:	ad 57       	subi	r26, 0x7D	; 125
    6bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    6bfe:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    6c00:	a6 e5       	ldi	r26, 0x56	; 86
    6c02:	b4 e2       	ldi	r27, 0x24	; 36
    6c04:	14 96       	adiw	r26, 0x04	; 4
    6c06:	9c 91       	ld	r25, X
    6c08:	14 97       	sbiw	r26, 0x04	; 4
    6c0a:	9f 5f       	subi	r25, 0xFF	; 255
    6c0c:	14 96       	adiw	r26, 0x04	; 4
    6c0e:	9c 93       	st	X, r25
    6c10:	14 97       	sbiw	r26, 0x04	; 4
    6c12:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    6c14:	8d 91       	ld	r24, X+
    6c16:	9c 91       	ld	r25, X
    6c18:	96 87       	std	Z+14, r25	; 0x0e
    6c1a:	85 87       	std	Z+13, r24	; 0x0d
    6c1c:	08 95       	ret

00006c1e <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    6c1e:	a2 e4       	ldi	r26, 0x42	; 66
    6c20:	b8 e1       	ldi	r27, 0x18	; 24
    6c22:	80 e0       	ldi	r24, 0x00	; 0
    6c24:	90 e0       	ldi	r25, 0x00	; 0
    6c26:	4f ef       	ldi	r20, 0xFF	; 255
    6c28:	5f ef       	ldi	r21, 0xFF	; 255
    6c2a:	11 96       	adiw	r26, 0x01	; 1
    6c2c:	5c 93       	st	X, r21
    6c2e:	4e 93       	st	-X, r20
    6c30:	fc 01       	movw	r30, r24
    6c32:	ee 0f       	add	r30, r30
    6c34:	ff 1f       	adc	r31, r31
    6c36:	ee 0f       	add	r30, r30
    6c38:	ff 1f       	adc	r31, r31
    6c3a:	ee 0f       	add	r30, r30
    6c3c:	ff 1f       	adc	r31, r31
    6c3e:	e8 1b       	sub	r30, r24
    6c40:	f9 0b       	sbc	r31, r25
    6c42:	ef 5b       	subi	r30, 0xBF	; 191
    6c44:	f7 4e       	sbci	r31, 0xE7	; 231
    6c46:	20 81       	ld	r18, Z
    6c48:	2e 7f       	andi	r18, 0xFE	; 254
    6c4a:	20 83       	st	Z, r18
    6c4c:	14 96       	adiw	r26, 0x04	; 4
    6c4e:	1c 92       	st	X, r1
    6c50:	14 97       	sbiw	r26, 0x04	; 4
    6c52:	01 96       	adiw	r24, 0x01	; 1
    6c54:	17 96       	adiw	r26, 0x07	; 7
    6c56:	84 36       	cpi	r24, 0x64	; 100
    6c58:	91 05       	cpc	r25, r1
    6c5a:	39 f7       	brne	.-50     	; 0x6c2a <nwkRouteInit+0xc>
    6c5c:	08 95       	ret

00006c5e <NWK_RouteFindEntry>:
    6c5e:	0f 93       	push	r16
    6c60:	1f 93       	push	r17
    6c62:	cf 93       	push	r28
    6c64:	df 93       	push	r29
    6c66:	e2 e4       	ldi	r30, 0x42	; 66
    6c68:	f8 e1       	ldi	r31, 0x18	; 24
    6c6a:	20 e0       	ldi	r18, 0x00	; 0
    6c6c:	30 e0       	ldi	r19, 0x00	; 0
    6c6e:	06 2f       	mov	r16, r22
    6c70:	10 e0       	ldi	r17, 0x00	; 0
    6c72:	40 81       	ld	r20, Z
    6c74:	51 81       	ldd	r21, Z+1	; 0x01
    6c76:	48 17       	cp	r20, r24
    6c78:	59 07       	cpc	r21, r25
    6c7a:	b1 f4       	brne	.+44     	; 0x6ca8 <NWK_RouteFindEntry+0x4a>
    6c7c:	d9 01       	movw	r26, r18
    6c7e:	aa 0f       	add	r26, r26
    6c80:	bb 1f       	adc	r27, r27
    6c82:	aa 0f       	add	r26, r26
    6c84:	bb 1f       	adc	r27, r27
    6c86:	aa 0f       	add	r26, r26
    6c88:	bb 1f       	adc	r27, r27
    6c8a:	a2 1b       	sub	r26, r18
    6c8c:	b3 0b       	sbc	r27, r19
    6c8e:	af 5b       	subi	r26, 0xBF	; 191
    6c90:	b7 4e       	sbci	r27, 0xE7	; 231
    6c92:	4c 91       	ld	r20, X
    6c94:	46 95       	lsr	r20
    6c96:	41 70       	andi	r20, 0x01	; 1
    6c98:	c4 2f       	mov	r28, r20
    6c9a:	40 e0       	ldi	r20, 0x00	; 0
    6c9c:	d4 2f       	mov	r29, r20
    6c9e:	c0 17       	cp	r28, r16
    6ca0:	d1 07       	cpc	r29, r17
    6ca2:	11 f4       	brne	.+4      	; 0x6ca8 <NWK_RouteFindEntry+0x4a>
    6ca4:	cd 01       	movw	r24, r26
    6ca6:	08 c0       	rjmp	.+16     	; 0x6cb8 <NWK_RouteFindEntry+0x5a>
    6ca8:	2f 5f       	subi	r18, 0xFF	; 255
    6caa:	3f 4f       	sbci	r19, 0xFF	; 255
    6cac:	37 96       	adiw	r30, 0x07	; 7
    6cae:	24 36       	cpi	r18, 0x64	; 100
    6cb0:	31 05       	cpc	r19, r1
    6cb2:	f9 f6       	brne	.-66     	; 0x6c72 <NWK_RouteFindEntry+0x14>
    6cb4:	80 e0       	ldi	r24, 0x00	; 0
    6cb6:	90 e0       	ldi	r25, 0x00	; 0
    6cb8:	df 91       	pop	r29
    6cba:	cf 91       	pop	r28
    6cbc:	1f 91       	pop	r17
    6cbe:	0f 91       	pop	r16
    6cc0:	08 95       	ret

00006cc2 <NWK_RouteNewEntry>:
    6cc2:	a0 e0       	ldi	r26, 0x00	; 0
    6cc4:	b0 e0       	ldi	r27, 0x00	; 0
    6cc6:	e1 e4       	ldi	r30, 0x41	; 65
    6cc8:	f8 e1       	ldi	r31, 0x18	; 24
    6cca:	80 81       	ld	r24, Z
    6ccc:	80 fd       	sbrc	r24, 0
    6cce:	0d c0       	rjmp	.+26     	; 0x6cea <NWK_RouteNewEntry+0x28>
    6cd0:	85 81       	ldd	r24, Z+5	; 0x05
    6cd2:	88 23       	and	r24, r24
    6cd4:	81 f0       	breq	.+32     	; 0x6cf6 <NWK_RouteNewEntry+0x34>
    6cd6:	10 97       	sbiw	r26, 0x00	; 0
    6cd8:	39 f0       	breq	.+14     	; 0x6ce8 <NWK_RouteNewEntry+0x26>
    6cda:	15 96       	adiw	r26, 0x05	; 5
    6cdc:	9c 91       	ld	r25, X
    6cde:	15 97       	sbiw	r26, 0x05	; 5
    6ce0:	89 17       	cp	r24, r25
    6ce2:	18 f4       	brcc	.+6      	; 0x6cea <NWK_RouteNewEntry+0x28>
    6ce4:	df 01       	movw	r26, r30
    6ce6:	01 c0       	rjmp	.+2      	; 0x6cea <NWK_RouteNewEntry+0x28>
    6ce8:	df 01       	movw	r26, r30
    6cea:	37 96       	adiw	r30, 0x07	; 7
    6cec:	8a e1       	ldi	r24, 0x1A	; 26
    6cee:	ed 3f       	cpi	r30, 0xFD	; 253
    6cf0:	f8 07       	cpc	r31, r24
    6cf2:	59 f7       	brne	.-42     	; 0x6cca <NWK_RouteNewEntry+0x8>
    6cf4:	fd 01       	movw	r30, r26
    6cf6:	80 81       	ld	r24, Z
    6cf8:	8d 70       	andi	r24, 0x0D	; 13
    6cfa:	80 63       	ori	r24, 0x30	; 48
    6cfc:	80 83       	st	Z, r24
    6cfe:	80 e8       	ldi	r24, 0x80	; 128
    6d00:	85 83       	std	Z+5, r24	; 0x05
    6d02:	cf 01       	movw	r24, r30
    6d04:	08 95       	ret

00006d06 <NWK_RouteFreeEntry>:
    6d06:	fc 01       	movw	r30, r24
    6d08:	80 81       	ld	r24, Z
    6d0a:	80 fd       	sbrc	r24, 0
    6d0c:	05 c0       	rjmp	.+10     	; 0x6d18 <NWK_RouteFreeEntry+0x12>
    6d0e:	8f ef       	ldi	r24, 0xFF	; 255
    6d10:	9f ef       	ldi	r25, 0xFF	; 255
    6d12:	92 83       	std	Z+2, r25	; 0x02
    6d14:	81 83       	std	Z+1, r24	; 0x01
    6d16:	15 82       	std	Z+5, r1	; 0x05
    6d18:	08 95       	ret

00006d1a <NWK_RouteNextHop>:
    6d1a:	a1 df       	rcall	.-190    	; 0x6c5e <NWK_RouteFindEntry>
    6d1c:	00 97       	sbiw	r24, 0x00	; 0
    6d1e:	21 f0       	breq	.+8      	; 0x6d28 <NWK_RouteNextHop+0xe>
    6d20:	fc 01       	movw	r30, r24
    6d22:	83 81       	ldd	r24, Z+3	; 0x03
    6d24:	94 81       	ldd	r25, Z+4	; 0x04
    6d26:	08 95       	ret
    6d28:	8f ef       	ldi	r24, 0xFF	; 255
    6d2a:	9f ef       	ldi	r25, 0xFF	; 255
    6d2c:	08 95       	ret

00006d2e <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    6d2e:	97 df       	rcall	.-210    	; 0x6c5e <NWK_RouteFindEntry>
  if (entry)
    6d30:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    6d32:	09 f0       	breq	.+2      	; 0x6d36 <nwkRouteRemove+0x8>
    6d34:	e8 cf       	rjmp	.-48     	; 0x6d06 <NWK_RouteFreeEntry>
    6d36:	08 95       	ret

00006d38 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    6d38:	0f 93       	push	r16
    6d3a:	1f 93       	push	r17
    6d3c:	cf 93       	push	r28
    6d3e:	df 93       	push	r29
    6d40:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    6d42:	01 85       	ldd	r16, Z+9	; 0x09
    6d44:	12 85       	ldd	r17, Z+10	; 0x0a
    6d46:	11 23       	and	r17, r17
    6d48:	2c f4       	brge	.+10     	; 0x6d54 <nwkRouteFrameReceived+0x1c>
    6d4a:	85 85       	ldd	r24, Z+13	; 0x0d
    6d4c:	96 85       	ldd	r25, Z+14	; 0x0e
    6d4e:	08 17       	cp	r16, r24
    6d50:	19 07       	cpc	r17, r25
    6d52:	e1 f5       	brne	.+120    	; 0x6dcc <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    6d54:	85 81       	ldd	r24, Z+5	; 0x05
    6d56:	96 81       	ldd	r25, Z+6	; 0x06
    6d58:	01 96       	adiw	r24, 0x01	; 1
    6d5a:	c1 f1       	breq	.+112    	; 0x6dcc <nwkRouteFrameReceived+0x94>
    6d5c:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    6d5e:	60 e0       	ldi	r22, 0x00	; 0
    6d60:	85 85       	ldd	r24, Z+13	; 0x0d
    6d62:	96 85       	ldd	r25, Z+14	; 0x0e
    6d64:	7c df       	rcall	.-264    	; 0x6c5e <NWK_RouteFindEntry>
    6d66:	fc 01       	movw	r30, r24

  if (entry)
    6d68:	89 2b       	or	r24, r25
    6d6a:	a1 f0       	breq	.+40     	; 0x6d94 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    6d6c:	8f 81       	ldd	r24, Y+7	; 0x07
    6d6e:	98 85       	ldd	r25, Y+8	; 0x08
    6d70:	01 96       	adiw	r24, 0x01	; 1
    6d72:	f9 f4       	brne	.+62     	; 0x6db2 <nwkRouteFrameReceived+0x7a>
    6d74:	20 91 56 24 	lds	r18, 0x2456	; 0x802456 <nwkIb>
    6d78:	30 91 57 24 	lds	r19, 0x2457	; 0x802457 <nwkIb+0x1>
    6d7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d7e:	98 89       	ldd	r25, Y+16	; 0x10
    6d80:	28 17       	cp	r18, r24
    6d82:	39 07       	cpc	r19, r25
    6d84:	b1 f4       	brne	.+44     	; 0x6db2 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
    6d86:	14 83       	std	Z+4, r17	; 0x04
    6d88:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    6d8a:	80 81       	ld	r24, Z
    6d8c:	8f 70       	andi	r24, 0x0F	; 15
    6d8e:	80 63       	ori	r24, 0x30	; 48
    6d90:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    6d92:	0a c0       	rjmp	.+20     	; 0x6da8 <nwkRouteFrameReceived+0x70>
    6d94:	96 df       	rcall	.-212    	; 0x6cc2 <NWK_RouteNewEntry>
    6d96:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
    6d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d9c:	92 83       	std	Z+2, r25	; 0x02
    6d9e:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    6da0:	89 85       	ldd	r24, Y+9	; 0x09
    6da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6da4:	94 83       	std	Z+4, r25	; 0x04
    6da6:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    6da8:	cd 57       	subi	r28, 0x7D	; 125
    6daa:	df 4f       	sbci	r29, 0xFF	; 255
    6dac:	88 81       	ld	r24, Y
    6dae:	86 83       	std	Z+6, r24	; 0x06
    6db0:	0d c0       	rjmp	.+26     	; 0x6dcc <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    6db2:	83 81       	ldd	r24, Z+3	; 0x03
    6db4:	94 81       	ldd	r25, Z+4	; 0x04
    6db6:	08 17       	cp	r16, r24
    6db8:	19 07       	cpc	r17, r25
    6dba:	b1 f3       	breq	.-20     	; 0x6da8 <nwkRouteFrameReceived+0x70>
    6dbc:	96 81       	ldd	r25, Z+6	; 0x06
    6dbe:	de 01       	movw	r26, r28
    6dc0:	ad 57       	subi	r26, 0x7D	; 125
    6dc2:	bf 4f       	sbci	r27, 0xFF	; 255
    6dc4:	8c 91       	ld	r24, X
    6dc6:	98 17       	cp	r25, r24
    6dc8:	f0 f2       	brcs	.-68     	; 0x6d86 <nwkRouteFrameReceived+0x4e>
    6dca:	ee cf       	rjmp	.-36     	; 0x6da8 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
    6dcc:	df 91       	pop	r29
    6dce:	cf 91       	pop	r28
    6dd0:	1f 91       	pop	r17
    6dd2:	0f 91       	pop	r16
    6dd4:	08 95       	ret

00006dd6 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    6dd6:	cf 93       	push	r28
    6dd8:	df 93       	push	r29
    6dda:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    6ddc:	87 85       	ldd	r24, Z+15	; 0x0f
    6dde:	90 89       	ldd	r25, Z+16	; 0x10
    6de0:	8f 3f       	cpi	r24, 0xFF	; 255
    6de2:	2f ef       	ldi	r18, 0xFF	; 255
    6de4:	92 07       	cpc	r25, r18
    6de6:	d9 f1       	breq	.+118    	; 0x6e5e <nwkRouteFrameSent+0x88>
    6de8:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    6dea:	63 85       	ldd	r22, Z+11	; 0x0b
    6dec:	63 fb       	bst	r22, 3
    6dee:	66 27       	eor	r22, r22
    6df0:	60 f9       	bld	r22, 0
    6df2:	35 df       	rcall	.-406    	; 0x6c5e <NWK_RouteFindEntry>
    6df4:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    6df6:	89 2b       	or	r24, r25
    6df8:	91 f1       	breq	.+100    	; 0x6e5e <nwkRouteFrameSent+0x88>
    6dfa:	8c 91       	ld	r24, X
    6dfc:	80 fd       	sbrc	r24, 0
    6dfe:	2f c0       	rjmp	.+94     	; 0x6e5e <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    6e00:	fe 01       	movw	r30, r28
    6e02:	ed 57       	subi	r30, 0x7D	; 125
    6e04:	ff 4f       	sbci	r31, 0xFF	; 255
    6e06:	80 81       	ld	r24, Z
    6e08:	81 11       	cpse	r24, r1
    6e0a:	19 c0       	rjmp	.+50     	; 0x6e3e <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    6e0c:	8c 91       	ld	r24, X
    6e0e:	8f 70       	andi	r24, 0x0F	; 15
    6e10:	80 63       	ori	r24, 0x30	; 48
    6e12:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    6e14:	15 96       	adiw	r26, 0x05	; 5
    6e16:	8c 91       	ld	r24, X
    6e18:	15 97       	sbiw	r26, 0x05	; 5
    6e1a:	8f 5f       	subi	r24, 0xFF	; 255
    6e1c:	15 96       	adiw	r26, 0x05	; 5
    6e1e:	8c 93       	st	X, r24
    6e20:	8f 3f       	cpi	r24, 0xFF	; 255
    6e22:	e9 f4       	brne	.+58     	; 0x6e5e <nwkRouteFrameSent+0x88>
    6e24:	e6 e4       	ldi	r30, 0x46	; 70
    6e26:	f8 e1       	ldi	r31, 0x18	; 24
    6e28:	22 e0       	ldi	r18, 0x02	; 2
    6e2a:	3b e1       	ldi	r19, 0x1B	; 27
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    6e2c:	80 81       	ld	r24, Z
    6e2e:	86 95       	lsr	r24
    6e30:	8f 5f       	subi	r24, 0xFF	; 255
    6e32:	80 83       	st	Z, r24
    6e34:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    6e36:	e2 17       	cp	r30, r18
    6e38:	f3 07       	cpc	r31, r19
    6e3a:	c1 f7       	brne	.-16     	; 0x6e2c <nwkRouteFrameSent+0x56>
    6e3c:	10 c0       	rjmp	.+32     	; 0x6e5e <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
    6e3e:	9c 91       	ld	r25, X
    6e40:	89 2f       	mov	r24, r25
    6e42:	82 95       	swap	r24
    6e44:	8f 70       	andi	r24, 0x0F	; 15
    6e46:	81 5f       	subi	r24, 0xF1	; 241
    6e48:	8f 70       	andi	r24, 0x0F	; 15
    6e4a:	28 2f       	mov	r18, r24
    6e4c:	22 95       	swap	r18
    6e4e:	20 7f       	andi	r18, 0xF0	; 240
    6e50:	9f 70       	andi	r25, 0x0F	; 15
    6e52:	92 2b       	or	r25, r18
    6e54:	9c 93       	st	X, r25
    6e56:	81 11       	cpse	r24, r1
    6e58:	02 c0       	rjmp	.+4      	; 0x6e5e <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
    6e5a:	cd 01       	movw	r24, r26
    6e5c:	54 df       	rcall	.-344    	; 0x6d06 <NWK_RouteFreeEntry>
  }
}
    6e5e:	df 91       	pop	r29
    6e60:	cf 91       	pop	r28
    6e62:	08 95       	ret

00006e64 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    6e64:	cf 93       	push	r28
    6e66:	df 93       	push	r29
    6e68:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    6e6a:	87 85       	ldd	r24, Z+15	; 0x0f
    6e6c:	90 89       	ldd	r25, Z+16	; 0x10
    6e6e:	8f 3f       	cpi	r24, 0xFF	; 255
    6e70:	2f ef       	ldi	r18, 0xFF	; 255
    6e72:	92 07       	cpc	r25, r18
    6e74:	29 f4       	brne	.+10     	; 0x6e80 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    6e76:	8f ef       	ldi	r24, 0xFF	; 255
    6e78:	9f ef       	ldi	r25, 0xFF	; 255
    6e7a:	90 87       	std	Z+8, r25	; 0x08
    6e7c:	87 83       	std	Z+7, r24	; 0x07
    6e7e:	0e c0       	rjmp	.+28     	; 0x6e9c <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    6e80:	23 85       	ldd	r18, Z+11	; 0x0b
    6e82:	22 ff       	sbrs	r18, 2
    6e84:	03 c0       	rjmp	.+6      	; 0x6e8c <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    6e86:	90 87       	std	Z+8, r25	; 0x08
    6e88:	87 83       	std	Z+7, r24	; 0x07
    6e8a:	08 c0       	rjmp	.+16     	; 0x6e9c <nwkRoutePrepareTx+0x38>
    6e8c:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    6e8e:	63 85       	ldd	r22, Z+11	; 0x0b
    6e90:	63 fb       	bst	r22, 3
    6e92:	66 27       	eor	r22, r22
    6e94:	60 f9       	bld	r22, 0
    6e96:	41 df       	rcall	.-382    	; 0x6d1a <NWK_RouteNextHop>
    6e98:	98 87       	std	Y+8, r25	; 0x08
    6e9a:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    6e9c:	df 91       	pop	r29
    6e9e:	cf 91       	pop	r28
    6ea0:	08 95       	ret

00006ea2 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    6ea2:	af 92       	push	r10
    6ea4:	bf 92       	push	r11
    6ea6:	cf 92       	push	r12
    6ea8:	df 92       	push	r13
    6eaa:	ef 92       	push	r14
    6eac:	ff 92       	push	r15
    6eae:	1f 93       	push	r17
    6eb0:	cf 93       	push	r28
    6eb2:	df 93       	push	r29
    6eb4:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    6eb6:	1b 85       	ldd	r17, Y+11	; 0x0b
    6eb8:	13 fb       	bst	r17, 3
    6eba:	11 27       	eor	r17, r17
    6ebc:	10 f9       	bld	r17, 0
    6ebe:	cf 84       	ldd	r12, Y+15	; 0x0f
    6ec0:	d8 88       	ldd	r13, Y+16	; 0x10
    6ec2:	61 2f       	mov	r22, r17
    6ec4:	c6 01       	movw	r24, r12
    6ec6:	29 df       	rcall	.-430    	; 0x6d1a <NWK_RouteNextHop>
    6ec8:	01 96       	adiw	r24, 0x01	; 1
    6eca:	59 f0       	breq	.+22     	; 0x6ee2 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
    6ecc:	fe 01       	movw	r30, r28
    6ece:	e9 57       	subi	r30, 0x79	; 121
    6ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ed2:	11 82       	std	Z+1, r1	; 0x01
    6ed4:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    6ed6:	31 97       	sbiw	r30, 0x01	; 1
    6ed8:	82 e0       	ldi	r24, 0x02	; 2
    6eda:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    6edc:	ce 01       	movw	r24, r28
    6ede:	6e d3       	rcall	.+1756   	; 0x75bc <nwkTxFrame>
    6ee0:	22 c0       	rjmp	.+68     	; 0x6f26 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    6ee2:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    6ee4:	be 84       	ldd	r11, Y+14	; 0x0e
    6ee6:	1f de       	rcall	.-962    	; 0x6b26 <nwkFrameAlloc>
    6ee8:	7c 01       	movw	r14, r24
    6eea:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
    6eec:	d1 f0       	breq	.+52     	; 0x6f22 <nwkRouteFrame+0x80>
    6eee:	83 de       	rcall	.-762    	; 0x6bf6 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    6ef0:	f7 01       	movw	r30, r14
    6ef2:	81 81       	ldd	r24, Z+1	; 0x01
    6ef4:	8a 5f       	subi	r24, 0xFA	; 250
    6ef6:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
    6ef8:	e9 57       	subi	r30, 0x79	; 121
    6efa:	ff 4f       	sbci	r31, 0xFF	; 255
    6efc:	11 82       	std	Z+1, r1	; 0x01
    6efe:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    6f00:	f7 01       	movw	r30, r14
    6f02:	b0 8a       	std	Z+16, r11	; 0x10
    6f04:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    6f06:	ef 57       	subi	r30, 0x7F	; 127
    6f08:	ff 4f       	sbci	r31, 0xFF	; 255
    6f0a:	01 90       	ld	r0, Z+
    6f0c:	f0 81       	ld	r31, Z
    6f0e:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
    6f10:	81 e0       	ldi	r24, 0x01	; 1
    6f12:	80 83       	st	Z, r24
  command->srcAddr = src;
    6f14:	b2 82       	std	Z+2, r11	; 0x02
    6f16:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
    6f18:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
    6f1a:	c3 82       	std	Z+3, r12	; 0x03
    6f1c:	15 83       	std	Z+5, r17	; 0x05
    6f1e:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
    6f20:	4d d3       	rcall	.+1690   	; 0x75bc <nwkTxFrame>
    6f22:	ce 01       	movw	r24, r28
    6f24:	39 de       	rcall	.-910    	; 0x6b98 <nwkFrameFree>
  }
}
    6f26:	df 91       	pop	r29
    6f28:	cf 91       	pop	r28
    6f2a:	1f 91       	pop	r17
    6f2c:	ff 90       	pop	r15
    6f2e:	ef 90       	pop	r14
    6f30:	df 90       	pop	r13
    6f32:	cf 90       	pop	r12
    6f34:	bf 90       	pop	r11
    6f36:	af 90       	pop	r10
    6f38:	08 95       	ret

00006f3a <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    6f3a:	fc 01       	movw	r30, r24
    6f3c:	21 85       	ldd	r18, Z+9	; 0x09
    6f3e:	26 30       	cpi	r18, 0x06	; 6
    6f40:	49 f4       	brne	.+18     	; 0x6f54 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    6f42:	07 80       	ldd	r0, Z+7	; 0x07
    6f44:	f0 85       	ldd	r31, Z+8	; 0x08
    6f46:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    6f48:	65 81       	ldd	r22, Z+5	; 0x05
    6f4a:	83 81       	ldd	r24, Z+3	; 0x03
    6f4c:	94 81       	ldd	r25, Z+4	; 0x04
    6f4e:	ef de       	rcall	.-546    	; 0x6d2e <nwkRouteRemove>

  return true;
    6f50:	81 e0       	ldi	r24, 0x01	; 1
    6f52:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    6f54:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    6f56:	08 95       	ret

00006f58 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    6f58:	dc 01       	movw	r26, r24
    6f5a:	19 96       	adiw	r26, 0x09	; 9
    6f5c:	2c 91       	ld	r18, X
    6f5e:	19 97       	sbiw	r26, 0x09	; 9
    6f60:	22 23       	and	r18, r18
    6f62:	71 f0       	breq	.+28     	; 0x6f80 <nwkRxServiceDataInd+0x28>
    6f64:	17 96       	adiw	r26, 0x07	; 7
    6f66:	ed 91       	ld	r30, X+
    6f68:	fc 91       	ld	r31, X
    6f6a:	18 97       	sbiw	r26, 0x08	; 8
    6f6c:	20 81       	ld	r18, Z
    6f6e:	22 23       	and	r18, r18
    6f70:	19 f0       	breq	.+6      	; 0x6f78 <nwkRxServiceDataInd+0x20>
    6f72:	21 30       	cpi	r18, 0x01	; 1
    6f74:	19 f0       	breq	.+6      	; 0x6f7c <nwkRxServiceDataInd+0x24>
    6f76:	06 c0       	rjmp	.+12     	; 0x6f84 <nwkRxServiceDataInd+0x2c>
    6f78:	b2 c3       	rjmp	.+1892   	; 0x76de <nwkTxAckReceived>
    6f7a:	08 95       	ret
    6f7c:	de cf       	rjmp	.-68     	; 0x6f3a <nwkRouteErrorReceived>
    6f7e:	08 95       	ret
    6f80:	80 e0       	ldi	r24, 0x00	; 0
    6f82:	08 95       	ret
    6f84:	80 e0       	ldi	r24, 0x00	; 0
    6f86:	08 95       	ret

00006f88 <nwkRxDuplicateRejectionTimerHandler>:
    6f88:	bc 01       	movw	r22, r24
    6f8a:	ef e0       	ldi	r30, 0x0F	; 15
    6f8c:	fb e1       	ldi	r31, 0x1B	; 27
    6f8e:	21 e4       	ldi	r18, 0x41	; 65
    6f90:	3b e1       	ldi	r19, 0x1B	; 27
    6f92:	40 e0       	ldi	r20, 0x00	; 0
    6f94:	51 e0       	ldi	r21, 0x01	; 1
    6f96:	90 81       	ld	r25, Z
    6f98:	99 23       	and	r25, r25
    6f9a:	19 f0       	breq	.+6      	; 0x6fa2 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    6f9c:	91 50       	subi	r25, 0x01	; 1
    6f9e:	90 83       	st	Z, r25
    6fa0:	45 2f       	mov	r20, r21
    6fa2:	35 96       	adiw	r30, 0x05	; 5
    6fa4:	e2 17       	cp	r30, r18
    6fa6:	f3 07       	cpc	r31, r19
    6fa8:	b1 f7       	brne	.-20     	; 0x6f96 <nwkRxDuplicateRejectionTimerHandler+0xe>
    6faa:	44 23       	and	r20, r20
    6fac:	11 f0       	breq	.+4      	; 0x6fb2 <nwkRxDuplicateRejectionTimerHandler+0x2a>
    6fae:	cb 01       	movw	r24, r22
    6fb0:	6d c6       	rjmp	.+3290   	; 0x7c8c <SYS_TimerStart>
    6fb2:	08 95       	ret

00006fb4 <nwkRxInit>:
    6fb4:	ef e0       	ldi	r30, 0x0F	; 15
    6fb6:	fb e1       	ldi	r31, 0x1B	; 27
    6fb8:	81 e4       	ldi	r24, 0x41	; 65
    6fba:	9b e1       	ldi	r25, 0x1B	; 27
    6fbc:	10 82       	st	Z, r1
    6fbe:	35 96       	adiw	r30, 0x05	; 5
    6fc0:	e8 17       	cp	r30, r24
    6fc2:	f9 07       	cpc	r31, r25
    6fc4:	d9 f7       	brne	.-10     	; 0x6fbc <nwkRxInit+0x8>
    6fc6:	ed ef       	ldi	r30, 0xFD	; 253
    6fc8:	fa e1       	ldi	r31, 0x1A	; 26
    6fca:	84 e6       	ldi	r24, 0x64	; 100
    6fcc:	90 e0       	ldi	r25, 0x00	; 0
    6fce:	a0 e0       	ldi	r26, 0x00	; 0
    6fd0:	b0 e0       	ldi	r27, 0x00	; 0
    6fd2:	86 83       	std	Z+6, r24	; 0x06
    6fd4:	97 83       	std	Z+7, r25	; 0x07
    6fd6:	a0 87       	std	Z+8, r26	; 0x08
    6fd8:	b1 87       	std	Z+9, r27	; 0x09
    6fda:	12 86       	std	Z+10, r1	; 0x0a
    6fdc:	84 ec       	ldi	r24, 0xC4	; 196
    6fde:	97 e3       	ldi	r25, 0x37	; 55
    6fe0:	94 87       	std	Z+12, r25	; 0x0c
    6fe2:	83 87       	std	Z+11, r24	; 0x0b
    6fe4:	6c ea       	ldi	r22, 0xAC	; 172
    6fe6:	77 e3       	ldi	r23, 0x37	; 55
    6fe8:	80 e0       	ldi	r24, 0x00	; 0
    6fea:	96 cc       	rjmp	.-1748   	; 0x6918 <NWK_OpenEndpoint>
    6fec:	08 95       	ret

00006fee <PHY_DataInd>:
    6fee:	cf 93       	push	r28
    6ff0:	df 93       	push	r29
    6ff2:	dc 01       	movw	r26, r24
    6ff4:	ed 91       	ld	r30, X+
    6ff6:	fc 91       	ld	r31, X
    6ff8:	11 97       	sbiw	r26, 0x01	; 1
    6ffa:	21 81       	ldd	r18, Z+1	; 0x01
    6ffc:	28 38       	cpi	r18, 0x88	; 136
    6ffe:	f1 f4       	brne	.+60     	; 0x703c <PHY_DataInd+0x4e>
    7000:	20 81       	ld	r18, Z
    7002:	2f 7d       	andi	r18, 0xDF	; 223
    7004:	21 34       	cpi	r18, 0x41	; 65
    7006:	d1 f4       	brne	.+52     	; 0x703c <PHY_DataInd+0x4e>
    7008:	12 96       	adiw	r26, 0x02	; 2
    700a:	2c 91       	ld	r18, X
    700c:	20 31       	cpi	r18, 0x10	; 16
    700e:	b0 f0       	brcs	.+44     	; 0x703c <PHY_DataInd+0x4e>
    7010:	ec 01       	movw	r28, r24
    7012:	89 dd       	rcall	.-1262   	; 0x6b26 <nwkFrameAlloc>
    7014:	00 97       	sbiw	r24, 0x00	; 0
    7016:	91 f0       	breq	.+36     	; 0x703c <PHY_DataInd+0x4e>
    7018:	20 e2       	ldi	r18, 0x20	; 32
    701a:	fc 01       	movw	r30, r24
    701c:	20 83       	st	Z, r18
    701e:	2a 81       	ldd	r18, Y+2	; 0x02
    7020:	21 83       	std	Z+1, r18	; 0x01
    7022:	2b 81       	ldd	r18, Y+3	; 0x03
    7024:	ed 57       	subi	r30, 0x7D	; 125
    7026:	ff 4f       	sbci	r31, 0xFF	; 255
    7028:	20 83       	st	Z, r18
    702a:	2c 81       	ldd	r18, Y+4	; 0x04
    702c:	31 96       	adiw	r30, 0x01	; 1
    702e:	20 83       	st	Z, r18
    7030:	4a 81       	ldd	r20, Y+2	; 0x02
    7032:	50 e0       	ldi	r21, 0x00	; 0
    7034:	68 81       	ld	r22, Y
    7036:	79 81       	ldd	r23, Y+1	; 0x01
    7038:	02 96       	adiw	r24, 0x02	; 2
    703a:	36 d7       	rcall	.+3692   	; 0x7ea8 <memcpy>
    703c:	df 91       	pop	r29
    703e:	cf 91       	pop	r28
    7040:	08 95       	ret

00007042 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    7042:	2f 92       	push	r2
    7044:	3f 92       	push	r3
    7046:	4f 92       	push	r4
    7048:	5f 92       	push	r5
    704a:	6f 92       	push	r6
    704c:	7f 92       	push	r7
    704e:	8f 92       	push	r8
    7050:	9f 92       	push	r9
    7052:	af 92       	push	r10
    7054:	bf 92       	push	r11
    7056:	cf 92       	push	r12
    7058:	df 92       	push	r13
    705a:	ef 92       	push	r14
    705c:	ff 92       	push	r15
    705e:	0f 93       	push	r16
    7060:	1f 93       	push	r17
    7062:	cf 93       	push	r28
    7064:	df 93       	push	r29
    7066:	cd b7       	in	r28, 0x3d	; 61
    7068:	de b7       	in	r29, 0x3e	; 62
    706a:	2c 97       	sbiw	r28, 0x0c	; 12
    706c:	0f b6       	in	r0, 0x3f	; 63
    706e:	f8 94       	cli
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	0f be       	out	0x3f, r0	; 63
    7074:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    7076:	00 e0       	ldi	r16, 0x00	; 0
    7078:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    707a:	0f 2e       	mov	r0, r31
    707c:	f4 e2       	ldi	r31, 0x24	; 36
    707e:	bf 2e       	mov	r11, r31
    7080:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    7082:	0f 2e       	mov	r0, r31
    7084:	f6 e5       	ldi	r31, 0x56	; 86
    7086:	ef 2e       	mov	r14, r31
    7088:	f4 e2       	ldi	r31, 0x24	; 36
    708a:	ff 2e       	mov	r15, r31
    708c:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    708e:	55 24       	eor	r5, r5
    7090:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    7092:	68 94       	set
    7094:	aa 24       	eor	r10, r10
    7096:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    7098:	68 94       	set
    709a:	77 24       	eor	r7, r7
    709c:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    709e:	68 94       	set
    70a0:	66 24       	eor	r6, r6
    70a2:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    70a4:	31 2c       	mov	r3, r1
    70a6:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    70a8:	0f 2e       	mov	r0, r31
    70aa:	ff e1       	ldi	r31, 0x1F	; 31
    70ac:	4f 2e       	mov	r4, r31
    70ae:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    70b0:	cc 24       	eor	r12, r12
    70b2:	c3 94       	inc	r12
    70b4:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    70b6:	da c1       	rjmp	.+948    	; 0x746c <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
    70b8:	d8 01       	movw	r26, r16
    70ba:	8c 91       	ld	r24, X
    70bc:	82 32       	cpi	r24, 0x22	; 34
    70be:	09 f4       	brne	.+2      	; 0x70c2 <nwkRxTaskHandler+0x80>
    70c0:	05 c1       	rjmp	.+522    	; 0x72cc <nwkRxTaskHandler+0x28a>
    70c2:	18 f4       	brcc	.+6      	; 0x70ca <nwkRxTaskHandler+0x88>
    70c4:	80 32       	cpi	r24, 0x20	; 32
    70c6:	41 f0       	breq	.+16     	; 0x70d8 <nwkRxTaskHandler+0x96>
    70c8:	d1 c1       	rjmp	.+930    	; 0x746c <nwkRxTaskHandler+0x42a>
    70ca:	83 32       	cpi	r24, 0x23	; 35
    70cc:	09 f4       	brne	.+2      	; 0x70d0 <nwkRxTaskHandler+0x8e>
    70ce:	c9 c1       	rjmp	.+914    	; 0x7462 <nwkRxTaskHandler+0x420>
    70d0:	84 32       	cpi	r24, 0x24	; 36
    70d2:	09 f4       	brne	.+2      	; 0x70d6 <nwkRxTaskHandler+0x94>
    70d4:	c9 c1       	rjmp	.+914    	; 0x7468 <nwkRxTaskHandler+0x426>
    70d6:	ca c1       	rjmp	.+916    	; 0x746c <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    70d8:	f8 01       	movw	r30, r16
    70da:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    70dc:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    70de:	98 2f       	mov	r25, r24
    70e0:	9a 70       	andi	r25, 0x0A	; 10
    70e2:	09 f0       	breq	.+2      	; 0x70e6 <nwkRxTaskHandler+0xa4>
    70e4:	c3 c1       	rjmp	.+902    	; 0x746c <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    70e6:	25 81       	ldd	r18, Z+5	; 0x05
    70e8:	36 81       	ldd	r19, Z+6	; 0x06
    70ea:	2f 3f       	cpi	r18, 0xFF	; 255
    70ec:	3f 4f       	sbci	r19, 0xFF	; 255
    70ee:	91 f4       	brne	.+36     	; 0x7114 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    70f0:	d8 01       	movw	r26, r16
    70f2:	1f 96       	adiw	r26, 0x0f	; 15
    70f4:	8d 91       	ld	r24, X+
    70f6:	9c 91       	ld	r25, X
    70f8:	50 97       	sbiw	r26, 0x10	; 16
    70fa:	f7 01       	movw	r30, r14
    70fc:	20 81       	ld	r18, Z
    70fe:	31 81       	ldd	r19, Z+1	; 0x01
    7100:	28 17       	cp	r18, r24
    7102:	39 07       	cpc	r19, r25
    7104:	19 f0       	breq	.+6      	; 0x710c <nwkRxTaskHandler+0xca>
    7106:	01 96       	adiw	r24, 0x01	; 1
    7108:	09 f0       	breq	.+2      	; 0x710c <nwkRxTaskHandler+0xca>
    710a:	b0 c1       	rjmp	.+864    	; 0x746c <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    710c:	e2 e2       	ldi	r30, 0x22	; 34
    710e:	d8 01       	movw	r26, r16
    7110:	ec 93       	st	X, r30
    7112:	ac c1       	rjmp	.+856    	; 0x746c <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    7114:	d8 01       	movw	r26, r16
    7116:	1f 96       	adiw	r26, 0x0f	; 15
    7118:	2d 91       	ld	r18, X+
    711a:	3c 91       	ld	r19, X
    711c:	50 97       	sbiw	r26, 0x10	; 16
    711e:	2f 3f       	cpi	r18, 0xFF	; 255
    7120:	3f 4f       	sbci	r19, 0xFF	; 255
    7122:	11 f4       	brne	.+4      	; 0x7128 <nwkRxTaskHandler+0xe6>
    7124:	80 fd       	sbrc	r24, 0
    7126:	a2 c1       	rjmp	.+836    	; 0x746c <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    7128:	f7 01       	movw	r30, r14
    712a:	20 81       	ld	r18, Z
    712c:	31 81       	ldd	r19, Z+1	; 0x01
    712e:	d8 01       	movw	r26, r16
    7130:	1d 96       	adiw	r26, 0x0d	; 13
    7132:	8d 91       	ld	r24, X+
    7134:	9c 91       	ld	r25, X
    7136:	1e 97       	sbiw	r26, 0x0e	; 14
    7138:	28 17       	cp	r18, r24
    713a:	39 07       	cpc	r19, r25
    713c:	09 f4       	brne	.+2      	; 0x7140 <nwkRxTaskHandler+0xfe>
    713e:	96 c1       	rjmp	.+812    	; 0x746c <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    7140:	c8 01       	movw	r24, r16
    7142:	fa dd       	rcall	.-1036   	; 0x6d38 <nwkRouteFrameReceived>
    7144:	eb e0       	ldi	r30, 0x0B	; 11
    7146:	fb e1       	ldi	r31, 0x1B	; 27
    7148:	80 e0       	ldi	r24, 0x00	; 0
    714a:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    714c:	83 2c       	mov	r8, r3
    714e:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    7150:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    7152:	44 81       	ldd	r20, Z+4	; 0x04
    7154:	44 23       	and	r20, r20
    7156:	09 f4       	brne	.+2      	; 0x715a <nwkRxTaskHandler+0x118>
    7158:	74 c0       	rjmp	.+232    	; 0x7242 <nwkRxTaskHandler+0x200>
    715a:	d8 01       	movw	r26, r16
    715c:	1d 96       	adiw	r26, 0x0d	; 13
    715e:	6d 91       	ld	r22, X+
    7160:	7c 91       	ld	r23, X
    7162:	1e 97       	sbiw	r26, 0x0e	; 14
    7164:	40 81       	ld	r20, Z
    7166:	51 81       	ldd	r21, Z+1	; 0x01
    7168:	64 17       	cp	r22, r20
    716a:	75 07       	cpc	r23, r21
    716c:	09 f0       	breq	.+2      	; 0x7170 <nwkRxTaskHandler+0x12e>
    716e:	6a c0       	rjmp	.+212    	; 0x7244 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    7170:	1c 96       	adiw	r26, 0x0c	; 12
    7172:	8c 91       	ld	r24, X
    7174:	1c 97       	sbiw	r26, 0x0c	; 12
    7176:	f9 01       	movw	r30, r18
    7178:	ee 0f       	add	r30, r30
    717a:	ff 1f       	adc	r31, r31
    717c:	ee 0f       	add	r30, r30
    717e:	ff 1f       	adc	r31, r31
    7180:	e2 0f       	add	r30, r18
    7182:	f3 1f       	adc	r31, r19
    7184:	e5 5f       	subi	r30, 0xF5	; 245
    7186:	f4 4e       	sbci	r31, 0xE4	; 228
    7188:	92 81       	ldd	r25, Z+2	; 0x02
    718a:	98 1b       	sub	r25, r24

      if (diff < 8)
    718c:	98 30       	cpi	r25, 0x08	; 8
    718e:	08 f0       	brcs	.+2      	; 0x7192 <nwkRxTaskHandler+0x150>
    7190:	3e c0       	rjmp	.+124    	; 0x720e <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
    7192:	f9 01       	movw	r30, r18
    7194:	ee 0f       	add	r30, r30
    7196:	ff 1f       	adc	r31, r31
    7198:	ee 0f       	add	r30, r30
    719a:	ff 1f       	adc	r31, r31
    719c:	e2 0f       	add	r30, r18
    719e:	f3 1f       	adc	r31, r19
    71a0:	e5 5f       	subi	r30, 0xF5	; 245
    71a2:	f4 4e       	sbci	r31, 0xE4	; 228
    71a4:	83 81       	ldd	r24, Z+3	; 0x03
    71a6:	48 2f       	mov	r20, r24
    71a8:	50 e0       	ldi	r21, 0x00	; 0
    71aa:	09 2e       	mov	r0, r25
    71ac:	02 c0       	rjmp	.+4      	; 0x71b2 <nwkRxTaskHandler+0x170>
    71ae:	55 95       	asr	r21
    71b0:	47 95       	ror	r20
    71b2:	0a 94       	dec	r0
    71b4:	e2 f7       	brpl	.-8      	; 0x71ae <nwkRxTaskHandler+0x16c>
    71b6:	40 ff       	sbrs	r20, 0
    71b8:	17 c0       	rjmp	.+46     	; 0x71e8 <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    71ba:	f7 01       	movw	r30, r14
    71bc:	20 81       	ld	r18, Z
    71be:	31 81       	ldd	r19, Z+1	; 0x01
    71c0:	17 96       	adiw	r26, 0x07	; 7
    71c2:	8d 91       	ld	r24, X+
    71c4:	9c 91       	ld	r25, X
    71c6:	18 97       	sbiw	r26, 0x08	; 8
    71c8:	28 17       	cp	r18, r24
    71ca:	39 07       	cpc	r19, r25
    71cc:	09 f0       	breq	.+2      	; 0x71d0 <nwkRxTaskHandler+0x18e>
    71ce:	4e c1       	rjmp	.+668    	; 0x746c <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    71d0:	1b 96       	adiw	r26, 0x0b	; 11
    71d2:	6c 91       	ld	r22, X
    71d4:	1b 97       	sbiw	r26, 0x0b	; 11
    71d6:	63 fb       	bst	r22, 3
    71d8:	66 27       	eor	r22, r22
    71da:	60 f9       	bld	r22, 0
    71dc:	1f 96       	adiw	r26, 0x0f	; 15
    71de:	8d 91       	ld	r24, X+
    71e0:	9c 91       	ld	r25, X
    71e2:	50 97       	sbiw	r26, 0x10	; 16
    71e4:	a4 dd       	rcall	.-1208   	; 0x6d2e <nwkRouteRemove>
    71e6:	42 c1       	rjmp	.+644    	; 0x746c <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    71e8:	f9 01       	movw	r30, r18
    71ea:	ee 0f       	add	r30, r30
    71ec:	ff 1f       	adc	r31, r31
    71ee:	ee 0f       	add	r30, r30
    71f0:	ff 1f       	adc	r31, r31
    71f2:	2e 0f       	add	r18, r30
    71f4:	3f 1f       	adc	r19, r31
    71f6:	f9 01       	movw	r30, r18
    71f8:	e5 5f       	subi	r30, 0xF5	; 245
    71fa:	f4 4e       	sbci	r31, 0xE4	; 228
    71fc:	96 01       	movw	r18, r12
    71fe:	02 c0       	rjmp	.+4      	; 0x7204 <nwkRxTaskHandler+0x1c2>
    7200:	22 0f       	add	r18, r18
    7202:	33 1f       	adc	r19, r19
    7204:	9a 95       	dec	r25
    7206:	e2 f7       	brpl	.-8      	; 0x7200 <nwkRxTaskHandler+0x1be>
    7208:	82 2b       	or	r24, r18
    720a:	83 83       	std	Z+3, r24	; 0x03
    720c:	36 c1       	rjmp	.+620    	; 0x747a <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    720e:	f9 01       	movw	r30, r18
    7210:	ee 0f       	add	r30, r30
    7212:	ff 1f       	adc	r31, r31
    7214:	ee 0f       	add	r30, r30
    7216:	ff 1f       	adc	r31, r31
    7218:	2e 0f       	add	r18, r30
    721a:	3f 1f       	adc	r19, r31
    721c:	f9 01       	movw	r30, r18
    721e:	e5 5f       	subi	r30, 0xF5	; 245
    7220:	f4 4e       	sbci	r31, 0xE4	; 228
    7222:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    7224:	83 81       	ldd	r24, Z+3	; 0x03
    7226:	28 2f       	mov	r18, r24
    7228:	30 e0       	ldi	r19, 0x00	; 0
    722a:	91 95       	neg	r25
    722c:	a9 01       	movw	r20, r18
    722e:	02 c0       	rjmp	.+4      	; 0x7234 <nwkRxTaskHandler+0x1f2>
    7230:	44 0f       	add	r20, r20
    7232:	55 1f       	adc	r21, r21
    7234:	9a 95       	dec	r25
    7236:	e2 f7       	brpl	.-8      	; 0x7230 <nwkRxTaskHandler+0x1ee>
    7238:	ca 01       	movw	r24, r20
    723a:	81 60       	ori	r24, 0x01	; 1
    723c:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    723e:	44 82       	std	Z+4, r4	; 0x04
    7240:	1c c1       	rjmp	.+568    	; 0x747a <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    7242:	4f 01       	movw	r8, r30
    7244:	01 96       	adiw	r24, 0x01	; 1
    7246:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    7248:	8a 30       	cpi	r24, 0x0A	; 10
    724a:	91 05       	cpc	r25, r1
    724c:	09 f0       	breq	.+2      	; 0x7250 <nwkRxTaskHandler+0x20e>
    724e:	80 cf       	rjmp	.-256    	; 0x7150 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    7250:	81 14       	cp	r8, r1
    7252:	91 04       	cpc	r9, r1
    7254:	09 f4       	brne	.+2      	; 0x7258 <nwkRxTaskHandler+0x216>
    7256:	0a c1       	rjmp	.+532    	; 0x746c <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    7258:	d8 01       	movw	r26, r16
    725a:	1d 96       	adiw	r26, 0x0d	; 13
    725c:	8d 91       	ld	r24, X+
    725e:	9c 91       	ld	r25, X
    7260:	1e 97       	sbiw	r26, 0x0e	; 14
    7262:	f4 01       	movw	r30, r8
    7264:	91 83       	std	Z+1, r25	; 0x01
    7266:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    7268:	1c 96       	adiw	r26, 0x0c	; 12
    726a:	8c 91       	ld	r24, X
    726c:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    726e:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    7270:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    7272:	8d ef       	ldi	r24, 0xFD	; 253
    7274:	9a e1       	ldi	r25, 0x1A	; 26
    7276:	0a d5       	rcall	.+2580   	; 0x7c8c <SYS_TimerStart>
    7278:	00 c1       	rjmp	.+512    	; 0x747a <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    727a:	d7 01       	movw	r26, r14
    727c:	2d 91       	ld	r18, X+
    727e:	3c 91       	ld	r19, X
    7280:	f8 01       	movw	r30, r16
    7282:	87 85       	ldd	r24, Z+15	; 0x0f
    7284:	90 89       	ldd	r25, Z+16	; 0x10
    7286:	28 17       	cp	r18, r24
    7288:	39 07       	cpc	r19, r25
    728a:	81 f0       	breq	.+32     	; 0x72ac <nwkRxTaskHandler+0x26a>
    728c:	43 85       	ldd	r20, Z+11	; 0x0b
    728e:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    7290:	0b c0       	rjmp	.+22     	; 0x72a8 <nwkRxTaskHandler+0x266>
    7292:	c8 01       	movw	r24, r16
    7294:	e1 d1       	rcall	.+962    	; 0x7658 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    7296:	d7 01       	movw	r26, r14
    7298:	2d 91       	ld	r18, X+
    729a:	3c 91       	ld	r19, X
    729c:	f8 01       	movw	r30, r16
    729e:	87 85       	ldd	r24, Z+15	; 0x0f
    72a0:	90 89       	ldd	r25, Z+16	; 0x10
    72a2:	28 17       	cp	r18, r24
    72a4:	39 07       	cpc	r19, r25
    72a6:	11 f0       	breq	.+4      	; 0x72ac <nwkRxTaskHandler+0x26a>
    72a8:	01 96       	adiw	r24, 0x01	; 1
    72aa:	21 f4       	brne	.+8      	; 0x72b4 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    72ac:	e2 e2       	ldi	r30, 0x22	; 34
    72ae:	d8 01       	movw	r26, r16
    72b0:	ec 93       	st	X, r30
    72b2:	dc c0       	rjmp	.+440    	; 0x746c <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    72b4:	d8 01       	movw	r26, r16
    72b6:	17 96       	adiw	r26, 0x07	; 7
    72b8:	8d 91       	ld	r24, X+
    72ba:	9c 91       	ld	r25, X
    72bc:	18 97       	sbiw	r26, 0x08	; 8
    72be:	82 17       	cp	r24, r18
    72c0:	93 07       	cpc	r25, r19
    72c2:	09 f0       	breq	.+2      	; 0x72c6 <nwkRxTaskHandler+0x284>
    72c4:	d3 c0       	rjmp	.+422    	; 0x746c <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    72c6:	e3 e2       	ldi	r30, 0x23	; 35
    72c8:	ec 93       	st	X, r30
    72ca:	d0 c0       	rjmp	.+416    	; 0x746c <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    72cc:	10 92 0a 1b 	sts	0x1B0A, r1	; 0x801b0a <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    72d0:	d8 01       	movw	r26, r16
    72d2:	51 96       	adiw	r26, 0x11	; 17
    72d4:	8c 91       	ld	r24, X
    72d6:	51 97       	sbiw	r26, 0x11	; 17
    72d8:	82 95       	swap	r24
    72da:	8f 70       	andi	r24, 0x0F	; 15
    72dc:	e8 2f       	mov	r30, r24
    72de:	f0 e0       	ldi	r31, 0x00	; 0
    72e0:	ee 0f       	add	r30, r30
    72e2:	ff 1f       	adc	r31, r31
    72e4:	e4 5a       	subi	r30, 0xA4	; 164
    72e6:	fb 4d       	sbci	r31, 0xDB	; 219
    72e8:	01 90       	ld	r0, Z+
    72ea:	f0 81       	ld	r31, Z
    72ec:	e0 2d       	mov	r30, r0
    72ee:	30 97       	sbiw	r30, 0x00	; 0
    72f0:	09 f4       	brne	.+2      	; 0x72f4 <nwkRxTaskHandler+0x2b2>
    72f2:	60 c0       	rjmp	.+192    	; 0x73b4 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    72f4:	1d 96       	adiw	r26, 0x0d	; 13
    72f6:	2d 91       	ld	r18, X+
    72f8:	3c 91       	ld	r19, X
    72fa:	1e 97       	sbiw	r26, 0x0e	; 14
    72fc:	3a 83       	std	Y+2, r19	; 0x02
    72fe:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    7300:	1f 96       	adiw	r26, 0x0f	; 15
    7302:	4d 91       	ld	r20, X+
    7304:	5c 91       	ld	r21, X
    7306:	50 97       	sbiw	r26, 0x10	; 16
    7308:	5c 83       	std	Y+4, r21	; 0x04
    730a:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    730c:	51 96       	adiw	r26, 0x11	; 17
    730e:	9c 91       	ld	r25, X
    7310:	51 97       	sbiw	r26, 0x11	; 17
    7312:	9f 70       	andi	r25, 0x0F	; 15
    7314:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    7316:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    7318:	af 57       	subi	r26, 0x7F	; 127
    731a:	bf 4f       	sbci	r27, 0xFF	; 255
    731c:	8d 91       	ld	r24, X+
    731e:	9c 91       	ld	r25, X
    7320:	99 87       	std	Y+9, r25	; 0x09
    7322:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    7324:	b8 01       	movw	r22, r16
    7326:	6e 5f       	subi	r22, 0xFE	; 254
    7328:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    732a:	86 1b       	sub	r24, r22
    732c:	97 0b       	sbc	r25, r23
    732e:	d8 01       	movw	r26, r16
    7330:	11 96       	adiw	r26, 0x01	; 1
    7332:	9c 91       	ld	r25, X
    7334:	11 97       	sbiw	r26, 0x01	; 1
    7336:	98 1b       	sub	r25, r24
    7338:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    733a:	ad 57       	subi	r26, 0x7D	; 125
    733c:	bf 4f       	sbci	r27, 0xFF	; 255
    733e:	8c 91       	ld	r24, X
    7340:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    7342:	11 96       	adiw	r26, 0x01	; 1
    7344:	8c 91       	ld	r24, X
    7346:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    7348:	d8 01       	movw	r26, r16
    734a:	1b 96       	adiw	r26, 0x0b	; 11
    734c:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    734e:	69 2f       	mov	r22, r25
    7350:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    7352:	92 fd       	sbrc	r25, 2
    7354:	02 c0       	rjmp	.+4      	; 0x735a <nwkRxTaskHandler+0x318>
    7356:	80 e0       	ldi	r24, 0x00	; 0
    7358:	01 c0       	rjmp	.+2      	; 0x735c <nwkRxTaskHandler+0x31a>
    735a:	80 e2       	ldi	r24, 0x20	; 32
    735c:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    735e:	93 fd       	sbrc	r25, 3
    7360:	02 c0       	rjmp	.+4      	; 0x7366 <nwkRxTaskHandler+0x324>
    7362:	90 e0       	ldi	r25, 0x00	; 0
    7364:	01 c0       	rjmp	.+2      	; 0x7368 <nwkRxTaskHandler+0x326>
    7366:	90 e4       	ldi	r25, 0x40	; 64
    7368:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    736a:	4f 3f       	cpi	r20, 0xFF	; 255
    736c:	5f 4f       	sbci	r21, 0xFF	; 255
    736e:	11 f0       	breq	.+4      	; 0x7374 <nwkRxTaskHandler+0x332>
    7370:	90 e0       	ldi	r25, 0x00	; 0
    7372:	01 c0       	rjmp	.+2      	; 0x7376 <nwkRxTaskHandler+0x334>
    7374:	96 2d       	mov	r25, r6
    7376:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    7378:	d8 01       	movw	r26, r16
    737a:	19 96       	adiw	r26, 0x09	; 9
    737c:	4d 91       	ld	r20, X+
    737e:	5c 91       	ld	r21, X
    7380:	1a 97       	sbiw	r26, 0x0a	; 10
    7382:	24 17       	cp	r18, r20
    7384:	35 07       	cpc	r19, r21
    7386:	11 f0       	breq	.+4      	; 0x738c <nwkRxTaskHandler+0x34a>
    7388:	90 e0       	ldi	r25, 0x00	; 0
    738a:	01 c0       	rjmp	.+2      	; 0x738e <nwkRxTaskHandler+0x34c>
    738c:	97 2d       	mov	r25, r7
    738e:	89 2b       	or	r24, r25
    7390:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    7392:	d8 01       	movw	r26, r16
    7394:	15 96       	adiw	r26, 0x05	; 5
    7396:	2d 91       	ld	r18, X+
    7398:	3c 91       	ld	r19, X
    739a:	16 97       	sbiw	r26, 0x06	; 6
    739c:	2f 3f       	cpi	r18, 0xFF	; 255
    739e:	3f 4f       	sbci	r19, 0xFF	; 255
    73a0:	11 f0       	breq	.+4      	; 0x73a6 <nwkRxTaskHandler+0x364>
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	01 c0       	rjmp	.+2      	; 0x73a8 <nwkRxTaskHandler+0x366>
    73a6:	9a 2d       	mov	r25, r10
    73a8:	89 2b       	or	r24, r25
    73aa:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    73ac:	ce 01       	movw	r24, r28
    73ae:	01 96       	adiw	r24, 0x01	; 1
    73b0:	19 95       	eicall
    73b2:	01 c0       	rjmp	.+2      	; 0x73b6 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    73b4:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    73b6:	f8 01       	movw	r30, r16
    73b8:	93 85       	ldd	r25, Z+11	; 0x0b
    73ba:	90 ff       	sbrs	r25, 0
    ack = false;
    73bc:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    73be:	d8 01       	movw	r26, r16
    73c0:	17 96       	adiw	r26, 0x07	; 7
    73c2:	2d 91       	ld	r18, X+
    73c4:	3c 91       	ld	r19, X
    73c6:	18 97       	sbiw	r26, 0x08	; 8
    73c8:	2f 3f       	cpi	r18, 0xFF	; 255
    73ca:	3f 4f       	sbci	r19, 0xFF	; 255
    73cc:	69 f4       	brne	.+26     	; 0x73e8 <nwkRxTaskHandler+0x3a6>
    73ce:	f7 01       	movw	r30, r14
    73d0:	40 81       	ld	r20, Z
    73d2:	51 81       	ldd	r21, Z+1	; 0x01
    73d4:	d8 01       	movw	r26, r16
    73d6:	1f 96       	adiw	r26, 0x0f	; 15
    73d8:	2d 91       	ld	r18, X+
    73da:	3c 91       	ld	r19, X
    73dc:	50 97       	sbiw	r26, 0x10	; 16
    73de:	42 17       	cp	r20, r18
    73e0:	53 07       	cpc	r21, r19
    73e2:	11 f4       	brne	.+4      	; 0x73e8 <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    73e4:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    73e6:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    73e8:	f8 01       	movw	r30, r16
    73ea:	25 81       	ldd	r18, Z+5	; 0x05
    73ec:	36 81       	ldd	r19, Z+6	; 0x06
    73ee:	2f 3f       	cpi	r18, 0xFF	; 255
    73f0:	3f 4f       	sbci	r19, 0xFF	; 255
    73f2:	a1 f1       	breq	.+104    	; 0x745c <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    73f4:	d7 01       	movw	r26, r14
    73f6:	2d 91       	ld	r18, X+
    73f8:	3c 91       	ld	r19, X
    73fa:	2f 3f       	cpi	r18, 0xFF	; 255
    73fc:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    73fe:	71 f1       	breq	.+92     	; 0x745c <nwkRxTaskHandler+0x41a>
    7400:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    7402:	61 f1       	breq	.+88     	; 0x745c <nwkRxTaskHandler+0x41a>
    7404:	90 db       	rcall	.-2272   	; 0x6b26 <nwkFrameAlloc>
    7406:	4c 01       	movw	r8, r24
    7408:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    740a:	41 f1       	breq	.+80     	; 0x745c <nwkRxTaskHandler+0x41a>
    740c:	f4 db       	rcall	.-2072   	; 0x6bf6 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    740e:	f4 01       	movw	r30, r8
    7410:	81 81       	ldd	r24, Z+1	; 0x01
    7412:	8d 5f       	subi	r24, 0xFD	; 253
    7414:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    7416:	e9 57       	subi	r30, 0x79	; 121
    7418:	ff 4f       	sbci	r31, 0xFF	; 255
    741a:	11 82       	std	Z+1, r1	; 0x01
    741c:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    741e:	d8 01       	movw	r26, r16
    7420:	1b 96       	adiw	r26, 0x0b	; 11
    7422:	8c 91       	ld	r24, X
    7424:	1b 97       	sbiw	r26, 0x0b	; 11
    7426:	86 95       	lsr	r24
    7428:	81 70       	andi	r24, 0x01	; 1
    742a:	f4 01       	movw	r30, r8
    742c:	93 85       	ldd	r25, Z+11	; 0x0b
    742e:	80 fb       	bst	r24, 0
    7430:	91 f9       	bld	r25, 1
    7432:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    7434:	1d 96       	adiw	r26, 0x0d	; 13
    7436:	8d 91       	ld	r24, X+
    7438:	9c 91       	ld	r25, X
    743a:	1e 97       	sbiw	r26, 0x0e	; 14
    743c:	90 8b       	std	Z+16, r25	; 0x10
    743e:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    7440:	ef 57       	subi	r30, 0x7F	; 127
    7442:	ff 4f       	sbci	r31, 0xFF	; 255
    7444:	01 90       	ld	r0, Z+
    7446:	f0 81       	ld	r31, Z
    7448:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    744a:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    744c:	80 91 0a 1b 	lds	r24, 0x1B0A	; 0x801b0a <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    7450:	82 83       	std	Z+2, r24	; 0x02
    7452:	1c 96       	adiw	r26, 0x0c	; 12
    7454:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    7456:	81 83       	std	Z+1, r24	; 0x01
    7458:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    745a:	b0 d0       	rcall	.+352    	; 0x75bc <nwkTxFrame>
    745c:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    745e:	bc 92       	st	X, r11
    7460:	05 c0       	rjmp	.+10     	; 0x746c <nwkRxTaskHandler+0x42a>
    7462:	c8 01       	movw	r24, r16
      } break;
    7464:	1e dd       	rcall	.-1476   	; 0x6ea2 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    7466:	02 c0       	rjmp	.+4      	; 0x746c <nwkRxTaskHandler+0x42a>
    7468:	c8 01       	movw	r24, r16
    746a:	96 db       	rcall	.-2260   	; 0x6b98 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    746c:	c8 01       	movw	r24, r16
    746e:	9e db       	rcall	.-2244   	; 0x6bac <nwkFrameNext>
    7470:	8c 01       	movw	r16, r24
    7472:	89 2b       	or	r24, r25
    7474:	09 f0       	breq	.+2      	; 0x7478 <nwkRxTaskHandler+0x436>
    7476:	20 ce       	rjmp	.-960    	; 0x70b8 <nwkRxTaskHandler+0x76>
    7478:	07 c0       	rjmp	.+14     	; 0x7488 <nwkRxTaskHandler+0x446>
    747a:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    747c:	87 81       	ldd	r24, Z+7	; 0x07
    747e:	90 85       	ldd	r25, Z+8	; 0x08
    7480:	01 96       	adiw	r24, 0x01	; 1
    7482:	09 f0       	breq	.+2      	; 0x7486 <nwkRxTaskHandler+0x444>
    7484:	08 cf       	rjmp	.-496    	; 0x7296 <nwkRxTaskHandler+0x254>
    7486:	f9 ce       	rjmp	.-526    	; 0x727a <nwkRxTaskHandler+0x238>
    7488:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    748a:	0f b6       	in	r0, 0x3f	; 63
    748c:	f8 94       	cli
    748e:	de bf       	out	0x3e, r29	; 62
    7490:	0f be       	out	0x3f, r0	; 63
    7492:	cd bf       	out	0x3d, r28	; 61
    7494:	df 91       	pop	r29
    7496:	cf 91       	pop	r28
    7498:	1f 91       	pop	r17
    749a:	0f 91       	pop	r16
    749c:	ff 90       	pop	r15
    749e:	ef 90       	pop	r14
    74a0:	df 90       	pop	r13
    74a2:	cf 90       	pop	r12
    74a4:	bf 90       	pop	r11
    74a6:	af 90       	pop	r10
    74a8:	9f 90       	pop	r9
    74aa:	8f 90       	pop	r8
    74ac:	7f 90       	pop	r7
    74ae:	6f 90       	pop	r6
    74b0:	5f 90       	pop	r5
    74b2:	4f 90       	pop	r4
    74b4:	3f 90       	pop	r3
    74b6:	2f 90       	pop	r2
    74b8:	08 95       	ret

000074ba <nwkTxDelayTimerHandler>:
    74ba:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    74bc:	ff 92       	push	r15
    74be:	0f 93       	push	r16
    74c0:	1f 93       	push	r17
    74c2:	cf 93       	push	r28
    74c4:	7c 01       	movw	r14, r24
    74c6:	10 e0       	ldi	r17, 0x00	; 0
    74c8:	80 e0       	ldi	r24, 0x00	; 0
    74ca:	90 e0       	ldi	r25, 0x00	; 0
    74cc:	01 e0       	ldi	r16, 0x01	; 1
    74ce:	c3 e1       	ldi	r28, 0x13	; 19
    74d0:	13 c0       	rjmp	.+38     	; 0x74f8 <nwkTxDelayTimerHandler+0x3e>
    74d2:	fc 01       	movw	r30, r24
    74d4:	20 81       	ld	r18, Z
    74d6:	21 31       	cpi	r18, 0x11	; 17
    74d8:	79 f4       	brne	.+30     	; 0x74f8 <nwkTxDelayTimerHandler+0x3e>
    74da:	ec 57       	subi	r30, 0x7C	; 124
    74dc:	ff 4f       	sbci	r31, 0xFF	; 255
    74de:	20 81       	ld	r18, Z
    74e0:	31 81       	ldd	r19, Z+1	; 0x01
    74e2:	21 50       	subi	r18, 0x01	; 1
    74e4:	31 09       	sbc	r19, r1
    74e6:	31 83       	std	Z+1, r19	; 0x01
    74e8:	20 83       	st	Z, r18
    74ea:	23 2b       	or	r18, r19
    74ec:	21 f4       	brne	.+8      	; 0x74f6 <nwkTxDelayTimerHandler+0x3c>
    74ee:	fc 01       	movw	r30, r24
    74f0:	c0 83       	st	Z, r28
    74f2:	10 2f       	mov	r17, r16
    74f4:	01 c0       	rjmp	.+2      	; 0x74f8 <nwkTxDelayTimerHandler+0x3e>
    74f6:	10 2f       	mov	r17, r16
    74f8:	59 db       	rcall	.-2382   	; 0x6bac <nwkFrameNext>
    74fa:	00 97       	sbiw	r24, 0x00	; 0
    74fc:	51 f7       	brne	.-44     	; 0x74d2 <nwkTxDelayTimerHandler+0x18>
    74fe:	11 23       	and	r17, r17
    7500:	11 f0       	breq	.+4      	; 0x7506 <nwkTxDelayTimerHandler+0x4c>
    7502:	c7 01       	movw	r24, r14
    7504:	c3 d3       	rcall	.+1926   	; 0x7c8c <SYS_TimerStart>
    7506:	cf 91       	pop	r28
    7508:	1f 91       	pop	r17
    750a:	0f 91       	pop	r16
    750c:	ff 90       	pop	r15
    750e:	ef 90       	pop	r14
    7510:	08 95       	ret

00007512 <nwkTxAckWaitTimerHandler>:
    7512:	ef 92       	push	r14
    7514:	ff 92       	push	r15
    7516:	0f 93       	push	r16
    7518:	1f 93       	push	r17
    751a:	cf 93       	push	r28
    751c:	df 93       	push	r29
    751e:	7c 01       	movw	r14, r24
    7520:	10 e0       	ldi	r17, 0x00	; 0
    7522:	80 e0       	ldi	r24, 0x00	; 0
    7524:	90 e0       	ldi	r25, 0x00	; 0
    7526:	01 e0       	ldi	r16, 0x01	; 1
    7528:	d7 e1       	ldi	r29, 0x17	; 23
    752a:	c0 e1       	ldi	r28, 0x10	; 16
    752c:	16 c0       	rjmp	.+44     	; 0x755a <nwkTxAckWaitTimerHandler+0x48>
    752e:	fc 01       	movw	r30, r24
    7530:	20 81       	ld	r18, Z
    7532:	26 31       	cpi	r18, 0x16	; 22
    7534:	91 f4       	brne	.+36     	; 0x755a <nwkTxAckWaitTimerHandler+0x48>
    7536:	ec 57       	subi	r30, 0x7C	; 124
    7538:	ff 4f       	sbci	r31, 0xFF	; 255
    753a:	20 81       	ld	r18, Z
    753c:	31 81       	ldd	r19, Z+1	; 0x01
    753e:	21 50       	subi	r18, 0x01	; 1
    7540:	31 09       	sbc	r19, r1
    7542:	31 83       	std	Z+1, r19	; 0x01
    7544:	20 83       	st	Z, r18
    7546:	23 2b       	or	r18, r19
    7548:	39 f4       	brne	.+14     	; 0x7558 <nwkTxAckWaitTimerHandler+0x46>
    754a:	fc 01       	movw	r30, r24
    754c:	d0 83       	st	Z, r29
    754e:	ed 57       	subi	r30, 0x7D	; 125
    7550:	ff 4f       	sbci	r31, 0xFF	; 255
    7552:	c0 83       	st	Z, r28
    7554:	10 2f       	mov	r17, r16
    7556:	01 c0       	rjmp	.+2      	; 0x755a <nwkTxAckWaitTimerHandler+0x48>
    7558:	10 2f       	mov	r17, r16
    755a:	28 db       	rcall	.-2480   	; 0x6bac <nwkFrameNext>
    755c:	00 97       	sbiw	r24, 0x00	; 0
    755e:	39 f7       	brne	.-50     	; 0x752e <nwkTxAckWaitTimerHandler+0x1c>
    7560:	11 23       	and	r17, r17
    7562:	11 f0       	breq	.+4      	; 0x7568 <nwkTxAckWaitTimerHandler+0x56>
    7564:	c7 01       	movw	r24, r14
    7566:	92 d3       	rcall	.+1828   	; 0x7c8c <SYS_TimerStart>
    7568:	df 91       	pop	r29
    756a:	cf 91       	pop	r28
    756c:	1f 91       	pop	r17
    756e:	0f 91       	pop	r16
    7570:	ff 90       	pop	r15
    7572:	ef 90       	pop	r14
    7574:	08 95       	ret

00007576 <nwkTxInit>:
    7576:	10 92 58 1b 	sts	0x1B58, r1	; 0x801b58 <nwkTxPhyActiveFrame+0x1>
    757a:	10 92 57 1b 	sts	0x1B57, r1	; 0x801b57 <nwkTxPhyActiveFrame>
    757e:	ea e4       	ldi	r30, 0x4A	; 74
    7580:	fb e1       	ldi	r31, 0x1B	; 27
    7582:	82 e3       	ldi	r24, 0x32	; 50
    7584:	90 e0       	ldi	r25, 0x00	; 0
    7586:	a0 e0       	ldi	r26, 0x00	; 0
    7588:	b0 e0       	ldi	r27, 0x00	; 0
    758a:	86 83       	std	Z+6, r24	; 0x06
    758c:	97 83       	std	Z+7, r25	; 0x07
    758e:	a0 87       	std	Z+8, r26	; 0x08
    7590:	b1 87       	std	Z+9, r27	; 0x09
    7592:	12 86       	std	Z+10, r1	; 0x0a
    7594:	89 e8       	ldi	r24, 0x89	; 137
    7596:	9a e3       	ldi	r25, 0x3A	; 58
    7598:	94 87       	std	Z+12, r25	; 0x0c
    759a:	83 87       	std	Z+11, r24	; 0x0b
    759c:	ed e3       	ldi	r30, 0x3D	; 61
    759e:	fb e1       	ldi	r31, 0x1B	; 27
    75a0:	8a e0       	ldi	r24, 0x0A	; 10
    75a2:	90 e0       	ldi	r25, 0x00	; 0
    75a4:	a0 e0       	ldi	r26, 0x00	; 0
    75a6:	b0 e0       	ldi	r27, 0x00	; 0
    75a8:	86 83       	std	Z+6, r24	; 0x06
    75aa:	97 83       	std	Z+7, r25	; 0x07
    75ac:	a0 87       	std	Z+8, r26	; 0x08
    75ae:	b1 87       	std	Z+9, r27	; 0x09
    75b0:	12 86       	std	Z+10, r1	; 0x0a
    75b2:	8d e5       	ldi	r24, 0x5D	; 93
    75b4:	9a e3       	ldi	r25, 0x3A	; 58
    75b6:	94 87       	std	Z+12, r25	; 0x0c
    75b8:	83 87       	std	Z+11, r24	; 0x0b
    75ba:	08 95       	ret

000075bc <nwkTxFrame>:
    75bc:	cf 93       	push	r28
    75be:	df 93       	push	r29
    75c0:	ec 01       	movw	r28, r24
    75c2:	fc 01       	movw	r30, r24
    75c4:	ea 57       	subi	r30, 0x7A	; 122
    75c6:	ff 4f       	sbci	r31, 0xFF	; 255
    75c8:	80 81       	ld	r24, Z
    75ca:	81 ff       	sbrs	r24, 1
    75cc:	03 c0       	rjmp	.+6      	; 0x75d4 <nwkTxFrame+0x18>
    75ce:	92 e1       	ldi	r25, 0x12	; 18
    75d0:	98 83       	st	Y, r25
    75d2:	02 c0       	rjmp	.+4      	; 0x75d8 <nwkTxFrame+0x1c>
    75d4:	92 e1       	ldi	r25, 0x12	; 18
    75d6:	98 83       	st	Y, r25
    75d8:	fe 01       	movw	r30, r28
    75da:	ed 57       	subi	r30, 0x7D	; 125
    75dc:	ff 4f       	sbci	r31, 0xFF	; 255
    75de:	10 82       	st	Z, r1
    75e0:	80 ff       	sbrs	r24, 0
    75e2:	05 c0       	rjmp	.+10     	; 0x75ee <nwkTxFrame+0x32>
    75e4:	2f ef       	ldi	r18, 0xFF	; 255
    75e6:	3f ef       	ldi	r19, 0xFF	; 255
    75e8:	3e 83       	std	Y+6, r19	; 0x06
    75ea:	2d 83       	std	Y+5, r18	; 0x05
    75ec:	06 c0       	rjmp	.+12     	; 0x75fa <nwkTxFrame+0x3e>
    75ee:	20 91 58 24 	lds	r18, 0x2458	; 0x802458 <nwkIb+0x2>
    75f2:	30 91 59 24 	lds	r19, 0x2459	; 0x802459 <nwkIb+0x3>
    75f6:	3e 83       	std	Y+6, r19	; 0x06
    75f8:	2d 83       	std	Y+5, r18	; 0x05
    75fa:	85 70       	andi	r24, 0x05	; 5
    75fc:	19 f4       	brne	.+6      	; 0x7604 <nwkTxFrame+0x48>
    75fe:	ce 01       	movw	r24, r28
    7600:	31 dc       	rcall	.-1950   	; 0x6e64 <nwkRoutePrepareTx>
    7602:	04 c0       	rjmp	.+8      	; 0x760c <nwkTxFrame+0x50>
    7604:	8f 85       	ldd	r24, Y+15	; 0x0f
    7606:	98 89       	ldd	r25, Y+16	; 0x10
    7608:	98 87       	std	Y+8, r25	; 0x08
    760a:	8f 83       	std	Y+7, r24	; 0x07
    760c:	e6 e5       	ldi	r30, 0x56	; 86
    760e:	f4 e2       	ldi	r31, 0x24	; 36
    7610:	80 81       	ld	r24, Z
    7612:	91 81       	ldd	r25, Z+1	; 0x01
    7614:	9a 87       	std	Y+10, r25	; 0x0a
    7616:	89 87       	std	Y+9, r24	; 0x09
    7618:	85 81       	ldd	r24, Z+5	; 0x05
    761a:	8f 5f       	subi	r24, 0xFF	; 255
    761c:	85 83       	std	Z+5, r24	; 0x05
    761e:	8c 83       	std	Y+4, r24	; 0x04
    7620:	8f 81       	ldd	r24, Y+7	; 0x07
    7622:	98 85       	ldd	r25, Y+8	; 0x08
    7624:	01 96       	adiw	r24, 0x01	; 1
    7626:	69 f4       	brne	.+26     	; 0x7642 <nwkTxFrame+0x86>
    7628:	81 e4       	ldi	r24, 0x41	; 65
    762a:	98 e8       	ldi	r25, 0x88	; 136
    762c:	9b 83       	std	Y+3, r25	; 0x03
    762e:	8a 83       	std	Y+2, r24	; 0x02
    7630:	2d d4       	rcall	.+2138   	; 0x7e8c <rand>
    7632:	cc 57       	subi	r28, 0x7C	; 124
    7634:	df 4f       	sbci	r29, 0xFF	; 255
    7636:	87 70       	andi	r24, 0x07	; 7
    7638:	99 27       	eor	r25, r25
    763a:	01 96       	adiw	r24, 0x01	; 1
    763c:	99 83       	std	Y+1, r25	; 0x01
    763e:	88 83       	st	Y, r24
    7640:	08 c0       	rjmp	.+16     	; 0x7652 <nwkTxFrame+0x96>
    7642:	81 e6       	ldi	r24, 0x61	; 97
    7644:	98 e8       	ldi	r25, 0x88	; 136
    7646:	9b 83       	std	Y+3, r25	; 0x03
    7648:	8a 83       	std	Y+2, r24	; 0x02
    764a:	cc 57       	subi	r28, 0x7C	; 124
    764c:	df 4f       	sbci	r29, 0xFF	; 255
    764e:	19 82       	std	Y+1, r1	; 0x01
    7650:	18 82       	st	Y, r1
    7652:	df 91       	pop	r29
    7654:	cf 91       	pop	r28
    7656:	08 95       	ret

00007658 <nwkTxBroadcastFrame>:
    7658:	0f 93       	push	r16
    765a:	1f 93       	push	r17
    765c:	cf 93       	push	r28
    765e:	df 93       	push	r29
    7660:	8c 01       	movw	r16, r24
    7662:	61 da       	rcall	.-2878   	; 0x6b26 <nwkFrameAlloc>
    7664:	ec 01       	movw	r28, r24
    7666:	89 2b       	or	r24, r25
    7668:	a9 f1       	breq	.+106    	; 0x76d4 <nwkTxBroadcastFrame+0x7c>
    766a:	82 e1       	ldi	r24, 0x12	; 18
    766c:	88 83       	st	Y, r24
    766e:	f8 01       	movw	r30, r16
    7670:	81 81       	ldd	r24, Z+1	; 0x01
    7672:	89 83       	std	Y+1, r24	; 0x01
    7674:	fe 01       	movw	r30, r28
    7676:	ed 57       	subi	r30, 0x7D	; 125
    7678:	ff 4f       	sbci	r31, 0xFF	; 255
    767a:	10 82       	st	Z, r1
    767c:	07 d4       	rcall	.+2062   	; 0x7e8c <rand>
    767e:	fe 01       	movw	r30, r28
    7680:	ec 57       	subi	r30, 0x7C	; 124
    7682:	ff 4f       	sbci	r31, 0xFF	; 255
    7684:	87 70       	andi	r24, 0x07	; 7
    7686:	99 27       	eor	r25, r25
    7688:	01 96       	adiw	r24, 0x01	; 1
    768a:	91 83       	std	Z+1, r25	; 0x01
    768c:	80 83       	st	Z, r24
    768e:	33 96       	adiw	r30, 0x03	; 3
    7690:	11 82       	std	Z+1, r1	; 0x01
    7692:	10 82       	st	Z, r1
    7694:	f8 01       	movw	r30, r16
    7696:	41 81       	ldd	r20, Z+1	; 0x01
    7698:	50 e0       	ldi	r21, 0x00	; 0
    769a:	b8 01       	movw	r22, r16
    769c:	6e 5f       	subi	r22, 0xFE	; 254
    769e:	7f 4f       	sbci	r23, 0xFF	; 255
    76a0:	ce 01       	movw	r24, r28
    76a2:	02 96       	adiw	r24, 0x02	; 2
    76a4:	01 d4       	rcall	.+2050   	; 0x7ea8 <memcpy>
    76a6:	81 e4       	ldi	r24, 0x41	; 65
    76a8:	98 e8       	ldi	r25, 0x88	; 136
    76aa:	9b 83       	std	Y+3, r25	; 0x03
    76ac:	8a 83       	std	Y+2, r24	; 0x02
    76ae:	8f ef       	ldi	r24, 0xFF	; 255
    76b0:	9f ef       	ldi	r25, 0xFF	; 255
    76b2:	98 87       	std	Y+8, r25	; 0x08
    76b4:	8f 83       	std	Y+7, r24	; 0x07
    76b6:	f8 01       	movw	r30, r16
    76b8:	85 81       	ldd	r24, Z+5	; 0x05
    76ba:	96 81       	ldd	r25, Z+6	; 0x06
    76bc:	9e 83       	std	Y+6, r25	; 0x06
    76be:	8d 83       	std	Y+5, r24	; 0x05
    76c0:	e6 e5       	ldi	r30, 0x56	; 86
    76c2:	f4 e2       	ldi	r31, 0x24	; 36
    76c4:	80 81       	ld	r24, Z
    76c6:	91 81       	ldd	r25, Z+1	; 0x01
    76c8:	9a 87       	std	Y+10, r25	; 0x0a
    76ca:	89 87       	std	Y+9, r24	; 0x09
    76cc:	85 81       	ldd	r24, Z+5	; 0x05
    76ce:	8f 5f       	subi	r24, 0xFF	; 255
    76d0:	85 83       	std	Z+5, r24	; 0x05
    76d2:	8c 83       	std	Y+4, r24	; 0x04
    76d4:	df 91       	pop	r29
    76d6:	cf 91       	pop	r28
    76d8:	1f 91       	pop	r17
    76da:	0f 91       	pop	r16
    76dc:	08 95       	ret

000076de <nwkTxAckReceived>:
    76de:	cf 93       	push	r28
    76e0:	df 93       	push	r29
    76e2:	fc 01       	movw	r30, r24
    76e4:	21 85       	ldd	r18, Z+9	; 0x09
    76e6:	23 30       	cpi	r18, 0x03	; 3
    76e8:	d9 f4       	brne	.+54     	; 0x7720 <nwkTxAckReceived+0x42>
    76ea:	10 c0       	rjmp	.+32     	; 0x770c <nwkTxAckReceived+0x2e>
    76ec:	fc 01       	movw	r30, r24
    76ee:	20 81       	ld	r18, Z
    76f0:	26 31       	cpi	r18, 0x16	; 22
    76f2:	89 f4       	brne	.+34     	; 0x7716 <nwkTxAckReceived+0x38>
    76f4:	34 85       	ldd	r19, Z+12	; 0x0c
    76f6:	29 81       	ldd	r18, Y+1	; 0x01
    76f8:	32 13       	cpse	r19, r18
    76fa:	0d c0       	rjmp	.+26     	; 0x7716 <nwkTxAckReceived+0x38>
    76fc:	27 e1       	ldi	r18, 0x17	; 23
    76fe:	20 83       	st	Z, r18
    7700:	2a 81       	ldd	r18, Y+2	; 0x02
    7702:	ea 57       	subi	r30, 0x7A	; 122
    7704:	ff 4f       	sbci	r31, 0xFF	; 255
    7706:	20 83       	st	Z, r18
    7708:	81 e0       	ldi	r24, 0x01	; 1
    770a:	0b c0       	rjmp	.+22     	; 0x7722 <nwkTxAckReceived+0x44>
    770c:	fc 01       	movw	r30, r24
    770e:	c7 81       	ldd	r28, Z+7	; 0x07
    7710:	d0 85       	ldd	r29, Z+8	; 0x08
    7712:	80 e0       	ldi	r24, 0x00	; 0
    7714:	90 e0       	ldi	r25, 0x00	; 0
    7716:	4a da       	rcall	.-2924   	; 0x6bac <nwkFrameNext>
    7718:	00 97       	sbiw	r24, 0x00	; 0
    771a:	41 f7       	brne	.-48     	; 0x76ec <nwkTxAckReceived+0xe>
    771c:	80 e0       	ldi	r24, 0x00	; 0
    771e:	01 c0       	rjmp	.+2      	; 0x7722 <nwkTxAckReceived+0x44>
    7720:	80 e0       	ldi	r24, 0x00	; 0
    7722:	df 91       	pop	r29
    7724:	cf 91       	pop	r28
    7726:	08 95       	ret

00007728 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    7728:	e0 91 57 1b 	lds	r30, 0x1B57	; 0x801b57 <nwkTxPhyActiveFrame>
    772c:	f0 91 58 1b 	lds	r31, 0x1B58	; 0x801b58 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    7730:	81 30       	cpi	r24, 0x01	; 1
    7732:	21 f0       	breq	.+8      	; 0x773c <PHY_DataConf+0x14>
    7734:	48 f0       	brcs	.+18     	; 0x7748 <PHY_DataConf+0x20>
    7736:	82 30       	cpi	r24, 0x02	; 2
    7738:	19 f0       	breq	.+6      	; 0x7740 <PHY_DataConf+0x18>
    773a:	04 c0       	rjmp	.+8      	; 0x7744 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    773c:	80 e2       	ldi	r24, 0x20	; 32
    773e:	05 c0       	rjmp	.+10     	; 0x774a <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    7740:	81 e2       	ldi	r24, 0x21	; 33
    7742:	03 c0       	rjmp	.+6      	; 0x774a <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    7744:	81 e0       	ldi	r24, 0x01	; 1
    7746:	01 c0       	rjmp	.+2      	; 0x774a <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    7748:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    774a:	df 01       	movw	r26, r30
    774c:	ad 57       	subi	r26, 0x7D	; 125
    774e:	bf 4f       	sbci	r27, 0xFF	; 255
    7750:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    7752:	85 e1       	ldi	r24, 0x15	; 21
    7754:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    7756:	10 92 58 1b 	sts	0x1B58, r1	; 0x801b58 <nwkTxPhyActiveFrame+0x1>
    775a:	10 92 57 1b 	sts	0x1B57, r1	; 0x801b57 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    775e:	e6 e5       	ldi	r30, 0x56	; 86
    7760:	f4 e2       	ldi	r31, 0x24	; 36
    7762:	86 a1       	ldd	r24, Z+38	; 0x26
    7764:	97 a1       	ldd	r25, Z+39	; 0x27
    7766:	01 97       	sbiw	r24, 0x01	; 1
    7768:	97 a3       	std	Z+39, r25	; 0x27
    776a:	86 a3       	std	Z+38, r24	; 0x26
    776c:	08 95       	ret

0000776e <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    776e:	9f 92       	push	r9
    7770:	af 92       	push	r10
    7772:	bf 92       	push	r11
    7774:	cf 92       	push	r12
    7776:	df 92       	push	r13
    7778:	ef 92       	push	r14
    777a:	ff 92       	push	r15
    777c:	0f 93       	push	r16
    777e:	1f 93       	push	r17
    7780:	cf 93       	push	r28
    7782:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    7784:	c0 e0       	ldi	r28, 0x00	; 0
    7786:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    7788:	0f 2e       	mov	r0, r31
    778a:	f4 e1       	ldi	r31, 0x14	; 20
    778c:	af 2e       	mov	r10, r31
    778e:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    7790:	06 e5       	ldi	r16, 0x56	; 86
    7792:	14 e2       	ldi	r17, 0x24	; 36
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    7794:	0f 2e       	mov	r0, r31
    7796:	f7 e1       	ldi	r31, 0x17	; 23
    7798:	df 2e       	mov	r13, r31
    779a:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    779c:	0f 2e       	mov	r0, r31
    779e:	f6 e1       	ldi	r31, 0x16	; 22
    77a0:	9f 2e       	mov	r9, r31
    77a2:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    77a4:	0f 2e       	mov	r0, r31
    77a6:	f9 e2       	ldi	r31, 0x29	; 41
    77a8:	ef 2e       	mov	r14, r31
    77aa:	f1 2c       	mov	r15, r1
    77ac:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    77ae:	0f 2e       	mov	r0, r31
    77b0:	f3 e1       	ldi	r31, 0x13	; 19
    77b2:	cf 2e       	mov	r12, r31
    77b4:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    77b6:	0f 2e       	mov	r0, r31
    77b8:	f1 e1       	ldi	r31, 0x11	; 17
    77ba:	bf 2e       	mov	r11, r31
    77bc:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    77be:	60 c0       	rjmp	.+192    	; 0x7880 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    77c0:	88 81       	ld	r24, Y
    77c2:	83 31       	cpi	r24, 0x13	; 19
    77c4:	c1 f0       	breq	.+48     	; 0x77f6 <nwkTxTaskHandler+0x88>
    77c6:	18 f4       	brcc	.+6      	; 0x77ce <nwkTxTaskHandler+0x60>
    77c8:	82 31       	cpi	r24, 0x12	; 18
    77ca:	39 f0       	breq	.+14     	; 0x77da <nwkTxTaskHandler+0x6c>
    77cc:	59 c0       	rjmp	.+178    	; 0x7880 <nwkTxTaskHandler+0x112>
    77ce:	85 31       	cpi	r24, 0x15	; 21
    77d0:	49 f1       	breq	.+82     	; 0x7824 <nwkTxTaskHandler+0xb6>
    77d2:	87 31       	cpi	r24, 0x17	; 23
    77d4:	09 f4       	brne	.+2      	; 0x77d8 <nwkTxTaskHandler+0x6a>
    77d6:	45 c0       	rjmp	.+138    	; 0x7862 <nwkTxTaskHandler+0xf4>
    77d8:	53 c0       	rjmp	.+166    	; 0x7880 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    77da:	fe 01       	movw	r30, r28
    77dc:	ec 57       	subi	r30, 0x7C	; 124
    77de:	ff 4f       	sbci	r31, 0xFF	; 255
    77e0:	80 81       	ld	r24, Z
    77e2:	91 81       	ldd	r25, Z+1	; 0x01
    77e4:	89 2b       	or	r24, r25
    77e6:	29 f0       	breq	.+10     	; 0x77f2 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    77e8:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    77ea:	8d e3       	ldi	r24, 0x3D	; 61
    77ec:	9b e1       	ldi	r25, 0x1B	; 27
    77ee:	4e d2       	rcall	.+1180   	; 0x7c8c <SYS_TimerStart>
    77f0:	47 c0       	rjmp	.+142    	; 0x7880 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    77f2:	c8 82       	st	Y, r12
    77f4:	45 c0       	rjmp	.+138    	; 0x7880 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    77f6:	80 91 57 1b 	lds	r24, 0x1B57	; 0x801b57 <nwkTxPhyActiveFrame>
    77fa:	90 91 58 1b 	lds	r25, 0x1B58	; 0x801b58 <nwkTxPhyActiveFrame+0x1>
    77fe:	89 2b       	or	r24, r25
    7800:	09 f0       	breq	.+2      	; 0x7804 <nwkTxTaskHandler+0x96>
    7802:	3e c0       	rjmp	.+124    	; 0x7880 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    7804:	d0 93 58 1b 	sts	0x1B58, r29	; 0x801b58 <nwkTxPhyActiveFrame+0x1>
    7808:	c0 93 57 1b 	sts	0x1B57, r28	; 0x801b57 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    780c:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    780e:	69 81       	ldd	r22, Y+1	; 0x01
    7810:	ce 01       	movw	r24, r28
    7812:	02 96       	adiw	r24, 0x02	; 2
    7814:	cb d0       	rcall	.+406    	; 0x79ac <PHY_DataReq>
          nwkIb.lock++;
    7816:	f8 01       	movw	r30, r16
    7818:	86 a1       	ldd	r24, Z+38	; 0x26
    781a:	97 a1       	ldd	r25, Z+39	; 0x27
    781c:	01 96       	adiw	r24, 0x01	; 1
    781e:	97 a3       	std	Z+39, r25	; 0x27
    7820:	86 a3       	std	Z+38, r24	; 0x26
    7822:	2e c0       	rjmp	.+92     	; 0x7880 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    7824:	fe 01       	movw	r30, r28
    7826:	ed 57       	subi	r30, 0x7D	; 125
    7828:	ff 4f       	sbci	r31, 0xFF	; 255
    782a:	80 81       	ld	r24, Z
    782c:	81 11       	cpse	r24, r1
    782e:	17 c0       	rjmp	.+46     	; 0x785e <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    7830:	2d 85       	ldd	r18, Y+13	; 0x0d
    7832:	3e 85       	ldd	r19, Y+14	; 0x0e
    7834:	f8 01       	movw	r30, r16
    7836:	80 81       	ld	r24, Z
    7838:	91 81       	ldd	r25, Z+1	; 0x01
    783a:	28 17       	cp	r18, r24
    783c:	39 07       	cpc	r19, r25
    783e:	69 f4       	brne	.+26     	; 0x785a <nwkTxTaskHandler+0xec>
    7840:	8b 85       	ldd	r24, Y+11	; 0x0b
    7842:	80 ff       	sbrs	r24, 0
    7844:	0a c0       	rjmp	.+20     	; 0x785a <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    7846:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    7848:	fe 01       	movw	r30, r28
    784a:	ec 57       	subi	r30, 0x7C	; 124
    784c:	ff 4f       	sbci	r31, 0xFF	; 255
    784e:	f1 82       	std	Z+1, r15	; 0x01
    7850:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    7852:	8a e4       	ldi	r24, 0x4A	; 74
    7854:	9b e1       	ldi	r25, 0x1B	; 27
    7856:	1a d2       	rcall	.+1076   	; 0x7c8c <SYS_TimerStart>
    7858:	13 c0       	rjmp	.+38     	; 0x7880 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    785a:	d8 82       	st	Y, r13
    785c:	11 c0       	rjmp	.+34     	; 0x7880 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    785e:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    7860:	0f c0       	rjmp	.+30     	; 0x7880 <nwkTxTaskHandler+0x112>
    7862:	ce 01       	movw	r24, r28
    7864:	b8 da       	rcall	.-2704   	; 0x6dd6 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    7866:	fe 01       	movw	r30, r28
    7868:	e9 57       	subi	r30, 0x79	; 121
    786a:	ff 4f       	sbci	r31, 0xFF	; 255
    786c:	01 90       	ld	r0, Z+
    786e:	f0 81       	ld	r31, Z
    7870:	e0 2d       	mov	r30, r0
    7872:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    7874:	19 f4       	brne	.+6      	; 0x787c <nwkTxTaskHandler+0x10e>
    7876:	ce 01       	movw	r24, r28
    7878:	8f d9       	rcall	.-3298   	; 0x6b98 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    787a:	02 c0       	rjmp	.+4      	; 0x7880 <nwkTxTaskHandler+0x112>
    787c:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    787e:	19 95       	eicall
    7880:	ce 01       	movw	r24, r28
    7882:	94 d9       	rcall	.-3288   	; 0x6bac <nwkFrameNext>
    7884:	ec 01       	movw	r28, r24
    7886:	89 2b       	or	r24, r25
    7888:	09 f0       	breq	.+2      	; 0x788c <nwkTxTaskHandler+0x11e>
    788a:	9a cf       	rjmp	.-204    	; 0x77c0 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    788c:	df 91       	pop	r29
    788e:	cf 91       	pop	r28
    7890:	1f 91       	pop	r17
    7892:	0f 91       	pop	r16
    7894:	ff 90       	pop	r15
    7896:	ef 90       	pop	r14
    7898:	df 90       	pop	r13
    789a:	cf 90       	pop	r12
    789c:	bf 90       	pop	r11
    789e:	af 90       	pop	r10
    78a0:	9f 90       	pop	r9
    78a2:	08 95       	ret

000078a4 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    78a4:	80 91 59 1b 	lds	r24, 0x1B59	; 0x801b59 <phyBand>
    78a8:	98 2f       	mov	r25, r24
    78aa:	9f 70       	andi	r25, 0x0F	; 15
    78ac:	e4 e5       	ldi	r30, 0x54	; 84
    78ae:	f1 e0       	ldi	r31, 0x01	; 1
    78b0:	80 81       	ld	r24, Z
    78b2:	80 7f       	andi	r24, 0xF0	; 240
    78b4:	89 2b       	or	r24, r25
    78b6:	80 83       	st	Z, r24
    78b8:	80 91 59 1b 	lds	r24, 0x1B59	; 0x801b59 <phyBand>
    78bc:	88 23       	and	r24, r24
    78be:	29 f0       	breq	.+10     	; 0x78ca <phySetChannel+0x26>
    78c0:	80 91 5a 1b 	lds	r24, 0x1B5A	; 0x801b5a <phyChannel>
    78c4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    78c8:	08 95       	ret
    78ca:	80 91 5a 1b 	lds	r24, 0x1B5A	; 0x801b5a <phyChannel>
    78ce:	98 2f       	mov	r25, r24
    78d0:	9f 71       	andi	r25, 0x1F	; 31
    78d2:	e8 e4       	ldi	r30, 0x48	; 72
    78d4:	f1 e0       	ldi	r31, 0x01	; 1
    78d6:	80 81       	ld	r24, Z
    78d8:	80 7e       	andi	r24, 0xE0	; 224
    78da:	89 2b       	or	r24, r25
    78dc:	80 83       	st	Z, r24
    78de:	08 95       	ret

000078e0 <phyTrxSetState>:
    78e0:	93 e0       	ldi	r25, 0x03	; 3
    78e2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    78e6:	e1 e4       	ldi	r30, 0x41	; 65
    78e8:	f1 e0       	ldi	r31, 0x01	; 1
    78ea:	90 81       	ld	r25, Z
    78ec:	9f 71       	andi	r25, 0x1F	; 31
    78ee:	98 30       	cpi	r25, 0x08	; 8
    78f0:	e1 f7       	brne	.-8      	; 0x78ea <phyTrxSetState+0xa>
    78f2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    78f6:	e1 e4       	ldi	r30, 0x41	; 65
    78f8:	f1 e0       	ldi	r31, 0x01	; 1
    78fa:	90 81       	ld	r25, Z
    78fc:	9f 71       	andi	r25, 0x1F	; 31
    78fe:	89 13       	cpse	r24, r25
    7900:	fc cf       	rjmp	.-8      	; 0x78fa <phyTrxSetState+0x1a>
    7902:	08 95       	ret

00007904 <phySetRxState>:
    7904:	88 e0       	ldi	r24, 0x08	; 8
    7906:	ec df       	rcall	.-40     	; 0x78e0 <phyTrxSetState>
    7908:	8f ef       	ldi	r24, 0xFF	; 255
    790a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    790e:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <phyRxState>
    7912:	88 23       	and	r24, r24
    7914:	11 f0       	breq	.+4      	; 0x791a <phySetRxState+0x16>
    7916:	86 e1       	ldi	r24, 0x16	; 22
    7918:	e3 cf       	rjmp	.-58     	; 0x78e0 <phyTrxSetState>
    791a:	08 95       	ret

0000791c <PHY_Init>:
    791c:	e9 e3       	ldi	r30, 0x39	; 57
    791e:	f1 e0       	ldi	r31, 0x01	; 1
    7920:	80 81       	ld	r24, Z
    7922:	81 60       	ori	r24, 0x01	; 1
    7924:	80 83       	st	Z, r24
    7926:	10 92 5b 1b 	sts	0x1B5B, r1	; 0x801b5b <phyRxState>
    792a:	10 92 59 1b 	sts	0x1B59, r1	; 0x801b59 <phyBand>
    792e:	81 e0       	ldi	r24, 0x01	; 1
    7930:	80 93 dc 1b 	sts	0x1BDC, r24	; 0x801bdc <phyState>
    7934:	88 e0       	ldi	r24, 0x08	; 8
    7936:	d4 df       	rcall	.-88     	; 0x78e0 <phyTrxSetState>
    7938:	8b ee       	ldi	r24, 0xEB	; 235
    793a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    793e:	ec e4       	ldi	r30, 0x4C	; 76
    7940:	f1 e0       	ldi	r31, 0x01	; 1
    7942:	80 81       	ld	r24, Z
    7944:	80 68       	ori	r24, 0x80	; 128
    7946:	80 83       	st	Z, r24
    7948:	08 95       	ret

0000794a <PHY_SetRxState>:
    794a:	80 93 5b 1b 	sts	0x1B5B, r24	; 0x801b5b <phyRxState>
    794e:	da cf       	rjmp	.-76     	; 0x7904 <phySetRxState>
    7950:	08 95       	ret

00007952 <PHY_SetChannel>:
    7952:	80 93 5a 1b 	sts	0x1B5A, r24	; 0x801b5a <phyChannel>
    7956:	a6 cf       	rjmp	.-180    	; 0x78a4 <phySetChannel>
    7958:	08 95       	ret

0000795a <PHY_SetPanId>:
    795a:	cf 93       	push	r28
    795c:	df 93       	push	r29
    795e:	1f 92       	push	r1
    7960:	1f 92       	push	r1
    7962:	cd b7       	in	r28, 0x3d	; 61
    7964:	de b7       	in	r29, 0x3e	; 62
    7966:	9a 83       	std	Y+2, r25	; 0x02
    7968:	89 83       	std	Y+1, r24	; 0x01
    796a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    796e:	8a 81       	ldd	r24, Y+2	; 0x02
    7970:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    7974:	0f 90       	pop	r0
    7976:	0f 90       	pop	r0
    7978:	df 91       	pop	r29
    797a:	cf 91       	pop	r28
    797c:	08 95       	ret

0000797e <PHY_SetShortAddr>:
    797e:	cf 93       	push	r28
    7980:	df 93       	push	r29
    7982:	1f 92       	push	r1
    7984:	1f 92       	push	r1
    7986:	cd b7       	in	r28, 0x3d	; 61
    7988:	de b7       	in	r29, 0x3e	; 62
    798a:	9a 83       	std	Y+2, r25	; 0x02
    798c:	89 83       	std	Y+1, r24	; 0x01
    798e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    7992:	8a 81       	ldd	r24, Y+2	; 0x02
    7994:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    7998:	99 81       	ldd	r25, Y+1	; 0x01
    799a:	8a 81       	ldd	r24, Y+2	; 0x02
    799c:	89 0f       	add	r24, r25
    799e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    79a2:	0f 90       	pop	r0
    79a4:	0f 90       	pop	r0
    79a6:	df 91       	pop	r29
    79a8:	cf 91       	pop	r28
    79aa:	08 95       	ret

000079ac <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    79ac:	1f 93       	push	r17
    79ae:	cf 93       	push	r28
    79b0:	df 93       	push	r29
    79b2:	18 2f       	mov	r17, r24
    79b4:	d9 2f       	mov	r29, r25
    79b6:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    79b8:	89 e1       	ldi	r24, 0x19	; 25
    79ba:	92 df       	rcall	.-220    	; 0x78e0 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    79bc:	8f ef       	ldi	r24, 0xFF	; 255
    79be:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    79c2:	82 e0       	ldi	r24, 0x02	; 2
    79c4:	8c 0f       	add	r24, r28
    79c6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    79ca:	cc 23       	and	r28, r28
    79cc:	71 f0       	breq	.+28     	; 0x79ea <PHY_DataReq+0x3e>
    79ce:	a1 2f       	mov	r26, r17
    79d0:	bd 2f       	mov	r27, r29
    79d2:	c1 50       	subi	r28, 0x01	; 1
    79d4:	6c 2f       	mov	r22, r28
    79d6:	70 e0       	ldi	r23, 0x00	; 0
    79d8:	6e 57       	subi	r22, 0x7E	; 126
    79da:	7e 4f       	sbci	r23, 0xFE	; 254
    79dc:	e1 e8       	ldi	r30, 0x81	; 129
    79de:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    79e0:	8d 91       	ld	r24, X+
    79e2:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    79e4:	e6 17       	cp	r30, r22
    79e6:	f7 07       	cpc	r31, r23
    79e8:	d9 f7       	brne	.-10     	; 0x79e0 <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    79ea:	83 e0       	ldi	r24, 0x03	; 3
    79ec:	80 93 dc 1b 	sts	0x1BDC, r24	; 0x801bdc <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    79f0:	82 e0       	ldi	r24, 0x02	; 2
    79f2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    79f6:	df 91       	pop	r29
    79f8:	cf 91       	pop	r28
    79fa:	1f 91       	pop	r17
    79fc:	08 95       	ret

000079fe <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    79fe:	1f 93       	push	r17
    7a00:	cf 93       	push	r28
    7a02:	df 93       	push	r29
    7a04:	00 d0       	rcall	.+0      	; 0x7a06 <PHY_TaskHandler+0x8>
    7a06:	1f 92       	push	r1
    7a08:	1f 92       	push	r1
    7a0a:	cd b7       	in	r28, 0x3d	; 61
    7a0c:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    7a0e:	80 91 dc 1b 	lds	r24, 0x1BDC	; 0x801bdc <phyState>
    7a12:	82 30       	cpi	r24, 0x02	; 2
    7a14:	09 f4       	brne	.+2      	; 0x7a18 <PHY_TaskHandler+0x1a>
    7a16:	65 c0       	rjmp	.+202    	; 0x7ae2 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    7a18:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    7a1c:	83 ff       	sbrs	r24, 3
    7a1e:	3e c0       	rjmp	.+124    	; 0x7a9c <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    7a20:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    7a24:	6a 2f       	mov	r22, r26
    7a26:	70 e0       	ldi	r23, 0x00	; 0
    7a28:	ab 01       	movw	r20, r22
    7a2a:	4f 5f       	subi	r20, 0xFF	; 255
    7a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    7a2e:	80 e0       	ldi	r24, 0x00	; 0
    7a30:	90 e0       	ldi	r25, 0x00	; 0
    7a32:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    7a34:	fc 01       	movw	r30, r24
    7a36:	e0 58       	subi	r30, 0x80	; 128
    7a38:	fe 4f       	sbci	r31, 0xFE	; 254
    7a3a:	30 81       	ld	r19, Z
    7a3c:	fc 01       	movw	r30, r24
    7a3e:	e4 5a       	subi	r30, 0xA4	; 164
    7a40:	f4 4e       	sbci	r31, 0xE4	; 228
    7a42:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    7a44:	2f 5f       	subi	r18, 0xFF	; 255
    7a46:	82 2f       	mov	r24, r18
    7a48:	90 e0       	ldi	r25, 0x00	; 0
    7a4a:	84 17       	cp	r24, r20
    7a4c:	95 07       	cpc	r25, r21
    7a4e:	94 f3       	brlt	.-28     	; 0x7a34 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    7a50:	8c e5       	ldi	r24, 0x5C	; 92
    7a52:	9b e1       	ldi	r25, 0x1B	; 27
    7a54:	9a 83       	std	Y+2, r25	; 0x02
    7a56:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    7a58:	a2 50       	subi	r26, 0x02	; 2
    7a5a:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    7a5c:	fb 01       	movw	r30, r22
    7a5e:	e4 5a       	subi	r30, 0xA4	; 164
    7a60:	f4 4e       	sbci	r31, 0xE4	; 228
    7a62:	80 81       	ld	r24, Z
    7a64:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    7a66:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    7a6a:	8a 55       	subi	r24, 0x5A	; 90
    7a6c:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    7a6e:	ce 01       	movw	r24, r28
    7a70:	01 96       	adiw	r24, 0x01	; 1
    7a72:	bd da       	rcall	.-2694   	; 0x6fee <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    7a74:	e1 e4       	ldi	r30, 0x41	; 65
    7a76:	f1 e0       	ldi	r31, 0x01	; 1
    7a78:	80 81       	ld	r24, Z
    7a7a:	8f 71       	andi	r24, 0x1F	; 31
    7a7c:	86 31       	cpi	r24, 0x16	; 22
    7a7e:	e1 f7       	brne	.-8      	; 0x7a78 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    7a80:	ef e4       	ldi	r30, 0x4F	; 79
    7a82:	f1 e0       	ldi	r31, 0x01	; 1
    7a84:	80 81       	ld	r24, Z
    7a86:	88 60       	ori	r24, 0x08	; 8
    7a88:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    7a8a:	ec e4       	ldi	r30, 0x4C	; 76
    7a8c:	f1 e0       	ldi	r31, 0x01	; 1
    7a8e:	80 81       	ld	r24, Z
    7a90:	8f 77       	andi	r24, 0x7F	; 127
    7a92:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    7a94:	80 81       	ld	r24, Z
    7a96:	80 68       	ori	r24, 0x80	; 128
    7a98:	80 83       	st	Z, r24
    7a9a:	23 c0       	rjmp	.+70     	; 0x7ae2 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    7a9c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    7aa0:	86 ff       	sbrs	r24, 6
    7aa2:	1f c0       	rjmp	.+62     	; 0x7ae2 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    7aa4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    7aa8:	8f 71       	andi	r24, 0x1F	; 31
    7aaa:	89 31       	cpi	r24, 0x19	; 25
    7aac:	a9 f4       	brne	.+42     	; 0x7ad8 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    7aae:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    7ab2:	12 95       	swap	r17
    7ab4:	16 95       	lsr	r17
    7ab6:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    7ab8:	49 f0       	breq	.+18     	; 0x7acc <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    7aba:	13 30       	cpi	r17, 0x03	; 3
    7abc:	21 f0       	breq	.+8      	; 0x7ac6 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    7abe:	15 30       	cpi	r17, 0x05	; 5
    7ac0:	21 f0       	breq	.+8      	; 0x7aca <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    7ac2:	13 e0       	ldi	r17, 0x03	; 3
    7ac4:	03 c0       	rjmp	.+6      	; 0x7acc <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    7ac6:	11 e0       	ldi	r17, 0x01	; 1
    7ac8:	01 c0       	rjmp	.+2      	; 0x7acc <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    7aca:	12 e0       	ldi	r17, 0x02	; 2
    7acc:	1b df       	rcall	.-458    	; 0x7904 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    7ace:	81 e0       	ldi	r24, 0x01	; 1
    7ad0:	80 93 dc 1b 	sts	0x1BDC, r24	; 0x801bdc <phyState>

      PHY_DataConf(status);
    7ad4:	81 2f       	mov	r24, r17
    7ad6:	28 de       	rcall	.-944    	; 0x7728 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    7ad8:	ef e4       	ldi	r30, 0x4F	; 79
    7ada:	f1 e0       	ldi	r31, 0x01	; 1
    7adc:	80 81       	ld	r24, Z
    7ade:	80 64       	ori	r24, 0x40	; 64
    7ae0:	80 83       	st	Z, r24
  }
}
    7ae2:	0f 90       	pop	r0
    7ae4:	0f 90       	pop	r0
    7ae6:	0f 90       	pop	r0
    7ae8:	0f 90       	pop	r0
    7aea:	0f 90       	pop	r0
    7aec:	df 91       	pop	r29
    7aee:	cf 91       	pop	r28
    7af0:	1f 91       	pop	r17
    7af2:	08 95       	ret

00007af4 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    7af4:	0e 94 be 21 	call	0x437c	; 0x437c <HAL_Init>
  SYS_TimerInit();
    7af8:	6d d0       	rcall	.+218    	; 0x7bd4 <SYS_TimerInit>
  PHY_Init();
    7afa:	10 df       	rcall	.-480    	; 0x791c <PHY_Init>
    7afc:	0c 94 67 34 	jmp	0x68ce	; 0x68ce <NWK_Init>
  NWK_Init();
    7b00:	08 95       	ret

00007b02 <SYS_TaskHandler>:
    7b02:	7d df       	rcall	.-262    	; 0x79fe <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    7b04:	0e 94 95 34 	call	0x692a	; 0x692a <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    7b08:	cc c0       	rjmp	.+408    	; 0x7ca2 <SYS_TimerTaskHandler>
    7b0a:	08 95       	ret

00007b0c <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    7b0c:	0f 93       	push	r16
    7b0e:	1f 93       	push	r17
    7b10:	cf 93       	push	r28
    7b12:	df 93       	push	r29
    7b14:	ec 01       	movw	r28, r24
  if (timers)
    7b16:	80 91 dd 1b 	lds	r24, 0x1BDD	; 0x801bdd <timers>
    7b1a:	90 91 de 1b 	lds	r25, 0x1BDE	; 0x801bde <timers+0x1>
    7b1e:	00 97       	sbiw	r24, 0x00	; 0
    7b20:	09 f4       	brne	.+2      	; 0x7b24 <placeTimer+0x18>
    7b22:	45 c0       	rjmp	.+138    	; 0x7bae <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    7b24:	4e 81       	ldd	r20, Y+6	; 0x06
    7b26:	5f 81       	ldd	r21, Y+7	; 0x07
    7b28:	68 85       	ldd	r22, Y+8	; 0x08
    7b2a:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    7b2c:	fc 01       	movw	r30, r24
    7b2e:	02 81       	ldd	r16, Z+2	; 0x02
    7b30:	13 81       	ldd	r17, Z+3	; 0x03
    7b32:	24 81       	ldd	r18, Z+4	; 0x04
    7b34:	35 81       	ldd	r19, Z+5	; 0x05
    7b36:	40 17       	cp	r20, r16
    7b38:	51 07       	cpc	r21, r17
    7b3a:	62 07       	cpc	r22, r18
    7b3c:	73 07       	cpc	r23, r19
    7b3e:	60 f0       	brcs	.+24     	; 0x7b58 <placeTimer+0x4c>
    7b40:	dc 01       	movw	r26, r24
    7b42:	17 c0       	rjmp	.+46     	; 0x7b72 <placeTimer+0x66>
    7b44:	02 81       	ldd	r16, Z+2	; 0x02
    7b46:	13 81       	ldd	r17, Z+3	; 0x03
    7b48:	24 81       	ldd	r18, Z+4	; 0x04
    7b4a:	35 81       	ldd	r19, Z+5	; 0x05
    7b4c:	40 17       	cp	r20, r16
    7b4e:	51 07       	cpc	r21, r17
    7b50:	62 07       	cpc	r22, r18
    7b52:	73 07       	cpc	r23, r19
    7b54:	68 f4       	brcc	.+26     	; 0x7b70 <placeTimer+0x64>
    7b56:	03 c0       	rjmp	.+6      	; 0x7b5e <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    7b58:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    7b5a:	a0 e0       	ldi	r26, 0x00	; 0
    7b5c:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    7b5e:	04 1b       	sub	r16, r20
    7b60:	15 0b       	sbc	r17, r21
    7b62:	26 0b       	sbc	r18, r22
    7b64:	37 0b       	sbc	r19, r23
    7b66:	02 83       	std	Z+2, r16	; 0x02
    7b68:	13 83       	std	Z+3, r17	; 0x03
    7b6a:	24 83       	std	Z+4, r18	; 0x04
    7b6c:	35 83       	std	Z+5, r19	; 0x05
         break;
    7b6e:	0a c0       	rjmp	.+20     	; 0x7b84 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    7b70:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    7b72:	40 1b       	sub	r20, r16
    7b74:	51 0b       	sbc	r21, r17
    7b76:	62 0b       	sbc	r22, r18
    7b78:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    7b7a:	ed 91       	ld	r30, X+
    7b7c:	fc 91       	ld	r31, X
    7b7e:	11 97       	sbiw	r26, 0x01	; 1
    7b80:	30 97       	sbiw	r30, 0x00	; 0
    7b82:	01 f7       	brne	.-64     	; 0x7b44 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    7b84:	4a 83       	std	Y+2, r20	; 0x02
    7b86:	5b 83       	std	Y+3, r21	; 0x03
    7b88:	6c 83       	std	Y+4, r22	; 0x04
    7b8a:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    7b8c:	10 97       	sbiw	r26, 0x00	; 0
    7b8e:	41 f0       	breq	.+16     	; 0x7ba0 <placeTimer+0x94>
    {
      timer->next = prev->next;
    7b90:	8d 91       	ld	r24, X+
    7b92:	9c 91       	ld	r25, X
    7b94:	11 97       	sbiw	r26, 0x01	; 1
    7b96:	99 83       	std	Y+1, r25	; 0x01
    7b98:	88 83       	st	Y, r24
      prev->next = timer;
    7b9a:	cd 93       	st	X+, r28
    7b9c:	dc 93       	st	X, r29
    7b9e:	15 c0       	rjmp	.+42     	; 0x7bca <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    7ba0:	99 83       	std	Y+1, r25	; 0x01
    7ba2:	88 83       	st	Y, r24
      timers = timer;
    7ba4:	d0 93 de 1b 	sts	0x1BDE, r29	; 0x801bde <timers+0x1>
    7ba8:	c0 93 dd 1b 	sts	0x1BDD, r28	; 0x801bdd <timers>
    7bac:	0e c0       	rjmp	.+28     	; 0x7bca <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    7bae:	19 82       	std	Y+1, r1	; 0x01
    7bb0:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    7bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    7bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    7bb6:	a8 85       	ldd	r26, Y+8	; 0x08
    7bb8:	b9 85       	ldd	r27, Y+9	; 0x09
    7bba:	8a 83       	std	Y+2, r24	; 0x02
    7bbc:	9b 83       	std	Y+3, r25	; 0x03
    7bbe:	ac 83       	std	Y+4, r26	; 0x04
    7bc0:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    7bc2:	d0 93 de 1b 	sts	0x1BDE, r29	; 0x801bde <timers+0x1>
    7bc6:	c0 93 dd 1b 	sts	0x1BDD, r28	; 0x801bdd <timers>
  }
}
    7bca:	df 91       	pop	r29
    7bcc:	cf 91       	pop	r28
    7bce:	1f 91       	pop	r17
    7bd0:	0f 91       	pop	r16
    7bd2:	08 95       	ret

00007bd4 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    7bd4:	10 92 de 1b 	sts	0x1BDE, r1	; 0x801bde <timers+0x1>
    7bd8:	10 92 dd 1b 	sts	0x1BDD, r1	; 0x801bdd <timers>
    7bdc:	08 95       	ret

00007bde <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    7bde:	cf 93       	push	r28
    7be0:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    7be2:	a0 91 dd 1b 	lds	r26, 0x1BDD	; 0x801bdd <timers>
    7be6:	b0 91 de 1b 	lds	r27, 0x1BDE	; 0x801bde <timers+0x1>
    7bea:	10 97       	sbiw	r26, 0x00	; 0
    7bec:	91 f1       	breq	.+100    	; 0x7c52 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    7bee:	a8 17       	cp	r26, r24
    7bf0:	b9 07       	cpc	r27, r25
    7bf2:	51 f5       	brne	.+84     	; 0x7c48 <SYS_TimerStop+0x6a>
    7bf4:	0a c0       	rjmp	.+20     	; 0x7c0a <SYS_TimerStop+0x2c>
    7bf6:	8e 17       	cp	r24, r30
    7bf8:	9f 07       	cpc	r25, r31
    7bfa:	29 f5       	brne	.+74     	; 0x7c46 <SYS_TimerStop+0x68>
    {
      if (prev)
    7bfc:	10 97       	sbiw	r26, 0x00	; 0
    7bfe:	31 f0       	breq	.+12     	; 0x7c0c <SYS_TimerStop+0x2e>
        prev->next = t->next;
    7c00:	20 81       	ld	r18, Z
    7c02:	31 81       	ldd	r19, Z+1	; 0x01
    7c04:	2d 93       	st	X+, r18
    7c06:	3c 93       	st	X, r19
    7c08:	07 c0       	rjmp	.+14     	; 0x7c18 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    7c0a:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    7c0c:	20 81       	ld	r18, Z
    7c0e:	31 81       	ldd	r19, Z+1	; 0x01
    7c10:	30 93 de 1b 	sts	0x1BDE, r19	; 0x801bde <timers+0x1>
    7c14:	20 93 dd 1b 	sts	0x1BDD, r18	; 0x801bdd <timers>

      if (t->next)
    7c18:	01 90       	ld	r0, Z+
    7c1a:	f0 81       	ld	r31, Z
    7c1c:	e0 2d       	mov	r30, r0
    7c1e:	30 97       	sbiw	r30, 0x00	; 0
    7c20:	c1 f0       	breq	.+48     	; 0x7c52 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    7c22:	42 81       	ldd	r20, Z+2	; 0x02
    7c24:	53 81       	ldd	r21, Z+3	; 0x03
    7c26:	64 81       	ldd	r22, Z+4	; 0x04
    7c28:	75 81       	ldd	r23, Z+5	; 0x05
    7c2a:	ec 01       	movw	r28, r24
    7c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    7c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    7c30:	ac 81       	ldd	r26, Y+4	; 0x04
    7c32:	bd 81       	ldd	r27, Y+5	; 0x05
    7c34:	84 0f       	add	r24, r20
    7c36:	95 1f       	adc	r25, r21
    7c38:	a6 1f       	adc	r26, r22
    7c3a:	b7 1f       	adc	r27, r23
    7c3c:	82 83       	std	Z+2, r24	; 0x02
    7c3e:	93 83       	std	Z+3, r25	; 0x03
    7c40:	a4 83       	std	Z+4, r26	; 0x04
    7c42:	b5 83       	std	Z+5, r27	; 0x05
    7c44:	06 c0       	rjmp	.+12     	; 0x7c52 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    7c46:	df 01       	movw	r26, r30
    7c48:	ed 91       	ld	r30, X+
    7c4a:	fc 91       	ld	r31, X
    7c4c:	11 97       	sbiw	r26, 0x01	; 1
    7c4e:	30 97       	sbiw	r30, 0x00	; 0
    7c50:	91 f6       	brne	.-92     	; 0x7bf6 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    7c52:	df 91       	pop	r29
    7c54:	cf 91       	pop	r28
    7c56:	08 95       	ret

00007c58 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    7c58:	e0 91 dd 1b 	lds	r30, 0x1BDD	; 0x801bdd <timers>
    7c5c:	f0 91 de 1b 	lds	r31, 0x1BDE	; 0x801bde <timers+0x1>
    7c60:	30 97       	sbiw	r30, 0x00	; 0
    7c62:	71 f0       	breq	.+28     	; 0x7c80 <SYS_TimerStarted+0x28>
    if (t == timer)
    7c64:	e8 17       	cp	r30, r24
    7c66:	f9 07       	cpc	r31, r25
    7c68:	21 f4       	brne	.+8      	; 0x7c72 <SYS_TimerStarted+0x1a>
    7c6a:	0c c0       	rjmp	.+24     	; 0x7c84 <SYS_TimerStarted+0x2c>
    7c6c:	8e 17       	cp	r24, r30
    7c6e:	9f 07       	cpc	r25, r31
    7c70:	59 f0       	breq	.+22     	; 0x7c88 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    7c72:	01 90       	ld	r0, Z+
    7c74:	f0 81       	ld	r31, Z
    7c76:	e0 2d       	mov	r30, r0
    7c78:	30 97       	sbiw	r30, 0x00	; 0
    7c7a:	c1 f7       	brne	.-16     	; 0x7c6c <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    7c7c:	80 e0       	ldi	r24, 0x00	; 0
    7c7e:	08 95       	ret
    7c80:	80 e0       	ldi	r24, 0x00	; 0
    7c82:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    7c84:	81 e0       	ldi	r24, 0x01	; 1
    7c86:	08 95       	ret
    7c88:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    7c8a:	08 95       	ret

00007c8c <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    7c8c:	cf 93       	push	r28
    7c8e:	df 93       	push	r29
    7c90:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    7c92:	e2 df       	rcall	.-60     	; 0x7c58 <SYS_TimerStarted>
    7c94:	81 11       	cpse	r24, r1
    7c96:	02 c0       	rjmp	.+4      	; 0x7c9c <SYS_TimerStart+0x10>
    placeTimer(timer);
    7c98:	ce 01       	movw	r24, r28
    7c9a:	38 df       	rcall	.-400    	; 0x7b0c <placeTimer>
}
    7c9c:	df 91       	pop	r29
    7c9e:	cf 91       	pop	r28
    7ca0:	08 95       	ret

00007ca2 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    7ca2:	cf 92       	push	r12
    7ca4:	df 92       	push	r13
    7ca6:	ef 92       	push	r14
    7ca8:	ff 92       	push	r15
    7caa:	cf 93       	push	r28
    7cac:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    7cae:	80 91 55 24 	lds	r24, 0x2455	; 0x802455 <halTimerIrqCount>
    7cb2:	88 23       	and	r24, r24
    7cb4:	09 f4       	brne	.+2      	; 0x7cb8 <SYS_TimerTaskHandler+0x16>
    7cb6:	59 c0       	rjmp	.+178    	; 0x7d6a <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    7cb8:	8f b7       	in	r24, 0x3f	; 63
    7cba:	f8 94       	cli
    cnt = halTimerIrqCount;
    7cbc:	c0 90 55 24 	lds	r12, 0x2455	; 0x802455 <halTimerIrqCount>
    halTimerIrqCount = 0;
    7cc0:	10 92 55 24 	sts	0x2455, r1	; 0x802455 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    7cc4:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    7cc6:	d1 2c       	mov	r13, r1
    7cc8:	e1 2c       	mov	r14, r1
    7cca:	f1 2c       	mov	r15, r1
    7ccc:	cc 0c       	add	r12, r12
    7cce:	dd 1c       	adc	r13, r13
    7cd0:	ee 1c       	adc	r14, r14
    7cd2:	ff 1c       	adc	r15, r15
    7cd4:	d7 01       	movw	r26, r14
    7cd6:	c6 01       	movw	r24, r12
    7cd8:	88 0f       	add	r24, r24
    7cda:	99 1f       	adc	r25, r25
    7cdc:	aa 1f       	adc	r26, r26
    7cde:	bb 1f       	adc	r27, r27
    7ce0:	88 0f       	add	r24, r24
    7ce2:	99 1f       	adc	r25, r25
    7ce4:	aa 1f       	adc	r26, r26
    7ce6:	bb 1f       	adc	r27, r27
    7ce8:	c8 0e       	add	r12, r24
    7cea:	d9 1e       	adc	r13, r25
    7cec:	ea 1e       	adc	r14, r26
    7cee:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    7cf0:	c0 91 dd 1b 	lds	r28, 0x1BDD	; 0x801bdd <timers>
    7cf4:	d0 91 de 1b 	lds	r29, 0x1BDE	; 0x801bde <timers+0x1>
    7cf8:	20 97       	sbiw	r28, 0x00	; 0
    7cfa:	b9 f1       	breq	.+110    	; 0x7d6a <SYS_TimerTaskHandler+0xc8>
    7cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    7cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    7d00:	ac 81       	ldd	r26, Y+4	; 0x04
    7d02:	bd 81       	ldd	r27, Y+5	; 0x05
    7d04:	c8 16       	cp	r12, r24
    7d06:	d9 06       	cpc	r13, r25
    7d08:	ea 06       	cpc	r14, r26
    7d0a:	fb 06       	cpc	r15, r27
    7d0c:	10 f1       	brcs	.+68     	; 0x7d52 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    7d0e:	c8 1a       	sub	r12, r24
    7d10:	d9 0a       	sbc	r13, r25
    7d12:	ea 0a       	sbc	r14, r26
    7d14:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    7d16:	88 81       	ld	r24, Y
    7d18:	99 81       	ldd	r25, Y+1	; 0x01
    7d1a:	90 93 de 1b 	sts	0x1BDE, r25	; 0x801bde <timers+0x1>
    7d1e:	80 93 dd 1b 	sts	0x1BDD, r24	; 0x801bdd <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    7d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d24:	81 30       	cpi	r24, 0x01	; 1
    7d26:	11 f4       	brne	.+4      	; 0x7d2c <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    7d28:	ce 01       	movw	r24, r28
    7d2a:	f0 de       	rcall	.-544    	; 0x7b0c <placeTimer>
    timer->handler(timer);
    7d2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    7d2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    7d30:	ce 01       	movw	r24, r28
    7d32:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    7d34:	c0 91 dd 1b 	lds	r28, 0x1BDD	; 0x801bdd <timers>
    7d38:	d0 91 de 1b 	lds	r29, 0x1BDE	; 0x801bde <timers+0x1>
    7d3c:	20 97       	sbiw	r28, 0x00	; 0
    7d3e:	a9 f0       	breq	.+42     	; 0x7d6a <SYS_TimerTaskHandler+0xc8>
    7d40:	8a 81       	ldd	r24, Y+2	; 0x02
    7d42:	9b 81       	ldd	r25, Y+3	; 0x03
    7d44:	ac 81       	ldd	r26, Y+4	; 0x04
    7d46:	bd 81       	ldd	r27, Y+5	; 0x05
    7d48:	c8 16       	cp	r12, r24
    7d4a:	d9 06       	cpc	r13, r25
    7d4c:	ea 06       	cpc	r14, r26
    7d4e:	fb 06       	cpc	r15, r27
    7d50:	f0 f6       	brcc	.-68     	; 0x7d0e <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    7d52:	8a 81       	ldd	r24, Y+2	; 0x02
    7d54:	9b 81       	ldd	r25, Y+3	; 0x03
    7d56:	ac 81       	ldd	r26, Y+4	; 0x04
    7d58:	bd 81       	ldd	r27, Y+5	; 0x05
    7d5a:	8c 19       	sub	r24, r12
    7d5c:	9d 09       	sbc	r25, r13
    7d5e:	ae 09       	sbc	r26, r14
    7d60:	bf 09       	sbc	r27, r15
    7d62:	8a 83       	std	Y+2, r24	; 0x02
    7d64:	9b 83       	std	Y+3, r25	; 0x03
    7d66:	ac 83       	std	Y+4, r26	; 0x04
    7d68:	bd 83       	std	Y+5, r27	; 0x05
}
    7d6a:	df 91       	pop	r29
    7d6c:	cf 91       	pop	r28
    7d6e:	ff 90       	pop	r15
    7d70:	ef 90       	pop	r14
    7d72:	df 90       	pop	r13
    7d74:	cf 90       	pop	r12
    7d76:	08 95       	ret

00007d78 <__udivmodsi4>:
    7d78:	a1 e2       	ldi	r26, 0x21	; 33
    7d7a:	1a 2e       	mov	r1, r26
    7d7c:	aa 1b       	sub	r26, r26
    7d7e:	bb 1b       	sub	r27, r27
    7d80:	fd 01       	movw	r30, r26
    7d82:	0d c0       	rjmp	.+26     	; 0x7d9e <__udivmodsi4_ep>

00007d84 <__udivmodsi4_loop>:
    7d84:	aa 1f       	adc	r26, r26
    7d86:	bb 1f       	adc	r27, r27
    7d88:	ee 1f       	adc	r30, r30
    7d8a:	ff 1f       	adc	r31, r31
    7d8c:	a2 17       	cp	r26, r18
    7d8e:	b3 07       	cpc	r27, r19
    7d90:	e4 07       	cpc	r30, r20
    7d92:	f5 07       	cpc	r31, r21
    7d94:	20 f0       	brcs	.+8      	; 0x7d9e <__udivmodsi4_ep>
    7d96:	a2 1b       	sub	r26, r18
    7d98:	b3 0b       	sbc	r27, r19
    7d9a:	e4 0b       	sbc	r30, r20
    7d9c:	f5 0b       	sbc	r31, r21

00007d9e <__udivmodsi4_ep>:
    7d9e:	66 1f       	adc	r22, r22
    7da0:	77 1f       	adc	r23, r23
    7da2:	88 1f       	adc	r24, r24
    7da4:	99 1f       	adc	r25, r25
    7da6:	1a 94       	dec	r1
    7da8:	69 f7       	brne	.-38     	; 0x7d84 <__udivmodsi4_loop>
    7daa:	60 95       	com	r22
    7dac:	70 95       	com	r23
    7dae:	80 95       	com	r24
    7db0:	90 95       	com	r25
    7db2:	9b 01       	movw	r18, r22
    7db4:	ac 01       	movw	r20, r24
    7db6:	bd 01       	movw	r22, r26
    7db8:	cf 01       	movw	r24, r30
    7dba:	08 95       	ret

00007dbc <__tablejump2__>:
    7dbc:	ee 0f       	add	r30, r30
    7dbe:	ff 1f       	adc	r31, r31
    7dc0:	88 1f       	adc	r24, r24
    7dc2:	8b bf       	out	0x3b, r24	; 59
    7dc4:	07 90       	elpm	r0, Z+
    7dc6:	f6 91       	elpm	r31, Z
    7dc8:	e0 2d       	mov	r30, r0
    7dca:	19 94       	eijmp

00007dcc <__muluhisi3>:
    7dcc:	09 d0       	rcall	.+18     	; 0x7de0 <__umulhisi3>
    7dce:	a5 9f       	mul	r26, r21
    7dd0:	90 0d       	add	r25, r0
    7dd2:	b4 9f       	mul	r27, r20
    7dd4:	90 0d       	add	r25, r0
    7dd6:	a4 9f       	mul	r26, r20
    7dd8:	80 0d       	add	r24, r0
    7dda:	91 1d       	adc	r25, r1
    7ddc:	11 24       	eor	r1, r1
    7dde:	08 95       	ret

00007de0 <__umulhisi3>:
    7de0:	a2 9f       	mul	r26, r18
    7de2:	b0 01       	movw	r22, r0
    7de4:	b3 9f       	mul	r27, r19
    7de6:	c0 01       	movw	r24, r0
    7de8:	a3 9f       	mul	r26, r19
    7dea:	70 0d       	add	r23, r0
    7dec:	81 1d       	adc	r24, r1
    7dee:	11 24       	eor	r1, r1
    7df0:	91 1d       	adc	r25, r1
    7df2:	b2 9f       	mul	r27, r18
    7df4:	70 0d       	add	r23, r0
    7df6:	81 1d       	adc	r24, r1
    7df8:	11 24       	eor	r1, r1
    7dfa:	91 1d       	adc	r25, r1
    7dfc:	08 95       	ret

00007dfe <do_rand>:
    7dfe:	8f 92       	push	r8
    7e00:	9f 92       	push	r9
    7e02:	af 92       	push	r10
    7e04:	bf 92       	push	r11
    7e06:	cf 92       	push	r12
    7e08:	df 92       	push	r13
    7e0a:	ef 92       	push	r14
    7e0c:	ff 92       	push	r15
    7e0e:	cf 93       	push	r28
    7e10:	df 93       	push	r29
    7e12:	ec 01       	movw	r28, r24
    7e14:	68 81       	ld	r22, Y
    7e16:	79 81       	ldd	r23, Y+1	; 0x01
    7e18:	8a 81       	ldd	r24, Y+2	; 0x02
    7e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    7e1c:	61 15       	cp	r22, r1
    7e1e:	71 05       	cpc	r23, r1
    7e20:	81 05       	cpc	r24, r1
    7e22:	91 05       	cpc	r25, r1
    7e24:	21 f4       	brne	.+8      	; 0x7e2e <do_rand+0x30>
    7e26:	64 e2       	ldi	r22, 0x24	; 36
    7e28:	79 ed       	ldi	r23, 0xD9	; 217
    7e2a:	8b e5       	ldi	r24, 0x5B	; 91
    7e2c:	97 e0       	ldi	r25, 0x07	; 7
    7e2e:	2d e1       	ldi	r18, 0x1D	; 29
    7e30:	33 ef       	ldi	r19, 0xF3	; 243
    7e32:	41 e0       	ldi	r20, 0x01	; 1
    7e34:	50 e0       	ldi	r21, 0x00	; 0
    7e36:	75 d3       	rcall	.+1770   	; 0x8522 <__divmodsi4>
    7e38:	49 01       	movw	r8, r18
    7e3a:	5a 01       	movw	r10, r20
    7e3c:	9b 01       	movw	r18, r22
    7e3e:	ac 01       	movw	r20, r24
    7e40:	a7 ea       	ldi	r26, 0xA7	; 167
    7e42:	b1 e4       	ldi	r27, 0x41	; 65
    7e44:	c3 df       	rcall	.-122    	; 0x7dcc <__muluhisi3>
    7e46:	6b 01       	movw	r12, r22
    7e48:	7c 01       	movw	r14, r24
    7e4a:	ac ee       	ldi	r26, 0xEC	; 236
    7e4c:	b4 ef       	ldi	r27, 0xF4	; 244
    7e4e:	a5 01       	movw	r20, r10
    7e50:	94 01       	movw	r18, r8
    7e52:	85 d3       	rcall	.+1802   	; 0x855e <__mulohisi3>
    7e54:	dc 01       	movw	r26, r24
    7e56:	cb 01       	movw	r24, r22
    7e58:	8c 0d       	add	r24, r12
    7e5a:	9d 1d       	adc	r25, r13
    7e5c:	ae 1d       	adc	r26, r14
    7e5e:	bf 1d       	adc	r27, r15
    7e60:	b7 ff       	sbrs	r27, 7
    7e62:	03 c0       	rjmp	.+6      	; 0x7e6a <do_rand+0x6c>
    7e64:	01 97       	sbiw	r24, 0x01	; 1
    7e66:	a1 09       	sbc	r26, r1
    7e68:	b0 48       	sbci	r27, 0x80	; 128
    7e6a:	88 83       	st	Y, r24
    7e6c:	99 83       	std	Y+1, r25	; 0x01
    7e6e:	aa 83       	std	Y+2, r26	; 0x02
    7e70:	bb 83       	std	Y+3, r27	; 0x03
    7e72:	9f 77       	andi	r25, 0x7F	; 127
    7e74:	df 91       	pop	r29
    7e76:	cf 91       	pop	r28
    7e78:	ff 90       	pop	r15
    7e7a:	ef 90       	pop	r14
    7e7c:	df 90       	pop	r13
    7e7e:	cf 90       	pop	r12
    7e80:	bf 90       	pop	r11
    7e82:	af 90       	pop	r10
    7e84:	9f 90       	pop	r9
    7e86:	8f 90       	pop	r8
    7e88:	08 95       	ret

00007e8a <rand_r>:
    7e8a:	b9 cf       	rjmp	.-142    	; 0x7dfe <do_rand>

00007e8c <rand>:
    7e8c:	80 e0       	ldi	r24, 0x00	; 0
    7e8e:	92 e0       	ldi	r25, 0x02	; 2
    7e90:	b6 cf       	rjmp	.-148    	; 0x7dfe <do_rand>

00007e92 <srand>:
    7e92:	a0 e0       	ldi	r26, 0x00	; 0
    7e94:	b0 e0       	ldi	r27, 0x00	; 0
    7e96:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    7e9a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    7e9e:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    7ea2:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    7ea6:	08 95       	ret

00007ea8 <memcpy>:
    7ea8:	fb 01       	movw	r30, r22
    7eaa:	dc 01       	movw	r26, r24
    7eac:	02 c0       	rjmp	.+4      	; 0x7eb2 <memcpy+0xa>
    7eae:	01 90       	ld	r0, Z+
    7eb0:	0d 92       	st	X+, r0
    7eb2:	41 50       	subi	r20, 0x01	; 1
    7eb4:	50 40       	sbci	r21, 0x00	; 0
    7eb6:	d8 f7       	brcc	.-10     	; 0x7eae <memcpy+0x6>
    7eb8:	08 95       	ret

00007eba <strncmp>:
    7eba:	fb 01       	movw	r30, r22
    7ebc:	dc 01       	movw	r26, r24
    7ebe:	41 50       	subi	r20, 0x01	; 1
    7ec0:	50 40       	sbci	r21, 0x00	; 0
    7ec2:	30 f0       	brcs	.+12     	; 0x7ed0 <strncmp+0x16>
    7ec4:	8d 91       	ld	r24, X+
    7ec6:	01 90       	ld	r0, Z+
    7ec8:	80 19       	sub	r24, r0
    7eca:	19 f4       	brne	.+6      	; 0x7ed2 <strncmp+0x18>
    7ecc:	00 20       	and	r0, r0
    7ece:	b9 f7       	brne	.-18     	; 0x7ebe <strncmp+0x4>
    7ed0:	88 1b       	sub	r24, r24
    7ed2:	99 0b       	sbc	r25, r25
    7ed4:	08 95       	ret

00007ed6 <strncpy>:
    7ed6:	fb 01       	movw	r30, r22
    7ed8:	dc 01       	movw	r26, r24
    7eda:	41 50       	subi	r20, 0x01	; 1
    7edc:	50 40       	sbci	r21, 0x00	; 0
    7ede:	48 f0       	brcs	.+18     	; 0x7ef2 <strncpy+0x1c>
    7ee0:	01 90       	ld	r0, Z+
    7ee2:	0d 92       	st	X+, r0
    7ee4:	00 20       	and	r0, r0
    7ee6:	c9 f7       	brne	.-14     	; 0x7eda <strncpy+0x4>
    7ee8:	01 c0       	rjmp	.+2      	; 0x7eec <strncpy+0x16>
    7eea:	1d 92       	st	X+, r1
    7eec:	41 50       	subi	r20, 0x01	; 1
    7eee:	50 40       	sbci	r21, 0x00	; 0
    7ef0:	e0 f7       	brcc	.-8      	; 0x7eea <strncpy+0x14>
    7ef2:	08 95       	ret

00007ef4 <printf>:
    7ef4:	cf 93       	push	r28
    7ef6:	df 93       	push	r29
    7ef8:	cd b7       	in	r28, 0x3d	; 61
    7efa:	de b7       	in	r29, 0x3e	; 62
    7efc:	ae 01       	movw	r20, r28
    7efe:	4a 5f       	subi	r20, 0xFA	; 250
    7f00:	5f 4f       	sbci	r21, 0xFF	; 255
    7f02:	fa 01       	movw	r30, r20
    7f04:	61 91       	ld	r22, Z+
    7f06:	71 91       	ld	r23, Z+
    7f08:	af 01       	movw	r20, r30
    7f0a:	80 91 84 24 	lds	r24, 0x2484	; 0x802484 <__iob+0x2>
    7f0e:	90 91 85 24 	lds	r25, 0x2485	; 0x802485 <__iob+0x3>
    7f12:	5a d0       	rcall	.+180    	; 0x7fc8 <vfprintf>
    7f14:	df 91       	pop	r29
    7f16:	cf 91       	pop	r28
    7f18:	08 95       	ret

00007f1a <printf_P>:
    7f1a:	0f 93       	push	r16
    7f1c:	1f 93       	push	r17
    7f1e:	cf 93       	push	r28
    7f20:	df 93       	push	r29
    7f22:	cd b7       	in	r28, 0x3d	; 61
    7f24:	de b7       	in	r29, 0x3e	; 62
    7f26:	ae 01       	movw	r20, r28
    7f28:	48 5f       	subi	r20, 0xF8	; 248
    7f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    7f2c:	da 01       	movw	r26, r20
    7f2e:	6d 91       	ld	r22, X+
    7f30:	7d 91       	ld	r23, X+
    7f32:	ad 01       	movw	r20, r26
    7f34:	02 e8       	ldi	r16, 0x82	; 130
    7f36:	14 e2       	ldi	r17, 0x24	; 36
    7f38:	f8 01       	movw	r30, r16
    7f3a:	82 81       	ldd	r24, Z+2	; 0x02
    7f3c:	93 81       	ldd	r25, Z+3	; 0x03
    7f3e:	dc 01       	movw	r26, r24
    7f40:	13 96       	adiw	r26, 0x03	; 3
    7f42:	2c 91       	ld	r18, X
    7f44:	13 97       	sbiw	r26, 0x03	; 3
    7f46:	28 60       	ori	r18, 0x08	; 8
    7f48:	13 96       	adiw	r26, 0x03	; 3
    7f4a:	2c 93       	st	X, r18
    7f4c:	3d d0       	rcall	.+122    	; 0x7fc8 <vfprintf>
    7f4e:	d8 01       	movw	r26, r16
    7f50:	12 96       	adiw	r26, 0x02	; 2
    7f52:	ed 91       	ld	r30, X+
    7f54:	fc 91       	ld	r31, X
    7f56:	13 97       	sbiw	r26, 0x03	; 3
    7f58:	23 81       	ldd	r18, Z+3	; 0x03
    7f5a:	27 7f       	andi	r18, 0xF7	; 247
    7f5c:	23 83       	std	Z+3, r18	; 0x03
    7f5e:	df 91       	pop	r29
    7f60:	cf 91       	pop	r28
    7f62:	1f 91       	pop	r17
    7f64:	0f 91       	pop	r16
    7f66:	08 95       	ret

00007f68 <puts>:
    7f68:	0f 93       	push	r16
    7f6a:	1f 93       	push	r17
    7f6c:	cf 93       	push	r28
    7f6e:	df 93       	push	r29
    7f70:	e0 91 84 24 	lds	r30, 0x2484	; 0x802484 <__iob+0x2>
    7f74:	f0 91 85 24 	lds	r31, 0x2485	; 0x802485 <__iob+0x3>
    7f78:	23 81       	ldd	r18, Z+3	; 0x03
    7f7a:	21 ff       	sbrs	r18, 1
    7f7c:	1b c0       	rjmp	.+54     	; 0x7fb4 <puts+0x4c>
    7f7e:	8c 01       	movw	r16, r24
    7f80:	d0 e0       	ldi	r29, 0x00	; 0
    7f82:	c0 e0       	ldi	r28, 0x00	; 0
    7f84:	f8 01       	movw	r30, r16
    7f86:	81 91       	ld	r24, Z+
    7f88:	8f 01       	movw	r16, r30
    7f8a:	60 91 84 24 	lds	r22, 0x2484	; 0x802484 <__iob+0x2>
    7f8e:	70 91 85 24 	lds	r23, 0x2485	; 0x802485 <__iob+0x3>
    7f92:	db 01       	movw	r26, r22
    7f94:	18 96       	adiw	r26, 0x08	; 8
    7f96:	ed 91       	ld	r30, X+
    7f98:	fc 91       	ld	r31, X
    7f9a:	19 97       	sbiw	r26, 0x09	; 9
    7f9c:	88 23       	and	r24, r24
    7f9e:	31 f0       	breq	.+12     	; 0x7fac <puts+0x44>
    7fa0:	19 95       	eicall
    7fa2:	89 2b       	or	r24, r25
    7fa4:	79 f3       	breq	.-34     	; 0x7f84 <puts+0x1c>
    7fa6:	df ef       	ldi	r29, 0xFF	; 255
    7fa8:	cf ef       	ldi	r28, 0xFF	; 255
    7faa:	ec cf       	rjmp	.-40     	; 0x7f84 <puts+0x1c>
    7fac:	8a e0       	ldi	r24, 0x0A	; 10
    7fae:	19 95       	eicall
    7fb0:	89 2b       	or	r24, r25
    7fb2:	19 f0       	breq	.+6      	; 0x7fba <puts+0x52>
    7fb4:	8f ef       	ldi	r24, 0xFF	; 255
    7fb6:	9f ef       	ldi	r25, 0xFF	; 255
    7fb8:	02 c0       	rjmp	.+4      	; 0x7fbe <puts+0x56>
    7fba:	8d 2f       	mov	r24, r29
    7fbc:	9c 2f       	mov	r25, r28
    7fbe:	df 91       	pop	r29
    7fc0:	cf 91       	pop	r28
    7fc2:	1f 91       	pop	r17
    7fc4:	0f 91       	pop	r16
    7fc6:	08 95       	ret

00007fc8 <vfprintf>:
    7fc8:	2f 92       	push	r2
    7fca:	3f 92       	push	r3
    7fcc:	4f 92       	push	r4
    7fce:	5f 92       	push	r5
    7fd0:	6f 92       	push	r6
    7fd2:	7f 92       	push	r7
    7fd4:	8f 92       	push	r8
    7fd6:	9f 92       	push	r9
    7fd8:	af 92       	push	r10
    7fda:	bf 92       	push	r11
    7fdc:	cf 92       	push	r12
    7fde:	df 92       	push	r13
    7fe0:	ef 92       	push	r14
    7fe2:	ff 92       	push	r15
    7fe4:	0f 93       	push	r16
    7fe6:	1f 93       	push	r17
    7fe8:	cf 93       	push	r28
    7fea:	df 93       	push	r29
    7fec:	cd b7       	in	r28, 0x3d	; 61
    7fee:	de b7       	in	r29, 0x3e	; 62
    7ff0:	2b 97       	sbiw	r28, 0x0b	; 11
    7ff2:	0f b6       	in	r0, 0x3f	; 63
    7ff4:	f8 94       	cli
    7ff6:	de bf       	out	0x3e, r29	; 62
    7ff8:	0f be       	out	0x3f, r0	; 63
    7ffa:	cd bf       	out	0x3d, r28	; 61
    7ffc:	6c 01       	movw	r12, r24
    7ffe:	7b 01       	movw	r14, r22
    8000:	8a 01       	movw	r16, r20
    8002:	fc 01       	movw	r30, r24
    8004:	17 82       	std	Z+7, r1	; 0x07
    8006:	16 82       	std	Z+6, r1	; 0x06
    8008:	83 81       	ldd	r24, Z+3	; 0x03
    800a:	81 ff       	sbrs	r24, 1
    800c:	bf c1       	rjmp	.+894    	; 0x838c <__stack+0x18d>
    800e:	ce 01       	movw	r24, r28
    8010:	01 96       	adiw	r24, 0x01	; 1
    8012:	3c 01       	movw	r6, r24
    8014:	f6 01       	movw	r30, r12
    8016:	93 81       	ldd	r25, Z+3	; 0x03
    8018:	f7 01       	movw	r30, r14
    801a:	93 fd       	sbrc	r25, 3
    801c:	85 91       	lpm	r24, Z+
    801e:	93 ff       	sbrs	r25, 3
    8020:	81 91       	ld	r24, Z+
    8022:	7f 01       	movw	r14, r30
    8024:	88 23       	and	r24, r24
    8026:	09 f4       	brne	.+2      	; 0x802a <__DATA_REGION_LENGTH__+0x2a>
    8028:	ad c1       	rjmp	.+858    	; 0x8384 <__stack+0x185>
    802a:	85 32       	cpi	r24, 0x25	; 37
    802c:	39 f4       	brne	.+14     	; 0x803c <__DATA_REGION_LENGTH__+0x3c>
    802e:	93 fd       	sbrc	r25, 3
    8030:	85 91       	lpm	r24, Z+
    8032:	93 ff       	sbrs	r25, 3
    8034:	81 91       	ld	r24, Z+
    8036:	7f 01       	movw	r14, r30
    8038:	85 32       	cpi	r24, 0x25	; 37
    803a:	21 f4       	brne	.+8      	; 0x8044 <__DATA_REGION_LENGTH__+0x44>
    803c:	b6 01       	movw	r22, r12
    803e:	90 e0       	ldi	r25, 0x00	; 0
    8040:	d6 d1       	rcall	.+940    	; 0x83ee <fputc>
    8042:	e8 cf       	rjmp	.-48     	; 0x8014 <__DATA_REGION_LENGTH__+0x14>
    8044:	91 2c       	mov	r9, r1
    8046:	21 2c       	mov	r2, r1
    8048:	31 2c       	mov	r3, r1
    804a:	ff e1       	ldi	r31, 0x1F	; 31
    804c:	f3 15       	cp	r31, r3
    804e:	d8 f0       	brcs	.+54     	; 0x8086 <__DATA_REGION_LENGTH__+0x86>
    8050:	8b 32       	cpi	r24, 0x2B	; 43
    8052:	79 f0       	breq	.+30     	; 0x8072 <__DATA_REGION_LENGTH__+0x72>
    8054:	38 f4       	brcc	.+14     	; 0x8064 <__DATA_REGION_LENGTH__+0x64>
    8056:	80 32       	cpi	r24, 0x20	; 32
    8058:	79 f0       	breq	.+30     	; 0x8078 <__DATA_REGION_LENGTH__+0x78>
    805a:	83 32       	cpi	r24, 0x23	; 35
    805c:	a1 f4       	brne	.+40     	; 0x8086 <__DATA_REGION_LENGTH__+0x86>
    805e:	23 2d       	mov	r18, r3
    8060:	20 61       	ori	r18, 0x10	; 16
    8062:	1d c0       	rjmp	.+58     	; 0x809e <__DATA_REGION_LENGTH__+0x9e>
    8064:	8d 32       	cpi	r24, 0x2D	; 45
    8066:	61 f0       	breq	.+24     	; 0x8080 <__DATA_REGION_LENGTH__+0x80>
    8068:	80 33       	cpi	r24, 0x30	; 48
    806a:	69 f4       	brne	.+26     	; 0x8086 <__DATA_REGION_LENGTH__+0x86>
    806c:	23 2d       	mov	r18, r3
    806e:	21 60       	ori	r18, 0x01	; 1
    8070:	16 c0       	rjmp	.+44     	; 0x809e <__DATA_REGION_LENGTH__+0x9e>
    8072:	83 2d       	mov	r24, r3
    8074:	82 60       	ori	r24, 0x02	; 2
    8076:	38 2e       	mov	r3, r24
    8078:	e3 2d       	mov	r30, r3
    807a:	e4 60       	ori	r30, 0x04	; 4
    807c:	3e 2e       	mov	r3, r30
    807e:	2a c0       	rjmp	.+84     	; 0x80d4 <__DATA_REGION_LENGTH__+0xd4>
    8080:	f3 2d       	mov	r31, r3
    8082:	f8 60       	ori	r31, 0x08	; 8
    8084:	1d c0       	rjmp	.+58     	; 0x80c0 <__DATA_REGION_LENGTH__+0xc0>
    8086:	37 fc       	sbrc	r3, 7
    8088:	2d c0       	rjmp	.+90     	; 0x80e4 <__DATA_REGION_LENGTH__+0xe4>
    808a:	20 ed       	ldi	r18, 0xD0	; 208
    808c:	28 0f       	add	r18, r24
    808e:	2a 30       	cpi	r18, 0x0A	; 10
    8090:	40 f0       	brcs	.+16     	; 0x80a2 <__DATA_REGION_LENGTH__+0xa2>
    8092:	8e 32       	cpi	r24, 0x2E	; 46
    8094:	b9 f4       	brne	.+46     	; 0x80c4 <__DATA_REGION_LENGTH__+0xc4>
    8096:	36 fc       	sbrc	r3, 6
    8098:	75 c1       	rjmp	.+746    	; 0x8384 <__stack+0x185>
    809a:	23 2d       	mov	r18, r3
    809c:	20 64       	ori	r18, 0x40	; 64
    809e:	32 2e       	mov	r3, r18
    80a0:	19 c0       	rjmp	.+50     	; 0x80d4 <__DATA_REGION_LENGTH__+0xd4>
    80a2:	36 fe       	sbrs	r3, 6
    80a4:	06 c0       	rjmp	.+12     	; 0x80b2 <__DATA_REGION_LENGTH__+0xb2>
    80a6:	8a e0       	ldi	r24, 0x0A	; 10
    80a8:	98 9e       	mul	r9, r24
    80aa:	20 0d       	add	r18, r0
    80ac:	11 24       	eor	r1, r1
    80ae:	92 2e       	mov	r9, r18
    80b0:	11 c0       	rjmp	.+34     	; 0x80d4 <__DATA_REGION_LENGTH__+0xd4>
    80b2:	ea e0       	ldi	r30, 0x0A	; 10
    80b4:	2e 9e       	mul	r2, r30
    80b6:	20 0d       	add	r18, r0
    80b8:	11 24       	eor	r1, r1
    80ba:	22 2e       	mov	r2, r18
    80bc:	f3 2d       	mov	r31, r3
    80be:	f0 62       	ori	r31, 0x20	; 32
    80c0:	3f 2e       	mov	r3, r31
    80c2:	08 c0       	rjmp	.+16     	; 0x80d4 <__DATA_REGION_LENGTH__+0xd4>
    80c4:	8c 36       	cpi	r24, 0x6C	; 108
    80c6:	21 f4       	brne	.+8      	; 0x80d0 <__DATA_REGION_LENGTH__+0xd0>
    80c8:	83 2d       	mov	r24, r3
    80ca:	80 68       	ori	r24, 0x80	; 128
    80cc:	38 2e       	mov	r3, r24
    80ce:	02 c0       	rjmp	.+4      	; 0x80d4 <__DATA_REGION_LENGTH__+0xd4>
    80d0:	88 36       	cpi	r24, 0x68	; 104
    80d2:	41 f4       	brne	.+16     	; 0x80e4 <__DATA_REGION_LENGTH__+0xe4>
    80d4:	f7 01       	movw	r30, r14
    80d6:	93 fd       	sbrc	r25, 3
    80d8:	85 91       	lpm	r24, Z+
    80da:	93 ff       	sbrs	r25, 3
    80dc:	81 91       	ld	r24, Z+
    80de:	7f 01       	movw	r14, r30
    80e0:	81 11       	cpse	r24, r1
    80e2:	b3 cf       	rjmp	.-154    	; 0x804a <__DATA_REGION_LENGTH__+0x4a>
    80e4:	98 2f       	mov	r25, r24
    80e6:	9f 7d       	andi	r25, 0xDF	; 223
    80e8:	95 54       	subi	r25, 0x45	; 69
    80ea:	93 30       	cpi	r25, 0x03	; 3
    80ec:	28 f4       	brcc	.+10     	; 0x80f8 <__DATA_REGION_LENGTH__+0xf8>
    80ee:	0c 5f       	subi	r16, 0xFC	; 252
    80f0:	1f 4f       	sbci	r17, 0xFF	; 255
    80f2:	9f e3       	ldi	r25, 0x3F	; 63
    80f4:	99 83       	std	Y+1, r25	; 0x01
    80f6:	0d c0       	rjmp	.+26     	; 0x8112 <__DATA_REGION_LENGTH__+0x112>
    80f8:	83 36       	cpi	r24, 0x63	; 99
    80fa:	31 f0       	breq	.+12     	; 0x8108 <__DATA_REGION_LENGTH__+0x108>
    80fc:	83 37       	cpi	r24, 0x73	; 115
    80fe:	71 f0       	breq	.+28     	; 0x811c <__DATA_REGION_LENGTH__+0x11c>
    8100:	83 35       	cpi	r24, 0x53	; 83
    8102:	09 f0       	breq	.+2      	; 0x8106 <__DATA_REGION_LENGTH__+0x106>
    8104:	55 c0       	rjmp	.+170    	; 0x81b0 <__DATA_REGION_LENGTH__+0x1b0>
    8106:	20 c0       	rjmp	.+64     	; 0x8148 <__DATA_REGION_LENGTH__+0x148>
    8108:	f8 01       	movw	r30, r16
    810a:	80 81       	ld	r24, Z
    810c:	89 83       	std	Y+1, r24	; 0x01
    810e:	0e 5f       	subi	r16, 0xFE	; 254
    8110:	1f 4f       	sbci	r17, 0xFF	; 255
    8112:	88 24       	eor	r8, r8
    8114:	83 94       	inc	r8
    8116:	91 2c       	mov	r9, r1
    8118:	53 01       	movw	r10, r6
    811a:	12 c0       	rjmp	.+36     	; 0x8140 <__DATA_REGION_LENGTH__+0x140>
    811c:	28 01       	movw	r4, r16
    811e:	f2 e0       	ldi	r31, 0x02	; 2
    8120:	4f 0e       	add	r4, r31
    8122:	51 1c       	adc	r5, r1
    8124:	f8 01       	movw	r30, r16
    8126:	a0 80       	ld	r10, Z
    8128:	b1 80       	ldd	r11, Z+1	; 0x01
    812a:	36 fe       	sbrs	r3, 6
    812c:	03 c0       	rjmp	.+6      	; 0x8134 <__DATA_REGION_LENGTH__+0x134>
    812e:	69 2d       	mov	r22, r9
    8130:	70 e0       	ldi	r23, 0x00	; 0
    8132:	02 c0       	rjmp	.+4      	; 0x8138 <__DATA_REGION_LENGTH__+0x138>
    8134:	6f ef       	ldi	r22, 0xFF	; 255
    8136:	7f ef       	ldi	r23, 0xFF	; 255
    8138:	c5 01       	movw	r24, r10
    813a:	4e d1       	rcall	.+668    	; 0x83d8 <strnlen>
    813c:	4c 01       	movw	r8, r24
    813e:	82 01       	movw	r16, r4
    8140:	f3 2d       	mov	r31, r3
    8142:	ff 77       	andi	r31, 0x7F	; 127
    8144:	3f 2e       	mov	r3, r31
    8146:	15 c0       	rjmp	.+42     	; 0x8172 <__DATA_REGION_LENGTH__+0x172>
    8148:	28 01       	movw	r4, r16
    814a:	22 e0       	ldi	r18, 0x02	; 2
    814c:	42 0e       	add	r4, r18
    814e:	51 1c       	adc	r5, r1
    8150:	f8 01       	movw	r30, r16
    8152:	a0 80       	ld	r10, Z
    8154:	b1 80       	ldd	r11, Z+1	; 0x01
    8156:	36 fe       	sbrs	r3, 6
    8158:	03 c0       	rjmp	.+6      	; 0x8160 <__DATA_REGION_LENGTH__+0x160>
    815a:	69 2d       	mov	r22, r9
    815c:	70 e0       	ldi	r23, 0x00	; 0
    815e:	02 c0       	rjmp	.+4      	; 0x8164 <__DATA_REGION_LENGTH__+0x164>
    8160:	6f ef       	ldi	r22, 0xFF	; 255
    8162:	7f ef       	ldi	r23, 0xFF	; 255
    8164:	c5 01       	movw	r24, r10
    8166:	2d d1       	rcall	.+602    	; 0x83c2 <strnlen_P>
    8168:	4c 01       	movw	r8, r24
    816a:	f3 2d       	mov	r31, r3
    816c:	f0 68       	ori	r31, 0x80	; 128
    816e:	3f 2e       	mov	r3, r31
    8170:	82 01       	movw	r16, r4
    8172:	33 fc       	sbrc	r3, 3
    8174:	19 c0       	rjmp	.+50     	; 0x81a8 <__DATA_REGION_LENGTH__+0x1a8>
    8176:	82 2d       	mov	r24, r2
    8178:	90 e0       	ldi	r25, 0x00	; 0
    817a:	88 16       	cp	r8, r24
    817c:	99 06       	cpc	r9, r25
    817e:	a0 f4       	brcc	.+40     	; 0x81a8 <__DATA_REGION_LENGTH__+0x1a8>
    8180:	b6 01       	movw	r22, r12
    8182:	80 e2       	ldi	r24, 0x20	; 32
    8184:	90 e0       	ldi	r25, 0x00	; 0
    8186:	33 d1       	rcall	.+614    	; 0x83ee <fputc>
    8188:	2a 94       	dec	r2
    818a:	f5 cf       	rjmp	.-22     	; 0x8176 <__DATA_REGION_LENGTH__+0x176>
    818c:	f5 01       	movw	r30, r10
    818e:	37 fc       	sbrc	r3, 7
    8190:	85 91       	lpm	r24, Z+
    8192:	37 fe       	sbrs	r3, 7
    8194:	81 91       	ld	r24, Z+
    8196:	5f 01       	movw	r10, r30
    8198:	b6 01       	movw	r22, r12
    819a:	90 e0       	ldi	r25, 0x00	; 0
    819c:	28 d1       	rcall	.+592    	; 0x83ee <fputc>
    819e:	21 10       	cpse	r2, r1
    81a0:	2a 94       	dec	r2
    81a2:	21 e0       	ldi	r18, 0x01	; 1
    81a4:	82 1a       	sub	r8, r18
    81a6:	91 08       	sbc	r9, r1
    81a8:	81 14       	cp	r8, r1
    81aa:	91 04       	cpc	r9, r1
    81ac:	79 f7       	brne	.-34     	; 0x818c <__DATA_REGION_LENGTH__+0x18c>
    81ae:	e1 c0       	rjmp	.+450    	; 0x8372 <__stack+0x173>
    81b0:	84 36       	cpi	r24, 0x64	; 100
    81b2:	11 f0       	breq	.+4      	; 0x81b8 <__DATA_REGION_LENGTH__+0x1b8>
    81b4:	89 36       	cpi	r24, 0x69	; 105
    81b6:	39 f5       	brne	.+78     	; 0x8206 <__stack+0x7>
    81b8:	f8 01       	movw	r30, r16
    81ba:	37 fe       	sbrs	r3, 7
    81bc:	07 c0       	rjmp	.+14     	; 0x81cc <__DATA_REGION_LENGTH__+0x1cc>
    81be:	60 81       	ld	r22, Z
    81c0:	71 81       	ldd	r23, Z+1	; 0x01
    81c2:	82 81       	ldd	r24, Z+2	; 0x02
    81c4:	93 81       	ldd	r25, Z+3	; 0x03
    81c6:	0c 5f       	subi	r16, 0xFC	; 252
    81c8:	1f 4f       	sbci	r17, 0xFF	; 255
    81ca:	08 c0       	rjmp	.+16     	; 0x81dc <__DATA_REGION_LENGTH__+0x1dc>
    81cc:	60 81       	ld	r22, Z
    81ce:	71 81       	ldd	r23, Z+1	; 0x01
    81d0:	07 2e       	mov	r0, r23
    81d2:	00 0c       	add	r0, r0
    81d4:	88 0b       	sbc	r24, r24
    81d6:	99 0b       	sbc	r25, r25
    81d8:	0e 5f       	subi	r16, 0xFE	; 254
    81da:	1f 4f       	sbci	r17, 0xFF	; 255
    81dc:	f3 2d       	mov	r31, r3
    81de:	ff 76       	andi	r31, 0x6F	; 111
    81e0:	3f 2e       	mov	r3, r31
    81e2:	97 ff       	sbrs	r25, 7
    81e4:	09 c0       	rjmp	.+18     	; 0x81f8 <__DATA_REGION_LENGTH__+0x1f8>
    81e6:	90 95       	com	r25
    81e8:	80 95       	com	r24
    81ea:	70 95       	com	r23
    81ec:	61 95       	neg	r22
    81ee:	7f 4f       	sbci	r23, 0xFF	; 255
    81f0:	8f 4f       	sbci	r24, 0xFF	; 255
    81f2:	9f 4f       	sbci	r25, 0xFF	; 255
    81f4:	f0 68       	ori	r31, 0x80	; 128
    81f6:	3f 2e       	mov	r3, r31
    81f8:	2a e0       	ldi	r18, 0x0A	; 10
    81fa:	30 e0       	ldi	r19, 0x00	; 0
    81fc:	a3 01       	movw	r20, r6
    81fe:	33 d1       	rcall	.+614    	; 0x8466 <__ultoa_invert>
    8200:	88 2e       	mov	r8, r24
    8202:	86 18       	sub	r8, r6
    8204:	44 c0       	rjmp	.+136    	; 0x828e <__stack+0x8f>
    8206:	85 37       	cpi	r24, 0x75	; 117
    8208:	31 f4       	brne	.+12     	; 0x8216 <__stack+0x17>
    820a:	23 2d       	mov	r18, r3
    820c:	2f 7e       	andi	r18, 0xEF	; 239
    820e:	b2 2e       	mov	r11, r18
    8210:	2a e0       	ldi	r18, 0x0A	; 10
    8212:	30 e0       	ldi	r19, 0x00	; 0
    8214:	25 c0       	rjmp	.+74     	; 0x8260 <__stack+0x61>
    8216:	93 2d       	mov	r25, r3
    8218:	99 7f       	andi	r25, 0xF9	; 249
    821a:	b9 2e       	mov	r11, r25
    821c:	8f 36       	cpi	r24, 0x6F	; 111
    821e:	c1 f0       	breq	.+48     	; 0x8250 <__stack+0x51>
    8220:	18 f4       	brcc	.+6      	; 0x8228 <__stack+0x29>
    8222:	88 35       	cpi	r24, 0x58	; 88
    8224:	79 f0       	breq	.+30     	; 0x8244 <__stack+0x45>
    8226:	ae c0       	rjmp	.+348    	; 0x8384 <__stack+0x185>
    8228:	80 37       	cpi	r24, 0x70	; 112
    822a:	19 f0       	breq	.+6      	; 0x8232 <__stack+0x33>
    822c:	88 37       	cpi	r24, 0x78	; 120
    822e:	21 f0       	breq	.+8      	; 0x8238 <__stack+0x39>
    8230:	a9 c0       	rjmp	.+338    	; 0x8384 <__stack+0x185>
    8232:	e9 2f       	mov	r30, r25
    8234:	e0 61       	ori	r30, 0x10	; 16
    8236:	be 2e       	mov	r11, r30
    8238:	b4 fe       	sbrs	r11, 4
    823a:	0d c0       	rjmp	.+26     	; 0x8256 <__stack+0x57>
    823c:	fb 2d       	mov	r31, r11
    823e:	f4 60       	ori	r31, 0x04	; 4
    8240:	bf 2e       	mov	r11, r31
    8242:	09 c0       	rjmp	.+18     	; 0x8256 <__stack+0x57>
    8244:	34 fe       	sbrs	r3, 4
    8246:	0a c0       	rjmp	.+20     	; 0x825c <__stack+0x5d>
    8248:	29 2f       	mov	r18, r25
    824a:	26 60       	ori	r18, 0x06	; 6
    824c:	b2 2e       	mov	r11, r18
    824e:	06 c0       	rjmp	.+12     	; 0x825c <__stack+0x5d>
    8250:	28 e0       	ldi	r18, 0x08	; 8
    8252:	30 e0       	ldi	r19, 0x00	; 0
    8254:	05 c0       	rjmp	.+10     	; 0x8260 <__stack+0x61>
    8256:	20 e1       	ldi	r18, 0x10	; 16
    8258:	30 e0       	ldi	r19, 0x00	; 0
    825a:	02 c0       	rjmp	.+4      	; 0x8260 <__stack+0x61>
    825c:	20 e1       	ldi	r18, 0x10	; 16
    825e:	32 e0       	ldi	r19, 0x02	; 2
    8260:	f8 01       	movw	r30, r16
    8262:	b7 fe       	sbrs	r11, 7
    8264:	07 c0       	rjmp	.+14     	; 0x8274 <__stack+0x75>
    8266:	60 81       	ld	r22, Z
    8268:	71 81       	ldd	r23, Z+1	; 0x01
    826a:	82 81       	ldd	r24, Z+2	; 0x02
    826c:	93 81       	ldd	r25, Z+3	; 0x03
    826e:	0c 5f       	subi	r16, 0xFC	; 252
    8270:	1f 4f       	sbci	r17, 0xFF	; 255
    8272:	06 c0       	rjmp	.+12     	; 0x8280 <__stack+0x81>
    8274:	60 81       	ld	r22, Z
    8276:	71 81       	ldd	r23, Z+1	; 0x01
    8278:	80 e0       	ldi	r24, 0x00	; 0
    827a:	90 e0       	ldi	r25, 0x00	; 0
    827c:	0e 5f       	subi	r16, 0xFE	; 254
    827e:	1f 4f       	sbci	r17, 0xFF	; 255
    8280:	a3 01       	movw	r20, r6
    8282:	f1 d0       	rcall	.+482    	; 0x8466 <__ultoa_invert>
    8284:	88 2e       	mov	r8, r24
    8286:	86 18       	sub	r8, r6
    8288:	fb 2d       	mov	r31, r11
    828a:	ff 77       	andi	r31, 0x7F	; 127
    828c:	3f 2e       	mov	r3, r31
    828e:	36 fe       	sbrs	r3, 6
    8290:	0d c0       	rjmp	.+26     	; 0x82ac <__stack+0xad>
    8292:	23 2d       	mov	r18, r3
    8294:	2e 7f       	andi	r18, 0xFE	; 254
    8296:	a2 2e       	mov	r10, r18
    8298:	89 14       	cp	r8, r9
    829a:	58 f4       	brcc	.+22     	; 0x82b2 <__stack+0xb3>
    829c:	34 fe       	sbrs	r3, 4
    829e:	0b c0       	rjmp	.+22     	; 0x82b6 <__stack+0xb7>
    82a0:	32 fc       	sbrc	r3, 2
    82a2:	09 c0       	rjmp	.+18     	; 0x82b6 <__stack+0xb7>
    82a4:	83 2d       	mov	r24, r3
    82a6:	8e 7e       	andi	r24, 0xEE	; 238
    82a8:	a8 2e       	mov	r10, r24
    82aa:	05 c0       	rjmp	.+10     	; 0x82b6 <__stack+0xb7>
    82ac:	b8 2c       	mov	r11, r8
    82ae:	a3 2c       	mov	r10, r3
    82b0:	03 c0       	rjmp	.+6      	; 0x82b8 <__stack+0xb9>
    82b2:	b8 2c       	mov	r11, r8
    82b4:	01 c0       	rjmp	.+2      	; 0x82b8 <__stack+0xb9>
    82b6:	b9 2c       	mov	r11, r9
    82b8:	a4 fe       	sbrs	r10, 4
    82ba:	0f c0       	rjmp	.+30     	; 0x82da <__stack+0xdb>
    82bc:	fe 01       	movw	r30, r28
    82be:	e8 0d       	add	r30, r8
    82c0:	f1 1d       	adc	r31, r1
    82c2:	80 81       	ld	r24, Z
    82c4:	80 33       	cpi	r24, 0x30	; 48
    82c6:	21 f4       	brne	.+8      	; 0x82d0 <__stack+0xd1>
    82c8:	9a 2d       	mov	r25, r10
    82ca:	99 7e       	andi	r25, 0xE9	; 233
    82cc:	a9 2e       	mov	r10, r25
    82ce:	09 c0       	rjmp	.+18     	; 0x82e2 <__stack+0xe3>
    82d0:	a2 fe       	sbrs	r10, 2
    82d2:	06 c0       	rjmp	.+12     	; 0x82e0 <__stack+0xe1>
    82d4:	b3 94       	inc	r11
    82d6:	b3 94       	inc	r11
    82d8:	04 c0       	rjmp	.+8      	; 0x82e2 <__stack+0xe3>
    82da:	8a 2d       	mov	r24, r10
    82dc:	86 78       	andi	r24, 0x86	; 134
    82de:	09 f0       	breq	.+2      	; 0x82e2 <__stack+0xe3>
    82e0:	b3 94       	inc	r11
    82e2:	a3 fc       	sbrc	r10, 3
    82e4:	10 c0       	rjmp	.+32     	; 0x8306 <__stack+0x107>
    82e6:	a0 fe       	sbrs	r10, 0
    82e8:	06 c0       	rjmp	.+12     	; 0x82f6 <__stack+0xf7>
    82ea:	b2 14       	cp	r11, r2
    82ec:	80 f4       	brcc	.+32     	; 0x830e <__stack+0x10f>
    82ee:	28 0c       	add	r2, r8
    82f0:	92 2c       	mov	r9, r2
    82f2:	9b 18       	sub	r9, r11
    82f4:	0d c0       	rjmp	.+26     	; 0x8310 <__stack+0x111>
    82f6:	b2 14       	cp	r11, r2
    82f8:	58 f4       	brcc	.+22     	; 0x8310 <__stack+0x111>
    82fa:	b6 01       	movw	r22, r12
    82fc:	80 e2       	ldi	r24, 0x20	; 32
    82fe:	90 e0       	ldi	r25, 0x00	; 0
    8300:	76 d0       	rcall	.+236    	; 0x83ee <fputc>
    8302:	b3 94       	inc	r11
    8304:	f8 cf       	rjmp	.-16     	; 0x82f6 <__stack+0xf7>
    8306:	b2 14       	cp	r11, r2
    8308:	18 f4       	brcc	.+6      	; 0x8310 <__stack+0x111>
    830a:	2b 18       	sub	r2, r11
    830c:	02 c0       	rjmp	.+4      	; 0x8312 <__stack+0x113>
    830e:	98 2c       	mov	r9, r8
    8310:	21 2c       	mov	r2, r1
    8312:	a4 fe       	sbrs	r10, 4
    8314:	0f c0       	rjmp	.+30     	; 0x8334 <__stack+0x135>
    8316:	b6 01       	movw	r22, r12
    8318:	80 e3       	ldi	r24, 0x30	; 48
    831a:	90 e0       	ldi	r25, 0x00	; 0
    831c:	68 d0       	rcall	.+208    	; 0x83ee <fputc>
    831e:	a2 fe       	sbrs	r10, 2
    8320:	16 c0       	rjmp	.+44     	; 0x834e <__stack+0x14f>
    8322:	a1 fc       	sbrc	r10, 1
    8324:	03 c0       	rjmp	.+6      	; 0x832c <__stack+0x12d>
    8326:	88 e7       	ldi	r24, 0x78	; 120
    8328:	90 e0       	ldi	r25, 0x00	; 0
    832a:	02 c0       	rjmp	.+4      	; 0x8330 <__stack+0x131>
    832c:	88 e5       	ldi	r24, 0x58	; 88
    832e:	90 e0       	ldi	r25, 0x00	; 0
    8330:	b6 01       	movw	r22, r12
    8332:	0c c0       	rjmp	.+24     	; 0x834c <__stack+0x14d>
    8334:	8a 2d       	mov	r24, r10
    8336:	86 78       	andi	r24, 0x86	; 134
    8338:	51 f0       	breq	.+20     	; 0x834e <__stack+0x14f>
    833a:	a1 fe       	sbrs	r10, 1
    833c:	02 c0       	rjmp	.+4      	; 0x8342 <__stack+0x143>
    833e:	8b e2       	ldi	r24, 0x2B	; 43
    8340:	01 c0       	rjmp	.+2      	; 0x8344 <__stack+0x145>
    8342:	80 e2       	ldi	r24, 0x20	; 32
    8344:	a7 fc       	sbrc	r10, 7
    8346:	8d e2       	ldi	r24, 0x2D	; 45
    8348:	b6 01       	movw	r22, r12
    834a:	90 e0       	ldi	r25, 0x00	; 0
    834c:	50 d0       	rcall	.+160    	; 0x83ee <fputc>
    834e:	89 14       	cp	r8, r9
    8350:	30 f4       	brcc	.+12     	; 0x835e <__stack+0x15f>
    8352:	b6 01       	movw	r22, r12
    8354:	80 e3       	ldi	r24, 0x30	; 48
    8356:	90 e0       	ldi	r25, 0x00	; 0
    8358:	4a d0       	rcall	.+148    	; 0x83ee <fputc>
    835a:	9a 94       	dec	r9
    835c:	f8 cf       	rjmp	.-16     	; 0x834e <__stack+0x14f>
    835e:	8a 94       	dec	r8
    8360:	f3 01       	movw	r30, r6
    8362:	e8 0d       	add	r30, r8
    8364:	f1 1d       	adc	r31, r1
    8366:	80 81       	ld	r24, Z
    8368:	b6 01       	movw	r22, r12
    836a:	90 e0       	ldi	r25, 0x00	; 0
    836c:	40 d0       	rcall	.+128    	; 0x83ee <fputc>
    836e:	81 10       	cpse	r8, r1
    8370:	f6 cf       	rjmp	.-20     	; 0x835e <__stack+0x15f>
    8372:	22 20       	and	r2, r2
    8374:	09 f4       	brne	.+2      	; 0x8378 <__stack+0x179>
    8376:	4e ce       	rjmp	.-868    	; 0x8014 <__DATA_REGION_LENGTH__+0x14>
    8378:	b6 01       	movw	r22, r12
    837a:	80 e2       	ldi	r24, 0x20	; 32
    837c:	90 e0       	ldi	r25, 0x00	; 0
    837e:	37 d0       	rcall	.+110    	; 0x83ee <fputc>
    8380:	2a 94       	dec	r2
    8382:	f7 cf       	rjmp	.-18     	; 0x8372 <__stack+0x173>
    8384:	f6 01       	movw	r30, r12
    8386:	86 81       	ldd	r24, Z+6	; 0x06
    8388:	97 81       	ldd	r25, Z+7	; 0x07
    838a:	02 c0       	rjmp	.+4      	; 0x8390 <__stack+0x191>
    838c:	8f ef       	ldi	r24, 0xFF	; 255
    838e:	9f ef       	ldi	r25, 0xFF	; 255
    8390:	2b 96       	adiw	r28, 0x0b	; 11
    8392:	0f b6       	in	r0, 0x3f	; 63
    8394:	f8 94       	cli
    8396:	de bf       	out	0x3e, r29	; 62
    8398:	0f be       	out	0x3f, r0	; 63
    839a:	cd bf       	out	0x3d, r28	; 61
    839c:	df 91       	pop	r29
    839e:	cf 91       	pop	r28
    83a0:	1f 91       	pop	r17
    83a2:	0f 91       	pop	r16
    83a4:	ff 90       	pop	r15
    83a6:	ef 90       	pop	r14
    83a8:	df 90       	pop	r13
    83aa:	cf 90       	pop	r12
    83ac:	bf 90       	pop	r11
    83ae:	af 90       	pop	r10
    83b0:	9f 90       	pop	r9
    83b2:	8f 90       	pop	r8
    83b4:	7f 90       	pop	r7
    83b6:	6f 90       	pop	r6
    83b8:	5f 90       	pop	r5
    83ba:	4f 90       	pop	r4
    83bc:	3f 90       	pop	r3
    83be:	2f 90       	pop	r2
    83c0:	08 95       	ret

000083c2 <strnlen_P>:
    83c2:	fc 01       	movw	r30, r24
    83c4:	05 90       	lpm	r0, Z+
    83c6:	61 50       	subi	r22, 0x01	; 1
    83c8:	70 40       	sbci	r23, 0x00	; 0
    83ca:	01 10       	cpse	r0, r1
    83cc:	d8 f7       	brcc	.-10     	; 0x83c4 <strnlen_P+0x2>
    83ce:	80 95       	com	r24
    83d0:	90 95       	com	r25
    83d2:	8e 0f       	add	r24, r30
    83d4:	9f 1f       	adc	r25, r31
    83d6:	08 95       	ret

000083d8 <strnlen>:
    83d8:	fc 01       	movw	r30, r24
    83da:	61 50       	subi	r22, 0x01	; 1
    83dc:	70 40       	sbci	r23, 0x00	; 0
    83de:	01 90       	ld	r0, Z+
    83e0:	01 10       	cpse	r0, r1
    83e2:	d8 f7       	brcc	.-10     	; 0x83da <strnlen+0x2>
    83e4:	80 95       	com	r24
    83e6:	90 95       	com	r25
    83e8:	8e 0f       	add	r24, r30
    83ea:	9f 1f       	adc	r25, r31
    83ec:	08 95       	ret

000083ee <fputc>:
    83ee:	0f 93       	push	r16
    83f0:	1f 93       	push	r17
    83f2:	cf 93       	push	r28
    83f4:	df 93       	push	r29
    83f6:	fb 01       	movw	r30, r22
    83f8:	23 81       	ldd	r18, Z+3	; 0x03
    83fa:	21 fd       	sbrc	r18, 1
    83fc:	03 c0       	rjmp	.+6      	; 0x8404 <fputc+0x16>
    83fe:	8f ef       	ldi	r24, 0xFF	; 255
    8400:	9f ef       	ldi	r25, 0xFF	; 255
    8402:	2c c0       	rjmp	.+88     	; 0x845c <fputc+0x6e>
    8404:	22 ff       	sbrs	r18, 2
    8406:	16 c0       	rjmp	.+44     	; 0x8434 <fputc+0x46>
    8408:	46 81       	ldd	r20, Z+6	; 0x06
    840a:	57 81       	ldd	r21, Z+7	; 0x07
    840c:	24 81       	ldd	r18, Z+4	; 0x04
    840e:	35 81       	ldd	r19, Z+5	; 0x05
    8410:	42 17       	cp	r20, r18
    8412:	53 07       	cpc	r21, r19
    8414:	44 f4       	brge	.+16     	; 0x8426 <fputc+0x38>
    8416:	a0 81       	ld	r26, Z
    8418:	b1 81       	ldd	r27, Z+1	; 0x01
    841a:	9d 01       	movw	r18, r26
    841c:	2f 5f       	subi	r18, 0xFF	; 255
    841e:	3f 4f       	sbci	r19, 0xFF	; 255
    8420:	31 83       	std	Z+1, r19	; 0x01
    8422:	20 83       	st	Z, r18
    8424:	8c 93       	st	X, r24
    8426:	26 81       	ldd	r18, Z+6	; 0x06
    8428:	37 81       	ldd	r19, Z+7	; 0x07
    842a:	2f 5f       	subi	r18, 0xFF	; 255
    842c:	3f 4f       	sbci	r19, 0xFF	; 255
    842e:	37 83       	std	Z+7, r19	; 0x07
    8430:	26 83       	std	Z+6, r18	; 0x06
    8432:	14 c0       	rjmp	.+40     	; 0x845c <fputc+0x6e>
    8434:	8b 01       	movw	r16, r22
    8436:	ec 01       	movw	r28, r24
    8438:	fb 01       	movw	r30, r22
    843a:	00 84       	ldd	r0, Z+8	; 0x08
    843c:	f1 85       	ldd	r31, Z+9	; 0x09
    843e:	e0 2d       	mov	r30, r0
    8440:	19 95       	eicall
    8442:	89 2b       	or	r24, r25
    8444:	e1 f6       	brne	.-72     	; 0x83fe <fputc+0x10>
    8446:	d8 01       	movw	r26, r16
    8448:	16 96       	adiw	r26, 0x06	; 6
    844a:	8d 91       	ld	r24, X+
    844c:	9c 91       	ld	r25, X
    844e:	17 97       	sbiw	r26, 0x07	; 7
    8450:	01 96       	adiw	r24, 0x01	; 1
    8452:	17 96       	adiw	r26, 0x07	; 7
    8454:	9c 93       	st	X, r25
    8456:	8e 93       	st	-X, r24
    8458:	16 97       	sbiw	r26, 0x06	; 6
    845a:	ce 01       	movw	r24, r28
    845c:	df 91       	pop	r29
    845e:	cf 91       	pop	r28
    8460:	1f 91       	pop	r17
    8462:	0f 91       	pop	r16
    8464:	08 95       	ret

00008466 <__ultoa_invert>:
    8466:	fa 01       	movw	r30, r20
    8468:	aa 27       	eor	r26, r26
    846a:	28 30       	cpi	r18, 0x08	; 8
    846c:	51 f1       	breq	.+84     	; 0x84c2 <__ultoa_invert+0x5c>
    846e:	20 31       	cpi	r18, 0x10	; 16
    8470:	81 f1       	breq	.+96     	; 0x84d2 <__ultoa_invert+0x6c>
    8472:	e8 94       	clt
    8474:	6f 93       	push	r22
    8476:	6e 7f       	andi	r22, 0xFE	; 254
    8478:	6e 5f       	subi	r22, 0xFE	; 254
    847a:	7f 4f       	sbci	r23, 0xFF	; 255
    847c:	8f 4f       	sbci	r24, 0xFF	; 255
    847e:	9f 4f       	sbci	r25, 0xFF	; 255
    8480:	af 4f       	sbci	r26, 0xFF	; 255
    8482:	b1 e0       	ldi	r27, 0x01	; 1
    8484:	3e d0       	rcall	.+124    	; 0x8502 <__ultoa_invert+0x9c>
    8486:	b4 e0       	ldi	r27, 0x04	; 4
    8488:	3c d0       	rcall	.+120    	; 0x8502 <__ultoa_invert+0x9c>
    848a:	67 0f       	add	r22, r23
    848c:	78 1f       	adc	r23, r24
    848e:	89 1f       	adc	r24, r25
    8490:	9a 1f       	adc	r25, r26
    8492:	a1 1d       	adc	r26, r1
    8494:	68 0f       	add	r22, r24
    8496:	79 1f       	adc	r23, r25
    8498:	8a 1f       	adc	r24, r26
    849a:	91 1d       	adc	r25, r1
    849c:	a1 1d       	adc	r26, r1
    849e:	6a 0f       	add	r22, r26
    84a0:	71 1d       	adc	r23, r1
    84a2:	81 1d       	adc	r24, r1
    84a4:	91 1d       	adc	r25, r1
    84a6:	a1 1d       	adc	r26, r1
    84a8:	20 d0       	rcall	.+64     	; 0x84ea <__ultoa_invert+0x84>
    84aa:	09 f4       	brne	.+2      	; 0x84ae <__ultoa_invert+0x48>
    84ac:	68 94       	set
    84ae:	3f 91       	pop	r19
    84b0:	2a e0       	ldi	r18, 0x0A	; 10
    84b2:	26 9f       	mul	r18, r22
    84b4:	11 24       	eor	r1, r1
    84b6:	30 19       	sub	r19, r0
    84b8:	30 5d       	subi	r19, 0xD0	; 208
    84ba:	31 93       	st	Z+, r19
    84bc:	de f6       	brtc	.-74     	; 0x8474 <__ultoa_invert+0xe>
    84be:	cf 01       	movw	r24, r30
    84c0:	08 95       	ret
    84c2:	46 2f       	mov	r20, r22
    84c4:	47 70       	andi	r20, 0x07	; 7
    84c6:	40 5d       	subi	r20, 0xD0	; 208
    84c8:	41 93       	st	Z+, r20
    84ca:	b3 e0       	ldi	r27, 0x03	; 3
    84cc:	0f d0       	rcall	.+30     	; 0x84ec <__ultoa_invert+0x86>
    84ce:	c9 f7       	brne	.-14     	; 0x84c2 <__ultoa_invert+0x5c>
    84d0:	f6 cf       	rjmp	.-20     	; 0x84be <__ultoa_invert+0x58>
    84d2:	46 2f       	mov	r20, r22
    84d4:	4f 70       	andi	r20, 0x0F	; 15
    84d6:	40 5d       	subi	r20, 0xD0	; 208
    84d8:	4a 33       	cpi	r20, 0x3A	; 58
    84da:	18 f0       	brcs	.+6      	; 0x84e2 <__ultoa_invert+0x7c>
    84dc:	49 5d       	subi	r20, 0xD9	; 217
    84de:	31 fd       	sbrc	r19, 1
    84e0:	40 52       	subi	r20, 0x20	; 32
    84e2:	41 93       	st	Z+, r20
    84e4:	02 d0       	rcall	.+4      	; 0x84ea <__ultoa_invert+0x84>
    84e6:	a9 f7       	brne	.-22     	; 0x84d2 <__ultoa_invert+0x6c>
    84e8:	ea cf       	rjmp	.-44     	; 0x84be <__ultoa_invert+0x58>
    84ea:	b4 e0       	ldi	r27, 0x04	; 4
    84ec:	a6 95       	lsr	r26
    84ee:	97 95       	ror	r25
    84f0:	87 95       	ror	r24
    84f2:	77 95       	ror	r23
    84f4:	67 95       	ror	r22
    84f6:	ba 95       	dec	r27
    84f8:	c9 f7       	brne	.-14     	; 0x84ec <__ultoa_invert+0x86>
    84fa:	00 97       	sbiw	r24, 0x00	; 0
    84fc:	61 05       	cpc	r22, r1
    84fe:	71 05       	cpc	r23, r1
    8500:	08 95       	ret
    8502:	9b 01       	movw	r18, r22
    8504:	ac 01       	movw	r20, r24
    8506:	0a 2e       	mov	r0, r26
    8508:	06 94       	lsr	r0
    850a:	57 95       	ror	r21
    850c:	47 95       	ror	r20
    850e:	37 95       	ror	r19
    8510:	27 95       	ror	r18
    8512:	ba 95       	dec	r27
    8514:	c9 f7       	brne	.-14     	; 0x8508 <__ultoa_invert+0xa2>
    8516:	62 0f       	add	r22, r18
    8518:	73 1f       	adc	r23, r19
    851a:	84 1f       	adc	r24, r20
    851c:	95 1f       	adc	r25, r21
    851e:	a0 1d       	adc	r26, r0
    8520:	08 95       	ret

00008522 <__divmodsi4>:
    8522:	05 2e       	mov	r0, r21
    8524:	97 fb       	bst	r25, 7
    8526:	16 f4       	brtc	.+4      	; 0x852c <__divmodsi4+0xa>
    8528:	00 94       	com	r0
    852a:	0f d0       	rcall	.+30     	; 0x854a <__negsi2>
    852c:	57 fd       	sbrc	r21, 7
    852e:	05 d0       	rcall	.+10     	; 0x853a <__divmodsi4_neg2>
    8530:	23 dc       	rcall	.-1978   	; 0x7d78 <__udivmodsi4>
    8532:	07 fc       	sbrc	r0, 7
    8534:	02 d0       	rcall	.+4      	; 0x853a <__divmodsi4_neg2>
    8536:	46 f4       	brtc	.+16     	; 0x8548 <__divmodsi4_exit>
    8538:	08 c0       	rjmp	.+16     	; 0x854a <__negsi2>

0000853a <__divmodsi4_neg2>:
    853a:	50 95       	com	r21
    853c:	40 95       	com	r20
    853e:	30 95       	com	r19
    8540:	21 95       	neg	r18
    8542:	3f 4f       	sbci	r19, 0xFF	; 255
    8544:	4f 4f       	sbci	r20, 0xFF	; 255
    8546:	5f 4f       	sbci	r21, 0xFF	; 255

00008548 <__divmodsi4_exit>:
    8548:	08 95       	ret

0000854a <__negsi2>:
    854a:	90 95       	com	r25
    854c:	80 95       	com	r24
    854e:	70 95       	com	r23
    8550:	61 95       	neg	r22
    8552:	7f 4f       	sbci	r23, 0xFF	; 255
    8554:	8f 4f       	sbci	r24, 0xFF	; 255
    8556:	9f 4f       	sbci	r25, 0xFF	; 255
    8558:	08 95       	ret

0000855a <__mulshisi3>:
    855a:	b7 ff       	sbrs	r27, 7
    855c:	37 cc       	rjmp	.-1938   	; 0x7dcc <__muluhisi3>

0000855e <__mulohisi3>:
    855e:	36 dc       	rcall	.-1940   	; 0x7dcc <__muluhisi3>
    8560:	82 1b       	sub	r24, r18
    8562:	93 0b       	sbc	r25, r19
    8564:	08 95       	ret

00008566 <_exit>:
    8566:	f8 94       	cli

00008568 <__stop_program>:
    8568:	ff cf       	rjmp	.-2      	; 0x8568 <__stop_program>
